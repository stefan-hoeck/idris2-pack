#lang racket/base
;; @generated by Idris 0.6.0-04c5531d9, Racket backend
(require racket/async-channel)         ; for asynchronous channels
(require racket/future)                ; for parallelism/concurrency
(require racket/math)                  ; for math ops
(require racket/system)                ; for system
(require racket/unsafe/ops)            ; for fast fixnum ops
(require rnrs/bytevectors-6)           ; for buffers
(require rnrs/io/ports-6)              ; for files
(require srfi/19)                      ; for file handling and data
(require ffi/unsafe ffi/unsafe/define) ; for calling C

(require racket/flonum)                ; for float-typed transcendental functions
(define-ffi-definer define-libidris2_support (ffi-lib "libidris2_support" ))
(define-libidris2_support idris2_system (_fun _string/utf-8 -> _int))
(define-ffi-definer define-libc (ffi-lib #f))
(define-libc getenv (_fun _string/utf-8 -> _pointer))
(define-libc exit (_fun _int -> _void))
(define-libidris2_support idris2_putStr (_fun _string/utf-8 -> _void))
(define-libidris2_support idris2_getString (_fun _pointer -> _string/utf-8))
(define-libidris2_support idris2_getStr (_fun  -> _string/utf-8))
(define-libidris2_support idris2_isNull (_fun _pointer -> _int))
(define-libidris2_support idris2_writeLine (_fun _pointer _string/utf-8 -> _int))
(define-libidris2_support idris2_seekLine (_fun _pointer -> _int))
(define-libidris2_support idris2_readLine (_fun _pointer -> _pointer))
(define-libidris2_support idris2_eof (_fun _pointer -> _int))
(define-libidris2_support idris2_free (_fun _pointer -> _void))
(define-libidris2_support idris2_fileErrno (_fun  -> _int))
(define-libidris2_support idris2_strerror (_fun _int -> _string/utf-8))
(define-libidris2_support idris2_getErrno (_fun  -> _int))
(define-libidris2_support idris2_openFile (_fun _string/utf-8 _string/utf-8 -> _pointer))
(define-libidris2_support idris2_closeFile (_fun _pointer -> _void))
(define-libidris2_support idris2_popen (_fun _string/utf-8 _string/utf-8 -> _pointer))
(define-libidris2_support idris2_pclose (_fun _pointer -> _int))
(define-libidris2_support idris2_openDir (_fun _string/utf-8 -> _pointer))
(define-libidris2_support idris2_nextDirEntry (_fun _pointer -> _pointer))
(define-libidris2_support idris2_currentDirectory (_fun  -> _pointer))
(define-libidris2_support idris2_closeDir (_fun _pointer -> _void))
(define-libidris2_support idris2_changeDir (_fun _string/utf-8 -> _int))

(let ()
(define (blodwen-os)
  (case (system-type 'os)
    [(unix) "unix"]
    [(macosx) "darwin"]
    [(windows) "windows"]
    [else "unknown"]))

(define blodwen-lazy
  (lambda (f)
    (let ([evaluated #f] [res void])
      (lambda ()
        (if (not evaluated)
            (begin (set! evaluated #t)
                   (set! res (f))
                   (set! f void))
            (void))
        res))))

(define (blodwen-toSignedInt x bits)
  (if (bitwise-bit-set? x bits)
      (bitwise-ior x (arithmetic-shift (- 1) bits))
      (bitwise-and x (sub1 (arithmetic-shift 1 bits)))))

(define (blodwen-toUnsignedInt x bits)
  (bitwise-and x (sub1 (arithmetic-shift 1 bits))))

(define (blodwen-euclidDiv a b)
  (let ((q (quotient a b))
        (r (remainder a b)))
    (if (< r 0)
      (if (> b 0) (- q 1) (+ q 1))
      q)))

(define (blodwen-euclidMod a b)
  (let ((r (remainder a b)))
    (if (< r 0)
      (if (> b 0) (+ r b) (- r b))
      r)))

(define bu+ (lambda (x y bits) (blodwen-toUnsignedInt (+ x y) bits)))
(define bu- (lambda (x y bits) (blodwen-toUnsignedInt (- x y) bits)))
(define bu* (lambda (x y bits) (blodwen-toUnsignedInt (* x y) bits)))
(define bu/ (lambda (x y bits) (blodwen-toUnsignedInt (quotient x y) bits)))

(define bs+ (lambda (x y bits) (blodwen-toSignedInt (+ x y) bits)))
(define bs- (lambda (x y bits) (blodwen-toSignedInt (- x y) bits)))
(define bs* (lambda (x y bits) (blodwen-toSignedInt (* x y) bits)))
(define bs/ (lambda (x y bits) (blodwen-toSignedInt (blodwen-euclidDiv x y) bits)))

; To match Chez
(define (fxadd1 x) (unsafe-fx+ x 1))
(define (fxsub1 x) (unsafe-fx- x 1))

(define (integer->bits8 x) (bitwise-and x #xff))
(define (integer->bits16 x) (bitwise-and x #xffff))
(define (integer->bits32 x) (bitwise-and x #xffffffff))
(define (integer->bits64 x) (bitwise-and x #xffffffffffffffff))

(define (bits16->bits8 x) (bitwise-and x #xff))
(define (bits32->bits8 x) (bitwise-and x #xff))
(define (bits64->bits8 x) (bitwise-and x #xff))
(define (bits32->bits16 x) (bitwise-and x #xffff))
(define (bits64->bits16 x) (bitwise-and x #xffff))
(define (bits64->bits32 x) (bitwise-and x #xffffffff))

(define blodwen-bits-shl (lambda (x y bits) (remainder (arithmetic-shift x y) (arithmetic-shift 1 bits))))
(define blodwen-shl (lambda (x y) (arithmetic-shift x y)))
(define blodwen-shr (lambda (x y) (arithmetic-shift x (- y))))
(define blodwen-and (lambda (x y) (bitwise-and x y)))
(define blodwen-or (lambda (x y) (bitwise-ior x y)))
(define blodwen-xor (lambda (x y) (bitwise-xor x y)))

(define exact-floor
  (lambda (x)
    (inexact->exact (floor x))))

(define blodwen-bits-shl-signed
  (lambda (x y bits) (blodwen-toSignedInt (arithmetic-shift x y) bits)))

(define exact-truncate
  (lambda (x)
    (inexact->exact (truncate x))))

(define exact-truncate-boundedInt
  (lambda (x y)
    (blodwen-toSignedInt (exact-truncate x) y)))

(define exact-truncate-boundedUInt
  (lambda (x y)
    (blodwen-toUnsignedInt (exact-truncate x) y)))

(define cast-char-boundedInt
  (lambda (x y)
    (blodwen-toSignedInt (char->integer x) y)))

(define cast-char-boundedUInt
  (lambda (x y)
    (blodwen-toUnsignedInt (char->integer x) y)))

(define cast-string-int
  (lambda (x)
    (exact-truncate (cast-num (string->number (destroy-prefix x))))))

(define cast-string-boundedInt
  (lambda (x y)
    (blodwen-toSignedInt (cast-string-int x) y)))

(define cast-string-boundedUInt
  (lambda (x y)
    (blodwen-toUnsignedInt (cast-string-int x) y)))

(define cast-num
  (lambda (x)
    (if (number? x) x 0)))
(define destroy-prefix
  (lambda (x)
    (cond
      ((equal? x "") "")
      ((equal? (string-ref x 0) #\#) "")
      (else x))))

(define cast-int-char
  (lambda (x)
    (if (or
          (and (>= x 0) (<= x #xd7ff))
          (and (>= x #xe000) (<= x #x10ffff)))
        (integer->char x)
        (integer->char 0))))

(define cast-string-double
  (lambda (x)
    (exact->inexact (cast-num (string->number (destroy-prefix x))))))
(define (string-concat xs) (apply string-append xs))
(define (string-unpack s) (string->list s))
(define (string-pack xs) (list->string xs))
(define string-cons (lambda (x y) (string-append (string x) y)))
(define string-reverse (lambda (x)
  (list->string (reverse (string->list x)))))
(define (string-substr off len s)
    (let* ((l (string-length s))
          (b (max 0 off))
          (x (max 0 len))
          (end (min l (+ b x))))
          (substring s b end)))

(define (blodwen-string-iterator-new s)
  0)

(define (blodwen-string-iterator-to-string _ s ofs f)
  (f (substring s ofs (string-length s))))

(define (blodwen-string-iterator-next s ofs)
  (if (>= ofs (string-length s))
      '() ; EOF
      (cons (string-ref s ofs) (+ ofs 1))))

(define either-left
  (lambda (x)
    (vector 0 x)))

(define either-right
  (lambda (x)
    (vector 1 x)))

(define blodwen-error-quit
  (lambda (msg)
    (display msg)
    (newline)
    (exit 1)))

(define (blodwen-get-line p)
    (if (port? p)
        (let ((str (read-line p)))
            (if (eof-object? str)
                ""
                str))
        (void)))

(define (blodwen-get-char p)
    (if (port? p)
        (let ((chr (read-char p)))
            (if (eof-object? chr)
                #\nul
                chr))
        (void)))

;; Buffers

(define (blodwen-new-buffer size)
  (make-bytevector size 0))

(define (blodwen-buffer-size buf)
  (bytevector-length buf))

(define (blodwen-buffer-setbyte buf loc val)
  (bytevector-u8-set! buf loc val))

(define (blodwen-buffer-getbyte buf loc)
  (bytevector-u8-ref buf loc))

(define (blodwen-buffer-setbits16 buf loc val)
  (bytevector-u16-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getbits16 buf loc)
  (bytevector-u16-ref buf loc (native-endianness)))

(define (blodwen-buffer-setbits32 buf loc val)
  (bytevector-u32-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getbits32 buf loc)
  (bytevector-u32-ref buf loc (native-endianness)))

(define (blodwen-buffer-setbits64 buf loc val)
  (bytevector-u64-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getbits64 buf loc)
  (bytevector-u64-ref buf loc (native-endianness)))

(define (blodwen-buffer-setint32 buf loc val)
  (bytevector-s32-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getint32 buf loc)
  (bytevector-s32-ref buf loc (native-endianness)))

(define (blodwen-buffer-setint buf loc val)
  (bytevector-s64-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getint buf loc)
  (bytevector-s64-ref buf loc (native-endianness)))

(define (blodwen-buffer-setdouble buf loc val)
  (bytevector-ieee-double-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getdouble buf loc)
  (bytevector-ieee-double-ref buf loc (native-endianness)))

(define (blodwen-stringbytelen str)
  (bytevector-length (string->utf8 str)))

(define (blodwen-buffer-setstring buf loc val)
  (let* [(strvec (string->utf8 val))
         (len (bytevector-length strvec))]
    (bytevector-copy! strvec 0 buf loc len)))

(define (blodwen-buffer-getstring buf loc len)
  (let [(newvec (make-bytevector len))]
    (bytevector-copy! buf loc newvec 0 len)
    (utf8->string newvec)))

(define (blodwen-buffer-copydata buf start len dest loc)
  (bytevector-copy! buf start dest loc len))

;; Threads

;; NB: Racket threads are green/virtual threads meaning extra caution is to be
;; taken when using FFI functions in combination with threads. The *entire*
;; Racket runtime blocks on a foreign call, meaning no threads will progress
;; until the foreign call returns.

(define (blodwen-thread proc)
  (thread (lambda () (proc (vector 0)))))

(define (blodwen-thread-wait handle)
  (thread-wait handle))

;; Thread mailboxes

(define blodwen-thread-data (make-thread-cell #f))

(define (blodwen-get-thread-data ty)
  (thread-cell-ref blodwen-thread-data))

(define (blodwen-set-thread-data ty a)
  (thread-cell-set! blodwen-thread-data a))

;; Semaphores

(define (blodwen-make-semaphore init)
  (make-semaphore init))

(define (blodwen-semaphore-post sema)
  (semaphore-post sema))

(define (blodwen-semaphore-wait sema)
  (semaphore-wait sema))

;; Barriers

(struct barrier (count-box num-threads mutex semaphore))

(define (blodwen-make-barrier num-threads)
  (barrier (box 0) num-threads (blodwen-make-mutex) (make-semaphore 0)))

(define (blodwen-barrier-wait barrier)
  (blodwen-mutex-acquire (barrier-mutex barrier))
  (let* [(count-box (barrier-count-box barrier))
         (count-old (unbox count-box))
         (count-new (+ count-old 1))
         (sema (barrier-semaphore barrier))]
    (set-box! count-box count-new)
    (blodwen-mutex-release (barrier-mutex barrier))
    (when (= count-new (barrier-num-threads barrier)) (semaphore-post sema))
    (semaphore-wait sema)
    (semaphore-post sema)
    ))

;; Channels

(define (blodwen-make-channel ty)
  (make-async-channel 1))

(define (blodwen-channel-get ty chan)
  (async-channel-get chan))

(define (blodwen-channel-put ty chan val)
  (async-channel-put chan val))

;; Mutex

(define (blodwen-make-mutex)
  (make-semaphore 1))

(define (blodwen-mutex-acquire sema)
  (semaphore-wait sema))

(define (blodwen-mutex-release sema)
  (if (semaphore-try-wait? sema)
      (blodwen-error-quit "Exception in mutexRelease: thread does not own mutex")
      (semaphore-post sema)))

;; Condition Variables
;; As per p.5 of the MS paper
;; https://www.microsoft.com/en-us/research/wp-content/uploads/2004/12/ImplementingCVs.pdf

; The MS paper has the mutex be part of the CV, but that seems to be contrary to
; most other implementations
(struct cv (countingSem waitersLock waiters handshakeSem) #:mutable)

; CONSTRUCTOR
(define (blodwen-make-cv)
  (let ([s (make-semaphore 0)]
        [x (make-semaphore 1)]
        [h (make-semaphore 0)])
    (cv s x 0 h)))

;; MS paper: sem.V() := sem-post  /* "sem.V() increments sem.count, atomically" */
;;           sem.P() := sem-wait
;; (turns out this is Dijkstra's fault: P and V match up with the Dutch
;;  terminology)

; WAIT
(define (blodwen-cv-wait my-cv m)
    ; atomically increment waiters
    (semaphore-wait (cv-waitersLock my-cv))
    (set-cv-waiters! my-cv (+ (cv-waiters my-cv) 1))
    (semaphore-post (cv-waitersLock my-cv))
    ; release the provided mutex
    (blodwen-mutex-release m)
    ; wait for the counting semaphore to let us through
    (semaphore-wait (cv-countingSem my-cv))
    ; signal to broadcast that we have proceeded past the critical point/have
    ; been woken up successfully
    (semaphore-post (cv-handshakeSem my-cv))
    ; re-acquire the provided mutex
    (blodwen-mutex-acquire m)
    )

; SIGNAL
(define (blodwen-cv-signal my-cv)
    ; lock access to waiters
    (semaphore-wait (cv-waitersLock my-cv))
    (let ([waiters (cv-waiters my-cv)])
      (if (> waiters 0)

        ; if we have waiting threads, signal one of them
        (begin
          (set-cv-waiters! my-cv (- waiters 1))
          ; increment the counting semaphore to wake up a thread
          (semaphore-post (cv-countingSem my-cv))
          ; wait for the thread to tell us it's okay to proceed
          (semaphore-wait (cv-handshakeSem my-cv))
          )

        ; otherwise, do nothing
        (void)
        )
       ; unlock access to waiters
       (semaphore-post (cv-waitersLock my-cv))
       ))

; BROADCAST HELPERS

; for (int i = 0; i < waiters; i++) s.V();
(define (broadcast-for-helper my-cv i)
    (if (= i 0)
      ; if i is zero, we're done
      (void)
      ; otherwise, we signal one waiting thread, decrement i, and keep going
      (begin
        (semaphore-post (cv-countingSem my-cv))

        (broadcast-for-helper my-cv (- i 1))
        )))

; while (waiters > 0) { waiters--; h.P(); }
(define (broadcast-while-helper my-cv waiters)
    (if (= waiters 0)
      ; if waiters is 0, we're done
      (void)
      ; otherwise, wait for "waiters" many threads to tell us they're awake
      (begin
        (semaphore-wait (cv-handshakeSem my-cv))
        (broadcast-while-helper my-cv (- waiters 1))
        )))

; BROADCAST
(define (blodwen-cv-broadcast my-cv)
    ; lock access to waiters
    (semaphore-wait (cv-waitersLock my-cv))
    (let ([waiters (cv-waiters my-cv)])
      ; signal "waiters" many threads; counting *until* 0 in the helper
      ; function, hence "waiters" and NOT "waiters - 1"
      (broadcast-for-helper my-cv waiters)
      ; wait on "waiters" many threads to have been woken
      (broadcast-while-helper my-cv waiters)
      ; unlock access to waiters
      (semaphore-post (cv-waitersLock my-cv))
      ))

; FIXME: Maybe later. Possibly difficult because of the handshake thingy?
;(define (blodwen-cv-wait-timeout my-cv lockM timeout)
;  ;; precondition: calling thread holds lockM
;   (semaphore-wait (cv-waitersLock my-cv))                 ; x.P()
;   (set-cv-waiters! my-cv (+ (cv-waiters my-cv) 1)) ; waiters++
;   (semaphore-post (cv-waitersLock my-cv))                 ; x.V()
;   (blodwen-mutex-release lockM)                    ; m.Release()
;
;   (sync/timeout (/ timeout 1000000) (cv-countingSem my-cv))
;
;   (semaphore-wait (cv-countingSem my-cv))                 ; s.P()
;   (semaphore-post (cv-handshakeSem my-cv))                 ; h.V()
;   (blodwen-mutex-acquire lockM)                    ; m.Acquire()
;   )


(define (blodwen-make-future work) (future work))
(define (blodwen-await-future ty future) (touch future))

;; NB: These should *ALWAYS* be used in multi-threaded programs since Racket
;; threads are green/virtual threads and so using an external function will
;; block the *entire* runtime until the function returns. This is fine for most
;; things, but not for `sleep`.
(define (blodwen-sleep s) (sleep s))
(define (blodwen-usleep us) (sleep (* 0.000001 us)))

(define (blodwen-clock-time-utc) (current-time 'time-utc))
(define (blodwen-clock-time-monotonic) (current-time 'time-monotonic))
(define (blodwen-clock-time-duration) (current-time 'time-duration))
(define (blodwen-clock-time-process) (current-time 'time-process))
(define (blodwen-clock-time-thread) (current-time 'time-thread))
(define (blodwen-clock-time-gccpu) 0) ;; unsupported
(define (blodwen-clock-time-gcreal) 0) ;; unsupported
(define (blodwen-is-time? clk) (if (time? clk) 1 0))
(define (blodwen-clock-second time) (time-second time))
(define (blodwen-clock-nanosecond time) (time-nanosecond time))

(define (blodwen-arg-count)
  (+ (vector-length (current-command-line-arguments)) 1))

(define (blodwen-arg n)
  (cond
    ((= n 0) (path->string (find-system-path 'run-file)))
    ((< n (+ (vector-length (current-command-line-arguments)) 1))
        (vector-ref (current-command-line-arguments) (- n 1)))
     (else "")))

;; Randoms
(random-seed (date*-nanosecond (current-date))) ; initialize random seed

(define (blodwen-random-seed s) (random-seed s))
(define blodwen-random
  (case-lambda
    ;; no argument, pick a real value from [0, 1.0)
    [() (random)]
    ;; single argument k, pick an integral value from [0, k)
    [(k) (if (> k 0)
           (random k)
           (raise 'blodwen-random-invalid-range-argument))]))

;; For finalisers

(define (blodwen-register-object obj proc)
   (register-finalizer obj (lambda (ptr) ((proc ptr) 'erased)))
   obj)

;; For creating and reading back scheme objects

(define ns (make-base-namespace))

; read a scheme string and evaluate it, returning 'Just result' on success
; TODO: catch exception!
(define (blodwen-eval-scheme str)
  (with-handlers ([exn:fail? (lambda (x) '())]) ; Nothing on failure
     (box (eval (read (open-input-string str)) ns))) ; box == Just
)

(define (blodwen-eval-okay obj)
  (if (null? obj)
      0
      1))

(define (blodwen-get-eval-result obj)
  (unbox obj))

(define (blodwen-debug-scheme obj)
  (display obj) (newline))

(define (blodwen-is-number obj)
  (if (number? obj) 1 0))

(define (blodwen-is-integer obj)
  (if (and (number? obj) (exact? obj)) 1 0))

(define (blodwen-is-float obj)
  (if (flonum? obj) 1 0))

(define (blodwen-is-char obj)
  (if (char? obj) 1 0))

(define (blodwen-is-string obj)
  (if (string? obj) 1 0))

(define (blodwen-is-procedure obj)
  (if (procedure? obj) 1 0))

(define (blodwen-is-symbol obj)
  (if (symbol? obj) 1 0))

(define (blodwen-is-vector obj)
  (if (vector? obj) 1 0))

(define (blodwen-is-nil obj)
  (if (null? obj) 1 0))

(define (blodwen-is-pair obj)
  (if (pair? obj) 1 0))

(define (blodwen-is-box obj)
  (if (box? obj) 1 0))

(define (blodwen-make-symbol str)
  (string->symbol str))

; The below rely on checking that the objects are the right type first.

(define (blodwen-vector-ref obj i)
  (vector-ref obj i))

(define (blodwen-vector-length obj)
  (vector-length obj))

(define (blodwen-vector-list obj)
  (vector->list obj))

(define (blodwen-unbox obj)
  (unbox obj))

(define (blodwen-apply obj arg)
  (obj arg))

(define (blodwen-force obj)
  (obj))

(define (blodwen-read-symbol sym)
  (symbol->string sym))

(define (blodwen-id x) x)
(define System-prim__system (lambda (farg-0 farg-1) (idris2_system farg-0)))
(define System-prim__getEnv (lambda (farg-0 farg-1) (getenv farg-0)))
(define System-prim__getArgCount (lambda (farg-0) (blodwen-arg-count )))
(define System-prim__getArg (lambda (farg-0 farg-1) (blodwen-arg farg-0)))
(define System-prim__exit (lambda (farg-0 farg-1) (exit farg-0) (vector 0 )))
(define PreludeC-45Types-fastUnpack (lambda (farg-0) (string-unpack farg-0)))
(define PreludeC-45Types-fastPack (lambda (farg-0) (string-pack farg-0)))
(define PreludeC-45Types-fastConcat (lambda (farg-0) (string-concat farg-0)))
(define PreludeC-45IO-prim__putStr (lambda (farg-0 farg-1) (idris2_putStr farg-0) (vector 0 )))
(define PreludeC-45IO-prim__getString (lambda (farg-0) (idris2_getString farg-0)))
(define PreludeC-45IO-prim__getStr (lambda (farg-0) (idris2_getStr )))
(define PrimIO-prim__nullAnyPtr (lambda (farg-0) (idris2_isNull farg-0)))
(define SystemC-45FileC-45ReadWrite-prim__writeLine (lambda (farg-0 farg-1 farg-2) (idris2_writeLine farg-0 farg-1)))
(define SystemC-45FileC-45ReadWrite-prim__seekLine (lambda (farg-0 farg-1) (idris2_seekLine farg-0)))
(define SystemC-45FileC-45ReadWrite-prim__readLine (lambda (farg-0 farg-1) (idris2_readLine farg-0)))
(define SystemC-45FileC-45ReadWrite-prim__eof (lambda (farg-0 farg-1) (idris2_eof farg-0)))
(define SystemC-45FFI-prim__free (lambda (farg-0 farg-1) (idris2_free farg-0) (vector 0 )))
(define SystemC-45FileC-45Error-prim__fileErrno (lambda (farg-0) (idris2_fileErrno )))
(define SystemC-45Errno-prim__strerror (lambda (farg-0 farg-1) (idris2_strerror farg-0)))
(define SystemC-45Errno-prim__getErrno (lambda (farg-0) (idris2_getErrno )))
(define SystemC-45FileC-45Handle-prim__open (lambda (farg-0 farg-1 farg-2) (idris2_openFile farg-0 farg-1)))
(define SystemC-45FileC-45Handle-prim__close (lambda (farg-0 farg-1) (idris2_closeFile farg-0) (vector 0 )))
(define SystemC-45FileC-45Process-prim__popen (lambda (farg-0 farg-1 farg-2) (idris2_popen farg-0 farg-1)))
(define SystemC-45FileC-45Process-prim__pclose (lambda (farg-0 farg-1) (idris2_pclose farg-0)))
(define SystemC-45Directory-prim__openDir (lambda (farg-0 farg-1) (idris2_openDir farg-0)))
(define SystemC-45Directory-prim__dirEntry (lambda (farg-0 farg-1) (idris2_nextDirEntry farg-0)))
(define SystemC-45Directory-prim__currentDir (lambda (farg-0) (idris2_currentDirectory )))
(define SystemC-45Directory-prim__closeDir (lambda (farg-0 farg-1) (idris2_closeDir farg-0) (vector 0 )))
(define SystemC-45Directory-prim__changeDir (lambda (farg-0 farg-1) (idris2_changeDir farg-0)))
(define PreludeC-45EqOrd-u--C-61C-61_Eq_Char (lambda (arg-0 arg-1) (let ((sc0 (or (and (char=? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-47C-61_Eq_Char (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-0 arg-1))) (cond ((equal? sc0 1) 0) (else 1)))))
(define csegen-2 (cons (lambda (arg-534) (lambda (arg-537) (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-534 arg-537))) (lambda (arg-544) (lambda (arg-547) (PreludeC-45EqOrd-u--C-47C-61_Eq_Char arg-544 arg-547)))))
(define PreludeC-45Types-u--C-61C-61_Eq_C-40ListC-32C-36aC-41 (lambda (arg-1 arg-2 arg-3) (if (null? arg-2) (if (null? arg-3) 1 0) (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (if (null? arg-3) 0 (let ((e-6 (car arg-3))) (let ((e-7 (cdr arg-3))) (let ((sc2 (let ((e-1 (car arg-1))) ((e-1 e-2) e-6)))) (cond ((equal? sc2 1) (PreludeC-45Types-u--C-61C-61_Eq_C-40ListC-32C-36aC-41 arg-1 e-3 e-7)) (else 0)))))))))))
(define csegen-3 (lambda (eta-0) (lambda (eta-1) (PreludeC-45Types-u--C-61C-61_Eq_C-40ListC-32C-36aC-41 csegen-2 eta-0 eta-1))))
(define PreludeC-45EqOrd-u--C-60C-61_Ord_Char (lambda (arg-0 arg-1) (let ((sc0 (or (and (char<=? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-60_Ord_Char (lambda (arg-0 arg-1) (let ((sc0 (or (and (char<? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-62C-61_Ord_Char (lambda (arg-0 arg-1) (let ((sc0 (or (and (char>=? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-62_Ord_Char (lambda (arg-0 arg-1) (let ((sc0 (or (and (char>? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--compare_Ord_Char (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-60_Ord_Char arg-0 arg-1))) (cond ((equal? sc0 1) 0) (else (let ((sc1 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-0 arg-1))) (cond ((equal? sc1 1) 1) (else 2))))))))
(define PreludeC-45EqOrd-u--max_Ord_Char (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-62_Ord_Char arg-0 arg-1))) (cond ((equal? sc0 1) arg-0) (else arg-1)))))
(define PreludeC-45EqOrd-u--min_Ord_Char (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-60_Ord_Char arg-0 arg-1))) (cond ((equal? sc0 1) arg-0) (else arg-1)))))
(define csegen-14 (vector csegen-2 (lambda (arg-1424) (lambda (arg-1427) (PreludeC-45EqOrd-u--compare_Ord_Char arg-1424 arg-1427))) (lambda (arg-1434) (lambda (arg-1437) (PreludeC-45EqOrd-u--C-60_Ord_Char arg-1434 arg-1437))) (lambda (arg-1444) (lambda (arg-1447) (PreludeC-45EqOrd-u--C-62_Ord_Char arg-1444 arg-1447))) (lambda (arg-1454) (lambda (arg-1457) (PreludeC-45EqOrd-u--C-60C-61_Ord_Char arg-1454 arg-1457))) (lambda (arg-1464) (lambda (arg-1467) (PreludeC-45EqOrd-u--C-62C-61_Ord_Char arg-1464 arg-1467))) (lambda (arg-1474) (lambda (arg-1477) (PreludeC-45EqOrd-u--max_Ord_Char arg-1474 arg-1477))) (lambda (arg-1484) (lambda (arg-1487) (PreludeC-45EqOrd-u--min_Ord_Char arg-1484 arg-1487)))))
(define PreludeC-45Types-case--compare-6665 (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (cond ((equal? arg-6 1) (PreludeC-45Types-u--compare_Ord_C-40ListC-32C-36aC-41 arg-1 arg-3 arg-5))(else arg-6))))
(define PreludeC-45Types-u--compare_Ord_C-40ListC-32C-36aC-41 (lambda (arg-1 arg-2 arg-3) (if (null? arg-2) (if (null? arg-3) 1 0) (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (if (null? arg-3) 2 (let ((e-10 (car arg-3))) (let ((e-11 (cdr arg-3))) (PreludeC-45Types-case--compare-6665 arg-1 e-2 e-3 e-10 e-11 (let ((e-12 (vector-ref arg-1 1))) ((e-12 e-2) e-10)))))))))))
(define csegen-15 (lambda (eta-0) (lambda (eta-1) (PreludeC-45Types-u--compare_Ord_C-40ListC-32C-36aC-41 csegen-14 eta-0 eta-1))))
(define csegen-27 (cons #\p (cons #\a (cons #\c (cons #\k '())))))
(define PreludeC-45EqOrd-u--C-61C-61_Eq_String (lambda (arg-0 arg-1) (let ((sc0 (or (and (string=? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-47C-61_Eq_String (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_String arg-0 arg-1))) (cond ((equal? sc0 1) 0) (else 1)))))
(define csegen-34 (cons (lambda (arg-534) (lambda (arg-537) (PreludeC-45EqOrd-u--C-61C-61_Eq_String arg-534 arg-537))) (lambda (arg-544) (lambda (arg-547) (PreludeC-45EqOrd-u--C-47C-61_Eq_String arg-544 arg-547)))))
(define DataC-45SortedMapC-45Dependent-empty (lambda (arg-2) (vector 0 arg-2)))
(define DataC-45SortedMap-empty (lambda (arg-2) (DataC-45SortedMapC-45Dependent-empty arg-2)))
(define PreludeC-45EqOrd-u--C-60C-61_Ord_String (lambda (arg-0 arg-1) (let ((sc0 (or (and (string<=? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-60_Ord_String (lambda (arg-0 arg-1) (let ((sc0 (or (and (string<? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-62C-61_Ord_String (lambda (arg-0 arg-1) (let ((sc0 (or (and (string>=? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-62_Ord_String (lambda (arg-0 arg-1) (let ((sc0 (or (and (string>? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--compare_Ord_String (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-60_Ord_String arg-0 arg-1))) (cond ((equal? sc0 1) 0) (else (let ((sc1 (PreludeC-45EqOrd-u--C-61C-61_Eq_String arg-0 arg-1))) (cond ((equal? sc1 1) 1) (else 2))))))))
(define PreludeC-45EqOrd-u--max_Ord_String (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-62_Ord_String arg-0 arg-1))) (cond ((equal? sc0 1) arg-0) (else arg-1)))))
(define PreludeC-45EqOrd-u--min_Ord_String (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-60_Ord_String arg-0 arg-1))) (cond ((equal? sc0 1) arg-0) (else arg-1)))))
(define csegen-43 (DataC-45SortedMap-empty (vector csegen-34 (lambda (arg-1424) (lambda (arg-1427) (PreludeC-45EqOrd-u--compare_Ord_String arg-1424 arg-1427))) (lambda (arg-1434) (lambda (arg-1437) (PreludeC-45EqOrd-u--C-60_Ord_String arg-1434 arg-1437))) (lambda (arg-1444) (lambda (arg-1447) (PreludeC-45EqOrd-u--C-62_Ord_String arg-1444 arg-1447))) (lambda (arg-1454) (lambda (arg-1457) (PreludeC-45EqOrd-u--C-60C-61_Ord_String arg-1454 arg-1457))) (lambda (arg-1464) (lambda (arg-1467) (PreludeC-45EqOrd-u--C-62C-61_Ord_String arg-1464 arg-1467))) (lambda (arg-1474) (lambda (arg-1477) (PreludeC-45EqOrd-u--max_Ord_String arg-1474 arg-1477))) (lambda (arg-1484) (lambda (arg-1487) (PreludeC-45EqOrd-u--min_Ord_String arg-1484 arg-1487))))))
(define PreludeC-45IO-u--map_Functor_IO (lambda (arg-2 arg-3 ext-0) (let ((act-2 (arg-3 ext-0))) (arg-2 act-2))))
(define csegen-46 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (lambda (eta-0) (PreludeC-45IO-u--map_Functor_IO u--func arg-8743 eta-0)))))))
(define csegen-50 (vector csegen-46 (lambda (u--a) (lambda (arg-9789) (lambda (eta-0) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (lambda (world-4) (let ((act-5 (arg-9795 world-4))) (let ((act-3 (arg-9802 world-4))) (act-5 act-3))))))))))
(define csegen-56 (vector csegen-50 (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (lambda (world-0) (let ((act-1 (arg-10269 world-0))) ((arg-10272 act-1) world-0))))))) (lambda (u--a) (lambda (arg-10283) (lambda (world-0) (let ((act-1 (arg-10283 world-0))) (act-1 world-0)))))))
(define csegen-57 (cons csegen-56 (lambda (u--a) (lambda (arg-12953) arg-12953))))
(define ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (lambda (arg-4 arg-5 arg-6) (let ((e-3 (vector-ref arg-4 2))) ((((e-3 'erased) 'erased) (let ((e-4 (vector-ref arg-4 2))) ((((e-4 'erased) 'erased) (let ((e-8 (vector-ref arg-4 1))) ((e-8 'erased) (lambda (eta-0) (lambda (eta-1) (case (vector-ref eta-0 0) ((0) (let ((e-10 (vector-ref eta-0 1))) (vector 0 e-10))) (else (let ((e-10 (vector-ref eta-0 1))) (case (vector-ref eta-1 0) ((1) (let ((e-11 (vector-ref eta-1 1))) (vector 1 (e-10 e-11)))) (else (let ((e-11 (vector-ref eta-1 1))) (vector 0 e-11)))))))))))) arg-5))) arg-6))))
(define PreludeC-45Types-either (lambda (arg-3 arg-4 arg-5) (case (vector-ref arg-5 0) ((0) (let ((e-2 (vector-ref arg-5 1))) ((arg-3) e-2))) (else (let ((e-5 (vector-ref arg-5 1))) ((arg-4) e-5))))))
(define ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (lambda (arg-4 arg-5 arg-6) (let ((e-2 (vector-ref arg-4 1))) ((((e-2 'erased) 'erased) arg-5) (lambda (eta-0) (PreludeC-45Types-either (lambda () (lambda (eta-1) (let ((e-6 (vector-ref arg-4 0))) (let ((e-8 (vector-ref e-6 1))) ((e-8 'erased) (vector 0 eta-1)))))) (lambda () (lambda (eta-1) (arg-6 eta-1))) eta-0))))))
(define ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (lambda (arg-3 arg-4) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-3 arg-4 (lambda (eta-0) eta-0))))
(define ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (lambda (arg-3 arg-4) (let ((e-2 (cdr arg-3))) ((e-2 'erased) (lambda (world-16) (let ((act-17 (arg-4 world-16))) (vector 1 act-17)))))))
(define ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (lambda (arg-4 arg-5 arg-6) ((((arg-4 'erased) 'erased) (lambda (eta-0) (case (vector-ref eta-0 0) ((0) (let ((e-2 (vector-ref eta-0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref eta-0 1))) (vector 1 (arg-5 e-5))))))) arg-6)))
(define ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (lambda (arg-3 ext-0) (let ((e-2 (vector-ref arg-3 1))) ((e-2 'erased) (vector 1 ext-0)))))
(define csegen-76 (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 csegen-46 u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 csegen-50 arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 csegen-50 arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 csegen-56 arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 csegen-56 arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 csegen-57 arg-12953)))))
(define csegen-94 (vector (lambda (arg-5762) (lambda (arg-5765) (bs+ arg-5762 arg-5765 63))) (lambda (arg-5772) (lambda (arg-5775) (bs* arg-5772 arg-5775 63))) (lambda (arg-5782) (blodwen-toSignedInt arg-5782 63))))
(define PreludeC-45EqOrd-u--C-61C-61_Eq_Int (lambda (arg-0 arg-1) (let ((sc0 (or (and (= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-47C-61_Eq_Int (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Int arg-0 arg-1))) (cond ((equal? sc0 1) 0) (else 1)))))
(define PreludeC-45EqOrd-u--C-60C-61_Ord_Int (lambda (arg-0 arg-1) (let ((sc0 (or (and (<= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-60_Ord_Int (lambda (arg-0 arg-1) (let ((sc0 (or (and (< arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-62C-61_Ord_Int (lambda (arg-0 arg-1) (let ((sc0 (or (and (>= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-62_Ord_Int (lambda (arg-0 arg-1) (let ((sc0 (or (and (> arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--compare_Ord_Int (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-60_Ord_Int arg-0 arg-1))) (cond ((equal? sc0 1) 0) (else (let ((sc1 (PreludeC-45EqOrd-u--C-61C-61_Eq_Int arg-0 arg-1))) (cond ((equal? sc1 1) 1) (else 2))))))))
(define PreludeC-45EqOrd-u--max_Ord_Int (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-62_Ord_Int arg-0 arg-1))) (cond ((equal? sc0 1) arg-0) (else arg-1)))))
(define PreludeC-45EqOrd-u--min_Ord_Int (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-60_Ord_Int arg-0 arg-1))) (cond ((equal? sc0 1) arg-0) (else arg-1)))))
(define csegen-108 (vector (cons (lambda (arg-534) (lambda (arg-537) (PreludeC-45EqOrd-u--C-61C-61_Eq_Int arg-534 arg-537))) (lambda (arg-544) (lambda (arg-547) (PreludeC-45EqOrd-u--C-47C-61_Eq_Int arg-544 arg-547)))) (lambda (arg-1424) (lambda (arg-1427) (PreludeC-45EqOrd-u--compare_Ord_Int arg-1424 arg-1427))) (lambda (arg-1434) (lambda (arg-1437) (PreludeC-45EqOrd-u--C-60_Ord_Int arg-1434 arg-1437))) (lambda (arg-1444) (lambda (arg-1447) (PreludeC-45EqOrd-u--C-62_Ord_Int arg-1444 arg-1447))) (lambda (arg-1454) (lambda (arg-1457) (PreludeC-45EqOrd-u--C-60C-61_Ord_Int arg-1454 arg-1457))) (lambda (arg-1464) (lambda (arg-1467) (PreludeC-45EqOrd-u--C-62C-61_Ord_Int arg-1464 arg-1467))) (lambda (arg-1474) (lambda (arg-1477) (PreludeC-45EqOrd-u--max_Ord_Int arg-1474 arg-1477))) (lambda (arg-1484) (lambda (arg-1487) (PreludeC-45EqOrd-u--min_Ord_Int arg-1484 arg-1487)))))
(define csegen-114 (lambda (eta-0) (lambda (eta-1) (cons eta-0 eta-1))))
(define PreludeC-45InterfacesC-45BoolC-45Semigroup-u--C-60C-43C-62_Semigroup_AnyBool (lambda (arg-0 arg-1) (cond ((equal? arg-0 1) 1) (else arg-1))))
(define csegen-117 (cons (lambda (arg-8332) (lambda (arg-8335) (PreludeC-45InterfacesC-45BoolC-45Semigroup-u--C-60C-43C-62_Semigroup_AnyBool arg-8332 arg-8335))) 0))
(define PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (lambda (arg-3 arg-4) (case (vector-ref arg-3 0) ((0) (let ((e-2 (vector-ref arg-3 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref arg-3 1))) (arg-4 e-5))))))
(define csegen-154 (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 arg-10269 arg-10272))))))
(define PreludeC-45Types-u--join_Monad_C-40EitherC-32C-36eC-41 (lambda (arg-2) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 arg-2 (lambda (eta-0) eta-0))))
(define csegen-155 (lambda (u--a) (lambda (arg-10283) (PreludeC-45Types-u--join_Monad_C-40EitherC-32C-36eC-41 arg-10283))))
(define PreludeC-45Types-u--foldr_Foldable_C-40EitherC-32C-36eC-41 (lambda (arg-3 arg-4 arg-5) (case (vector-ref arg-5 0) ((0) arg-4) (else (let ((e-5 (vector-ref arg-5 1))) ((arg-3 e-5) arg-4))))))
(define PreludeC-45Types-u--foldMap_Foldable_C-40EitherC-32C-36eC-41 (lambda (arg-3 arg-4 ext-0) (PreludeC-45Types-u--foldr_Foldable_C-40EitherC-32C-36eC-41 (lambda (eta-0) (lambda (eta-1) (let ((e-1 (car arg-3))) ((e-1 (arg-4 eta-0)) eta-1)))) (let ((e-2 (cdr arg-3))) e-2) ext-0)))
(define PreludeC-45Basics-flip (lambda (arg-3 ext-0 ext-1) ((arg-3 ext-1) ext-0)))
(define PreludeC-45Types-u--foldl_Foldable_C-40EitherC-32C-36eC-41 (lambda (arg-3 arg-4 arg-5) ((PreludeC-45Types-u--foldr_Foldable_C-40EitherC-32C-36eC-41 (lambda (eta-0) (lambda (eta-1) (PreludeC-45Basics-flip (lambda (eta-2) (lambda (eta-3) (lambda (eta-4) (eta-2 (eta-3 eta-4))))) (lambda (eta-2) (PreludeC-45Basics-flip arg-3 eta-0 eta-2)) eta-1))) (lambda (eta-0) eta-0) arg-5) arg-4)))
(define PreludeC-45Types-u--foldlM_Foldable_C-40EitherC-32C-36eC-41 (lambda (arg-4 arg-5 arg-6 ext-0) (PreludeC-45Types-u--foldl_Foldable_C-40EitherC-32C-36eC-41 (lambda (u--ma) (lambda (u--b) (let ((e-2 (vector-ref arg-4 1))) ((((e-2 'erased) 'erased) u--ma) (lambda (eta-0) (PreludeC-45Basics-flip arg-5 u--b eta-0)))))) (let ((e-1 (vector-ref arg-4 0))) (let ((e-5 (vector-ref e-1 1))) ((e-5 'erased) arg-6))) ext-0)))
(define PreludeC-45Types-u--null_Foldable_C-40EitherC-32C-36eC-41 (lambda (arg-2) (case (vector-ref arg-2 0) ((0) 1) (else 0))))
(define PreludeC-45Types-u--toList_Foldable_C-40EitherC-32C-36eC-41 (lambda (ext-0) (PreludeC-45Types-u--foldr_Foldable_C-40EitherC-32C-36eC-41 csegen-114 '() ext-0)))
(define csegen-171 (vector (lambda (u--acc) (lambda (u--elem) (lambda (u--func) (lambda (u--init) (lambda (u--input) (PreludeC-45Types-u--foldr_Foldable_C-40EitherC-32C-36eC-41 u--func u--init u--input)))))) (lambda (u--elem) (lambda (u--acc) (lambda (u--func) (lambda (u--init) (lambda (u--input) (PreludeC-45Types-u--foldl_Foldable_C-40EitherC-32C-36eC-41 u--func u--init u--input)))))) (lambda (u--elem) (lambda (arg-10769) (PreludeC-45Types-u--null_Foldable_C-40EitherC-32C-36eC-41 arg-10769))) (lambda (u--elem) (lambda (u--acc) (lambda (u--m) (lambda (i_con-0) (lambda (u--funcM) (lambda (u--init) (lambda (u--input) (PreludeC-45Types-u--foldlM_Foldable_C-40EitherC-32C-36eC-41 i_con-0 u--funcM u--init u--input)))))))) (lambda (u--elem) (lambda (arg-10798) (PreludeC-45Types-u--toList_Foldable_C-40EitherC-32C-36eC-41 arg-10798))) (lambda (u--a) (lambda (u--m) (lambda (i_con-0) (lambda (u--f) (lambda (arg-10812) (PreludeC-45Types-u--foldMap_Foldable_C-40EitherC-32C-36eC-41 i_con-0 u--f arg-10812))))))))
(define PreludeC-45Types-u--traverse_Traversable_C-40EitherC-32C-36eC-41 (lambda (arg-4 arg-5 arg-6) (case (vector-ref arg-6 0) ((0) (let ((e-2 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-4 1))) ((e-4 'erased) (vector 0 e-2))))) (else (let ((e-5 (vector-ref arg-6 1))) (let ((e-1 (vector-ref arg-4 0))) ((((e-1 'erased) 'erased) (lambda (eta-0) (vector 1 eta-0))) (arg-5 e-5))))))))
(define csegen-175 (lambda (u--b) (lambda (u--a) (lambda (u--f) (lambda (i_con-0) (lambda (arg-13951) (lambda (arg-13958) (PreludeC-45Types-u--traverse_Traversable_C-40EitherC-32C-36eC-41 i_con-0 arg-13951 arg-13958))))))))
(define PreludeC-45Types-u--foldl_Foldable_List (lambda (arg-2 arg-3 arg-4) (if (null? arg-4) arg-3 (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) (PreludeC-45Types-u--foldl_Foldable_List arg-2 ((arg-2 arg-3) e-2) e-3))))))
(define PreludeC-45Types-u--foldMap_Foldable_List (lambda (arg-2 arg-3 ext-0) (PreludeC-45Types-u--foldl_Foldable_List (lambda (u--acc) (lambda (u--elem) (let ((e-1 (car arg-2))) ((e-1 u--acc) (arg-3 u--elem))))) (let ((e-2 (cdr arg-2))) e-2) ext-0)))
(define PreludeC-45Types-u--foldlM_Foldable_List (lambda (arg-3 arg-4 arg-5 ext-0) (PreludeC-45Types-u--foldl_Foldable_List (lambda (u--ma) (lambda (u--b) (let ((e-2 (vector-ref arg-3 1))) ((((e-2 'erased) 'erased) u--ma) (lambda (eta-0) (PreludeC-45Basics-flip arg-4 u--b eta-0)))))) (let ((e-1 (vector-ref arg-3 0))) (let ((e-5 (vector-ref e-1 1))) ((e-5 'erased) arg-5))) ext-0)))
(define PreludeC-45Types-u--foldr_Foldable_List (lambda (arg-2 arg-3 arg-4) (if (null? arg-4) arg-3 (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) ((arg-2 e-2) (PreludeC-45Types-u--foldr_Foldable_List arg-2 arg-3 e-3)))))))
(define PreludeC-45Types-u--null_Foldable_List (lambda (arg-1) (if (null? arg-1) 1 0)))
(define csegen-197 (vector (lambda (u--acc) (lambda (u--elem) (lambda (u--func) (lambda (u--init) (lambda (u--input) (PreludeC-45Types-u--foldr_Foldable_List u--func u--init u--input)))))) (lambda (u--elem) (lambda (u--acc) (lambda (u--func) (lambda (u--init) (lambda (u--input) (PreludeC-45Types-u--foldl_Foldable_List u--func u--init u--input)))))) (lambda (u--elem) (lambda (arg-10769) (PreludeC-45Types-u--null_Foldable_List arg-10769))) (lambda (u--elem) (lambda (u--acc) (lambda (u--m) (lambda (i_con-0) (lambda (u--funcM) (lambda (u--init) (lambda (u--input) (PreludeC-45Types-u--foldlM_Foldable_List i_con-0 u--funcM u--init u--input)))))))) (lambda (u--elem) (lambda (arg-10798) arg-10798)) (lambda (u--a) (lambda (u--m) (lambda (i_con-0) (lambda (u--f) (lambda (arg-10812) (PreludeC-45Types-u--foldMap_Foldable_List i_con-0 u--f arg-10812))))))))
(define csegen-201 (lambda (eta-0) (lambda (eta-1) (cons eta-0 eta-1))))
(define csegen-203 (cons (lambda (arg-8332) (lambda (arg-8335) (string-append arg-8332 arg-8335))) ""))
(define PreludeC-45TypesC-45SnocList-reverseOnto (lambda (arg-1 arg-2) (if (null? arg-2) arg-1 (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (PreludeC-45TypesC-45SnocList-reverseOnto (cons arg-1 e-3) e-2))))))
(define PreludeC-45TypesC-45SnocList-reverse (lambda (ext-0) (PreludeC-45TypesC-45SnocList-reverseOnto '() ext-0)))
(define PreludeC-45TypesC-45SnocList-tailRecAppend (lambda (arg-1 arg-2) (PreludeC-45TypesC-45SnocList-reverseOnto arg-1 (PreludeC-45TypesC-45SnocList-reverse arg-2))))
(define DataC-45FilePath-C-60C-47C-62 (lambda (arg-1 arg-2) (case (vector-ref arg-1 0) ((0) (let ((e-0 (vector-ref arg-1 1))) (let ((e-2 (vector-ref arg-2 1))) (vector 0 (PreludeC-45TypesC-45SnocList-tailRecAppend e-0 e-2))))) (else (let ((e-1 (vector-ref arg-1 1))) (let ((e-3 (vector-ref arg-2 1))) (vector 1 (PreludeC-45TypesC-45SnocList-tailRecAppend e-1 e-3))))))))
(define DataC-45List-mergeReplicate (lambda (arg-1 arg-2) (if (null? arg-2) '() (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (cons arg-1 (cons e-2 (DataC-45List-mergeReplicate arg-1 e-3))))))))
(define DataC-45List-intersperse (lambda (arg-1 arg-2) (if (null? arg-2) '() (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (cons e-2 (DataC-45List-mergeReplicate arg-1 e-3)))))))
(define DataC-45FilePath-mapToList (lambda (arg-2 arg-3 arg-4) (if (null? arg-3) arg-4 (let ((e-2 (car arg-3))) (let ((e-3 (cdr arg-3))) (DataC-45FilePath-mapToList arg-2 e-2 (cons (arg-2 e-3) arg-4)))))))
(define DataC-45FilePath-normAbs (lambda (arg-0) (if (null? arg-0) '() (let ((e-2 (car arg-0))) (let ((e-3 (cdr arg-0))) (if (null? e-3) (cons (DataC-45FilePath-normAbs e-2) e-3) (let ((e-7 (car e-3))) (let ((e-8 (cdr e-3))) (cond ((equal? e-7 #\.) (if (null? e-8) (cons (DataC-45FilePath-normAbs e-2) e-3) (let ((e-10 (car e-8))) (let ((e-11 (cdr e-8))) (cond ((equal? e-10 #\.) (if (null? e-11) (let ((sc6 (DataC-45FilePath-normAbs e-2))) (if (null? sc6) '() (let ((e-5 (car sc6))) e-5))) (cons (DataC-45FilePath-normAbs e-2) e-3)))(else (cons (DataC-45FilePath-normAbs e-2) e-3)))))))(else (cons (DataC-45FilePath-normAbs e-2) e-3)))))))))))
(define csegen-376 (cons #\. (cons #\. '())))
(define DataC-45FilePath-normRel (lambda (arg-0) (if (null? arg-0) '() (let ((e-2 (car arg-0))) (let ((e-3 (cdr arg-0))) (if (null? e-3) (cons (DataC-45FilePath-normRel e-2) e-3) (let ((e-7 (car e-3))) (let ((e-8 (cdr e-3))) (cond ((equal? e-7 #\.) (if (null? e-8) (cons (DataC-45FilePath-normRel e-2) e-3) (let ((e-10 (car e-8))) (let ((e-11 (cdr e-8))) (cond ((equal? e-10 #\.) (if (null? e-11) (let ((sc6 (DataC-45FilePath-normRel e-2))) (if (null? sc6) (cons '() csegen-376) (let ((e-5 (car sc6))) (let ((e-4 (cdr sc6))) (if (null? e-4) e-5 (let ((e-12 (car e-4))) (let ((e-9 (cdr e-4))) (cond ((equal? e-12 #\.) (if (null? e-9) e-5 (let ((e-14 (car e-9))) (let ((e-13 (cdr e-9))) (cond ((equal? e-14 #\.) (if (null? e-13) (cons (cons e-5 csegen-376) csegen-376) e-5))(else e-5))))))(else e-5))))))))) (cons (DataC-45FilePath-normRel e-2) e-3)))(else (cons (DataC-45FilePath-normRel e-2) e-3)))))))(else (cons (DataC-45FilePath-normRel e-2) e-3)))))))))))
(define DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 (lambda (arg-1) (case (vector-ref arg-1 0) ((0) (let ((e-0 (vector-ref arg-1 1))) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "/" (DataC-45List-intersperse "/" (DataC-45FilePath-mapToList (lambda (eta-0) (PreludeC-45Types-fastPack eta-0)) (DataC-45FilePath-normAbs e-0) '())))))) (else (let ((e-1 (vector-ref arg-1 1))) (if (null? e-1) "." (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (DataC-45List-intersperse "/" (DataC-45FilePath-mapToList (lambda (eta-0) (PreludeC-45Types-fastPack eta-0)) (DataC-45FilePath-normRel e-1) '())))))))))
(define csegen-204 (lambda (eta-0) (vector 0 (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 (let ((e-1 (car eta-0))) (let ((e-2 (cdr eta-0))) (DataC-45FilePath-C-60C-47C-62 e-1 (vector 1 (cons '() e-2)))))))))
(define csegen-205 (vector 1 (lambda (eta-0) (vector 0 eta-0)) "--mkdoc" (vector 0 )))
(define csegen-207 (cons #\a (cons #\l (cons #\l '()))))
(define csegen-213 (vector 1 (cons '() (cons #\i (cons #\n (cons #\s (cons #\t csegen-207)))))))
(define csegen-219 (vector 1 (cons '() (cons #\l (cons #\o (cons #\c (cons #\a (cons #\l '()))))))))
(define csegen-224 (cons #\i (cons #\d (cons #\r (cons #\i (cons #\s (cons #\2 '())))))))
(define csegen-226 (vector 1 (cons '() csegen-224)))
(define csegen-231 (vector 1 (cons '() (cons #\d (cons #\o (cons #\c (cons #\s '())))))))
(define csegen-232 (vector 1 (lambda (eta-0) (vector 0 eta-0)) "--build" (vector 0 )))
(define csegen-236 (vector 1 (cons '() (cons #\b (cons #\i (cons #\n '()))))))
(define csegen-242 (cons #\. (cons #\i (cons #\p (cons #\k (cons #\g '()))))))
(define csegen-248 (vector 1 (cons '() csegen-27)))
(define csegen-249 (lambda (eta-0) (vector 0 (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 eta-0))))
(define csegen-267 (cons #\i (cons #\b '())))
(define csegen-270 (vector 1 (cons '() (cons #\l csegen-267))))
(define PreludeC-45EqOrd-u--C-61C-61_Eq_Bool (lambda (arg-0 arg-1) (cond ((equal? arg-0 1) (cond ((equal? arg-1 1) 1)(else 0))) ((equal? arg-0 0) (cond ((equal? arg-1 0) 1)(else 0)))(else 0))))
(define PackC-45CoreC-45Types-u--C-61C-61_Eq_InstallType (lambda (arg-0 arg-1) (if (null? arg-0) (if (null? arg-1) 1 0) (let ((e-0 (unbox arg-0))) (if (null? arg-1) 0 (let ((e-1 (unbox arg-1))) (PreludeC-45EqOrd-u--C-61C-61_Eq_Bool e-0 e-1)))))))
(define PackC-45CoreC-45Types-u--C-47C-61_Eq_InstallType (lambda (arg-0 arg-1) (let ((sc0 (PackC-45CoreC-45Types-u--C-61C-61_Eq_InstallType arg-0 arg-1))) (cond ((equal? sc0 1) 0) (else 1)))))
(define csegen-285 (cons (lambda (arg-534) (lambda (arg-537) (PackC-45CoreC-45Types-u--C-61C-61_Eq_InstallType arg-534 arg-537))) (lambda (arg-544) (lambda (arg-547) (PackC-45CoreC-45Types-u--C-47C-61_Eq_InstallType arg-544 arg-547)))))
(define csegen-286 (lambda (eta-0) (lambda (eta-1) (PreludeC-45EqOrd-u--C-61C-61_Eq_String eta-0 eta-1))))
(define PreludeC-45Basics-on (lambda (arg-3 arg-4 ext-0 ext-1) ((arg-3 (arg-4 ext-0)) (arg-4 ext-1))))
(define csegen-289 (cons (lambda (arg-534) (lambda (arg-537) (PreludeC-45Basics-on csegen-286 (lambda (eta-0) eta-0) arg-534 arg-537))) (lambda (arg-544) (lambda (arg-547) (let ((sc0 (PreludeC-45Basics-on csegen-286 (lambda (eta-0) eta-0) arg-544 arg-547))) (cond ((equal? sc0 1) 0) (else 1)))))))
(define PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering (lambda (arg-0 arg-1) (cond ((equal? arg-0 0) (cond ((equal? arg-1 0) 1)(else 0))) ((equal? arg-0 1) (cond ((equal? arg-1 1) 1)(else 0))) ((equal? arg-0 2) (cond ((equal? arg-1 2) 1)(else 0)))(else 0))))
(define PreludeC-45EqOrd-u--C-47C-61_Eq_Ordering (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering arg-0 arg-1))) (cond ((equal? sc0 1) 0) (else 1)))))
(define PreludeC-45EqOrd-u--compare_Ord_Bool (lambda (arg-0 arg-1) (cond ((equal? arg-0 0) (cond ((equal? arg-1 0) 1) (else 0))) (else (cond ((equal? arg-1 0) 2) (else 1))))))
(define PackC-45CoreC-45Types-u--compare_Ord_InstallType (lambda (arg-0 arg-1) (if (null? arg-0) (if (null? arg-1) 1 0) (let ((e-0 (unbox arg-0))) (if (null? arg-1) 2 (let ((e-2 (unbox arg-1))) (PreludeC-45EqOrd-u--compare_Ord_Bool e-0 e-2)))))))
(define PackC-45CoreC-45Types-u--C-60C-61_Ord_InstallType (lambda (arg-0 arg-1) (PreludeC-45EqOrd-u--C-47C-61_Eq_Ordering (PackC-45CoreC-45Types-u--compare_Ord_InstallType arg-0 arg-1) 2)))
(define PackC-45CoreC-45Types-u--C-60_Ord_InstallType (lambda (arg-0 arg-1) (PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering (PackC-45CoreC-45Types-u--compare_Ord_InstallType arg-0 arg-1) 0)))
(define PackC-45CoreC-45Types-u--C-62C-61_Ord_InstallType (lambda (arg-0 arg-1) (PreludeC-45EqOrd-u--C-47C-61_Eq_Ordering (PackC-45CoreC-45Types-u--compare_Ord_InstallType arg-0 arg-1) 0)))
(define PackC-45CoreC-45Types-u--C-62_Ord_InstallType (lambda (arg-0 arg-1) (PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering (PackC-45CoreC-45Types-u--compare_Ord_InstallType arg-0 arg-1) 2)))
(define PackC-45CoreC-45Types-u--max_Ord_InstallType (lambda (arg-0 arg-1) (let ((sc0 (PackC-45CoreC-45Types-u--C-62_Ord_InstallType arg-0 arg-1))) (cond ((equal? sc0 1) arg-0) (else arg-1)))))
(define PackC-45CoreC-45Types-u--min_Ord_InstallType (lambda (arg-0 arg-1) (let ((sc0 (PackC-45CoreC-45Types-u--C-60_Ord_InstallType arg-0 arg-1))) (cond ((equal? sc0 1) arg-0) (else arg-1)))))
(define csegen-300 (vector csegen-285 (lambda (arg-1424) (lambda (arg-1427) (PackC-45CoreC-45Types-u--compare_Ord_InstallType arg-1424 arg-1427))) (lambda (arg-1434) (lambda (arg-1437) (PackC-45CoreC-45Types-u--C-60_Ord_InstallType arg-1434 arg-1437))) (lambda (arg-1444) (lambda (arg-1447) (PackC-45CoreC-45Types-u--C-62_Ord_InstallType arg-1444 arg-1447))) (lambda (arg-1454) (lambda (arg-1457) (PackC-45CoreC-45Types-u--C-60C-61_Ord_InstallType arg-1454 arg-1457))) (lambda (arg-1464) (lambda (arg-1467) (PackC-45CoreC-45Types-u--C-62C-61_Ord_InstallType arg-1464 arg-1467))) (lambda (arg-1474) (lambda (arg-1477) (PackC-45CoreC-45Types-u--max_Ord_InstallType arg-1474 arg-1477))) (lambda (arg-1484) (lambda (arg-1487) (PackC-45CoreC-45Types-u--min_Ord_InstallType arg-1484 arg-1487)))))
(define csegen-301 (lambda (eta-0) (lambda (eta-1) (PreludeC-45EqOrd-u--compare_Ord_String eta-0 eta-1))))
(define csegen-309 (vector csegen-289 (lambda (arg-1424) (lambda (arg-1427) (PreludeC-45Basics-on csegen-301 (lambda (eta-0) eta-0) arg-1424 arg-1427))) (lambda (arg-1434) (lambda (arg-1437) (PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering (PreludeC-45Basics-on csegen-301 (lambda (eta-0) eta-0) arg-1434 arg-1437) 0))) (lambda (arg-1444) (lambda (arg-1447) (PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering (PreludeC-45Basics-on csegen-301 (lambda (eta-0) eta-0) arg-1444 arg-1447) 2))) (lambda (arg-1454) (lambda (arg-1457) (PreludeC-45EqOrd-u--C-47C-61_Eq_Ordering (PreludeC-45Basics-on csegen-301 (lambda (eta-0) eta-0) arg-1454 arg-1457) 2))) (lambda (arg-1464) (lambda (arg-1467) (PreludeC-45EqOrd-u--C-47C-61_Eq_Ordering (PreludeC-45Basics-on csegen-301 (lambda (eta-0) eta-0) arg-1464 arg-1467) 0))) (lambda (arg-1474) (lambda (arg-1477) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering (PreludeC-45Basics-on csegen-301 (lambda (eta-0) eta-0) arg-1474 arg-1477) 2))) (cond ((equal? sc0 1) arg-1474) (else arg-1477))))) (lambda (arg-1484) (lambda (arg-1487) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering (PreludeC-45Basics-on csegen-301 (lambda (eta-0) eta-0) arg-1484 arg-1487) 0))) (cond ((equal? sc0 1) arg-1484) (else arg-1487)))))))
(define csegen-323 (lambda (eta-0) (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 (let ((e-1 (car eta-0))) (let ((e-2 (cdr eta-0))) (DataC-45FilePath-C-60C-47C-62 e-1 (vector 1 (cons '() e-2))))))))
(define csegen-338 (cons (lambda (arg-534) (lambda (arg-537) (PreludeC-45Types-u--C-61C-61_Eq_C-40ListC-32C-36aC-41 csegen-2 arg-534 arg-537))) (lambda (arg-544) (lambda (arg-547) (let ((sc0 (PreludeC-45Types-u--C-61C-61_Eq_C-40ListC-32C-36aC-41 csegen-2 arg-544 arg-547))) (cond ((equal? sc0 1) 0) (else 1)))))))
(define csegen-339 (cons #\m (cons #\l '())))
(define csegen-341 (cons #\t (cons #\o csegen-339)))
(define csegen-344 (cons #\h (cons #\t csegen-339)))
(define csegen-356 (lambda (arg-0) (PreludeC-45EqOrd-u--C-47C-61_Eq_Char arg-0 (integer->char 10))))
(define csegen-357 (lambda (arg-0) (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-0 (integer->char 10))))
(define csegen-362 (cons (cons "End of input" '()) '()))
(define DataC-45FilePathC-45Body-check (lambda (arg-0) (cond ((equal? arg-0 0) '()) (else (box (vector 0 ))))))
(define PreludeC-45Types-isControl (lambda (arg-0) (let ((sc0 (let ((sc1 (PreludeC-45EqOrd-u--C-62C-61_Ord_Char arg-0 (integer->char 0)))) (cond ((equal? sc1 1) (PreludeC-45EqOrd-u--C-60C-61_Ord_Char arg-0 (integer->char 31))) (else 0))))) (cond ((equal? sc0 1) 1) (else (let ((sc1 (PreludeC-45EqOrd-u--C-62C-61_Ord_Char arg-0 (integer->char 127)))) (cond ((equal? sc1 1) (PreludeC-45EqOrd-u--C-60C-61_Ord_Char arg-0 (integer->char 159))) (else 0))))))))
(define DataC-45FilePathC-45Body-isBodyChar (lambda (arg-0) (cond ((equal? arg-0 #\/) 0)(else (let ((sc0 (PreludeC-45Types-isControl arg-0))) (cond ((equal? sc0 1) 0) (else 1)))))))
(define DataC-45FilePathC-45Body-isEndChar (lambda (arg-0) (let ((sc0 (DataC-45FilePathC-45Body-isBodyChar arg-0))) (cond ((equal? sc0 1) (PreludeC-45EqOrd-u--C-47C-61_Eq_Char arg-0 #\ )) (else 0)))))
(define DataC-45FilePathC-45Body-isBodyInner (lambda (arg-0) (if (null? arg-0) 0 (let ((e-2 (car arg-0))) (let ((e-3 (cdr arg-0))) (if (null? e-3) (DataC-45FilePathC-45Body-isEndChar e-2) (let ((sc2 (DataC-45FilePathC-45Body-isBodyChar e-2))) (cond ((equal? sc2 1) (DataC-45FilePathC-45Body-isBodyInner e-3)) (else 0)))))))))
(define DataC-45FilePathC-45Body-isSingleChar (lambda (arg-0) (let ((sc0 (DataC-45FilePathC-45Body-isEndChar arg-0))) (cond ((equal? sc0 1) (PreludeC-45EqOrd-u--C-47C-61_Eq_Char arg-0 #\.)) (else 0)))))
(define DataC-45FilePathC-45Body-isBodyChars (lambda (arg-0) (if (null? arg-0) 0 (let ((e-2 (car arg-0))) (let ((e-3 (cdr arg-0))) (if (null? e-3) (DataC-45FilePathC-45Body-isSingleChar e-2) (let ((sc2 (DataC-45FilePathC-45Body-isEndChar e-2))) (cond ((equal? sc2 1) (DataC-45FilePathC-45Body-isBodyInner e-3)) (else 0)))))))))
(define DataC-45FilePathC-45Body-fromChars (lambda (arg-0) (let ((sc0 (DataC-45FilePathC-45Body-check (DataC-45FilePathC-45Body-isBodyChars arg-0)))) (if (null? sc0) '() (box arg-0)))))
(define csegen-364 (lambda (eta-0) (DataC-45FilePathC-45Body-fromChars (PreludeC-45Types-fastUnpack eta-0))))
(define csegen-365 (lambda (arg-0) (PreludeC-45EqOrd-u--C-61C-61_Eq_Char #\/ arg-0)))
(define PreludeC-45Types-u--C-60C-42C-62_Applicative_Maybe (lambda (arg-2 arg-3) (if (null? arg-2) '() (let ((e-1 (unbox arg-2))) (if (null? arg-3) '() (let ((e-3 (unbox arg-3))) (box (e-1 e-3))))))))
(define PreludeC-45Types-u--map_Functor_Maybe (lambda (arg-2 arg-3) (if (null? arg-3) '() (let ((e-1 (unbox arg-3))) (box (arg-2 e-1))))))
(define csegen-374 (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (PreludeC-45Types-u--map_Functor_Maybe u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (box arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (PreludeC-45Types-u--C-60C-42C-62_Applicative_Maybe arg-9795 arg-9802)))))))
(define csegen-378 (lambda (arg-0) (PreludeC-45EqOrd-u--C-61C-61_Eq_Char #\. arg-0)))
(define csegen-443 (DataC-45SortedMap-empty csegen-309))
(define PackC-45CoreC-45TOML-tmap (lambda (arg-2 arg-3 arg-4 ext-0) (let ((sc0 ((arg-2 arg-4) ext-0))) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (vector 1 (arg-3 e-5))))))))
(define DataC-45String-strM (lambda (arg-0) (cond ((equal? arg-0 "") '())(else (cons (string-ref arg-0 0) (substring arg-0 1 (string-length arg-0)))))))
(define DataC-45String-with--asList-7968 (lambda (arg-0 arg-1) (cond ((equal? arg-0 "") (if (null? arg-1) (vector 0 ) (let ((e-0 (car arg-1))) (let ((e-1 (cdr arg-1))) (vector 1 e-0 e-1 (lambda () (DataC-45String-asList e-1)))))))(else (let ((e-0 (car arg-1))) (let ((e-1 (cdr arg-1))) (vector 1 e-0 e-1 (lambda () (DataC-45String-asList e-1)))))))))
(define DataC-45String-asList (lambda (arg-0) (DataC-45String-with--asList-7968 arg-0 (DataC-45String-strM arg-0))))
(define PreludeC-45Types-isSpace (lambda (arg-0) (cond ((equal? arg-0 #\ ) 1) ((equal? arg-0 (integer->char 9)) 1) ((equal? arg-0 (integer->char 13)) 1) ((equal? arg-0 (integer->char 10)) 1) ((equal? arg-0 (integer->char 12)) 1) ((equal? arg-0 (integer->char 11)) 1) ((equal? arg-0 (integer->char 160)) 1)(else 0))))
(define DataC-45String-with--ltrim-7992 (lambda (arg-0 arg-1) (cond ((equal? arg-0 "") (case (vector-ref arg-1 0) ((0) "")(else (let ((e-0 (vector-ref arg-1 1))) (let ((e-1 (vector-ref arg-1 2))) (let ((e-2 (vector-ref arg-1 3))) (let ((u--str (string-cons e-0 e-1))) (let ((sc2 (PreludeC-45Types-isSpace e-0))) (cond ((equal? sc2 1) (DataC-45String-with--ltrim-7992 e-1 (e-2))) (else u--str))))))))))(else (let ((e-0 (vector-ref arg-1 1))) (let ((e-1 (vector-ref arg-1 2))) (let ((e-2 (vector-ref arg-1 3))) (let ((u--str (string-cons e-0 e-1))) (let ((sc1 (PreludeC-45Types-isSpace e-0))) (cond ((equal? sc1 1) (DataC-45String-with--ltrim-7992 e-1 (e-2))) (else u--str)))))))))))
(define DataC-45String-ltrim (lambda (arg-0) (DataC-45String-with--ltrim-7992 arg-0 (DataC-45String-asList arg-0))))
(define DataC-45String-trim (lambda (ext-0) (DataC-45String-ltrim (string-reverse (DataC-45String-ltrim (string-reverse ext-0))))))
(define DataC-45List-span (lambda (arg-1 arg-2) (if (null? arg-2) (cons '() '()) (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (let ((sc1 (arg-1 e-2))) (cond ((equal? sc1 1) (let ((sc2 (DataC-45List-span arg-1 e-3))) (let ((e-5 (car sc2))) (let ((e-4 (cdr sc2))) (cons (cons e-2 e-5) e-4))))) (else (cons '() (cons e-2 e-3))))))))))
(define DataC-45List-break (lambda (arg-1 arg-2) (DataC-45List-span (lambda (eta-0) (let ((sc0 (arg-1 eta-0))) (cond ((equal? sc0 1) 0) (else 1)))) arg-2)))
(define DataC-45List1-forget (lambda (arg-1) (let ((e-1 (car arg-1))) (let ((e-2 (cdr arg-1))) (cons e-1 e-2)))))
(define DataC-45List1-singleton (lambda (arg-1) (cons arg-1 '())))
(define DataC-45List-split (lambda (arg-1 arg-2) (let ((sc0 (DataC-45List-break arg-1 arg-2))) (let ((e-2 (car sc0))) (let ((e-3 (cdr sc0))) (if (null? e-3) (DataC-45List1-singleton e-2) (let ((e-7 (cdr e-3))) (cons e-2 (DataC-45List1-forget (DataC-45List-split arg-1 e-7))))))))))
(define PreludeC-45TypesC-45SnocList-C-60C-62C-62 (lambda (arg-1 arg-2) (if (null? arg-1) arg-2 (let ((e-2 (car arg-1))) (let ((e-3 (cdr arg-1))) (PreludeC-45TypesC-45SnocList-C-60C-62C-62 e-2 (cons e-3 arg-2)))))))
(define PreludeC-45TypesC-45List-mapAppend (lambda (arg-2 arg-3 arg-4) (if (null? arg-4) (PreludeC-45TypesC-45SnocList-C-60C-62C-62 arg-2 '()) (let ((e-1 (car arg-4))) (let ((e-2 (cdr arg-4))) (PreludeC-45TypesC-45List-mapAppend (cons arg-2 (arg-3 e-1)) arg-3 e-2))))))
(define DataC-45List1-u--map_Functor_List1 (lambda (arg-2 arg-3) (let ((e-1 (car arg-3))) (let ((e-2 (cdr arg-3))) (cons (arg-2 e-1) (PreludeC-45TypesC-45List-mapAppend '() arg-2 e-2))))))
(define DataC-45String-split (lambda (arg-0 arg-1) (DataC-45List1-u--map_Functor_List1 (lambda (eta-0) (PreludeC-45Types-fastPack eta-0)) (DataC-45List-split arg-0 (PreludeC-45Types-fastUnpack arg-1)))))
(define PreludeC-45TypesC-45SnocList-C-60C-62C-60 (lambda (arg-1 arg-2) (if (null? arg-2) arg-1 (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (PreludeC-45TypesC-45SnocList-C-60C-62C-60 (cons arg-1 e-2) e-3))))))
(define PreludeC-45TypesC-45List-mapMaybeAppend (lambda (arg-2 arg-3 arg-4) (if (null? arg-4) (PreludeC-45TypesC-45SnocList-C-60C-62C-62 arg-2 '()) (let ((e-1 (car arg-4))) (let ((e-2 (cdr arg-4))) (let ((sc1 (arg-3 e-1))) (if (null? sc1) (PreludeC-45TypesC-45List-mapMaybeAppend arg-2 arg-3 e-2) (let ((e-3 (unbox sc1))) (PreludeC-45TypesC-45List-mapMaybeAppend (cons arg-2 e-3) arg-3 e-2)))))))))
(define DataC-45FilePath-case--caseC-32blockC-32inC-32fromString-10742 (lambda (arg-0 arg-1 arg-2) (let ((e-1 (car arg-2))) (let ((e-2 (cdr arg-2))) (cond ((equal? e-1 "") (vector 0 (PreludeC-45TypesC-45SnocList-C-60C-62C-60 '() (PreludeC-45TypesC-45List-mapMaybeAppend '() csegen-364 e-2))))(else (vector 1 (PreludeC-45TypesC-45SnocList-C-60C-62C-60 '() (PreludeC-45TypesC-45List-mapMaybeAppend '() csegen-364 (cons e-1 e-2))))))))))
(define DataC-45FilePath-case--fromString-10706 (lambda (arg-0 arg-1) (cond ((equal? arg-1 "") (vector 1 '())) ((equal? arg-1 ".") (vector 1 '()))(else (DataC-45FilePath-case--caseC-32blockC-32inC-32fromString-10742 arg-0 arg-1 (DataC-45List1-u--map_Functor_List1 (lambda (eta-0) (DataC-45String-trim eta-0)) (DataC-45String-split csegen-365 arg-1)))))))
(define DataC-45FilePath-u--fromString_FromString_FilePath (lambda (arg-0) (DataC-45FilePath-case--fromString-10706 arg-0 (DataC-45String-trim arg-0))))
(define PackC-45CoreC-45TOML-u--fromTOML_FromTOML_String (lambda (arg-0 arg-1) (case (vector-ref arg-1 0) ((0) (let ((e-0 (vector-ref arg-1 1))) (vector 1 e-0)))(else (vector 0 (vector 1 '() "String"))))))
(define csegen-449 (lambda (arg-6283) (lambda (u--val) (PackC-45CoreC-45TOML-u--fromTOML_FromTOML_String arg-6283 u--val))))
(define PackC-45CoreC-45TOML-u--fromTOML_FromTOML_FilePath (lambda (ext-1 ext-0) (PackC-45CoreC-45TOML-tmap csegen-449 (lambda (eta-0) (DataC-45FilePath-u--fromString_FromString_FilePath eta-0)) ext-1 ext-0)))
(define csegen-448 (lambda (arg-6283) (lambda (u--val) (PackC-45CoreC-45TOML-u--fromTOML_FromTOML_FilePath arg-6283 u--val))))
(define csegen-456 (lambda (eta-0) (cond ((equal? eta-0 1) 0) (else 1))))
(define LanguageC-45TOMLC-45Tokens-u--TokType_TokenKind_TOMLTokenKind (lambda (arg-0) (case (vector-ref arg-0 0) ((0) (vector "Prelude.Basics.Bool" )) ((1) (vector "Integer" )) ((2) (vector "Double" )) ((3) (vector "Prelude.Types.Either" (vector "String" ) (vector "String" ))) ((4) (vector "Builtin.Unit" )) ((5) (vector "String" )) (else (vector "Builtin.Unit" )))))
(define LanguageC-45TOMLC-45Tokens-inf (/ 1.0 0.0))
(define LanguageC-45TOMLC-45Tokens-nan (flsqrt -1.0))
(define PreludeC-45Types-isUpper (lambda (arg-0) (let ((sc0 (PreludeC-45EqOrd-u--C-62C-61_Ord_Char arg-0 #\A))) (cond ((equal? sc0 1) (PreludeC-45EqOrd-u--C-60C-61_Ord_Char arg-0 #\Z)) (else 0)))))
(define PreludeC-45Types-toLower (lambda (arg-0) (let ((sc0 (PreludeC-45Types-isUpper arg-0))) (cond ((equal? sc0 1) (cast-int-char (bs+ (cast-char-boundedInt arg-0 63) 32 63))) (else arg-0)))))
(define LanguageC-45TOMLC-45Tokens-charToInt (lambda (arg-0) (let ((sc0 (let ((sc1 (PreludeC-45EqOrd-u--C-60C-61_Ord_Char #\0 arg-0))) (cond ((equal? sc1 1) (PreludeC-45EqOrd-u--C-60C-61_Ord_Char arg-0 #\9)) (else 0))))) (cond ((equal? sc0 1) (bs- (cast-char-boundedInt arg-0 63) (cast-char-boundedInt #\0 63) 63)) (else (bs- (cast-char-boundedInt (PreludeC-45Types-toLower arg-0) 63) (cast-char-boundedInt #\a 63) 63))))))
(define LanguageC-45TOMLC-45TokensC-45Float-parseExponent (lambda (arg-0 arg-1 arg-2 arg-3) (if (null? arg-3) (* (* arg-0 arg-1) (flexpt 10.0 (exact->inexact arg-2))) (let ((e-2 (car arg-3))) (let ((e-3 (cdr arg-3))) (cond ((equal? e-2 #\_) (LanguageC-45TOMLC-45TokensC-45Float-parseExponent arg-0 arg-1 arg-2 e-3))(else (LanguageC-45TOMLC-45TokensC-45Float-parseExponent arg-0 arg-1 (+ (* arg-2 10) (LanguageC-45TOMLC-45Tokens-charToInt e-2)) e-3))))))))
(define LanguageC-45TOMLC-45TokensC-45Float-parseDecimal (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (if (null? arg-4) (* arg-0 (+ (exact->inexact arg-1) arg-2)) (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) (cond ((equal? e-2 #\e) (LanguageC-45TOMLC-45TokensC-45Float-parseExponent arg-0 (+ (exact->inexact arg-1) arg-2) 0 e-3)) ((equal? e-2 #\E) (LanguageC-45TOMLC-45TokensC-45Float-parseExponent arg-0 (+ (exact->inexact arg-1) arg-2) 0 e-3)) ((equal? e-2 #\_) (LanguageC-45TOMLC-45TokensC-45Float-parseDecimal arg-0 arg-1 arg-2 arg-3 e-3))(else (LanguageC-45TOMLC-45TokensC-45Float-parseDecimal arg-0 arg-1 (+ arg-2 (* (exact->inexact (LanguageC-45TOMLC-45Tokens-charToInt e-2)) arg-3)) (* arg-3 0.1) e-3))))))))
(define LanguageC-45TOMLC-45TokensC-45Float-parseWhole (lambda (arg-0 arg-1 arg-2) (if (null? arg-2) 0.0 (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (cond ((equal? e-2 #\.) (LanguageC-45TOMLC-45TokensC-45Float-parseDecimal arg-0 arg-1 0.0 0.1 e-3)) ((equal? e-2 #\e) (LanguageC-45TOMLC-45TokensC-45Float-parseExponent arg-0 (exact->inexact arg-1) 0 e-3)) ((equal? e-2 #\E) (LanguageC-45TOMLC-45TokensC-45Float-parseExponent arg-0 (exact->inexact arg-1) 0 e-3)) ((equal? e-2 #\_) (LanguageC-45TOMLC-45TokensC-45Float-parseWhole arg-0 arg-1 e-3))(else (LanguageC-45TOMLC-45TokensC-45Float-parseWhole arg-0 (+ (* arg-1 10) (LanguageC-45TOMLC-45Tokens-charToInt e-2)) e-3))))))))
(define LanguageC-45TOMLC-45TokensC-45Float-parseSign (lambda (arg-0) (if (null? arg-0) (LanguageC-45TOMLC-45TokensC-45Float-parseWhole 1.0 0 arg-0) (let ((e-1 (car arg-0))) (let ((e-2 (cdr arg-0))) (cond ((equal? e-1 #\+) (LanguageC-45TOMLC-45TokensC-45Float-parseWhole 1.0 0 e-2)) ((equal? e-1 #\-) (LanguageC-45TOMLC-45TokensC-45Float-parseWhole (- 1.0) 0 e-2))(else (LanguageC-45TOMLC-45TokensC-45Float-parseWhole 1.0 0 arg-0))))))))
(define LanguageC-45TOMLC-45TokensC-45Float-parseFloat (lambda (arg-0) (cond ((equal? arg-0 "nan") LanguageC-45TOMLC-45Tokens-nan) ((equal? arg-0 "+nan") LanguageC-45TOMLC-45Tokens-nan) ((equal? arg-0 "-nan") (- LanguageC-45TOMLC-45Tokens-nan)) ((equal? arg-0 "inf") LanguageC-45TOMLC-45Tokens-inf) ((equal? arg-0 "+inf") LanguageC-45TOMLC-45Tokens-inf) ((equal? arg-0 "-inf") (- LanguageC-45TOMLC-45Tokens-inf))(else (LanguageC-45TOMLC-45TokensC-45Float-parseSign (PreludeC-45Types-fastUnpack arg-0))))))
(define LanguageC-45TOMLC-45Tokens-parseIntLoop (lambda (arg-0 arg-1 arg-2 arg-3) (if (null? arg-2) arg-3 (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (cond ((equal? e-2 #\_) (LanguageC-45TOMLC-45Tokens-parseIntLoop arg-0 arg-1 e-3 arg-3))(else (LanguageC-45TOMLC-45Tokens-parseIntLoop arg-0 arg-1 e-3 (+ (* arg-3 arg-1) (* (LanguageC-45TOMLC-45Tokens-charToInt e-2) arg-0))))))))))
(define LanguageC-45TOMLC-45Tokens-parseWithSign (lambda (arg-0 arg-1) (if (null? arg-0) 0 (let ((e-2 (car arg-0))) (let ((e-3 (cdr arg-0))) (cond ((equal? e-2 #\0) (if (null? e-3) (LanguageC-45TOMLC-45Tokens-parseIntLoop arg-1 10 arg-0 0) (let ((e-5 (car e-3))) (let ((e-6 (cdr e-3))) (cond ((equal? e-5 #\b) (LanguageC-45TOMLC-45Tokens-parseIntLoop arg-1 2 e-6 0)) ((equal? e-5 #\o) (LanguageC-45TOMLC-45Tokens-parseIntLoop arg-1 8 e-6 0)) ((equal? e-5 #\x) (LanguageC-45TOMLC-45Tokens-parseIntLoop arg-1 16 e-6 0))(else (LanguageC-45TOMLC-45Tokens-parseIntLoop arg-1 10 arg-0 0)))))))(else (LanguageC-45TOMLC-45Tokens-parseIntLoop arg-1 10 arg-0 0))))))))
(define LanguageC-45TOMLC-45Tokens-parseInt (lambda (arg-0) (if (null? arg-0) 0 (let ((e-2 (car arg-0))) (let ((e-3 (cdr arg-0))) (cond ((equal? e-2 #\+) (LanguageC-45TOMLC-45Tokens-parseWithSign e-3 1)) ((equal? e-2 #\-) (LanguageC-45TOMLC-45Tokens-parseWithSign e-3 -1))(else (LanguageC-45TOMLC-45Tokens-parseWithSign arg-0 1))))))))
(define PreludeC-45Types-isDigit (lambda (arg-0) (let ((sc0 (PreludeC-45EqOrd-u--C-62C-61_Ord_Char arg-0 #\0))) (cond ((equal? sc0 1) (PreludeC-45EqOrd-u--C-60C-61_Ord_Char arg-0 #\9)) (else 0)))))
(define PreludeC-45Types-isHexDigit (lambda (arg-0) (let ((sc0 (PreludeC-45Types-isDigit arg-0))) (cond ((equal? sc0 1) 1) (else (let ((sc1 (let ((sc2 (PreludeC-45EqOrd-u--C-60C-61_Ord_Char #\a arg-0))) (cond ((equal? sc2 1) (PreludeC-45EqOrd-u--C-60C-61_Ord_Char arg-0 #\f)) (else 0))))) (cond ((equal? sc1 1) 1) (else (let ((sc2 (PreludeC-45EqOrd-u--C-60C-61_Ord_Char #\A arg-0))) (cond ((equal? sc2 1) (PreludeC-45EqOrd-u--C-60C-61_Ord_Char arg-0 #\F)) (else 0)))))))))))
(define LanguageC-45TOMLC-45Tokens-n--3651-1834-u--hexToInt (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45Types-isHexDigit arg-1))) (cond ((equal? sc0 1) (vector 1 (let ((sc1 (let ((sc2 (PreludeC-45EqOrd-u--C-60C-61_Ord_Char #\0 arg-1))) (cond ((equal? sc2 1) (PreludeC-45EqOrd-u--C-60C-61_Ord_Char arg-1 #\9)) (else 0))))) (cond ((equal? sc1 1) (bs- (cast-char-boundedInt arg-1 63) (cast-char-boundedInt #\0 63) 63)) (else (bs- (cast-char-boundedInt (PreludeC-45Types-toLower arg-1) 63) (cast-char-boundedInt #\a 63) 63)))))) (else (vector 0 (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "invalid hex character: '" (cons (string arg-1) (cons "'" '()))))))))))
(define LanguageC-45TOMLC-45Tokens-n--3651-1835-u--unicodeEscape (lambda (arg-0 arg-1 arg-2) (if (null? arg-1) (vector 1 (cast-int-char arg-2)) (let ((e-2 (car arg-1))) (let ((e-3 (cdr arg-1))) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (LanguageC-45TOMLC-45Tokens-n--3651-1834-u--hexToInt arg-0 e-2) (lambda (u--x) (LanguageC-45TOMLC-45Tokens-n--3651-1835-u--unicodeEscape arg-0 e-3 (bs+ (bs* arg-2 16 63) u--x 63)))))))))
(define LanguageC-45TOMLC-45Tokens-n--3651-1836-u--loop (lambda (arg-0 arg-1) (if (null? arg-1) (vector 0 "unexpected end of input") (let ((e-2 (car arg-1))) (let ((e-3 (cdr arg-1))) (cond ((equal? e-2 #\") (vector 1 '())) ((equal? e-2 #\\) (if (null? e-3) (vector 0 "invalid escape code") (let ((e-5 (car e-3))) (let ((e-6 (cdr e-3))) (cond ((equal? e-5 #\b) (let ((sc4 (LanguageC-45TOMLC-45Tokens-n--3651-1836-u--loop arg-0 e-6))) (case (vector-ref sc4 0) ((0) (let ((e-4 (vector-ref sc4 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref sc4 1))) (vector 1 (cons (integer->char 8) e-7))))))) ((equal? e-5 #\t) (let ((sc4 (LanguageC-45TOMLC-45Tokens-n--3651-1836-u--loop arg-0 e-6))) (case (vector-ref sc4 0) ((0) (let ((e-4 (vector-ref sc4 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref sc4 1))) (vector 1 (cons (integer->char 9) e-7))))))) ((equal? e-5 #\n) (let ((sc4 (LanguageC-45TOMLC-45Tokens-n--3651-1836-u--loop arg-0 e-6))) (case (vector-ref sc4 0) ((0) (let ((e-4 (vector-ref sc4 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref sc4 1))) (vector 1 (cons (integer->char 10) e-7))))))) ((equal? e-5 #\f) (let ((sc4 (LanguageC-45TOMLC-45Tokens-n--3651-1836-u--loop arg-0 e-6))) (case (vector-ref sc4 0) ((0) (let ((e-4 (vector-ref sc4 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref sc4 1))) (vector 1 (cons (integer->char 12) e-7))))))) ((equal? e-5 #\r) (let ((sc4 (LanguageC-45TOMLC-45Tokens-n--3651-1836-u--loop arg-0 e-6))) (case (vector-ref sc4 0) ((0) (let ((e-4 (vector-ref sc4 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref sc4 1))) (vector 1 (cons (integer->char 13) e-7))))))) ((equal? e-5 #\") (let ((sc4 (LanguageC-45TOMLC-45Tokens-n--3651-1836-u--loop arg-0 e-6))) (case (vector-ref sc4 0) ((0) (let ((e-4 (vector-ref sc4 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref sc4 1))) (vector 1 (cons #\" e-7))))))) ((equal? e-5 #\\) (let ((sc4 (LanguageC-45TOMLC-45Tokens-n--3651-1836-u--loop arg-0 e-6))) (case (vector-ref sc4 0) ((0) (let ((e-4 (vector-ref sc4 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref sc4 1))) (vector 1 (cons #\\ e-7))))))) ((equal? e-5 #\u) (if (null? e-6) (vector 0 "invalid escape code") (let ((e-8 (car e-6))) (let ((e-9 (cdr e-6))) (if (null? e-9) (vector 0 "invalid escape code") (let ((e-11 (car e-9))) (let ((e-12 (cdr e-9))) (if (null? e-12) (vector 0 "invalid escape code") (let ((e-14 (car e-12))) (let ((e-15 (cdr e-12))) (if (null? e-15) (vector 0 "invalid escape code") (let ((e-17 (car e-15))) (let ((e-18 (cdr e-15))) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (LanguageC-45TOMLC-45Tokens-n--3651-1835-u--unicodeEscape arg-0 (cons e-8 (cons e-11 (cons e-14 (cons e-17 '())))) 0) (lambda (u--c) (let ((sc8 (LanguageC-45TOMLC-45Tokens-n--3651-1836-u--loop arg-0 e-18))) (case (vector-ref sc8 0) ((0) (let ((e-4 (vector-ref sc8 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref sc8 1))) (vector 1 (cons u--c e-7))))))))))))))))))))) ((equal? e-5 #\U) (if (null? e-6) (vector 0 "invalid escape code") (let ((e-20 (car e-6))) (let ((e-21 (cdr e-6))) (if (null? e-21) (vector 0 "invalid escape code") (let ((e-23 (car e-21))) (let ((e-24 (cdr e-21))) (if (null? e-24) (vector 0 "invalid escape code") (let ((e-26 (car e-24))) (let ((e-27 (cdr e-24))) (if (null? e-27) (vector 0 "invalid escape code") (let ((e-29 (car e-27))) (let ((e-30 (cdr e-27))) (if (null? e-30) (vector 0 "invalid escape code") (let ((e-32 (car e-30))) (let ((e-33 (cdr e-30))) (if (null? e-33) (vector 0 "invalid escape code") (let ((e-35 (car e-33))) (let ((e-36 (cdr e-33))) (if (null? e-36) (vector 0 "invalid escape code") (let ((e-38 (car e-36))) (let ((e-39 (cdr e-36))) (if (null? e-39) (vector 0 "invalid escape code") (let ((e-41 (car e-39))) (let ((e-42 (cdr e-39))) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (LanguageC-45TOMLC-45Tokens-n--3651-1835-u--unicodeEscape arg-0 (cons e-20 (cons e-23 (cons e-26 (cons e-29 (cons e-32 (cons e-35 (cons e-38 (cons e-41 '())))))))) 0) (lambda (u--c) (let ((sc12 (LanguageC-45TOMLC-45Tokens-n--3651-1836-u--loop arg-0 e-42))) (case (vector-ref sc12 0) ((0) (let ((e-4 (vector-ref sc12 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref sc12 1))) (vector 1 (cons u--c e-7)))))))))))))))))))))))))))))))))(else (vector 0 "invalid escape code")))))))(else (let ((sc1 (LanguageC-45TOMLC-45Tokens-n--3651-1836-u--loop arg-0 e-3))) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) (vector 1 (cons e-2 e-5)))))))))))))
(define LanguageC-45TOMLC-45Tokens-unescapeBasic (lambda (arg-0) (if (null? arg-0) (vector 0 "expected quote") (let ((e-1 (car arg-0))) (let ((e-2 (cdr arg-0))) (cond ((equal? e-1 #\") (LanguageC-45TOMLC-45Tokens-n--3651-1836-u--loop e-2 e-2))(else (vector 0 "expected quote"))))))))
(define LanguageC-45TOMLC-45Tokens-u--tokValue_TokenKind_TOMLTokenKind (lambda (arg-0 arg-1) (case (vector-ref arg-0 0) ((0) (PreludeC-45EqOrd-u--C-61C-61_Eq_String arg-1 "true")) ((1) (LanguageC-45TOMLC-45Tokens-parseInt (PreludeC-45Types-fastUnpack arg-1))) ((2) (LanguageC-45TOMLC-45TokensC-45Float-parseFloat arg-1)) ((3) (let ((e-0 (vector-ref arg-0 1))) (cond ((equal? e-0 0) (let ((sc2 (LanguageC-45TOMLC-45Tokens-unescapeBasic (PreludeC-45Types-fastUnpack arg-1)))) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc2 1))) (vector 1 (PreludeC-45Types-fastPack e-5))))))) ((equal? e-0 1) (vector 0 "unimplemted string type: literal")) ((equal? e-0 2) (vector 0 "unimplemted string type: basic multiline")) (else (vector 0 "unimplemted string type: literal multiline"))))) ((4) (vector 0 )) ((5) arg-1) (else (vector 0 )))))
(define csegen-490 (cons (lambda (arg-823) (LanguageC-45TOMLC-45Tokens-u--TokType_TokenKind_TOMLTokenKind arg-823)) (lambda (u--kind) (lambda (arg-832) (LanguageC-45TOMLC-45Tokens-u--tokValue_TokenKind_TOMLTokenKind u--kind arg-832)))))
(define LanguageC-45TOMLC-45Tokens-u--C-61C-61_Eq_Bracket (lambda (arg-0 arg-1) (cond ((equal? arg-0 0) (cond ((equal? arg-1 0) 1)(else 0))) ((equal? arg-0 1) (cond ((equal? arg-1 1) 1)(else 0)))(else 0))))
(define LanguageC-45TOMLC-45Tokens-u--C-61C-61_Eq_Punctuation (lambda (arg-0 arg-1) (case (vector-ref arg-0 0) ((0) (case (vector-ref arg-1 0) ((0) 1)(else 0))) ((1) (case (vector-ref arg-1 0) ((1) 1)(else 0))) ((2) (case (vector-ref arg-1 0) ((2) 1)(else 0))) ((3) (case (vector-ref arg-1 0) ((3) 1)(else 0))) ((4) (let ((e-0 (vector-ref arg-0 1))) (case (vector-ref arg-1 0) ((4) (let ((e-2 (vector-ref arg-1 1))) (LanguageC-45TOMLC-45Tokens-u--C-61C-61_Eq_Bracket e-0 e-2)))(else 0)))) ((5) (let ((e-1 (vector-ref arg-0 1))) (case (vector-ref arg-1 0) ((5) (let ((e-3 (vector-ref arg-1 1))) (LanguageC-45TOMLC-45Tokens-u--C-61C-61_Eq_Bracket e-1 e-3)))(else 0))))(else 0))))
(define LanguageC-45TOMLC-45Tokens-u--C-61C-61_Eq_StringType (lambda (arg-0 arg-1) (cond ((equal? arg-0 0) (cond ((equal? arg-1 0) 1)(else 0))) ((equal? arg-0 1) (cond ((equal? arg-1 1) 1)(else 0))) ((equal? arg-0 2) (cond ((equal? arg-1 2) 1)(else 0))) ((equal? arg-0 3) (cond ((equal? arg-1 3) 1)(else 0)))(else 0))))
(define LanguageC-45TOMLC-45Tokens-u--C-61C-61_Eq_TOMLTokenKind (lambda (arg-0 arg-1) (case (vector-ref arg-0 0) ((0) (case (vector-ref arg-1 0) ((0) 1)(else 0))) ((1) (case (vector-ref arg-1 0) ((1) 1)(else 0))) ((2) (case (vector-ref arg-1 0) ((2) 1)(else 0))) ((3) (let ((e-0 (vector-ref arg-0 1))) (case (vector-ref arg-1 0) ((3) (let ((e-2 (vector-ref arg-1 1))) (LanguageC-45TOMLC-45Tokens-u--C-61C-61_Eq_StringType e-0 e-2)))(else 0)))) ((4) (let ((e-1 (vector-ref arg-0 1))) (case (vector-ref arg-1 0) ((4) (let ((e-3 (vector-ref arg-1 1))) (LanguageC-45TOMLC-45Tokens-u--C-61C-61_Eq_Punctuation e-1 e-3)))(else 0)))) ((5) (case (vector-ref arg-1 0) ((5) 1)(else 0))) ((6) (case (vector-ref arg-1 0) ((6) 1)(else 0)))(else 0))))
(define LanguageC-45TOMLC-45Tokens-u--C-47C-61_Eq_TOMLTokenKind (lambda (arg-0 arg-1) (let ((sc0 (LanguageC-45TOMLC-45Tokens-u--C-61C-61_Eq_TOMLTokenKind arg-0 arg-1))) (cond ((equal? sc0 1) 0) (else 1)))))
(define csegen-493 (cons (lambda (arg-534) (lambda (arg-537) (LanguageC-45TOMLC-45Tokens-u--C-61C-61_Eq_TOMLTokenKind arg-534 arg-537))) (lambda (arg-544) (lambda (arg-547) (LanguageC-45TOMLC-45Tokens-u--C-47C-61_Eq_TOMLTokenKind arg-544 arg-547)))))
(define csegen-535 (cons (cons "End of input" '()) '()))
(define PreludeC-45Types-elemBy (lambda (arg-2 arg-3 arg-4 ext-0) (let ((e-6 (vector-ref arg-2 5))) (((((e-6 'erased) 'erased) csegen-117) (arg-3 arg-4)) ext-0))))
(define PreludeC-45Types-elem (lambda (arg-2 arg-3 ext-1 ext-0) (PreludeC-45Types-elemBy arg-2 (lambda (eta-0) (lambda (eta-1) (let ((e-1 (car arg-3))) ((e-1 eta-0) eta-1)))) ext-1 ext-0)))
(define TextC-45LexerC-45Core-pred (lambda (ext-0) (vector 3 ext-0)))
(define TextC-45Lexer-oneOf (lambda (arg-0) (TextC-45LexerC-45Core-pred (lambda (u--x) (PreludeC-45Types-elem csegen-197 csegen-2 u--x (PreludeC-45Types-fastUnpack arg-0))))))
(define TextC-45LexerC-45Core-C-60C-124C-62 (lambda (ext-0 ext-1) (vector 7 ext-0 ext-1)))
(define TextC-45LexerC-45Core-empty (vector 0 ))
(define TextC-45Lexer-opt (lambda (arg-0) (TextC-45LexerC-45Core-C-60C-124C-62 arg-0 TextC-45LexerC-45Core-empty)))
(define csegen-566 (TextC-45Lexer-opt (TextC-45Lexer-oneOf "+-")))
(define TextC-45Lexer-is (lambda (arg-0) (TextC-45LexerC-45Core-pred (lambda (arg-1) (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 arg-0)))))
(define csegen-571 (TextC-45Lexer-opt (TextC-45Lexer-is #\_)))
(define TextC-45Lexer-digit (TextC-45LexerC-45Core-pred (lambda (eta-0) (PreludeC-45Types-isDigit eta-0))))
(define TextC-45Lexer-some (lambda (arg-0) (vector 4 arg-0 (lambda () (TextC-45Lexer-many arg-0)))))
(define TextC-45Lexer-many (lambda (arg-0) (TextC-45Lexer-opt (TextC-45Lexer-some arg-0))))
(define csegen-581 (TextC-45Lexer-many (vector 5 csegen-571 TextC-45Lexer-digit)))
(define csegen-609 (vector 1 (cons '() (cons #\t (cons #\t (cons #\c '()))))))
(define csegen-611 (cons #\t (cons #\t (cons #\m '()))))
(define PreludeC-45TypesC-45List-reverseOnto (lambda (arg-1 arg-2) (if (null? arg-2) arg-1 (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (PreludeC-45TypesC-45List-reverseOnto (cons e-2 arg-1) e-3))))))
(define PreludeC-45TypesC-45List-reverse (lambda (ext-0) (PreludeC-45TypesC-45List-reverseOnto '() ext-0)))
(define PreludeC-45TypesC-45List-tailRecAppend (lambda (arg-1 arg-2) (PreludeC-45TypesC-45List-reverseOnto arg-2 (PreludeC-45TypesC-45List-reverse arg-1))))
(define csegen-615 (cons (lambda (arg-8332) (lambda (arg-8335) (PreludeC-45TypesC-45List-tailRecAppend arg-8332 arg-8335))) '()))
(define ParserC-45RuleC-45Package-dotC-39 (vector 1 "Expected dot" (lambda (lcase-0) (case (vector-ref lcase-0 0) ((5) (box (vector 0 )))(else '())))))
(define ParserC-45RuleC-45Package-integerLit (vector 1 "Expected integer" (lambda (lcase-0) (case (vector-ref lcase-0 0) ((14) (let ((e-0 (vector-ref lcase-0 1))) (box e-0)))(else '())))))
(define LibrariesC-45TextC-45Parser-option (lambda (arg-3 arg-4 arg-5) (cond ((equal? arg-3 0) (vector 13 0 0 arg-5 (lambda () (vector 0 arg-4)))) (else (vector 13 1 0 arg-5 (lambda () (vector 0 arg-4)))))))
(define LibrariesC-45TextC-45Parser-some (lambda (arg-3) (vector 9 0 arg-3 (lambda () (lambda (bind-0) (vector 10 0 0 (LibrariesC-45TextC-45Parser-many arg-3) (lambda (bind-1) (vector 0 (cons bind-0 bind-1)))))))))
(define LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 (lambda (arg-4 arg-5 arg-6) (cond ((equal? arg-4 0) (case (vector-ref arg-6 0) ((0) (let ((e-65 (vector-ref arg-6 1))) (vector 0 (arg-5 e-65))))(else (case (vector-ref arg-6 0) ((4) (let ((e-49 (vector-ref arg-6 1))) (let ((e-50 (vector-ref arg-6 2))) (let ((e-51 (vector-ref arg-6 3))) (vector 4 e-49 e-50 e-51))))) ((6) (let ((e-56 (vector-ref arg-6 1))) (vector 6 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 arg-4 arg-5 e-56)))) ((8) (let ((e-61 (vector-ref arg-6 1))) (vector 8 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 arg-4 arg-5 e-61))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((1) (let ((e-43 (vector-ref arg-6 1))) (let ((e-44 (vector-ref arg-6 2))) (vector 1 e-43 (lambda (eta-0) (PreludeC-45Types-u--map_Functor_Maybe arg-5 (e-44 eta-0)))))))(else (case (vector-ref arg-6 0) ((13) (let ((e-36 (vector-ref arg-6 1))) (let ((e-37 (vector-ref arg-6 2))) (let ((e-38 (vector-ref arg-6 3))) (let ((e-39 (vector-ref arg-6 4))) (vector 13 e-36 e-37 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-36 arg-5 e-38) (lambda () (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-37 arg-5 (e-39)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((9) (let ((e-30 (vector-ref arg-6 1))) (let ((e-31 (vector-ref arg-6 2))) (let ((e-32 (vector-ref arg-6 3))) (vector 9 e-30 e-31 (lambda () (lambda (u--val) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-30 arg-5 ((e-32) u--val)))))))))(else (case (vector-ref arg-6 0) ((10) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 10 e-22 e-23 e-24 (lambda (u--val) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 arg-5 (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((11) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 11 e-15 e-16 (lambda () (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 arg-5 (e-17))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))))))(else (case (vector-ref arg-6 0) ((10) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 10 e-22 e-23 e-24 (lambda (u--val) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 arg-5 (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((11) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 11 e-15 e-16 (lambda () (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 arg-5 (e-17))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))))))))))(else (case (vector-ref arg-6 0) ((13) (let ((e-36 (vector-ref arg-6 1))) (let ((e-37 (vector-ref arg-6 2))) (let ((e-38 (vector-ref arg-6 3))) (let ((e-39 (vector-ref arg-6 4))) (vector 13 e-36 e-37 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-36 arg-5 e-38) (lambda () (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-37 arg-5 (e-39)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((9) (let ((e-30 (vector-ref arg-6 1))) (let ((e-31 (vector-ref arg-6 2))) (let ((e-32 (vector-ref arg-6 3))) (vector 9 e-30 e-31 (lambda () (lambda (u--val) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-30 arg-5 ((e-32) u--val)))))))))(else (case (vector-ref arg-6 0) ((10) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 10 e-22 e-23 e-24 (lambda (u--val) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 arg-5 (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((11) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 11 e-15 e-16 (lambda () (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 arg-5 (e-17))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))))))(else (case (vector-ref arg-6 0) ((10) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 10 e-22 e-23 e-24 (lambda (u--val) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 arg-5 (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((11) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 11 e-15 e-16 (lambda () (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 arg-5 (e-17))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))))))))))))))(else (case (vector-ref arg-6 0) ((4) (let ((e-49 (vector-ref arg-6 1))) (let ((e-50 (vector-ref arg-6 2))) (let ((e-51 (vector-ref arg-6 3))) (vector 4 e-49 e-50 e-51))))) ((6) (let ((e-56 (vector-ref arg-6 1))) (vector 6 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 arg-4 arg-5 e-56)))) ((8) (let ((e-61 (vector-ref arg-6 1))) (vector 8 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 arg-4 arg-5 e-61))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((1) (let ((e-43 (vector-ref arg-6 1))) (let ((e-44 (vector-ref arg-6 2))) (vector 1 e-43 (lambda (eta-0) (PreludeC-45Types-u--map_Functor_Maybe arg-5 (e-44 eta-0)))))))(else (case (vector-ref arg-6 0) ((13) (let ((e-36 (vector-ref arg-6 1))) (let ((e-37 (vector-ref arg-6 2))) (let ((e-38 (vector-ref arg-6 3))) (let ((e-39 (vector-ref arg-6 4))) (vector 13 e-36 e-37 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-36 arg-5 e-38) (lambda () (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-37 arg-5 (e-39)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((9) (let ((e-30 (vector-ref arg-6 1))) (let ((e-31 (vector-ref arg-6 2))) (let ((e-32 (vector-ref arg-6 3))) (vector 9 e-30 e-31 (lambda () (lambda (u--val) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-30 arg-5 ((e-32) u--val)))))))))(else (case (vector-ref arg-6 0) ((10) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 10 e-22 e-23 e-24 (lambda (u--val) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 arg-5 (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((11) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 11 e-15 e-16 (lambda () (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 arg-5 (e-17))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))))))(else (case (vector-ref arg-6 0) ((10) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 10 e-22 e-23 e-24 (lambda (u--val) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 arg-5 (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((11) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 11 e-15 e-16 (lambda () (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 arg-5 (e-17))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))))))))))(else (case (vector-ref arg-6 0) ((13) (let ((e-36 (vector-ref arg-6 1))) (let ((e-37 (vector-ref arg-6 2))) (let ((e-38 (vector-ref arg-6 3))) (let ((e-39 (vector-ref arg-6 4))) (vector 13 e-36 e-37 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-36 arg-5 e-38) (lambda () (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-37 arg-5 (e-39)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((9) (let ((e-30 (vector-ref arg-6 1))) (let ((e-31 (vector-ref arg-6 2))) (let ((e-32 (vector-ref arg-6 3))) (vector 9 e-30 e-31 (lambda () (lambda (u--val) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-30 arg-5 ((e-32) u--val)))))))))(else (case (vector-ref arg-6 0) ((10) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 10 e-22 e-23 e-24 (lambda (u--val) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 arg-5 (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((11) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 11 e-15 e-16 (lambda () (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 arg-5 (e-17))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))))))(else (case (vector-ref arg-6 0) ((10) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 10 e-22 e-23 e-24 (lambda (u--val) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 arg-5 (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((11) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 11 e-15 e-16 (lambda () (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 arg-5 (e-17))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0))))))))))))))))))))))))
(define LibrariesC-45TextC-45Parser-many (lambda (arg-3) (LibrariesC-45TextC-45Parser-option 1 '() (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 (lambda (eta-0) (DataC-45List1-forget eta-0)) (LibrariesC-45TextC-45Parser-some arg-3)))))
(define LibrariesC-45TextC-45Parser-sepBy1 (lambda (arg-4 arg-5 arg-6) (vector 10 arg-4 0 (vector 10 0 arg-4 (vector 0 csegen-201) (lambda (u--f) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 arg-4 u--f arg-6))) (lambda (u--f) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 0 u--f (LibrariesC-45TextC-45Parser-many (vector 10 1 arg-4 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 (lambda (eta-0) (lambda (eta-1) eta-1)) arg-5) (lambda (f-0) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 arg-4 f-0 arg-6)))))))))
(define csegen-616 (LibrariesC-45TextC-45Parser-sepBy1 1 ParserC-45RuleC-45Package-dotC-39 ParserC-45RuleC-45Package-integerLit))
(define csegen-633 (lambda (eta-0) (lambda (eta-1) (vector 15 eta-0 eta-1))))
(define ParserC-45RuleC-45Package-exactProperty (lambda (arg-0) (vector 1 (string-append "Expected property " arg-0) (lambda (lcase-0) (case (vector-ref lcase-0 0) ((3) (let ((e-0 (vector-ref lcase-0 1))) (let ((e-1 (vector-ref lcase-0 2))) (if (null? e-0) (let ((sc2 (PreludeC-45EqOrd-u--C-61C-61_Eq_String arg-0 e-1))) (cond ((equal? sc2 1) (box arg-0)) (else '()))) '()))))(else '()))))))
(define csegen-643 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 (lambda (eta-0) (vector 0 )) (ParserC-45RuleC-45Package-exactProperty "version")))
(define PreludeC-45Types-isLower (lambda (arg-0) (let ((sc0 (PreludeC-45EqOrd-u--C-62C-61_Ord_Char arg-0 #\a))) (cond ((equal? sc0 1) (PreludeC-45EqOrd-u--C-60C-61_Ord_Char arg-0 #\z)) (else 0)))))
(define PreludeC-45Types-isAlpha (lambda (arg-0) (let ((sc0 (PreludeC-45Types-isUpper arg-0))) (cond ((equal? sc0 1) 1) (else (PreludeC-45Types-isLower arg-0))))))
(define PreludeC-45Types-isAlphaNum (lambda (arg-0) (let ((sc0 (PreludeC-45Types-isDigit arg-0))) (cond ((equal? sc0 1) 1) (else (PreludeC-45Types-isAlpha arg-0))))))
(define ParserC-45LexerC-45Common-isIdentTrailing (lambda (arg-0 arg-1) (cond ((equal? arg-0 0) (cond ((equal? arg-1 #\-) 1)(else (cond ((equal? arg-1 #\') 1) ((equal? arg-1 #\_) 1)(else (let ((sc1 (PreludeC-45Types-isAlphaNum arg-1))) (cond ((equal? sc1 1) 1) (else (PreludeC-45EqOrd-u--C-62_Ord_Char arg-1 (cast-int-char (blodwen-toSignedInt 160 63)))))))))))(else (cond ((equal? arg-1 #\') 1) ((equal? arg-1 #\_) 1)(else (let ((sc0 (PreludeC-45Types-isAlphaNum arg-1))) (cond ((equal? sc0 1) 1) (else (PreludeC-45EqOrd-u--C-62_Ord_Char arg-1 (cast-int-char (blodwen-toSignedInt 160 63))))))))))))
(define csegen-667 (lambda (eta-0) (ParserC-45LexerC-45Common-isIdentTrailing 0 eta-0)))
(define ParserC-45LexerC-45Common-isIdentStart (lambda (arg-0 arg-1) (cond ((equal? arg-1 #\_) 1)(else (cond ((equal? arg-0 1) (let ((sc1 (PreludeC-45Types-isUpper arg-1))) (cond ((equal? sc1 1) 1) (else (PreludeC-45EqOrd-u--C-62_Ord_Char arg-1 (cast-int-char (blodwen-toSignedInt 160 63)))))))(else (let ((sc0 (PreludeC-45Types-isAlpha arg-1))) (cond ((equal? sc0 1) 1) (else (PreludeC-45EqOrd-u--C-62_Ord_Char arg-1 (cast-int-char (blodwen-toSignedInt 160 63))))))))))))
(define LibrariesC-45TextC-45LexerC-45Core-C-60C-124C-62 (lambda (ext-0 ext-1) (vector 8 ext-0 ext-1)))
(define LibrariesC-45TextC-45LexerC-45Core-empty (vector 0 ))
(define LibrariesC-45TextC-45Lexer-opt (lambda (arg-0) (LibrariesC-45TextC-45LexerC-45Core-C-60C-124C-62 arg-0 LibrariesC-45TextC-45LexerC-45Core-empty)))
(define LibrariesC-45TextC-45Lexer-some (lambda (arg-0) (vector 5 arg-0 (lambda () (LibrariesC-45TextC-45Lexer-many arg-0)))))
(define LibrariesC-45TextC-45Lexer-many (lambda (arg-0) (LibrariesC-45TextC-45Lexer-opt (LibrariesC-45TextC-45Lexer-some arg-0))))
(define LibrariesC-45TextC-45LexerC-45Core-pred (lambda (ext-0) (vector 4 ext-0)))
(define csegen-736 (vector 5 (LibrariesC-45TextC-45LexerC-45Core-pred (lambda (eta-0) (ParserC-45LexerC-45Common-isIdentStart 1 eta-0))) (lambda () (LibrariesC-45TextC-45Lexer-many (LibrariesC-45TextC-45LexerC-45Core-pred (lambda (eta-0) (ParserC-45LexerC-45Common-isIdentTrailing 1 eta-0)))))))
(define csegen-762 (vector 1 (lambda (eta-0) (vector 0 eta-0)) "-oL" (vector 0 )))
(define csegen-779 (vector 1 (cons '() (cons #\d (cons #\b '())))))
(define csegen-803 (vector 1 (cons '() (cons #\s (cons #\u (cons #\p (cons #\p (cons #\o (cons #\r (cons #\t '()))))))))))
(define csegen-804 (cons #\. csegen-341))
(define csegen-818 (cons #\H (cons #\E (cons #\A (cons #\D '())))))
(define csegen-826 (vector 1 (cons '() (cons #\. (cons #\c (cons #\a (cons #\c (cons #\h (cons #\e '())))))))))
(define u--prim__sub_Integer (lambda (arg-0 arg-1) (- arg-0 arg-1)))
(define MicroPack-microInit (lambda (arg-0 arg-1) (vector arg-1 '() '() '() '() (DataC-45FilePath-u--fromString_FromString_FilePath arg-0) 1 0 0 1 '() 1 0 0 (vector 1 ) '() '() '() (vector 0 ) (DataC-45SortedMap-empty (vector (cons (lambda (arg-534) (lambda (arg-537) (PreludeC-45Basics-on csegen-3 (lambda (eta-0) eta-0) arg-534 arg-537))) (lambda (arg-544) (lambda (arg-547) (let ((sc0 (PreludeC-45Basics-on csegen-3 (lambda (eta-0) eta-0) arg-544 arg-547))) (cond ((equal? sc0 1) 0) (else 1)))))) (lambda (arg-1424) (lambda (arg-1427) (PreludeC-45Basics-on csegen-15 (lambda (eta-0) eta-0) arg-1424 arg-1427))) (lambda (arg-1434) (lambda (arg-1437) (PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering (PreludeC-45Basics-on csegen-15 (lambda (eta-0) eta-0) arg-1434 arg-1437) 0))) (lambda (arg-1444) (lambda (arg-1447) (PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering (PreludeC-45Basics-on csegen-15 (lambda (eta-0) eta-0) arg-1444 arg-1447) 2))) (lambda (arg-1454) (lambda (arg-1457) (PreludeC-45EqOrd-u--C-47C-61_Eq_Ordering (PreludeC-45Basics-on csegen-15 (lambda (eta-0) eta-0) arg-1454 arg-1457) 2))) (lambda (arg-1464) (lambda (arg-1467) (PreludeC-45EqOrd-u--C-47C-61_Eq_Ordering (PreludeC-45Basics-on csegen-15 (lambda (eta-0) eta-0) arg-1464 arg-1467) 0))) (lambda (arg-1474) (lambda (arg-1477) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering (PreludeC-45Basics-on csegen-15 (lambda (eta-0) eta-0) arg-1474 arg-1477) 2))) (cond ((equal? sc0 1) arg-1474) (else arg-1477))))) (lambda (arg-1484) (lambda (arg-1487) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering (PreludeC-45Basics-on csegen-15 (lambda (eta-0) eta-0) arg-1484 arg-1487) 0))) (cond ((equal? sc0 1) arg-1484) (else arg-1487))))))) 0 1 (vector 0 ) (cons #\_ (cons #\t (cons #\m (cons #\p csegen-27)))) csegen-43)))
(define PreludeC-45TypesC-45List-filterAppend (lambda (arg-1 arg-2 arg-3) (if (null? arg-3) (PreludeC-45TypesC-45SnocList-C-60C-62C-62 arg-1 '()) (let ((e-1 (car arg-3))) (let ((e-2 (cdr arg-3))) (let ((sc1 (arg-2 e-1))) (cond ((equal? sc1 1) (PreludeC-45TypesC-45List-filterAppend (cons arg-1 e-1) arg-2 e-2)) (else (PreludeC-45TypesC-45List-filterAppend arg-1 arg-2 e-2)))))))))
(define Builtin-fst (lambda (arg-2) (let ((e-2 (car arg-2))) e-2)))
(define PreludeC-45Types-maybe (lambda (arg-2 arg-3 arg-4) (if (null? arg-4) (arg-2) (let ((e-2 (unbox arg-4))) ((arg-3) e-2)))))
(define DataC-45List1-n--2949-2691-u--loop (lambda (arg-1 arg-2 arg-3 arg-4) (if (null? arg-4) '() (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) (cons arg-3 (DataC-45List1-n--2949-2691-u--loop arg-1 arg-2 e-2 e-3)))))))
(define DataC-45List1-init (lambda (arg-1) (let ((e-1 (car arg-1))) (let ((e-2 (cdr arg-1))) (DataC-45List1-n--2949-2691-u--loop e-1 e-2 e-1 e-2)))))
(define DataC-45List1-n--2919-2664-u--loop (lambda (arg-1 arg-2 arg-3 arg-4) (if (null? arg-4) arg-3 (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) (DataC-45List1-n--2919-2664-u--loop arg-1 arg-2 e-2 e-3))))))
(define DataC-45List1-last (lambda (arg-1) (let ((e-1 (car arg-1))) (let ((e-2 (cdr arg-1))) (DataC-45List1-n--2919-2664-u--loop e-1 e-2 e-1 e-2)))))
(define PreludeC-45Types-listBindOnto (lambda (arg-2 arg-3 arg-4) (if (null? arg-4) (PreludeC-45TypesC-45List-reverse arg-3) (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) (PreludeC-45Types-listBindOnto arg-2 (PreludeC-45TypesC-45List-reverseOnto arg-3 (arg-2 e-2)) e-3))))))
(define PreludeC-45Types-listBind (lambda (arg-2 arg-3) (PreludeC-45Types-listBindOnto arg-3 '() arg-2)))
(define PreludeC-45Types-u--join_Monad_List (lambda (arg-1) (PreludeC-45Types-listBind arg-1 (lambda (eta-0) eta-0))))
(define DataC-45FilePathC-45Body-split (lambda (arg-0) (let ((u--ss (DataC-45List-split csegen-378 arg-0))) (PreludeC-45Types-u--C-60C-42C-62_Applicative_Maybe (PreludeC-45Types-u--C-60C-42C-62_Applicative_Maybe (box (lambda (eta-0) (lambda (eta-1) (cons eta-0 eta-1)))) (DataC-45FilePathC-45Body-fromChars (PreludeC-45Types-u--join_Monad_List (DataC-45List-intersperse (cons #\. '()) (DataC-45List1-init u--ss))))) (DataC-45FilePathC-45Body-fromChars (DataC-45List1-last u--ss))))))
(define PackC-45CoreC-45IO-eitherIO (lambda (arg-3 arg-4 ext-0) (let ((e-1 (car arg-3))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) ((((e-8 'erased) 'erased) (lambda (eta-0) (case (vector-ref eta-0 0) ((0) (let ((e-9 (vector-ref eta-0 1))) (vector 0 (arg-4 e-9)))) (else (let ((e-9 (vector-ref eta-0 1))) (vector 1 e-9)))))) ext-0))))))
(define SystemC-45Directory-closeDir (lambda (arg-1 arg-2) (let ((e-2 (cdr arg-1))) ((e-2 'erased) (lambda (eta-0) (SystemC-45Directory-prim__closeDir arg-2 eta-0))))))
(define SystemC-45Errno-getErrno (lambda (arg-1) (let ((e-2 (cdr arg-1))) ((e-2 'erased) (lambda (eta-0) (SystemC-45Errno-prim__getErrno eta-0))))))
(define SystemC-45FileC-45Error-returnError (lambda (arg-2) (let ((e-1 (car arg-2))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-2))) ((e-6 'erased) (lambda (eta-0) (SystemC-45FileC-45Error-prim__fileErrno eta-0))))) (lambda (u--err) (let ((e-7 (car arg-2))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (vector 0 (cond ((equal? u--err 0) (vector 1 )) ((equal? u--err 1) (vector 2 )) ((equal? u--err 2) (vector 3 )) ((equal? u--err 3) (vector 4 )) ((equal? u--err 4) (vector 5 ))(else (vector 0 (bs- u--err 5 63)))))))))))))))
(define SystemC-45Directory-nextDirEntry (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (SystemC-45Directory-prim__dirEntry arg-2 eta-0))))) (lambda (u--res) (let ((sc1 (PreludeC-45EqOrd-u--C-47C-61_Eq_Int (PrimIO-prim__nullAnyPtr u--res) (blodwen-toSignedInt 0 63)))) (cond ((equal? sc1 1) (let ((e-7 (car arg-1))) (let ((e-9 (vector-ref e-7 1))) ((((e-9 'erased) 'erased) (SystemC-45Errno-getErrno arg-1)) (lambda (bind-0) (let ((sc3 (PreludeC-45EqOrd-u--C-47C-61_Eq_Int bind-0 (blodwen-toSignedInt 0 63)))) (cond ((equal? sc3 1) (SystemC-45FileC-45Error-returnError arg-1)) (else (let ((e-12 (car arg-1))) (let ((e-15 (vector-ref e-12 0))) (let ((e-17 (vector-ref e-15 1))) ((e-17 'erased) (vector 1 '()))))))))))))) (else (let ((u--n (PreludeC-45IO-prim__getString u--res))) (let ((sc2 (let ((sc3 (PreludeC-45EqOrd-u--C-61C-61_Eq_String u--n "."))) (cond ((equal? sc3 1) 1) (else (PreludeC-45EqOrd-u--C-61C-61_Eq_String u--n "..")))))) (cond ((equal? sc2 1) (SystemC-45Directory-nextDirEntry arg-1 arg-2)) (else (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (vector 1 (box u--n)))))))))))))))))))
(define PreludeC-45InterfacesC-45Monad-u--C-62C-62C-61_Monad_ComposeC-40C-40C-46C-32C-36mC-41C-32C-36tC-41 (lambda (arg-4 arg-5 arg-6 arg-7 arg-8) (let ((e-2 (vector-ref arg-4 1))) ((((e-2 'erased) 'erased) arg-7) (lambda (eta-0) (((let ((eff-0 (let ((e-6 (vector-ref arg-4 0))) (let ((e-9 (vector-ref e-6 0))) e-9)))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) (lambda (clam-0) (let ((e-4 (vector-ref arg-5 2))) ((e-4 'erased) clam-0)))) (let ((e-4 (vector-ref arg-6 2))) ((((((e-4 'erased) 'erased) 'erased) (let ((e-9 (vector-ref arg-4 0))) e-9)) arg-8) eta-0))))))))
(define SystemC-45Directory-n--3552-1655-u--C-62C-62C-61 (lambda (arg-1 arg-2 ext-0 ext-1) (PreludeC-45InterfacesC-45Monad-u--C-62C-62C-61_Monad_ComposeC-40C-40C-46C-32C-36mC-41C-32C-36tC-41 csegen-56 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (case (vector-ref arg-8743 0) ((0) (let ((e-2 (vector-ref arg-8743 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref arg-8743 1))) (vector 1 (u--func e-5))))))))) (lambda (u--a) (lambda (arg-9789) (vector 1 arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (case (vector-ref arg-9795 0) ((0) (let ((e-2 (vector-ref arg-9795 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref arg-9795 1))) (case (vector-ref arg-9802 0) ((1) (let ((e-8 (vector-ref arg-9802 1))) (vector 1 (e-5 e-8)))) (else (let ((e-11 (vector-ref arg-9802 1))) (vector 0 e-11)))))))))))) csegen-154 csegen-155) (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (case (vector-ref arg-8743 0) ((0) (let ((e-2 (vector-ref arg-8743 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref arg-8743 1))) (vector 1 (u--func e-5))))))))) csegen-171 csegen-175) ext-0 ext-1)))
(define SystemC-45Directory-collectDir (lambda (arg-1 arg-2) (let ((e-2 (cdr arg-1))) ((e-2 'erased) (SystemC-45Directory-n--3552-1655-u--C-62C-62C-61 arg-1 arg-2 (SystemC-45Directory-nextDirEntry csegen-57 arg-2) (lambda (_-0) (if (null? _-0) (lambda (eta-0) (vector 1 '())) (let ((e-3 (unbox _-0))) (SystemC-45Directory-n--3552-1655-u--C-62C-62C-61 arg-1 arg-2 (SystemC-45Directory-collectDir csegen-57 arg-2) (lambda (u--ns) (lambda (eta-0) (vector 1 (cons e-3 u--ns)))))))))))))
(define SystemC-45Directory-ok (lambda (arg-2 arg-3) (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) (vector 1 arg-3)))))))
(define SystemC-45Directory-openDir (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (SystemC-45Directory-prim__openDir arg-2 eta-0))))) (lambda (u--res) (let ((sc1 (PreludeC-45EqOrd-u--C-47C-61_Eq_Int (PrimIO-prim__nullAnyPtr u--res) (blodwen-toSignedInt 0 63)))) (cond ((equal? sc1 1) (SystemC-45FileC-45Error-returnError arg-1)) (else (SystemC-45Directory-ok arg-1 u--res))))))))))
(define SystemC-45Directory-listDir (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (SystemC-45Directory-openDir arg-1 arg-2)) (lambda (_-0) (case (vector-ref _-0 0) ((1) (let ((e-6 (vector-ref _-0 1))) (let ((e-8 (car arg-1))) (let ((e-10 (vector-ref e-8 1))) ((((e-10 'erased) 'erased) (SystemC-45Directory-collectDir arg-1 e-6)) (lambda (u--ns) (let ((e-13 (car arg-1))) (let ((e-15 (vector-ref e-13 1))) ((((e-15 'erased) 'erased) (SystemC-45Directory-closeDir arg-1 e-6)) (lambda (u--ignore) (let ((e-18 (car arg-1))) (let ((e-21 (vector-ref e-18 0))) (let ((e-23 (vector-ref e-21 1))) ((e-23 'erased) u--ns)))))))))))))) (else (let ((e-6 (vector-ref _-0 1))) (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) (let ((e-13 (vector-ref e-11 1))) ((e-13 'erased) (vector 0 e-6))))))))))))))
(define PackC-45CoreC-45IO-entries (lambda (arg-1 arg-2) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-eitherIO arg-1 (lambda (eta-0) (vector 6 arg-2 eta-0)) (SystemC-45Directory-listDir arg-1 (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 arg-2) '())))) (lambda (u--ss) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (PreludeC-45TypesC-45List-mapMaybeAppend '() csegen-364 u--ss))))))
(define Builtin-snd (lambda (arg-2) (let ((e-3 (cdr arg-2))) e-3)))
(define PreludeC-45Types-u--C-61C-61_Eq_C-40MaybeC-32C-36aC-41 (lambda (arg-1 arg-2 arg-3) (if (null? arg-2) (if (null? arg-3) 1 0) (let ((e-2 (unbox arg-2))) (if (null? arg-3) 0 (let ((e-8 (unbox arg-3))) (let ((e-1 (car arg-1))) ((e-1 e-2) e-8))))))))
(define PackC-45CoreC-45Types-isTomlBody (lambda (ext-0) (PreludeC-45Types-u--C-61C-61_Eq_C-40MaybeC-32C-36aC-41 csegen-338 (box csegen-341) (PreludeC-45Types-u--map_Functor_Maybe (lambda (eta-0) (Builtin-snd eta-0)) (DataC-45FilePathC-45Body-split ext-0)))))
(define PackC-45CoreC-45IO-tomlFiles (lambda (arg-1 arg-2) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) (lambda (eta-0) (PreludeC-45TypesC-45List-filterAppend '() (lambda (eta-1) (PackC-45CoreC-45Types-isTomlBody eta-1)) eta-0)) (PackC-45CoreC-45IO-entries arg-1 arg-2))))
(define PackC-45ConfigC-45Environment-latestCollection (lambda (arg-1 arg-2) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) (lambda (eta-0) (PreludeC-45TypesC-45List-filterAppend '() (lambda (arg-0) (let ((sc0 (PreludeC-45Types-u--C-61C-61_Eq_C-40ListC-32C-36aC-41 csegen-2 (cons #\H (cons #\E (cons #\A (cons #\D csegen-804)))) arg-0))) (cond ((equal? sc0 1) 0) (else 1)))) eta-0)) (PackC-45CoreC-45IO-tomlFiles arg-1 arg-2)) (lambda (_-0) (if (null? _-0) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) csegen-818) (let ((e-1 (car _-0))) (let ((e-2 (cdr _-0))) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-4 (car arg-1))) (let ((e-7 (vector-ref e-4 0))) e-7)) (PreludeC-45Types-maybe (lambda () csegen-818) (lambda () (lambda (eta-0) eta-0)) (PreludeC-45Types-u--map_Functor_Maybe (lambda (eta-0) (Builtin-fst eta-0)) (DataC-45FilePathC-45Body-split (PreludeC-45Types-u--foldl_Foldable_List (lambda (eta-0) (lambda (eta-1) (let ((sc1 (PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering (PreludeC-45Types-u--compare_Ord_C-40ListC-32C-36aC-41 csegen-14 eta-0 eta-1) 2))) (cond ((equal? sc1 1) eta-0) (else eta-1))))) e-1 e-2))))))))))))
(define SystemC-45FileC-45Handle-closeFile (lambda (arg-1 arg-2) (let ((e-2 (cdr arg-1))) ((e-2 'erased) (lambda (eta-0) (SystemC-45FileC-45Handle-prim__close arg-2 eta-0))))))
(define SystemC-45Info-os (blodwen-os))
(define SystemC-45Info-isWindows (PreludeC-45Types-elem csegen-197 csegen-34 SystemC-45Info-os (cons "windows" (cons "mingw32" (cons "cygwin32" '())))))
(define SystemC-45FileC-45Mode-modeStr (lambda (arg-0) (cond ((equal? arg-0 0) (let ((sc1 SystemC-45Info-isWindows)) (cond ((equal? sc1 1) "rb") (else "r")))) ((equal? arg-0 1) (let ((sc1 SystemC-45Info-isWindows)) (cond ((equal? sc1 1) "wb") (else "w")))) ((equal? arg-0 2) (let ((sc1 SystemC-45Info-isWindows)) (cond ((equal? sc1 1) "ab") (else "a")))) ((equal? arg-0 3) (let ((sc1 SystemC-45Info-isWindows)) (cond ((equal? sc1 1) "rb+") (else "r+")))) ((equal? arg-0 4) (let ((sc1 SystemC-45Info-isWindows)) (cond ((equal? sc1 1) "wb+") (else "w+")))) (else (let ((sc1 SystemC-45Info-isWindows)) (cond ((equal? sc1 1) "ab+") (else "a+")))))))
(define SystemC-45FileC-45Support-ok (lambda (arg-3 arg-4) (let ((e-1 (car arg-3))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) (vector 1 arg-4)))))))
(define SystemC-45FileC-45Handle-openFile (lambda (arg-1 arg-2 arg-3) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (SystemC-45FileC-45Handle-prim__open arg-2 (SystemC-45FileC-45Mode-modeStr arg-3) eta-0))))) (lambda (u--res) (let ((sc1 (PreludeC-45EqOrd-u--C-47C-61_Eq_Int (PrimIO-prim__nullAnyPtr u--res) (blodwen-toSignedInt 0 63)))) (cond ((equal? sc1 1) (SystemC-45FileC-45Error-returnError arg-1)) (else (SystemC-45FileC-45Support-ok arg-1 u--res))))))))))
(define SystemC-45FileC-45Meta-exists (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (SystemC-45FileC-45Handle-openFile arg-1 arg-2 0)) (lambda (_-0) (case (vector-ref _-0 0) ((1) (let ((e-6 (vector-ref _-0 1))) (let ((e-8 (car arg-1))) (let ((e-10 (vector-ref e-8 1))) ((((e-10 'erased) 'erased) (SystemC-45FileC-45Handle-closeFile arg-1 e-6)) (lambda (_-10507) (let ((e-13 (car arg-1))) (let ((e-16 (vector-ref e-13 0))) (let ((e-18 (vector-ref e-16 1))) ((e-18 'erased) 1)))))))))) (else (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) (let ((e-13 (vector-ref e-11 1))) ((e-13 'erased) 0))))))))))))
(define PackC-45CoreC-45IO-missing (lambda (arg-1 ext-0) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) ((((e-8 'erased) 'erased) csegen-456) (SystemC-45FileC-45Meta-exists arg-1 (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 ext-0))))))))
(define PackC-45CoreC-45Types-cmdArgList (lambda (arg-0) (case (vector-ref arg-0 0) ((0) '()) (else (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (cons (e-1 e-2) (PackC-45CoreC-45Types-cmdArgList e-3)))))))))
(define DataC-45String-joinBy (lambda (arg-0 arg-1) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (DataC-45List-intersperse arg-0 arg-1))))
(define DataC-45String-unwords (lambda (ext-0) (DataC-45String-joinBy " " ext-0)))
(define SystemC-45Escape-n--3168-886-u--escapeArgChar (lambda (arg-0 arg-1) (let ((sc0 SystemC-45Info-isWindows)) (cond ((equal? sc0 1) (let ((sc1 (let ((sc2 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\%))) (cond ((equal? sc2 1) 1) (else (let ((sc3 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\^))) (cond ((equal? sc3 1) 1) (else (let ((sc4 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\&))) (cond ((equal? sc4 1) 1) (else (let ((sc5 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\<))) (cond ((equal? sc5 1) 1) (else (let ((sc6 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\>))) (cond ((equal? sc6 1) 1) (else (let ((sc7 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\|))) (cond ((equal? sc7 1) 1) (else (let ((sc8 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\'))) (cond ((equal? sc8 1) 1) (else (let ((sc9 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\"))) (cond ((equal? sc9 1) 1) (else (let ((sc10 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\`))) (cond ((equal? sc10 1) 1) (else (let ((sc11 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\ ))) (cond ((equal? sc11 1) 1) (else (let ((sc12 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 (integer->char 9)))) (cond ((equal? sc12 1) 1) (else (let ((sc13 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 (integer->char 10)))) (cond ((equal? sc13 1) 1) (else (let ((sc14 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\;))) (cond ((equal? sc14 1) 1) (else (let ((sc15 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\,))) (cond ((equal? sc15 1) 1) (else (let ((sc16 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\=))) (cond ((equal? sc16 1) 1) (else (let ((sc17 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 (integer->char 11)))) (cond ((equal? sc17 1) 1) (else (let ((sc18 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 (integer->char 12)))) (cond ((equal? sc18 1) 1) (else (let ((sc19 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 (integer->char 255)))) (cond ((equal? sc19 1) 1) (else (let ((sc20 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\())) (cond ((equal? sc20 1) 1) (else (let ((sc21 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\)))) (cond ((equal? sc21 1) 1) (else (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\!))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (cond ((equal? sc1 1) (cons #\^ (cons arg-1 '()))) (else (cons arg-1 '()))))) (else (let ((sc1 (let ((sc2 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\$))) (cond ((equal? sc2 1) 1) (else (let ((sc3 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\`))) (cond ((equal? sc3 1) 1) (else (let ((sc4 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\\))) (cond ((equal? sc4 1) 1) (else (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\")))))))))))) (cond ((equal? sc1 1) (cons #\\ (cons arg-1 '()))) (else (cons arg-1 '())))))))))
(define SystemC-45Escape-escapeArg (lambda (arg-0) (let ((u--escapedCmdChars (PreludeC-45Types-fastPack (PreludeC-45Types-listBind (PreludeC-45Types-fastUnpack arg-0) (lambda (eta-0) (SystemC-45Escape-n--3168-886-u--escapeArgChar arg-0 eta-0)))))) (let ((sc0 SystemC-45Info-isWindows)) (cond ((equal? sc0 1) u--escapedCmdChars) (else (string-append "\"" (string-append u--escapedCmdChars "\""))))))))
(define PackC-45CoreC-45Types-n--7442-7996-u--manageArg (lambda (arg-0) (case (vector-ref arg-0 0) ((0) (let ((e-0 (vector-ref arg-0 1))) (SystemC-45Escape-escapeArg e-0))) (else (let ((e-1 (vector-ref arg-0 1))) e-1)))))
(define PackC-45CoreC-45Types-escapeCmd (lambda (ext-0) (DataC-45String-unwords (PreludeC-45TypesC-45List-mapAppend '() (lambda (eta-0) (PackC-45CoreC-45Types-n--7442-7996-u--manageArg eta-0)) (PackC-45CoreC-45Types-cmdArgList ext-0)))))
(define System-system (lambda (arg-1 arg-2) (let ((e-2 (cdr arg-1))) ((e-2 'erased) (lambda (eta-0) (System-prim__system arg-2 eta-0))))))
(define PackC-45CoreC-45IO-sys (lambda (arg-1 arg-2) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (System-system (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (PackC-45CoreC-45Types-escapeCmd arg-2)) (lambda (_-0) (cond ((equal? _-0 0) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (vector 0 )))(else (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) (vector 0 (vector 7 arg-2 _-0))))))))))))
(define PackC-45CoreC-45IO-mkDir (lambda (arg-1 arg-2) (case (vector-ref arg-2 0) ((0) (let ((e-0 (vector-ref arg-2 1))) (if (null? e-0) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (vector 0 )) (PackC-45CoreC-45IO-sys arg-1 (vector 1 (lambda (eta-0) (vector 0 eta-0)) "mkdir" (vector 1 (lambda (eta-0) (vector 0 eta-0)) "-p" (vector 1 csegen-249 arg-2 (vector 0 ))))))))(else (PackC-45CoreC-45IO-sys arg-1 (vector 1 (lambda (eta-0) (vector 0 eta-0)) "mkdir" (vector 1 (lambda (eta-0) (vector 0 eta-0)) "-p" (vector 1 csegen-249 arg-2 (vector 0 )))))))))
(define DataC-45FilePath-split (lambda (arg-1) (case (vector-ref arg-1 0) ((0) (let ((e-0 (vector-ref arg-1 1))) (if (null? e-0) '() (let ((e-3 (car e-0))) (let ((e-4 (cdr e-0))) (box (cons (vector 0 e-3) e-4))))))) (else (let ((e-1 (vector-ref arg-1 1))) (if (null? e-1) '() (let ((e-7 (car e-1))) (let ((e-8 (cdr e-1))) (box (cons (vector 1 e-7) e-8))))))))))
(define PackC-45CoreC-45IO-mkParentDir (lambda (arg-1 arg-2) (let ((sc0 (PreludeC-45Types-u--map_Functor_Maybe (lambda (eta-0) (Builtin-fst eta-0)) (DataC-45FilePath-split arg-2)))) (if (null? sc0) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (vector 0 )) (let ((e-1 (unbox sc0))) (PackC-45CoreC-45IO-mkDir arg-1 e-1))))))
(define PackC-45CoreC-45IO-copyDir (lambda (arg-1 arg-2 arg-3) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-mkParentDir arg-1 arg-3) (lambda (_-10507) (PackC-45CoreC-45IO-sys arg-1 (vector 1 (lambda (eta-0) (vector 0 eta-0)) "cp" (vector 1 (lambda (eta-0) (vector 0 eta-0)) "-r" (vector 1 csegen-249 arg-2 (vector 1 csegen-249 arg-3 (vector 0 ))))))))))
(define PackC-45CoreC-45GitC-45Consts-dbRepo "https://github.com/stefan-hoeck/idris2-pack-db")
(define DataC-45String-span (lambda (arg-0 arg-1) (let ((sc0 (DataC-45List-span arg-0 (PreludeC-45Types-fastUnpack arg-1)))) (let ((e-2 (car sc0))) (let ((e-3 (cdr sc0))) (cons (PreludeC-45Types-fastPack e-2) (PreludeC-45Types-fastPack e-3)))))))
(define DataC-45String-break (lambda (arg-0 ext-0) (DataC-45String-span (lambda (eta-0) (let ((sc0 (arg-0 eta-0))) (cond ((equal? sc0 1) 0) (else 1)))) ext-0)))
(define SystemC-45FileC-45ReadWrite-fEOF (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (SystemC-45FileC-45ReadWrite-prim__eof arg-2 eta-0))))) (lambda (u--res) (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (PreludeC-45EqOrd-u--C-47C-61_Eq_Int u--res (blodwen-toSignedInt 0 63))))))))))))
(define SystemC-45FFI-free (lambda (arg-1 arg-2) (let ((e-2 (cdr arg-1))) ((e-2 'erased) (lambda (eta-0) (SystemC-45FFI-prim__free arg-2 eta-0))))))
(define SystemC-45FileC-45ReadWrite-getStringAndFree (lambda (arg-1 arg-2) (let ((sc0 (PreludeC-45EqOrd-u--C-47C-61_Eq_Int (PrimIO-prim__nullAnyPtr arg-2) (blodwen-toSignedInt 0 63)))) (cond ((equal? sc0 1) (SystemC-45FileC-45Error-returnError arg-1)) (else (let ((u--s (PreludeC-45IO-prim__getString arg-2))) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (SystemC-45FFI-free arg-1 arg-2)) (lambda (_-10507) (SystemC-45FileC-45Support-ok arg-1 u--s)))))))))))
(define SystemC-45FileC-45ReadWrite-fGetLine (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (SystemC-45FileC-45ReadWrite-prim__readLine arg-2 eta-0))))) (lambda (u--res) (SystemC-45FileC-45ReadWrite-getStringAndFree arg-1 u--res)))))))
(define DataC-45SnocList-u--cast_Cast_C-40SnocListC-32C-36aC-41_C-40ListC-32C-36aC-41 (lambda (arg-1) (PreludeC-45TypesC-45SnocList-C-60C-62C-62 arg-1 '())))
(define SystemC-45FileC-45ReadWrite-n--3709-1511-u--fReadC-39 (lambda (arg-1 arg-2 arg-4 arg-5 arg-6) (let ((e-1 (car arg-4))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (SystemC-45FileC-45ReadWrite-fEOF arg-4 arg-5)) (lambda (bind-0) (cond ((equal? bind-0 1) (let ((e-7 (car arg-4))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (vector 1 (PreludeC-45Types-fastConcat (DataC-45SnocList-u--cast_Cast_C-40SnocListC-32C-36aC-41_C-40ListC-32C-36aC-41 arg-6)))))))) (else (let ((e-7 (car arg-4))) (let ((e-9 (vector-ref e-7 1))) ((((e-9 'erased) 'erased) (SystemC-45FileC-45ReadWrite-fGetLine arg-4 arg-5)) (lambda (_-0) (case (vector-ref _-0 0) ((1) (let ((e-11 (vector-ref _-0 1))) (SystemC-45FileC-45ReadWrite-n--3709-1511-u--fReadC-39 arg-1 arg-2 arg-4 arg-5 (cons arg-6 e-11)))) (else (let ((e-11 (vector-ref _-0 1))) (let ((e-13 (car arg-4))) (let ((e-16 (vector-ref e-13 0))) (let ((e-18 (vector-ref e-16 1))) ((e-18 'erased) (vector 0 e-11))))))))))))))))))))
(define SystemC-45FileC-45ReadWrite-fRead (lambda (arg-1 arg-2) (SystemC-45FileC-45ReadWrite-n--3709-1511-u--fReadC-39 arg-1 arg-2 arg-1 arg-2 '())))
(define SystemC-45FileC-45Process-pclose (lambda (arg-1 arg-2) (let ((e-2 (cdr arg-1))) ((e-2 'erased) (lambda (eta-0) (SystemC-45FileC-45Process-prim__pclose arg-2 eta-0))))))
(define SystemC-45FileC-45Process-popen (lambda (arg-1 arg-2 arg-3) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (SystemC-45FileC-45Process-prim__popen arg-2 (SystemC-45FileC-45Mode-modeStr arg-3) eta-0))))) (lambda (u--ptr) (let ((sc1 (PreludeC-45EqOrd-u--C-47C-61_Eq_Int (PrimIO-prim__nullAnyPtr u--ptr) (blodwen-toSignedInt 0 63)))) (cond ((equal? sc1 1) (SystemC-45FileC-45Error-returnError arg-1)) (else (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (vector 1 u--ptr))))))))))))))
(define System-run (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (SystemC-45FileC-45Process-popen arg-1 arg-2 0)) (lambda (_-0) (case (vector-ref _-0 0) ((1) (let ((e-6 (vector-ref _-0 1))) (let ((e-8 (car arg-1))) (let ((e-10 (vector-ref e-8 1))) ((((e-10 'erased) 'erased) (SystemC-45FileC-45ReadWrite-fRead arg-1 e-6)) (lambda (_-1) (case (vector-ref _-1 0) ((1) (let ((e-12 (vector-ref _-1 1))) (let ((e-14 (car arg-1))) (let ((e-16 (vector-ref e-14 1))) ((((e-16 'erased) 'erased) (SystemC-45FileC-45Process-pclose arg-1 e-6)) (lambda (u--exitCode) (let ((e-19 (car arg-1))) (let ((e-22 (vector-ref e-19 0))) (let ((e-24 (vector-ref e-22 1))) ((e-24 'erased) (cons e-12 u--exitCode))))))))))) (else (let ((e-14 (car arg-1))) (let ((e-17 (vector-ref e-14 0))) (let ((e-19 (vector-ref e-17 1))) ((e-19 'erased) (cons "" 1))))))))))))) (else (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) (let ((e-13 (vector-ref e-11 1))) ((e-13 'erased) (cons "" 1)))))))))))))
(define PackC-45CoreC-45IO-sysRun (lambda (arg-1 arg-2) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (System-run (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (PackC-45CoreC-45Types-escapeCmd arg-2)) (lambda (_-0) (let ((e-2 (car _-0))) (let ((e-3 (cdr _-0))) (cond ((equal? e-3 0) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-7 (vector-ref e-1 0))) e-7)) e-2))(else (let ((e-1 (car arg-1))) (let ((e-7 (vector-ref e-1 0))) (let ((e-9 (vector-ref e-7 1))) ((e-9 'erased) (vector 0 (vector 7 arg-2 e-3))))))))))))))
(define PackC-45CoreC-45Git-gitLatest (lambda (arg-1 arg-2 arg-3) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) (lambda (eta-0) (Builtin-fst (DataC-45String-break (lambda (eta-1) (PreludeC-45Types-isSpace eta-1)) eta-0))) (PackC-45CoreC-45IO-sysRun arg-1 (vector 1 (lambda (eta-0) (vector 0 eta-0)) "git" (vector 1 (lambda (eta-0) (vector 0 eta-0)) "ls-remote" (vector 1 (lambda (eta-0) (vector 0 eta-0)) arg-2 (vector 1 (lambda (eta-0) (vector 0 eta-0)) arg-3 (vector 0 )))))))))
(define PackC-45CoreC-45GitC-45Consts-packDB "pack-db")
(define PreludeC-45Interfaces-when (lambda (arg-1 arg-2 arg-3) (cond ((equal? arg-2 1) (arg-3)) (else (let ((e-2 (vector-ref arg-1 1))) ((e-2 'erased) (vector 0 )))))))
(define PackC-45CoreC-45IO-rmDir (lambda (arg-1 arg-2) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (SystemC-45FileC-45Meta-exists (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 arg-2)) (lambda (bind-0) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) bind-0 (lambda () (PackC-45CoreC-45IO-sys arg-1 (vector 1 (lambda (eta-0) (vector 0 eta-0)) "rm" (vector 1 (lambda (eta-0) (vector 0 eta-0)) "-rf" (vector 1 csegen-249 arg-2 (vector 0 )))))))))))
(define PackC-45CoreC-45Git-checkout (lambda (arg-1 arg-2) (PackC-45CoreC-45IO-sys arg-1 (vector 1 (lambda (eta-0) (vector 0 eta-0)) "git" (vector 1 (lambda (eta-0) (vector 0 eta-0)) "checkout" (vector 1 (lambda (eta-0) (vector 0 eta-0)) "-q" (vector 1 (lambda (eta-0) (vector 0 eta-0)) arg-2 (vector 0 ))))))))
(define PackC-45CoreC-45Git-cloneRemote (lambda (arg-1 arg-2 arg-3) (PackC-45CoreC-45IO-sys arg-1 (vector 1 (lambda (eta-0) (vector 0 eta-0)) "git" (vector 1 (lambda (eta-0) (vector 0 eta-0)) "clone" (vector 1 (lambda (eta-0) (vector 0 eta-0)) "--depth" (vector 1 (lambda (eta-0) (vector 0 eta-0)) "1" (vector 1 (lambda (eta-0) (vector 0 eta-0)) "-q" (vector 1 (lambda (eta-0) (vector 0 eta-0)) arg-2 (vector 1 csegen-249 arg-3 (vector 0 )))))))))))
(define PackC-45CoreC-45Types-toRelPath (lambda (arg-0) (let ((eff-0 (DataC-45FilePath-u--fromString_FromString_FilePath arg-0))) (case (vector-ref eff-0 0) ((0) (let ((e-2 (vector-ref eff-0 1))) (vector 1 e-2))) (else (let ((e-3 (vector-ref eff-0 1))) (vector 1 e-3)))))))
(define PackC-45CoreC-45Types-case--cast-6224 (lambda (arg-0 arg-1) (if (null? arg-1) (PackC-45CoreC-45Types-toRelPath (PreludeC-45Types-fastPack arg-1)) (let ((e-1 (car arg-1))) (let ((e-2 (cdr arg-1))) (cond ((equal? e-1 #\h) (if (null? e-2) (PackC-45CoreC-45Types-toRelPath (PreludeC-45Types-fastPack arg-1)) (let ((e-4 (car e-2))) (let ((e-5 (cdr e-2))) (cond ((equal? e-4 #\t) (if (null? e-5) (PackC-45CoreC-45Types-toRelPath (PreludeC-45Types-fastPack arg-1)) (let ((e-7 (car e-5))) (let ((e-8 (cdr e-5))) (cond ((equal? e-7 #\t) (if (null? e-8) (PackC-45CoreC-45Types-toRelPath (PreludeC-45Types-fastPack arg-1)) (let ((e-10 (car e-8))) (let ((e-11 (cdr e-8))) (cond ((equal? e-10 #\p) (if (null? e-11) (PackC-45CoreC-45Types-toRelPath (PreludeC-45Types-fastPack arg-1)) (let ((e-13 (car e-11))) (let ((e-14 (cdr e-11))) (cond ((equal? e-13 #\s) (if (null? e-14) (PackC-45CoreC-45Types-toRelPath (PreludeC-45Types-fastPack arg-1)) (let ((e-16 (car e-14))) (let ((e-17 (cdr e-14))) (cond ((equal? e-16 #\:) (if (null? e-17) (PackC-45CoreC-45Types-toRelPath (PreludeC-45Types-fastPack arg-1)) (let ((e-19 (car e-17))) (let ((e-20 (cdr e-17))) (cond ((equal? e-19 #\/) (if (null? e-20) (PackC-45CoreC-45Types-toRelPath (PreludeC-45Types-fastPack arg-1)) (let ((e-22 (car e-20))) (let ((e-23 (cdr e-20))) (cond ((equal? e-22 #\/) (PackC-45CoreC-45Types-toRelPath (PreludeC-45Types-fastPack e-23)))(else (PackC-45CoreC-45Types-toRelPath (PreludeC-45Types-fastPack arg-1))))))))(else (PackC-45CoreC-45Types-toRelPath (PreludeC-45Types-fastPack arg-1))))))))(else (PackC-45CoreC-45Types-toRelPath (PreludeC-45Types-fastPack arg-1)))))))) ((equal? e-13 #\:) (if (null? e-14) (PackC-45CoreC-45Types-toRelPath (PreludeC-45Types-fastPack arg-1)) (let ((e-25 (car e-14))) (let ((e-26 (cdr e-14))) (cond ((equal? e-25 #\/) (if (null? e-26) (PackC-45CoreC-45Types-toRelPath (PreludeC-45Types-fastPack arg-1)) (let ((e-28 (car e-26))) (let ((e-29 (cdr e-26))) (cond ((equal? e-28 #\/) (PackC-45CoreC-45Types-toRelPath (PreludeC-45Types-fastPack e-29)))(else (PackC-45CoreC-45Types-toRelPath (PreludeC-45Types-fastPack arg-1))))))))(else (PackC-45CoreC-45Types-toRelPath (PreludeC-45Types-fastPack arg-1))))))))(else (PackC-45CoreC-45Types-toRelPath (PreludeC-45Types-fastPack arg-1))))))))(else (PackC-45CoreC-45Types-toRelPath (PreludeC-45Types-fastPack arg-1))))))))(else (PackC-45CoreC-45Types-toRelPath (PreludeC-45Types-fastPack arg-1))))))))(else (PackC-45CoreC-45Types-toRelPath (PreludeC-45Types-fastPack arg-1))))))))(else (PackC-45CoreC-45Types-toRelPath (PreludeC-45Types-fastPack arg-1)))))))))
(define PackC-45CoreC-45Types-u--cast_Cast_URL_C-40PathC-32RelC-41 (lambda (arg-0) (PackC-45CoreC-45Types-case--cast-6224 arg-0 (PreludeC-45Types-fastUnpack arg-0))))
(define PackC-45CoreC-45Git-cloneShared (lambda (arg-1 arg-2 arg-3 arg-4 arg-5) (let ((u--cache (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 arg-2 (PackC-45CoreC-45Types-toRelPath ".cache/git")) (PackC-45CoreC-45Types-u--cast_Cast_URL_C-40PathC-32RelC-41 arg-4)))) (let ((u--tmp (DataC-45FilePath-C-60C-47C-62 arg-3 (PackC-45CoreC-45Types-toRelPath arg-5)))) (PackC-45CoreC-45IO-sys arg-1 (vector 1 (lambda (eta-0) (vector 0 eta-0)) "git" (vector 1 (lambda (eta-0) (vector 0 eta-0)) "clone" (vector 1 (lambda (eta-0) (vector 0 eta-0)) "--shared" (vector 1 (lambda (eta-0) (vector 0 eta-0)) "-q" (vector 1 csegen-249 u--cache (vector 1 csegen-249 u--tmp (vector 0 ))))))))))))
(define PackC-45CoreC-45Git-fetch (lambda (arg-1 arg-2) (PackC-45CoreC-45IO-sys arg-1 (vector 1 (lambda (eta-0) (vector 0 eta-0)) "git" (vector 1 (lambda (eta-0) (vector 0 eta-0)) "fetch" (vector 1 (lambda (eta-0) (vector 0 eta-0)) "-q" (vector 1 (lambda (eta-0) (vector 0 eta-0)) "origin" (vector 1 (lambda (eta-0) (vector 0 eta-0)) arg-2 (vector 0 )))))))))
(define SystemC-45Directory-changeDir (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (SystemC-45Directory-prim__changeDir arg-2 eta-0))))) (lambda (u--ok) (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (PreludeC-45EqOrd-u--C-61C-61_Eq_Int u--ok (blodwen-toSignedInt 0 63))))))))))))
(define PackC-45CoreC-45IO-chgDir (lambda (arg-1 arg-2) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (SystemC-45Directory-changeDir (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 arg-2) '()))) (lambda (_-0) (cond ((equal? _-0 1) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (vector 0 ))) (else (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) (vector 0 (vector 8 arg-2))))))))))))
(define SystemC-45Directory-currentDir (lambda (arg-1) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (SystemC-45Directory-prim__currentDir eta-0))))) (lambda (u--res) (let ((sc1 (PreludeC-45EqOrd-u--C-47C-61_Eq_Int (PrimIO-prim__nullAnyPtr u--res) (blodwen-toSignedInt 0 63)))) (cond ((equal? sc1 1) (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) '()))))) (else (let ((u--s (PreludeC-45IO-prim__getString u--res))) (let ((e-7 (car arg-1))) (let ((e-9 (vector-ref e-7 1))) ((((e-9 'erased) 'erased) (SystemC-45FFI-free arg-1 u--res)) (lambda (_-10507) (let ((e-12 (car arg-1))) (let ((e-15 (vector-ref e-12 0))) (let ((e-17 (vector-ref e-15 1))) ((e-17 'erased) (box u--s)))))))))))))))))))
(define PackC-45CoreC-45IO-curDir (lambda (arg-1) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (SystemC-45Directory-currentDir (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953))))) (lambda (_-0) (if (null? _-0) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) (vector 0 (vector 0 )))))) (let ((e-1 (unbox _-0))) (let ((eff-0 (DataC-45FilePath-u--fromString_FromString_FilePath e-1))) (case (vector-ref eff-0 0) ((0) (let ((e-2 (vector-ref eff-0 1))) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-4 (car arg-1))) (let ((e-7 (vector-ref e-4 0))) e-7)) (vector 0 e-2)))) (else (let ((e-4 (car arg-1))) (let ((e-7 (vector-ref e-4 0))) (let ((e-9 (vector-ref e-7 1))) ((e-9 'erased) (vector 0 (vector 0 )))))))))))))))
(define PackC-45CoreC-45IO-finally (lambda (arg-3 arg-4 arg-5) (let ((e-2 (vector-ref arg-3 1))) ((((e-2 'erased) 'erased) arg-5) (lambda (u--res) (let ((e-5 (vector-ref arg-3 1))) ((((e-5 'erased) 'erased) (let ((e-9 (vector-ref arg-3 0))) (let ((e-12 (vector-ref e-9 0))) ((((e-12 'erased) 'erased) (lambda (eta-0) (vector 0 ))) arg-4)))) (lambda (_-10507) (let ((e-9 (vector-ref arg-3 0))) (let ((e-11 (vector-ref e-9 1))) ((e-11 'erased) u--res)))))))))))
(define PackC-45CoreC-45IO-inDir (lambda (arg-2 arg-3 arg-4) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) (PackC-45CoreC-45IO-curDir arg-2) (lambda (u--cur) (PackC-45CoreC-45IO-finally (let ((e-1 (car arg-2))) e-1) (PackC-45CoreC-45IO-chgDir arg-2 u--cur) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) (PackC-45CoreC-45IO-chgDir arg-2 arg-3) (lambda (_-10507) (arg-4 arg-3))))))))
(define PackC-45CoreC-45Git-withGit (lambda (arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((u--cache (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 arg-4 (PackC-45CoreC-45Types-toRelPath ".cache/git")) (PackC-45CoreC-45Types-u--cast_Cast_URL_C-40PathC-32RelC-41 arg-6)))) (let ((u--tmp (DataC-45FilePath-C-60C-47C-62 arg-3 (PackC-45CoreC-45Types-toRelPath arg-5)))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) (SystemC-45FileC-45Meta-exists (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-2 arg-12953)))) (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 u--tmp)) (lambda (_-0) (cond ((equal? _-0 0) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) (PackC-45CoreC-45IO-missing (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-2 arg-12953)))) u--cache) (lambda (bind-0) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) bind-0 (lambda () (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) (PackC-45CoreC-45IO-mkParentDir arg-2 u--cache) (lambda (_-10507) (PackC-45CoreC-45Git-cloneRemote arg-2 arg-6 u--cache))))))) (lambda (_-10507) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) (PackC-45CoreC-45IO-inDir arg-2 u--cache (lambda (_-6641) (PackC-45CoreC-45Git-fetch arg-2 arg-7))) (lambda (_-10508) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) (PackC-45CoreC-45IO-mkParentDir arg-2 u--tmp) (lambda (_-10509) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) (PackC-45CoreC-45Git-cloneShared arg-2 arg-4 arg-3 arg-6 arg-5) (lambda (_-10510) (PackC-45CoreC-45IO-inDir arg-2 u--tmp (lambda (u--d) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) (PackC-45CoreC-45Git-fetch arg-2 arg-7) (lambda (_-10511) (PackC-45CoreC-45Git-checkout arg-2 arg-7))) (lambda (_-10511) (arg-8 u--d)))))))))))))) (else (PackC-45CoreC-45IO-inDir arg-2 u--tmp arg-8)))))))))
(define PackC-45ConfigC-45Environment-updateDB (lambda (arg-1 arg-2 arg-3) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-rmDir arg-1 (DataC-45FilePath-C-60C-47C-62 arg-3 csegen-779)) (lambda (_-10507) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45Git-gitLatest arg-1 PackC-45CoreC-45GitC-45Consts-dbRepo "main") (lambda (u--commit) (PackC-45CoreC-45Git-withGit arg-1 arg-2 arg-3 PackC-45CoreC-45GitC-45Consts-packDB PackC-45CoreC-45GitC-45Consts-dbRepo u--commit (lambda (u--d) (PackC-45CoreC-45IO-copyDir arg-1 (DataC-45FilePath-C-60C-47C-62 u--d (vector 1 (cons '() (PreludeC-45Types-fastUnpack "collections")))) (DataC-45FilePath-C-60C-47C-62 arg-3 csegen-779))))))))))
(define PackC-45ConfigC-45Environment-defaultColl (lambda (arg-1 arg-2 arg-3) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-missing (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (DataC-45FilePath-C-60C-47C-62 arg-3 csegen-779)) (lambda (bind-0) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) bind-0 (lambda () (PackC-45ConfigC-45Environment-updateDB arg-1 arg-2 arg-3))))) (lambda (_-10507) (PackC-45ConfigC-45Environment-latestCollection arg-1 (DataC-45FilePath-C-60C-47C-62 arg-3 csegen-779))))))
(define DataC-45IORef-newIORef (lambda (arg-2 arg-3) (let ((e-1 (car arg-2))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-2))) ((e-6 'erased) (lambda (eta-0) (box arg-3))))) (lambda (u--m) (let ((e-7 (car arg-2))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) u--m))))))))))
(define PackC-45ConfigC-45Types-emptyCache (lambda (arg-1) (DataC-45IORef-newIORef arg-1 csegen-443)))
(define DataC-45Maybe-fromMaybe (lambda (arg-1 arg-2) (if (null? arg-2) (arg-1) (let ((e-2 (unbox arg-2))) e-2))))
(define PreludeC-45Num-u--div_Integral_Int (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Int arg-1 (blodwen-toSignedInt 0 63)))) (cond ((equal? sc0 0) (bs/ arg-0 arg-1 63))(else (blodwen-error-quit (string-append "ERROR: " "Unhandled input for Prelude.Num.case block in div at Prelude.Num:128:3--130:40")))))))
(define PreludeC-45Num-u--mod_Integral_Int (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Int arg-1 (blodwen-toSignedInt 0 63)))) (cond ((equal? sc0 0) (blodwen-euclidMod arg-0 arg-1))(else (blodwen-error-quit (string-append "ERROR: " "Unhandled input for Prelude.Num.case block in mod at Prelude.Num:131:3--133:40")))))))
(define PreludeC-45Types-countFrom (lambda (arg-1 arg-2) (cons arg-1 (lambda () (PreludeC-45Types-countFrom (arg-2 arg-1) arg-2)))))
(define PreludeC-45Types-takeUntil (lambda (arg-1 arg-2) (let ((e-1 (car arg-2))) (let ((e-2 (cdr arg-2))) (let ((sc1 (arg-1 e-1))) (cond ((equal? sc1 1) (cons e-1 '())) (else (cons e-1 (PreludeC-45Types-takeUntil arg-1 (e-2))))))))))
(define PreludeC-45Types-u--pure_Applicative_List (lambda (arg-1) (cons arg-1 '())))
(define PreludeC-45Types-u--rangeFromTo_Range_C-36a (lambda (arg-1 arg-2 arg-3) (let ((sc0 (let ((sc1 (Builtin-fst (Builtin-snd arg-1)))) (let ((e-2 (vector-ref sc1 1))) ((e-2 arg-2) arg-3))))) (cond ((equal? sc0 0) (PreludeC-45Types-takeUntil (lambda (arg-0) (let ((sc1 (Builtin-fst (Builtin-snd arg-1)))) (let ((e-6 (vector-ref sc1 5))) ((e-6 arg-0) arg-3)))) (PreludeC-45Types-countFrom arg-2 (lambda (arg-0) (let ((sc1 (Builtin-snd (Builtin-snd arg-1)))) (let ((e-1 (vector-ref sc1 0))) (let ((e-6 (vector-ref e-1 0))) ((e-6 arg-0) (let ((sc1 (Builtin-snd (Builtin-snd arg-1)))) (let ((e-9 (vector-ref sc1 0))) (let ((e-10 (vector-ref e-9 2))) (e-10 1)))))))))))) ((equal? sc0 1) (PreludeC-45Types-u--pure_Applicative_List arg-2)) (else (PreludeC-45Types-takeUntil (lambda (arg-0) (let ((sc1 (Builtin-fst (Builtin-snd arg-1)))) (let ((e-5 (vector-ref sc1 4))) ((e-5 arg-0) arg-3)))) (PreludeC-45Types-countFrom arg-2 (lambda (u--x) (let ((sc1 (Builtin-snd (Builtin-snd arg-1)))) (let ((e-3 (vector-ref sc1 2))) ((e-3 u--x) (let ((sc1 (Builtin-snd (Builtin-snd arg-1)))) (let ((e-6 (vector-ref sc1 0))) (let ((e-7 (vector-ref e-6 2))) (e-7 1)))))))))))))))
(define PreludeC-45Types-u--traverse_Traversable_List (lambda (arg-3 arg-4 arg-5) (if (null? arg-5) (let ((e-2 (vector-ref arg-3 1))) ((e-2 'erased) '())) (let ((e-2 (car arg-5))) (let ((e-3 (cdr arg-5))) (let ((e-4 (vector-ref arg-3 2))) ((((e-4 'erased) 'erased) (let ((e-6 (vector-ref arg-3 2))) ((((e-6 'erased) 'erased) (let ((e-10 (vector-ref arg-3 1))) ((e-10 'erased) csegen-114))) (arg-4 e-2)))) (PreludeC-45Types-u--traverse_Traversable_List arg-3 arg-4 e-3))))))))
(define System-getArgs (lambda (arg-1) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (System-prim__getArgCount eta-0))))) (lambda (u--n) (let ((sc1 (PreludeC-45EqOrd-u--C-62_Ord_Int u--n (blodwen-toSignedInt 0 63)))) (cond ((equal? sc1 1) (PreludeC-45Basics-flip (lambda (clam-0) (lambda (clam-1) (PreludeC-45Types-u--traverse_Traversable_List (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) e-10)) clam-0 clam-1))) (PreludeC-45Types-u--rangeFromTo_Range_C-36a (cons (vector csegen-94 (lambda (arg-6170) (lambda (arg-6173) (PreludeC-45Num-u--div_Integral_Int arg-6170 arg-6173))) (lambda (arg-6180) (lambda (arg-6183) (PreludeC-45Num-u--mod_Integral_Int arg-6180 arg-6183)))) (cons csegen-108 (vector csegen-94 (lambda (arg-5881) (bs- 0 arg-5881 63)) (lambda (arg-5887) (lambda (arg-5890) (bs- arg-5887 arg-5890 63)))))) 0 (bs- u--n 1 63)) (lambda (eta-0) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-1) (System-prim__getArg eta-0 eta-1))))))) (else (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) '())))))))))))))
(define System-getEnv (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (System-prim__getEnv arg-2 eta-0))))) (lambda (u--env) (let ((sc1 (PreludeC-45EqOrd-u--C-47C-61_Eq_Int (PrimIO-prim__nullAnyPtr u--env) (blodwen-toSignedInt 0 63)))) (cond ((equal? sc1 1) (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) '()))))) (else (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (box (PreludeC-45IO-prim__getString u--env)))))))))))))))
(define PackC-45CoreC-45TypesC-45CmdArgList-C-43C-43 (lambda (arg-0 arg-1) (case (vector-ref arg-0 0) ((0) arg-1) (else (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (vector 1 e-1 e-2 (PackC-45CoreC-45TypesC-45CmdArgList-C-43C-43 e-3 arg-1)))))))))
(define PackC-45ConfigC-45Environment-n--12412-4757-u--findCmd (lambda (arg-1 arg-2) (if (null? arg-2) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) (vector 0 ))))) (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (let ((e-6 (car e-2))) (let ((e-7 (cdr e-2))) (let ((e-1 (car arg-1))) (let ((e-8 (vector-ref e-1 1))) ((((e-8 'erased) 'erased) (System-system arg-1 (PackC-45CoreC-45Types-escapeCmd (vector 1 (lambda (eta-0) (vector 0 eta-0)) "type" (vector 1 (lambda (eta-0) (vector 0 eta-0)) e-6 (vector 1 (lambda (eta-0) eta-0) (vector 1 ">") (vector 1 (lambda (eta-0) (vector 0 eta-0)) "/dev/null" (vector 1 (lambda (eta-0) eta-0) (vector 1 "2>") (vector 1 (lambda (eta-0) (vector 0 eta-0)) "/dev/null" (vector 0 )))))))))) (lambda (_-0) (cond ((equal? _-0 0) (let ((e-11 (car arg-1))) (let ((e-14 (vector-ref e-11 0))) (let ((e-16 (vector-ref e-14 1))) ((e-16 'erased) (PackC-45CoreC-45TypesC-45CmdArgList-C-43C-43 (vector 1 (lambda (eta-0) (vector 0 eta-0)) e-6 (vector 0 )) e-7))))))(else (PackC-45ConfigC-45Environment-n--12412-4757-u--findCmd arg-1 e-3))))))))))))))
(define PackC-45ConfigC-45Environment-n--12412-4758-u--variants (lambda (arg-1) (cons (cons "stdbuf" csegen-762) (cons (cons "gstdbuf" csegen-762) '()))))
(define PackC-45ConfigC-45Environment-getLineBufferingCmd (lambda (arg-1) (PackC-45ConfigC-45Environment-n--12412-4757-u--findCmd arg-1 (PackC-45ConfigC-45Environment-n--12412-4758-u--variants arg-1))))
(define DataC-45FilePathC-45AbsPath-parse (lambda (arg-0) (let ((sc0 (PreludeC-45Types-fastUnpack arg-0))) (if (null? sc0) '() (let ((e-1 (car sc0))) (let ((e-2 (cdr sc0))) (cond ((equal? e-1 #\/) (let ((u--ps (DataC-45List-split csegen-365 e-2))) (PreludeC-45Types-u--map_Functor_Maybe (lambda (eta-0) (vector 0 (PreludeC-45TypesC-45SnocList-C-60C-62C-60 '() eta-0))) (PreludeC-45Types-u--traverse_Traversable_List csegen-374 (lambda (eta-0) (DataC-45FilePathC-45Body-fromChars eta-0)) (DataC-45List1-forget u--ps)))))(else '()))))))))
(define PreludeC-45Types-u--C-62C-62C-61_Monad_Maybe (lambda (arg-2 arg-3) (if (null? arg-2) '() (let ((e-2 (unbox arg-2))) (arg-3 e-2)))))
(define PackC-45ConfigC-45Environment-getEnvPath (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) ((((e-8 'erased) 'erased) (lambda (arg-0) (PreludeC-45Types-u--C-62C-62C-61_Monad_Maybe arg-0 (lambda (eta-0) (DataC-45FilePathC-45AbsPath-parse eta-0))))) (System-getEnv arg-1 arg-2)))))))
(define PackC-45ConfigC-45Environment-getPackDir (lambda (arg-1) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45ConfigC-45Environment-getEnvPath (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) "PACK_DIR") (lambda (_-0) (if (null? _-0) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45ConfigC-45Environment-getEnvPath (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) "HOME") (lambda (_-1) (if (null? _-1) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) (vector 0 (vector 1 )))))) (let ((e-2 (unbox _-1))) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) e-6)) (DataC-45FilePath-C-60C-47C-62 e-2 (vector 1 (cons '() (cons #\. csegen-27))))))))) (let ((e-2 (unbox _-0))) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) e-6)) e-2)))))))
(define DataC-45SortedMapC-45Dependent-treeLookup (lambda (arg-4 arg-5 arg-6) (case (vector-ref arg-6 0) ((0) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((sc1 (let ((e-1 (vector-ref arg-4 0))) (let ((e-12 (car e-1))) ((e-12 arg-5) e-3))))) (cond ((equal? sc1 1) (box (cons e-3 e-4))) (else '())))))) ((1) (let ((e-9 (vector-ref arg-6 1))) (let ((e-10 (vector-ref arg-6 2))) (let ((e-11 (vector-ref arg-6 3))) (let ((sc1 (let ((e-5 (vector-ref arg-4 4))) ((e-5 arg-5) e-10)))) (cond ((equal? sc1 1) (DataC-45SortedMapC-45Dependent-treeLookup arg-4 arg-5 e-9)) (else (DataC-45SortedMapC-45Dependent-treeLookup arg-4 arg-5 e-11)))))))) (else (let ((e-16 (vector-ref arg-6 1))) (let ((e-17 (vector-ref arg-6 2))) (let ((e-18 (vector-ref arg-6 3))) (let ((e-19 (vector-ref arg-6 4))) (let ((e-20 (vector-ref arg-6 5))) (let ((sc1 (let ((e-5 (vector-ref arg-4 4))) ((e-5 arg-5) e-17)))) (cond ((equal? sc1 1) (DataC-45SortedMapC-45Dependent-treeLookup arg-4 arg-5 e-16)) (else (let ((sc2 (let ((e-5 (vector-ref arg-4 4))) ((e-5 arg-5) e-19)))) (cond ((equal? sc2 1) (DataC-45SortedMapC-45Dependent-treeLookup arg-4 arg-5 e-18)) (else (DataC-45SortedMapC-45Dependent-treeLookup arg-4 arg-5 e-20))))))))))))))))
(define DataC-45SortedMapC-45Dependent-lookup (lambda (arg-2 arg-3) (case (vector-ref arg-3 0) ((0) '()) (else (let ((e-5 (vector-ref arg-3 1))) (let ((e-7 (vector-ref arg-3 3))) (DataC-45SortedMapC-45Dependent-treeLookup e-5 arg-2 e-7)))))))
(define DataC-45SortedMap-lookup (lambda (arg-2 ext-0) (PreludeC-45Types-u--map_Functor_Maybe (lambda (eta-0) (let ((e-3 (cdr eta-0))) e-3)) (DataC-45SortedMapC-45Dependent-lookup arg-2 ext-0))))
(define DataC-45SortedMapC-45Dependent-treeInsertC-39 (lambda (arg-4 arg-5 arg-6 arg-7) (case (vector-ref arg-7 0) ((0) (let ((e-3 (vector-ref arg-7 1))) (let ((e-4 (vector-ref arg-7 2))) (let ((sc1 (let ((e-2 (vector-ref arg-4 1))) ((e-2 arg-5) e-3)))) (cond ((equal? sc1 0) (vector 1 (cons (vector 0 arg-5 arg-6) (cons arg-5 (vector 0 e-3 e-4))))) ((equal? sc1 1) (vector 0 (vector 0 arg-5 arg-6))) (else (vector 1 (cons (vector 0 e-3 e-4) (cons e-3 (vector 0 arg-5 arg-6)))))))))) ((1) (let ((e-9 (vector-ref arg-7 1))) (let ((e-10 (vector-ref arg-7 2))) (let ((e-11 (vector-ref arg-7 3))) (let ((sc1 (let ((e-5 (vector-ref arg-4 4))) ((e-5 arg-5) e-10)))) (cond ((equal? sc1 1) (let ((sc2 (DataC-45SortedMapC-45Dependent-treeInsertC-39 arg-4 arg-5 arg-6 e-9))) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 (vector 1 e-2 e-10 e-11)))) (else (let ((e-5 (vector-ref sc2 1))) (let ((e-8 (car e-5))) (let ((e-12 (cdr e-5))) (let ((e-14 (car e-12))) (let ((e-13 (cdr e-12))) (vector 0 (vector 2 e-8 e-14 e-13 e-10 e-11))))))))))) (else (let ((sc2 (DataC-45SortedMapC-45Dependent-treeInsertC-39 arg-4 arg-5 arg-6 e-11))) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 (vector 1 e-9 e-10 e-2)))) (else (let ((e-5 (vector-ref sc2 1))) (let ((e-8 (car e-5))) (let ((e-12 (cdr e-5))) (let ((e-14 (car e-12))) (let ((e-13 (cdr e-12))) (vector 0 (vector 2 e-9 e-10 e-8 e-14 e-13))))))))))))))))) (else (let ((e-16 (vector-ref arg-7 1))) (let ((e-17 (vector-ref arg-7 2))) (let ((e-18 (vector-ref arg-7 3))) (let ((e-19 (vector-ref arg-7 4))) (let ((e-20 (vector-ref arg-7 5))) (let ((sc1 (let ((e-5 (vector-ref arg-4 4))) ((e-5 arg-5) e-17)))) (cond ((equal? sc1 1) (let ((sc2 (DataC-45SortedMapC-45Dependent-treeInsertC-39 arg-4 arg-5 arg-6 e-16))) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 (vector 2 e-2 e-17 e-18 e-19 e-20)))) (else (let ((e-5 (vector-ref sc2 1))) (let ((e-8 (car e-5))) (let ((e-9 (cdr e-5))) (let ((e-12 (car e-9))) (let ((e-13 (cdr e-9))) (vector 1 (cons (vector 1 e-8 e-12 e-13) (cons e-17 (vector 1 e-18 e-19 e-20))))))))))))) (else (let ((sc2 (let ((e-5 (vector-ref arg-4 4))) ((e-5 arg-5) e-19)))) (cond ((equal? sc2 1) (let ((sc3 (DataC-45SortedMapC-45Dependent-treeInsertC-39 arg-4 arg-5 arg-6 e-18))) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 (vector 2 e-16 e-17 e-2 e-19 e-20)))) (else (let ((e-5 (vector-ref sc3 1))) (let ((e-8 (car e-5))) (let ((e-9 (cdr e-5))) (let ((e-12 (car e-9))) (let ((e-13 (cdr e-9))) (vector 1 (cons (vector 1 e-16 e-17 e-8) (cons e-12 (vector 1 e-13 e-19 e-20))))))))))))) (else (let ((sc3 (DataC-45SortedMapC-45Dependent-treeInsertC-39 arg-4 arg-5 arg-6 e-20))) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 (vector 2 e-16 e-17 e-18 e-19 e-2)))) (else (let ((e-5 (vector-ref sc3 1))) (let ((e-8 (car e-5))) (let ((e-9 (cdr e-5))) (let ((e-12 (car e-9))) (let ((e-13 (cdr e-9))) (vector 1 (cons (vector 1 e-16 e-17 e-18) (cons e-19 (vector 1 e-8 e-12 e-13)))))))))))))))))))))))))))
(define DataC-45SortedMapC-45Dependent-treeInsert (lambda (arg-4 arg-5 arg-6 arg-7) (let ((sc0 (DataC-45SortedMapC-45Dependent-treeInsertC-39 arg-4 arg-5 arg-6 arg-7))) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((e-8 (car e-5))) (let ((e-9 (cdr e-5))) (let ((e-12 (car e-9))) (let ((e-13 (cdr e-9))) (vector 1 (vector 1 e-8 e-12 e-13))))))))))))
(define DataC-45SortedMapC-45Dependent-insert (lambda (arg-2 arg-3 arg-4) (case (vector-ref arg-4 0) ((0) (let ((e-2 (vector-ref arg-4 1))) (vector 1 e-2 0 (vector 0 arg-2 arg-3)))) (else (let ((e-5 (vector-ref arg-4 1))) (let ((e-6 (vector-ref arg-4 2))) (let ((e-7 (vector-ref arg-4 3))) (let ((sc1 (DataC-45SortedMapC-45Dependent-treeInsert e-5 arg-2 arg-3 e-7))) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 1 e-5 e-6 e-2))) (else (let ((e-8 (vector-ref sc1 1))) (vector 1 e-5 (+ e-6 1) e-8))))))))))))
(define DataC-45SortedMap-insert (lambda (arg-2 arg-3 ext-0) (DataC-45SortedMapC-45Dependent-insert arg-2 arg-3 ext-0)))
(define PreludeC-45Basics-uncurry (lambda (arg-3 arg-4) (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) ((arg-3 e-2) e-3)))))
(define DataC-45SortedMap-insertFrom (lambda (arg-3 ext-0 ext-1) (PreludeC-45Basics-flip (lambda (eta-0) (lambda (clam-0) (let ((e-2 (vector-ref arg-3 1))) (((((e-2 'erased) 'erased) (lambda (eta-1) (lambda (eta-2) (PreludeC-45Basics-flip (lambda (eta-3) (PreludeC-45Basics-uncurry (lambda (eta-4) (lambda (eta-5) (lambda (eta-6) (DataC-45SortedMap-insert eta-4 eta-5 eta-6)))) eta-3)) eta-1 eta-2)))) eta-0) clam-0)))) ext-0 ext-1)))
(define DataC-45SortedMapC-45Dependent-n--6844-6807-u--treeToListC-39 (lambda (arg-5 arg-6) (case (vector-ref arg-6 0) ((0) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (arg-5 (cons e-3 e-4))))) ((1) (let ((e-9 (vector-ref arg-6 1))) (let ((e-11 (vector-ref arg-6 3))) (DataC-45SortedMapC-45Dependent-n--6844-6807-u--treeToListC-39 (lambda (arg-0) (cons arg-0 (DataC-45SortedMapC-45Dependent-n--6844-6807-u--treeToListC-39 arg-5 e-11))) e-9)))) (else (let ((e-16 (vector-ref arg-6 1))) (let ((e-18 (vector-ref arg-6 3))) (let ((e-20 (vector-ref arg-6 5))) (DataC-45SortedMapC-45Dependent-n--6844-6807-u--treeToListC-39 (lambda (arg-0) (cons arg-0 (DataC-45SortedMapC-45Dependent-n--6844-6807-u--treeToListC-39 (lambda (arg-1) (cons arg-1 (DataC-45SortedMapC-45Dependent-n--6844-6807-u--treeToListC-39 arg-5 e-20))) e-18))) e-16))))))))
(define DataC-45SortedMapC-45Dependent-treeToList (lambda (ext-0) (DataC-45SortedMapC-45Dependent-n--6844-6807-u--treeToListC-39 (lambda (arg-0) (cons arg-0 '())) ext-0)))
(define DataC-45SortedMapC-45Dependent-toList (lambda (arg-2) (case (vector-ref arg-2 0) ((0) '()) (else (let ((e-7 (vector-ref arg-2 3))) (DataC-45SortedMapC-45Dependent-treeToList e-7))))))
(define DataC-45SortedMap-unDPair (lambda (arg-2) (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (cons e-2 e-3)))))
(define DataC-45SortedMap-toList (lambda (ext-0) (PreludeC-45TypesC-45List-mapAppend '() (lambda (eta-0) (DataC-45SortedMap-unDPair eta-0)) (DataC-45SortedMapC-45Dependent-toList ext-0))))
(define DataC-45SortedMap-n--3826-10932-u--inserted (lambda (arg-2 arg-3 arg-4) (PreludeC-45Types-listBind (DataC-45SortedMap-toList arg-2) (lambda (_-0) (let ((e-2 (car _-0))) (let ((e-3 (cdr _-0))) (let ((u--vC-39 ((PreludeC-45Types-maybe (lambda () (lambda (eta-0) eta-0)) (lambda () arg-4) (DataC-45SortedMap-lookup e-2 arg-3)) e-3))) (PreludeC-45Types-u--pure_Applicative_List (cons e-2 u--vC-39)))))))))
(define DataC-45SortedMap-mergeWith (lambda (arg-2 arg-3 arg-4) (DataC-45SortedMap-insertFrom csegen-197 (DataC-45SortedMap-n--3826-10932-u--inserted arg-4 arg-3 arg-2) arg-3)))
(define PackC-45ConfigC-45Types-mergeRight (lambda (ext-0 ext-1) (DataC-45SortedMap-mergeWith (lambda (_-12667) (lambda (u--v) u--v)) ext-0 ext-1)))
(define PackC-45DatabaseC-45Types-u--interpolate_Interpolation_CorePkg (lambda (arg-0) (cond ((equal? arg-0 0) "prelude") ((equal? arg-0 1) "base") ((equal? arg-0 2) "contrib") ((equal? arg-0 3) "linear") ((equal? arg-0 4) "network") ((equal? arg-0 5) "test") ((equal? arg-0 6) "papers") (else "idris2"))))
(define PackC-45DatabaseC-45Types-corePkgName (lambda (ext-0) (PackC-45DatabaseC-45Types-u--interpolate_Interpolation_CorePkg ext-0)))
(define PackC-45DatabaseC-45Types-corePkgs (cons 0 (cons 1 (cons 2 (cons 3 (cons 4 (cons 5 (cons 6 (cons 7 '())))))))))
(define DataC-45SortedMap-fromList (lambda (arg-2 ext-0) (PreludeC-45Basics-flip (lambda (eta-0) (lambda (eta-1) (DataC-45SortedMap-insertFrom csegen-197 eta-0 eta-1))) (DataC-45SortedMap-empty arg-2) ext-0)))
(define PackC-45ConfigC-45Types-pkgs (DataC-45SortedMap-fromList csegen-309 (PreludeC-45TypesC-45List-mapAppend '() (lambda (u--c) (cons (PackC-45DatabaseC-45Types-corePkgName u--c) (vector 2 u--c))) PackC-45DatabaseC-45Types-corePkgs)))
(define PackC-45ConfigC-45Types-allPackages (lambda (arg-0 arg-1) (let ((u--all (DataC-45Maybe-fromMaybe (lambda () csegen-443) (DataC-45SortedMap-lookup csegen-207 (let ((e-21 (vector-ref arg-0 19))) e-21))))) (let ((u--loc (DataC-45Maybe-fromMaybe (lambda () csegen-443) (DataC-45SortedMap-lookup (let ((e-2 (vector-ref arg-0 0))) e-2) (let ((e-21 (vector-ref arg-0 19))) e-21))))) (PackC-45ConfigC-45Types-mergeRight (PackC-45ConfigC-45Types-mergeRight (PackC-45ConfigC-45Types-mergeRight (let ((e-4 (vector-ref arg-1 3))) e-4) u--all) u--loc) PackC-45ConfigC-45Types-pkgs)))))
(define PreludeC-45Interfaces-C-42C-62 (lambda (arg-3 arg-4 arg-5) (let ((e-3 (vector-ref arg-3 2))) ((((e-3 'erased) 'erased) (((let ((eff-0 (let ((e-6 (vector-ref arg-3 0))) e-6))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) (lambda (eta-0) (lambda (eta-1) eta-1))) arg-4)) arg-5))))
(define PreludeC-45Interfaces-traverse_ (lambda (arg-4 arg-5 arg-6 ext-0) (let ((e-1 (vector-ref arg-5 0))) (((((e-1 'erased) 'erased) (lambda (eta-0) (lambda (eta-1) (PreludeC-45Interfaces-C-42C-62 arg-4 (arg-6 eta-0) eta-1)))) (let ((e-8 (vector-ref arg-4 1))) ((e-8 'erased) (vector 0 )))) ext-0))))
(define PackC-45CoreC-45IO-copyFile (lambda (arg-1 arg-2 arg-3) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-mkDir arg-1 (let ((e-1 (car arg-3))) e-1)) (lambda (_-10507) (PackC-45CoreC-45IO-sys arg-1 (vector 1 (lambda (eta-0) (vector 0 eta-0)) "cp" (vector 1 csegen-204 arg-2 (vector 1 csegen-204 arg-3 (vector 0 )))))))))
(define PackC-45DatabaseC-45Types-u--cast_Cast_CorePkg_Body (lambda (arg-0) (cond ((equal? arg-0 0) (cons #\p (cons #\r (cons #\e (cons #\l (cons #\u (cons #\d (cons #\e '())))))))) ((equal? arg-0 1) (cons #\b (cons #\a (cons #\s (cons #\e '()))))) ((equal? arg-0 2) (cons #\c (cons #\o (cons #\n (cons #\t (cons #\r csegen-267)))))) ((equal? arg-0 3) (cons #\l (cons #\i (cons #\n (cons #\e (cons #\a (cons #\r '()))))))) ((equal? arg-0 4) (cons #\n (cons #\e (cons #\t (cons #\w (cons #\o (cons #\r (cons #\k '())))))))) ((equal? arg-0 5) (cons #\t (cons #\e (cons #\s (cons #\t '()))))) ((equal? arg-0 6) (cons #\p (cons #\a (cons #\p (cons #\e (cons #\r (cons #\s '()))))))) (else csegen-224))))
(define PackC-45DatabaseC-45Types-coreIpkgFile (lambda (arg-0) (cond ((equal? arg-0 7) (PreludeC-45Types-fastUnpack "idris2api.ipkg"))(else (PreludeC-45TypesC-45List-tailRecAppend (PackC-45DatabaseC-45Types-u--cast_Cast_CorePkg_Body arg-0) csegen-242)))))
(define PackC-45ConfigC-45Environment-coreCachePath (lambda (arg-0 arg-1 arg-2) (cons (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 arg-0 csegen-826) (vector 1 (cons '() (PackC-45DatabaseC-45Types-u--cast_Cast_CorePkg_Body arg-2)))) (PackC-45CoreC-45Types-toRelPath (let ((e-2 (vector-ref arg-1 1))) e-2))) (PackC-45DatabaseC-45Types-coreIpkgFile arg-2))))
(define DataC-45FilePath-u--neutral_Monoid_C-40PathC-32RelC-41 (vector 1 '()))
(define PackC-45DatabaseC-45Types-coreIpkgPath (lambda (arg-0) (cond ((equal? arg-0 7) (cons DataC-45FilePath-u--neutral_Monoid_C-40PathC-32RelC-41 (PreludeC-45Types-fastUnpack "idris2api.ipkg")))(else (cons (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 DataC-45FilePath-u--neutral_Monoid_C-40PathC-32RelC-41 (vector 1 (cons '() (cons #\l (cons #\i (cons #\b (cons #\s '()))))))) (vector 1 (cons '() (PackC-45DatabaseC-45Types-u--cast_Cast_CorePkg_Body arg-0)))) (PackC-45DatabaseC-45Types-coreIpkgFile arg-0))))))
(define PreludeC-45Interfaces-for_ (lambda (arg-4 arg-5 ext-0 ext-1) (PreludeC-45Basics-flip (lambda (eta-0) (lambda (eta-1) (PreludeC-45Interfaces-traverse_ arg-4 arg-5 eta-0 eta-1))) ext-0 ext-1)))
(define PackC-45ConfigC-45Environment-cacheCoreIpkgFiles (lambda (arg-1 arg-2 arg-3) (PreludeC-45Interfaces-for_ (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) csegen-197 PackC-45DatabaseC-45Types-corePkgs (lambda (u--c) (PackC-45CoreC-45IO-copyFile arg-1 (let ((sc0 (PackC-45DatabaseC-45Types-coreIpkgPath u--c))) (let ((e-1 (car sc0))) (let ((e-2 (cdr sc0))) (cons (DataC-45FilePath-C-60C-47C-62 arg-3 e-1) e-2)))) (PackC-45ConfigC-45Environment-coreCachePath (let ((e-0 (vector-ref arg-2 0))) e-0) (let ((e-4 (vector-ref arg-2 4))) e-4) u--c))))))
(define PackC-45ConfigC-45Environment-ipkgCachePath (lambda (arg-0 arg-1 arg-2 ext-0) (let ((e-1 (car ext-0))) (let ((e-2 (cdr ext-0))) (cons (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 arg-0 csegen-826) (PackC-45CoreC-45Types-toRelPath arg-1)) (PackC-45CoreC-45Types-toRelPath arg-2)) e-1) e-2)))))
(define PackC-45CoreC-45IO-patch (lambda (arg-1 arg-2 arg-3) (PackC-45CoreC-45IO-sys arg-1 (vector 1 (lambda (eta-0) (vector 0 eta-0)) "patch" (vector 1 csegen-204 arg-2 (vector 1 csegen-204 arg-3 (vector 0 )))))))
(define PackC-45ConfigC-45Environment-patchesDir (lambda (arg-0) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 arg-0 csegen-779) (vector 1 (cons '() (cons #\p (cons #\a (cons #\t (cons #\c (cons #\h (cons #\e (cons #\s '()))))))))))))
(define PackC-45ConfigC-45Environment-patchFile (lambda (arg-0 arg-1 arg-2 arg-3) (let ((e-1 (car arg-3))) (let ((e-2 (cdr arg-3))) (cons (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (PackC-45ConfigC-45Environment-patchesDir arg-0) (vector 1 (cons '() (let ((e-27 (vector-ref arg-1 0))) e-27)))) (PackC-45CoreC-45Types-toRelPath arg-2)) e-1) (PreludeC-45TypesC-45List-tailRecAppend e-2 (cons #\. (cons #\p (cons #\a (cons #\t (cons #\c (cons #\h '()))))))))))))
(define PackC-45CoreC-45GitC-45Consts-compiler "idris2-compiler")
(define PackC-45ConfigC-45Environment-withCoreGit (lambda (arg-2 arg-3 ext-0) (PackC-45CoreC-45Git-withGit arg-2 (let ((e-1 (vector-ref arg-3 1))) e-1) (let ((e-0 (vector-ref arg-3 0))) e-0) PackC-45CoreC-45GitC-45Consts-compiler (let ((e-4 (vector-ref arg-3 4))) (let ((e-9 (vector-ref e-4 0))) e-9)) (let ((e-4 (vector-ref arg-3 4))) (let ((e-8 (vector-ref e-4 1))) e-8)) ext-0)))
(define PackC-45ConfigC-45Environment-cachePkg (lambda (arg-1 arg-2 arg-3 arg-4) (case (vector-ref arg-4 0) ((0) (let ((e-1 (vector-ref arg-4 1))) (let ((e-2 (vector-ref arg-4 2))) (let ((e-3 (vector-ref arg-4 3))) (let ((u--cache (PackC-45ConfigC-45Environment-ipkgCachePath (let ((e-0 (vector-ref arg-2 0))) e-0) arg-3 e-2 e-3))) (let ((u--tmpLoc (let ((e-7 (car e-3))) (let ((e-6 (cdr e-3))) (cons (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-12 (vector-ref arg-2 1))) e-12) (PackC-45CoreC-45Types-toRelPath arg-3)) e-7) e-6))))) (PackC-45CoreC-45Git-withGit arg-1 (let ((e-10 (vector-ref arg-2 1))) e-10) (let ((e-0 (vector-ref arg-2 0))) e-0) arg-3 e-1 e-2 (lambda (u--dir) (let ((u--pf (PackC-45ConfigC-45Environment-patchFile (let ((e-0 (vector-ref arg-2 0))) e-0) (let ((e-9 (vector-ref arg-2 2))) e-9) arg-3 e-3))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-7 (car arg-1))) e-7) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-7 (car arg-1))) e-7) (SystemC-45FileC-45Meta-exists (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-13 (vector-ref e-10 0))) e-13))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) e-10)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) e-10)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-7 (car arg-1))) e-7) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-7 (car arg-1))) e-7) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 (let ((e-7 (car u--pf))) (let ((e-6 (cdr u--pf))) (DataC-45FilePath-C-60C-47C-62 e-7 (vector 1 (cons '() e-6))))))) (lambda (bind-0) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-13 (vector-ref e-10 0))) e-13))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) e-10)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) e-10)) arg-9795 arg-9802)))))) bind-0 (lambda () (PackC-45CoreC-45IO-patch arg-1 u--tmpLoc u--pf))))) (lambda (_-10507) (PackC-45CoreC-45IO-copyFile arg-1 u--tmpLoc u--cache)))))))))))) ((1) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (vector 0 ))) (else (PackC-45ConfigC-45Environment-withCoreGit arg-1 arg-2 (lambda (eta-0) (PackC-45ConfigC-45Environment-cacheCoreIpkgFiles arg-1 arg-2 eta-0)))))))
(define PreludeC-45Types-prim__integerToNat (lambda (arg-0) (let ((sc0 (or (and (<= 0 arg-0) 1) 0))) (cond ((equal? sc0 0) 0)(else arg-0)))))
(define PreludeC-45TypesC-45String-length (lambda (arg-0) (PreludeC-45Types-prim__integerToNat (string-length arg-0))))
(define DataC-45List-replicateTR (lambda (arg-1 arg-2 arg-3) (cond ((equal? arg-2 0) arg-1)(else (let ((e-0 (- arg-2 1))) (DataC-45List-replicateTR (cons arg-3 arg-1) e-0 arg-3))))))
(define DataC-45String-replicate (lambda (arg-0 arg-1) (PreludeC-45Types-fastPack (DataC-45List-replicateTR '() arg-0 arg-1))))
(define DataC-45String-n--4017-7830-u--linesHelp (lambda (arg-0 arg-1 arg-2) (if (null? arg-1) (if (null? arg-2) '() (if (null? arg-2) (cons (PreludeC-45TypesC-45List-reverse arg-1) '()) (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (cond ((equal? e-2 (integer->char 10)) (cons (PreludeC-45TypesC-45List-reverse arg-1) (DataC-45String-n--4017-7830-u--linesHelp arg-0 '() e-3))) ((equal? e-2 (integer->char 13)) (if (null? e-3) (cons (PreludeC-45TypesC-45List-reverse arg-1) (DataC-45String-n--4017-7830-u--linesHelp arg-0 '() e-3)) (let ((e-5 (car e-3))) (let ((e-6 (cdr e-3))) (cond ((equal? e-5 (integer->char 10)) (cons (PreludeC-45TypesC-45List-reverse arg-1) (DataC-45String-n--4017-7830-u--linesHelp arg-0 '() e-6)))(else (cons (PreludeC-45TypesC-45List-reverse arg-1) (DataC-45String-n--4017-7830-u--linesHelp arg-0 '() e-3))))))))(else (DataC-45String-n--4017-7830-u--linesHelp arg-0 (cons e-2 arg-1) e-3))))))) (if (null? arg-2) (cons (PreludeC-45TypesC-45List-reverse arg-1) '()) (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (cond ((equal? e-2 (integer->char 10)) (cons (PreludeC-45TypesC-45List-reverse arg-1) (DataC-45String-n--4017-7830-u--linesHelp arg-0 '() e-3))) ((equal? e-2 (integer->char 13)) (if (null? e-3) (cons (PreludeC-45TypesC-45List-reverse arg-1) (DataC-45String-n--4017-7830-u--linesHelp arg-0 '() e-3)) (let ((e-5 (car e-3))) (let ((e-6 (cdr e-3))) (cond ((equal? e-5 (integer->char 10)) (cons (PreludeC-45TypesC-45List-reverse arg-1) (DataC-45String-n--4017-7830-u--linesHelp arg-0 '() e-6)))(else (cons (PreludeC-45TypesC-45List-reverse arg-1) (DataC-45String-n--4017-7830-u--linesHelp arg-0 '() e-3))))))))(else (DataC-45String-n--4017-7830-u--linesHelp arg-0 (cons e-2 arg-1) e-3)))))))))
(define DataC-45String-linesC-39 (lambda (arg-0) (DataC-45String-n--4017-7830-u--linesHelp arg-0 '() arg-0)))
(define DataC-45String-lines (lambda (arg-0) (PreludeC-45TypesC-45List-mapAppend '() (lambda (eta-0) (PreludeC-45Types-fastPack eta-0)) (DataC-45String-linesC-39 (PreludeC-45Types-fastUnpack arg-0)))))
(define PackC-45CoreC-45Logging-n--4804-1460-u--printMultilineIndented (lambda (arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 (DataC-45String-lines arg-9))) (if (null? sc0) (let ((e-2 (cdr arg-2))) ((e-2 'erased) (lambda (eta-0) (PreludeC-45IO-prim__putStr (string-append (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-1) eta-1) (cons arg-7 '())) "\u000a") eta-0)))) (let ((e-1 (car sc0))) (let ((e-2 (cdr sc0))) (let ((e-4 (car arg-2))) (let ((e-6 (vector-ref e-4 1))) ((((e-6 'erased) 'erased) (let ((e-8 (cdr arg-2))) ((e-8 'erased) (lambda (eta-0) (PreludeC-45IO-prim__putStr (string-append (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-1) eta-1) (cons arg-7 (cons e-1 '()))) "\u000a") eta-0))))) (lambda (_-10507) (PreludeC-45Interfaces-for_ (let ((e-9 (car arg-2))) (let ((e-12 (vector-ref e-9 0))) e-12)) csegen-197 e-2 (lambda (u--s) (let ((e-8 (cdr arg-2))) ((e-8 'erased) (lambda (eta-0) (PreludeC-45IO-prim__putStr (string-append (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-1) eta-1) (cons arg-8 (cons u--s '()))) "\u000a") eta-0))))))))))))))))
(define PackC-45CoreC-45Logging-printLogMessage (lambda (arg-2 arg-3 arg-4 arg-5 arg-6) (let ((u--prefx (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "[ " (cons (arg-3 arg-4) (cons " ] " '())))))) (let ((u--baseIndent (DataC-45String-replicate (PreludeC-45TypesC-45String-length u--prefx) #\ ))) (let ((e-1 (car arg-2))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (PackC-45CoreC-45Logging-n--4804-1460-u--printMultilineIndented arg-2 arg-3 arg-6 arg-5 arg-4 u--prefx u--baseIndent arg-5)) (lambda (_-10507) (PreludeC-45Interfaces-for_ (let ((e-7 (car arg-2))) (let ((e-10 (vector-ref e-7 0))) e-10)) csegen-197 arg-6 (lambda (eta-0) (PackC-45CoreC-45Logging-n--4804-1460-u--printMultilineIndented arg-2 arg-3 arg-6 arg-5 arg-4 (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-1) eta-1) (cons u--baseIndent (cons "- " '()))) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-1) eta-1) (cons u--baseIndent (cons "  " '()))) eta-0)))))))))))
(define PackC-45CoreC-45Types-llToNat (lambda (arg-0) (cond ((equal? arg-0 0) 0) ((equal? arg-0 1) 1) ((equal? arg-0 2) 2) ((equal? arg-0 3) 3) ((equal? arg-0 4) 4) (else 5))))
(define PreludeC-45EqOrd-u--C-60_Ord_Integer (lambda (arg-0 arg-1) (let ((sc0 (or (and (< arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-61C-61_Eq_Integer (lambda (arg-0 arg-1) (let ((sc0 (or (and (= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--compare_Ord_Integer (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-60_Ord_Integer arg-0 arg-1))) (cond ((equal? sc0 1) 0) (else (let ((sc1 (PreludeC-45EqOrd-u--C-61C-61_Eq_Integer arg-0 arg-1))) (cond ((equal? sc1 1) 1) (else 2))))))))
(define PackC-45CoreC-45Types-u--compare_Ord_LogLevel (lambda (ext-0 ext-1) (PreludeC-45Basics-on (lambda (eta-0) (lambda (eta-1) (PreludeC-45EqOrd-u--compare_Ord_Integer eta-0 eta-1))) (lambda (eta-0) (PackC-45CoreC-45Types-llToNat eta-0)) ext-0 ext-1)))
(define PackC-45CoreC-45Types-u--C-62C-61_Ord_LogLevel (lambda (arg-0 arg-1) (PreludeC-45EqOrd-u--C-47C-61_Eq_Ordering (PackC-45CoreC-45Types-u--compare_Ord_LogLevel arg-0 arg-1) 0)))
(define PackC-45CoreC-45Types-u--interpolate_Interpolation_LogLevel (lambda (arg-0) (cond ((equal? arg-0 0) "debug") ((equal? arg-0 1) "build") ((equal? arg-0 2) "info") ((equal? arg-0 3) "cache") ((equal? arg-0 4) "warning") (else ""))))
(define PackC-45CoreC-45Logging-log (lambda (arg-1 arg-2 arg-3 arg-4) (PreludeC-45Interfaces-when (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (PackC-45CoreC-45Types-u--C-62C-61_Ord_LogLevel arg-3 arg-2) (lambda () (PackC-45CoreC-45Logging-printLogMessage arg-1 (lambda (eta-0) (PackC-45CoreC-45Types-u--interpolate_Interpolation_LogLevel eta-0)) arg-3 (arg-4) '())))))
(define DataC-45String-padLeft (lambda (arg-0 arg-1 arg-2) (string-append (DataC-45String-replicate (PreludeC-45Types-prim__integerToNat (- arg-0 (PreludeC-45TypesC-45String-length arg-2))) arg-1) arg-2)))
(define DataC-45String-padRight (lambda (arg-0 arg-1 arg-2) (string-append arg-2 (DataC-45String-replicate (PreludeC-45Types-prim__integerToNat (- arg-0 (PreludeC-45TypesC-45String-length arg-2))) arg-1))))
(define PreludeC-45Show-firstCharIs (lambda (arg-0 arg-1) (cond ((equal? arg-1 "") 0)(else (arg-0 (string-ref arg-1 0))))))
(define PreludeC-45Show-showParens (lambda (arg-0 arg-1) (cond ((equal? arg-0 0) arg-1) (else (string-append "(" (string-append arg-1 ")"))))))
(define PreludeC-45Show-precCon (lambda (arg-0) (case (vector-ref arg-0 0) ((0) 0) ((1) 1) ((2) 2) ((3) 3) ((4) 4) ((5) 5) (else 6))))
(define PreludeC-45Show-u--compare_Ord_Prec (lambda (arg-0 arg-1) (case (vector-ref arg-0 0) ((4) (let ((e-0 (vector-ref arg-0 1))) (case (vector-ref arg-1 0) ((4) (let ((e-1 (vector-ref arg-1 1))) (PreludeC-45EqOrd-u--compare_Ord_Integer e-0 e-1)))(else (PreludeC-45EqOrd-u--compare_Ord_Integer (PreludeC-45Show-precCon arg-0) (PreludeC-45Show-precCon arg-1))))))(else (PreludeC-45EqOrd-u--compare_Ord_Integer (PreludeC-45Show-precCon arg-0) (PreludeC-45Show-precCon arg-1))))))
(define PreludeC-45Show-u--C-62C-61_Ord_Prec (lambda (arg-0 arg-1) (PreludeC-45EqOrd-u--C-47C-61_Eq_Ordering (PreludeC-45Show-u--compare_Ord_Prec arg-0 arg-1) 0)))
(define PreludeC-45Show-primNumShow (lambda (arg-1 arg-2 arg-3) (let ((u--str (arg-1 arg-3))) (PreludeC-45Show-showParens (let ((sc0 (PreludeC-45Show-u--C-62C-61_Ord_Prec arg-2 (vector 5 )))) (cond ((equal? sc0 1) (PreludeC-45Show-firstCharIs (lambda (arg-0) (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-0 #\-)) u--str)) (else 0))) u--str))))
(define PreludeC-45Show-u--showPrec_Show_Integer (lambda (ext-0 ext-1) (PreludeC-45Show-primNumShow (lambda (eta-0) (number->string eta-0)) ext-0 ext-1)))
(define PreludeC-45Show-u--show_Show_Integer (lambda (arg-0) (PreludeC-45Show-u--showPrec_Show_Integer (vector 0 ) arg-0)))
(define PreludeC-45Show-u--show_Show_Nat (lambda (arg-0) (PreludeC-45Show-u--show_Show_Integer arg-0)))
(define PackC-45ConfigC-45Environment-n--13066-5422-u--cacheInfo (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((u--line (DataC-45String-padRight arg-4 #\. (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Caching package info for " (cons arg-6 (cons " " '()))))))) (let ((u--stot (PreludeC-45Show-u--show_Show_Nat arg-3))) (let ((u--six (DataC-45String-padLeft (PreludeC-45TypesC-45String-length u--stot) #\  (PreludeC-45Show-u--show_Show_Nat arg-5)))) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons u--line (cons " (" (cons u--six (cons "/" (cons u--stot (cons ")" '()))))))))))))
(define PackC-45ConfigC-45Environment-n--13066-5423-u--doCache (lambda (arg-1 arg-2 arg-3 arg-4 arg-5) (let ((e-2 (car arg-5))) (let ((e-3 (cdr arg-5))) (let ((e-6 (car e-3))) (let ((e-7 (cdr e-3))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45Logging-log (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-9 (vector-ref e-1 0))) (let ((e-12 (vector-ref e-9 0))) e-12))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-9 (vector-ref e-1 0))) e-9)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-9 (vector-ref e-1 0))) e-9)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (let ((e-9 (vector-ref arg-2 2))) (let ((e-23 (vector-ref e-9 21))) e-23)) 3 (lambda () (PackC-45ConfigC-45Environment-n--13066-5422-u--cacheInfo arg-1 arg-2 arg-3 arg-4 e-2 e-6))) (lambda (_-10507) (PackC-45ConfigC-45Environment-cachePkg arg-1 arg-2 e-6 e-7)))))))))
(define PackC-45CoreC-45IO-fileMissing (lambda (arg-1 ext-0) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) ((((e-8 'erased) 'erased) csegen-456) (SystemC-45FileC-45Meta-exists arg-1 (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 (let ((e-10 (car ext-0))) (let ((e-9 (cdr ext-0))) (DataC-45FilePath-C-60C-47C-62 e-10 (vector 1 (cons '() e-9)))))))))))))
(define PackC-45ConfigC-45Environment-notCached (lambda (arg-1 arg-2 arg-3 arg-4) (case (vector-ref arg-4 0) ((0) (let ((e-2 (vector-ref arg-4 2))) (let ((e-3 (vector-ref arg-4 3))) (PackC-45CoreC-45IO-fileMissing arg-1 (PackC-45ConfigC-45Environment-ipkgCachePath (let ((e-0 (vector-ref arg-2 0))) e-0) arg-3 e-2 e-3))))) ((1) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-11 (vector-ref e-5 1))) ((e-11 'erased) 0))))) (else (let ((e-12 (vector-ref arg-4 1))) (PackC-45CoreC-45IO-fileMissing arg-1 (PackC-45ConfigC-45Environment-coreCachePath (let ((e-0 (vector-ref arg-2 0))) e-0) (let ((e-4 (vector-ref arg-2 4))) e-4) e-12)))))))
(define PreludeC-45Types-u--C-62_Ord_Nat (lambda (arg-0 arg-1) (PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering (PreludeC-45EqOrd-u--compare_Ord_Integer arg-0 arg-1) 2)))
(define PreludeC-45Types-u--max_Ord_Nat (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45Types-u--C-62_Ord_Nat arg-0 arg-1))) (cond ((equal? sc0 1) arg-0) (else arg-1)))))
(define PackC-45ConfigC-45Environment-n--13066-5421-u--needCaching (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (if (null? arg-6) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (cons arg-4 (cons arg-5 (PreludeC-45TypesC-45SnocList-C-60C-62C-62 arg-3 '())))) (let ((e-2 (car arg-6))) (let ((e-3 (cdr arg-6))) (let ((e-6 (car e-2))) (let ((e-7 (cdr e-2))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45ConfigC-45Environment-notCached (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-9 (vector-ref e-1 0))) (let ((e-12 (vector-ref e-9 0))) e-12))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-9 (vector-ref e-1 0))) e-9)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-9 (vector-ref e-1 0))) e-9)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) arg-2 e-6 e-7) (lambda (_-0) (cond ((equal? _-0 1) (let ((u--nC-39 (+ arg-4 1))) (let ((u--mlC-39 (PreludeC-45Types-u--max_Ord_Nat arg-5 (+ (PreludeC-45TypesC-45String-length e-6) 26)))) (PackC-45ConfigC-45Environment-n--13066-5421-u--needCaching arg-1 arg-2 (cons arg-3 (cons u--nC-39 (cons e-6 e-7))) u--nC-39 u--mlC-39 e-3)))) (else (PackC-45ConfigC-45Environment-n--13066-5421-u--needCaching arg-1 arg-2 arg-3 arg-4 arg-5 e-3))))))))))))
(define PackC-45ConfigC-45Environment-cachePkgs (lambda (arg-1 arg-2) (let ((u--pkgs (DataC-45SortedMap-toList (PackC-45ConfigC-45Types-allPackages (let ((e-2 (vector-ref arg-2 2))) e-2) (let ((e-4 (vector-ref arg-2 4))) e-4))))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45ConfigC-45Environment-n--13066-5421-u--needCaching arg-1 arg-2 '() 0 60 u--pkgs) (lambda (_-0) (let ((e-2 (car _-0))) (let ((e-3 (cdr _-0))) (cond ((equal? e-2 0) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-7 (vector-ref e-1 0))) e-7)) (vector 0 )))(else (let ((e-4 (- e-2 1))) (let ((e-7 (car e-3))) (let ((e-8 (cdr e-3))) (PreludeC-45Interfaces-traverse_ (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-10 (vector-ref e-1 0))) (let ((e-13 (vector-ref e-10 0))) e-13))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-10 (vector-ref e-1 0))) e-10)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-10 (vector-ref e-1 0))) e-10)) arg-9795 arg-9802)))))) csegen-197 (lambda (eta-0) (PackC-45ConfigC-45Environment-n--13066-5423-u--doCache arg-1 arg-2 (+ e-4 1) e-7 eta-0)) e-8)))))))))))))
(define PackC-45ConfigC-45Environment-dbFile (lambda (arg-0 arg-1) (cons (DataC-45FilePath-C-60C-47C-62 arg-0 csegen-779) (PreludeC-45TypesC-45List-tailRecAppend (let ((e-2 (vector-ref arg-1 0))) e-2) csegen-804))))
(define ControlC-45MonadC-45ErrorC-45Either-catchE (lambda (arg-4 arg-5 arg-6) (let ((e-2 (vector-ref arg-4 1))) ((((e-2 'erased) 'erased) arg-5) (lambda (eta-0) (PreludeC-45Types-either (lambda () (lambda (eta-1) (arg-6 eta-1))) (lambda () (lambda (eta-1) (let ((e-6 (vector-ref arg-4 0))) (let ((e-8 (vector-ref e-6 1))) ((e-8 'erased) (vector 1 eta-1)))))) eta-0))))))
(define ControlC-45MonadC-45ErrorC-45Interface-liftEither (lambda (arg-3 ext-0) (PreludeC-45Types-either (lambda () (lambda (clam-0) (let ((e-3 (vector-ref arg-3 1))) ((e-3 'erased) clam-0)))) (lambda () (lambda (eta-0) (let ((e-2 (vector-ref arg-3 0))) (let ((e-1 (vector-ref e-2 0))) (let ((e-8 (vector-ref e-1 1))) ((e-8 'erased) eta-0)))))) ext-0)))
(define LanguageC-45TOML-keyAtomStr (lambda (arg-0) (case (vector-ref arg-0 0) ((0) (let ((e-0 (vector-ref arg-0 1))) e-0)) (else (let ((e-1 (vector-ref arg-0 1))) e-1)))))
(define LanguageC-45TOML-keyParts (lambda (arg-0) (case (vector-ref arg-0 0) ((0) (let ((e-0 (vector-ref arg-0 1))) (cons (LanguageC-45TOML-keyAtomStr e-0) '()))) (else (let ((e-1 (vector-ref arg-0 1))) (DataC-45List1-u--map_Functor_List1 (lambda (eta-0) (LanguageC-45TOML-keyAtomStr eta-0)) e-1))))))
(define DataC-45SortedMap-mergeLeft (lambda (ext-0 ext-1) (DataC-45SortedMap-mergeWith (lambda (eta-0) (lambda (eta-1) eta-0)) ext-0 ext-1)))
(define DataC-45List-partition (lambda (arg-1 arg-2) (if (null? arg-2) (cons '() '()) (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (let ((sc1 (DataC-45List-partition arg-1 e-3))) (let ((e-5 (car sc1))) (let ((e-4 (cdr sc1))) (let ((sc2 (arg-1 e-2))) (cond ((equal? sc2 1) (cons (cons e-2 e-5) e-4)) (else (cons e-5 (cons e-2 e-4)))))))))))))
(define LanguageC-45TOML-cvalToVal (lambda (arg-0) (case (vector-ref arg-0 0) ((0) (let ((e-0 (vector-ref arg-0 1))) (vector 1 (vector 0 e-0)))) ((1) (let ((e-1 (vector-ref arg-0 1))) (vector 1 (vector 1 e-1)))) ((2) (let ((e-2 (vector-ref arg-0 1))) (vector 1 (vector 2 e-2)))) ((3) (let ((e-3 (vector-ref arg-0 1))) (vector 1 (vector 3 e-3)))) ((4) (let ((e-4 (vector-ref arg-0 1))) (let ((sc1 (PreludeC-45Basics-flip (lambda (clam-0) (lambda (clam-1) (PreludeC-45Types-u--traverse_Traversable_List (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (case (vector-ref arg-8743 0) ((0) (let ((e-2 (vector-ref arg-8743 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref arg-8743 1))) (vector 1 (u--func e-5))))))))) (lambda (u--a) (lambda (arg-9789) (vector 1 arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (case (vector-ref arg-9795 0) ((0) (let ((e-2 (vector-ref arg-9795 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref arg-9795 1))) (case (vector-ref arg-9802 0) ((1) (let ((e-8 (vector-ref arg-9802 1))) (vector 1 (e-5 e-8)))) (else (let ((e-11 (vector-ref arg-9802 1))) (vector 0 e-11)))))))))))) clam-0 clam-1))) e-4 (lambda (eta-0) (LanguageC-45TOML-cvalToVal eta-0))))) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (vector 1 (vector 4 e-5)))))))) (else (let ((e-5 (vector-ref arg-0 1))) (let ((sc1 (LanguageC-45TOML-tableFromKVs e-5))) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc1 1))) (vector 1 (vector 5 e-6)))))))))))
(define LanguageC-45TOML-case--tableSetWithParts-5794 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (if (null? arg-5) (vector 1 csegen-43) (let ((e-2 (unbox arg-5))) (case (vector-ref e-2 0) ((5) (let ((e-3 (vector-ref e-2 1))) (vector 1 e-3)))(else (vector 0 (vector 0 arg-0 e-2))))))))
(define LanguageC-45TOML-tableSetWithParts (lambda (arg-0 arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-2 (cdr arg-1))) (if (null? e-2) (vector 1 (DataC-45SortedMap-insert e-1 arg-2 arg-0)) (let ((e-5 (car e-2))) (let ((e-6 (cdr e-2))) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (LanguageC-45TOML-case--tableSetWithParts-5794 e-1 e-5 e-6 arg-2 arg-0 (DataC-45SortedMap-lookup e-1 arg-0)) (lambda (u--inner) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (LanguageC-45TOML-tableSetWithParts u--inner (cons e-5 e-6) arg-2) (lambda (u--innerC-39) (vector 1 (DataC-45SortedMap-insert e-1 (vector 5 u--innerC-39) arg-0)))))))))))))
(define LanguageC-45TOML-n--4359-5907-u--loop (lambda (arg-0 arg-1 arg-2) (if (null? arg-2) (vector 1 arg-1) (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (let ((e-6 (car e-2))) (let ((e-7 (cdr e-2))) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (LanguageC-45TOML-cvalToVal e-7) (lambda (u--vC-39) (let ((u--parts (LanguageC-45TOML-keyParts e-6))) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (LanguageC-45TOML-tableSetWithParts arg-1 u--parts u--vC-39) (lambda (u--tC-39) (LanguageC-45TOML-n--4359-5907-u--loop arg-0 u--tC-39 e-3)))))))))))))
(define LanguageC-45TOML-tableFromKVs (lambda (arg-0) (LanguageC-45TOML-n--4359-5907-u--loop arg-0 csegen-43 arg-0)))
(define DataC-45List1-u--C-61C-61_Eq_C-40List1C-32C-36aC-41 (lambda (arg-1 arg-2 arg-3) (let ((e-1 (car arg-2))) (let ((e-2 (cdr arg-2))) (let ((e-4 (car arg-3))) (let ((e-5 (cdr arg-3))) (let ((sc2 (let ((e-6 (car arg-1))) ((e-6 e-1) e-4)))) (cond ((equal? sc2 1) (PreludeC-45Types-u--C-61C-61_Eq_C-40ListC-32C-36aC-41 arg-1 e-2 e-5)) (else 0)))))))))
(define LanguageC-45TOML-u--C-61C-61_Eq_CKey (lambda (arg-0 arg-1) (DataC-45List1-u--C-61C-61_Eq_C-40List1C-32C-36aC-41 csegen-34 (LanguageC-45TOML-keyParts arg-0) (LanguageC-45TOML-keyParts arg-1))))
(define LanguageC-45TOML-extendFile (lambda (arg-0 arg-1) (if (null? arg-1) (vector 1 arg-0) (let ((e-2 (car arg-1))) (let ((e-3 (cdr arg-1))) (let ((e-6 (car e-2))) (let ((e-7 (cdr e-2))) (case (vector-ref e-6 0) ((0) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (LanguageC-45TOML-tableFromKVs e-7) (lambda (u--tab) (LanguageC-45TOML-extendFile (DataC-45SortedMap-mergeLeft u--tab arg-0) e-3)))) ((1) (let ((e-8 (vector-ref e-6 1))) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (LanguageC-45TOML-tableFromKVs e-7) (lambda (u--tab) (let ((u--kParts (LanguageC-45TOML-keyParts e-8))) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (LanguageC-45TOML-tableSetWithParts arg-0 u--kParts (vector 5 u--tab)) (lambda (u--fileC-39) (LanguageC-45TOML-extendFile u--fileC-39 e-3)))))))) (else (let ((e-9 (vector-ref e-6 1))) (let ((u--rest (cons (cons (vector 2 e-9) e-7) e-3))) (let ((sc3 (DataC-45List-partition (lambda (lamc-0) (let ((e-5 (car lamc-0))) (case (vector-ref e-5 0) ((2) (let ((e-0 (vector-ref e-5 1))) (LanguageC-45TOML-u--C-61C-61_Eq_CKey e-9 e-0)))(else 0)))) u--rest))) (let ((e-5 (car sc3))) (let ((e-4 (cdr sc3))) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (PreludeC-45Types-u--traverse_Traversable_List (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (case (vector-ref arg-8743 0) ((0) (let ((e-8 (vector-ref arg-8743 1))) (vector 0 e-8))) (else (let ((e-8 (vector-ref arg-8743 1))) (vector 1 (u--func e-8))))))))) (lambda (u--a) (lambda (arg-9789) (vector 1 arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (case (vector-ref arg-9795 0) ((0) (let ((e-8 (vector-ref arg-9795 1))) (vector 0 e-8))) (else (let ((e-8 (vector-ref arg-9795 1))) (case (vector-ref arg-9802 0) ((1) (let ((e-10 (vector-ref arg-9802 1))) (vector 1 (e-8 e-10)))) (else (let ((e-11 (vector-ref arg-9802 1))) (vector 0 e-11)))))))))))) (lambda (eta-0) (let ((sc4 (LanguageC-45TOML-tableFromKVs eta-0))) (case (vector-ref sc4 0) ((0) (let ((e-8 (vector-ref sc4 1))) (vector 0 e-8))) (else (let ((e-8 (vector-ref sc4 1))) (vector 1 (vector 5 e-8))))))) (PreludeC-45TypesC-45List-mapAppend '() (lambda (eta-0) (Builtin-snd eta-0)) e-5)) (lambda (u--arrayC-39) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (LanguageC-45TOML-tableSetWithParts arg-0 (LanguageC-45TOML-keyParts e-9) (vector 4 u--arrayC-39)) (lambda (u--fileC-39) (LanguageC-45TOML-extendFile u--fileC-39 e-4)))))))))))))))))))
(define DataC-45Maybe-isJust (lambda (arg-1) (if (null? arg-1) 0 1)))
(define TextC-45LexerC-45Core-scan (lambda (arg-1 arg-2 arg-3) (case (vector-ref arg-1 0) ((0) (box (cons arg-2 arg-3))) ((1) '()) ((2) (let ((e-2 (vector-ref arg-1 1))) (let ((e-3 (vector-ref arg-1 2))) (let ((sc1 (PreludeC-45EqOrd-u--C-61C-61_Eq_Bool (DataC-45Maybe-isJust (TextC-45LexerC-45Core-scan e-3 arg-2 arg-3)) e-2))) (cond ((equal? sc1 1) (box (cons arg-2 arg-3))) (else '())))))) ((3) (let ((e-4 (vector-ref arg-1 1))) (if (null? arg-3) '() (let ((e-21 (car arg-3))) (let ((e-22 (cdr arg-3))) (let ((sc2 (e-4 e-21))) (cond ((equal? sc2 1) (box (cons (cons e-21 arg-2) e-22))) (else '())))))))) ((4) (let ((e-6 (vector-ref arg-1 1))) (let ((e-7 (vector-ref arg-1 2))) (PreludeC-45Types-u--C-62C-62C-61_Monad_Maybe (TextC-45LexerC-45Core-scan e-6 arg-2 arg-3) (lambda (_-0) (let ((e-2 (car _-0))) (let ((e-3 (cdr _-0))) (TextC-45LexerC-45Core-scan (e-7) e-2 e-3)))))))) ((5) (let ((e-10 (vector-ref arg-1 1))) (let ((e-11 (vector-ref arg-1 2))) (PreludeC-45Types-u--C-62C-62C-61_Monad_Maybe (TextC-45LexerC-45Core-scan e-10 arg-2 arg-3) (lambda (_-0) (let ((e-2 (car _-0))) (let ((e-3 (cdr _-0))) (TextC-45LexerC-45Core-scan e-11 e-2 e-3)))))))) ((6) (let ((e-13 (vector-ref arg-1 1))) (let ((e-14 (vector-ref arg-1 2))) (PreludeC-45Types-u--C-62C-62C-61_Monad_Maybe (TextC-45LexerC-45Core-scan e-13 arg-2 arg-3) (lambda (_-0) (let ((e-2 (car _-0))) (let ((e-3 (cdr _-0))) (TextC-45LexerC-45Core-scan e-14 e-2 e-3)))))))) (else (let ((e-17 (vector-ref arg-1 1))) (let ((e-18 (vector-ref arg-1 2))) (PreludeC-45Types-maybe (lambda () (TextC-45LexerC-45Core-scan e-18 arg-2 arg-3)) (lambda () (lambda (eta-0) (box eta-0))) (TextC-45LexerC-45Core-scan e-17 arg-2 arg-3))))))))
(define PreludeC-45TypesC-45List-lengthPlus (lambda (arg-1 arg-2) (if (null? arg-2) arg-1 (let ((e-3 (cdr arg-2))) (PreludeC-45TypesC-45List-lengthPlus (+ arg-1 1) e-3)))))
(define PreludeC-45TypesC-45List-lengthTR (lambda (ext-0) (PreludeC-45TypesC-45List-lengthPlus 0 ext-0)))
(define TextC-45LexerC-45Core-n--3836-2499-u--countNLs (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (PreludeC-45TypesC-45List-lengthTR (PreludeC-45TypesC-45List-filterAppend '() csegen-357 arg-7))))
(define TextC-45LexerC-45Core-n--3836-2500-u--getCols (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 (DataC-45List-span csegen-356 arg-7))) (let ((e-2 (car sc0))) (let ((e-3 (cdr sc0))) (if (null? e-3) (bs+ arg-8 (blodwen-toSignedInt (PreludeC-45TypesC-45List-lengthTR e-2) 63) 63) (blodwen-toSignedInt (PreludeC-45TypesC-45List-lengthTR e-2) 63)))))))
(define TextC-45LexerC-45Core-case--tokeniseC-44getFirstToken-2634 (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (if (null? arg-11) (TextC-45LexerC-45Core-n--3836-2501-u--getFirstToken arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-9 arg-10) (let ((e-1 (unbox arg-11))) (let ((e-5 (car e-1))) (let ((e-6 (cdr e-1))) (let ((u--lineC-39 (bs+ arg-5 (blodwen-toSignedInt (TextC-45LexerC-45Core-n--3836-2499-u--countNLs arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 e-5) 63) 63))) (let ((u--colC-39 (TextC-45LexerC-45Core-n--3836-2500-u--getCols arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 e-5 arg-4))) (box (cons (vector (arg-8 (PreludeC-45Types-fastPack (PreludeC-45TypesC-45List-reverse e-5))) 0 (vector arg-5 arg-4 u--lineC-39 u--colC-39)) (cons u--lineC-39 (cons u--colC-39 e-6))))))))))))
(define TextC-45LexerC-45Core-n--3836-2501-u--getFirstToken (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (if (null? arg-7) '() (let ((e-2 (car arg-7))) (let ((e-3 (cdr arg-7))) (let ((e-6 (car e-2))) (let ((e-7 (cdr e-2))) (TextC-45LexerC-45Core-case--tokeniseC-44getFirstToken-2634 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 e-6 e-7 e-3 arg-8 (TextC-45LexerC-45Core-scan e-6 '() arg-8)))))))))
(define TextC-45LexerC-45Core-case--tokenise-2724 (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (if (null? arg-7) (cons (PreludeC-45TypesC-45List-reverse arg-3) (cons arg-5 (cons arg-4 arg-1))) (let ((e-1 (unbox arg-7))) (let ((e-5 (car e-1))) (let ((e-6 (cdr e-1))) (let ((e-9 (car e-6))) (let ((e-10 (cdr e-6))) (let ((e-13 (car e-10))) (let ((e-14 (cdr e-10))) (let ((sc4 (arg-6 (let ((e-4 (vector-ref e-5 0))) e-4)))) (cond ((equal? sc4 1) (cons (PreludeC-45TypesC-45List-reverse arg-3) (cons arg-5 (cons arg-4 '())))) (else (TextC-45LexerC-45Core-tokenise arg-6 e-9 e-13 (cons e-5 arg-3) arg-2 e-14))))))))))))))
(define TextC-45LexerC-45Core-tokenise (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (TextC-45LexerC-45Core-case--tokenise-2724 arg-6 arg-5 arg-4 arg-3 arg-2 arg-1 (TextC-45LexerC-45Core-n--3836-2501-u--getFirstToken arg-6 arg-5 arg-4 arg-3 arg-2 arg-1 arg-5 arg-6))))
(define TextC-45LexerC-45Core-lex (lambda (arg-1 arg-2) (let ((sc0 (TextC-45LexerC-45Core-tokenise (lambda (eta-0) 0) 0 0 '() arg-1 (PreludeC-45Types-fastUnpack arg-2)))) (let ((e-2 (car sc0))) (let ((e-3 (cdr sc0))) (let ((e-6 (car e-3))) (let ((e-7 (cdr e-3))) (let ((e-10 (car e-7))) (let ((e-11 (cdr e-7))) (cons e-2 (cons e-6 (cons e-10 (PreludeC-45Types-fastPack e-11)))))))))))))
(define TextC-45Lexer-alphaNum (TextC-45LexerC-45Core-pred (lambda (eta-0) (PreludeC-45Types-isAlphaNum eta-0))))
(define LanguageC-45TOMLC-45Lexer-bareKey (TextC-45Lexer-some (TextC-45LexerC-45Core-C-60C-124C-62 TextC-45Lexer-alphaNum (TextC-45LexerC-45Core-C-60C-124C-62 (TextC-45Lexer-is #\_) (TextC-45Lexer-is #\-)))))
(define TextC-45Lexer-any (TextC-45LexerC-45Core-pred (lambda (eta-0) 1)))
(define TextC-45Lexer-escape (lambda (arg-0 arg-1) (vector 4 arg-0 (lambda () arg-1))))
(define TextC-45Lexer-isNot (lambda (arg-0) (TextC-45LexerC-45Core-pred (lambda (arg-1) (PreludeC-45EqOrd-u--C-47C-61_Eq_Char arg-1 arg-0)))))
(define TextC-45LexerC-45Core-reject (lambda (ext-0) (vector 2 0 ext-0)))
(define TextC-45Lexer-manyUntil (lambda (arg-1 arg-2) (TextC-45Lexer-many (vector 5 (TextC-45LexerC-45Core-reject arg-1) arg-2))))
(define TextC-45Lexer-manyThen (lambda (arg-1 arg-2) (vector 5 (TextC-45Lexer-manyUntil arg-1 arg-2) arg-1)))
(define TextC-45Lexer-surround (lambda (arg-0 arg-1 arg-2) (vector 4 arg-0 (lambda () (TextC-45Lexer-manyThen arg-1 arg-2)))))
(define TextC-45Lexer-quote (lambda (arg-0 arg-1) (TextC-45Lexer-surround arg-0 arg-0 arg-1)))
(define LanguageC-45TOMLC-45Lexer-basicStringLit (TextC-45Lexer-quote (TextC-45Lexer-is #\") (TextC-45LexerC-45Core-C-60C-124C-62 (TextC-45Lexer-escape (TextC-45Lexer-is #\\) TextC-45Lexer-any) (TextC-45Lexer-isNot #\\))))
(define TextC-45LexerC-45Core-concatMap (lambda (arg-2 arg-3) (if (null? arg-3) (vector 0 ) (let ((e-2 (car arg-3))) (let ((e-3 (cdr arg-3))) (if (null? e-3) (arg-2 e-2) (vector 6 (arg-2 e-2) (TextC-45LexerC-45Core-concatMap arg-2 e-3))))))))
(define TextC-45LexerC-45Core-fail (vector 1 ))
(define TextC-45Lexer-exact (lambda (arg-0) (let ((sc0 (PreludeC-45Types-fastUnpack arg-0))) (if (null? sc0) TextC-45LexerC-45Core-fail (let ((e-2 (car sc0))) (let ((e-3 (cdr sc0))) (TextC-45LexerC-45Core-concatMap (lambda (eta-0) (TextC-45Lexer-is eta-0)) (cons e-2 e-3))))))))
(define TextC-45Lexer-digits (TextC-45Lexer-some TextC-45Lexer-digit))
(define PreludeC-45Types-toUpper (lambda (arg-0) (let ((sc0 (PreludeC-45Types-isLower arg-0))) (cond ((equal? sc0 1) (cast-int-char (bs- (cast-char-boundedInt arg-0 63) 32 63))) (else arg-0)))))
(define TextC-45Lexer-like (lambda (arg-0) (TextC-45LexerC-45Core-pred (lambda (u--y) (PreludeC-45EqOrd-u--C-61C-61_Eq_Char (PreludeC-45Types-toUpper arg-0) (PreludeC-45Types-toUpper u--y))))))
(define TextC-45Lexer-range (lambda (arg-0 arg-1) (TextC-45LexerC-45Core-pred (lambda (u--x) (let ((sc0 (PreludeC-45EqOrd-u--C-62C-61_Ord_Char u--x (PreludeC-45EqOrd-u--min_Ord_Char arg-0 arg-1)))) (cond ((equal? sc0 1) (PreludeC-45EqOrd-u--C-60C-61_Ord_Char u--x (PreludeC-45EqOrd-u--max_Ord_Char arg-0 arg-1))) (else 0)))))))
(define LanguageC-45TOMLC-45Lexer-nonZeroDigit (TextC-45Lexer-range #\1 #\9))
(define LanguageC-45TOMLC-45Lexer-floatLit (let ((u--sign (TextC-45Lexer-oneOf "+-"))) (let ((u--whole (TextC-45LexerC-45Core-C-60C-124C-62 (TextC-45Lexer-is #\0) (vector 4 LanguageC-45TOMLC-45Lexer-nonZeroDigit (lambda () csegen-581))))) (let ((u--frac (vector 4 (vector 4 (TextC-45Lexer-is #\.) (lambda () TextC-45Lexer-digit)) (lambda () csegen-581)))) (let ((u--exp (vector 4 (vector 4 (TextC-45Lexer-like #\e) (lambda () csegen-566)) (lambda () TextC-45Lexer-digits)))) (let ((u--constant (TextC-45LexerC-45Core-C-60C-124C-62 (TextC-45Lexer-exact "nan") (TextC-45Lexer-exact "inf")))) (vector 5 (TextC-45Lexer-opt u--sign) (TextC-45LexerC-45Core-C-60C-124C-62 (vector 4 u--whole (lambda () (TextC-45LexerC-45Core-C-60C-124C-62 (vector 4 u--frac (lambda () (TextC-45Lexer-opt u--exp))) u--exp))) u--constant))))))))
(define TextC-45Lexer-binDigit (TextC-45LexerC-45Core-pred (lambda (u--c) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char u--c #\0))) (cond ((equal? sc0 1) 1) (else (PreludeC-45EqOrd-u--C-61C-61_Eq_Char u--c #\1)))))))
(define TextC-45Lexer-hexDigit (TextC-45LexerC-45Core-pred (lambda (eta-0) (PreludeC-45Types-isHexDigit eta-0))))
(define PreludeC-45Types-isOctDigit (lambda (arg-0) (let ((sc0 (PreludeC-45EqOrd-u--C-62C-61_Ord_Char arg-0 #\0))) (cond ((equal? sc0 1) (PreludeC-45EqOrd-u--C-60C-61_Ord_Char arg-0 #\7)) (else 0)))))
(define TextC-45Lexer-octDigit (TextC-45LexerC-45Core-pred (lambda (eta-0) (PreludeC-45Types-isOctDigit eta-0))))
(define LanguageC-45TOMLC-45Lexer-sepBaseLit (lambda (arg-0 arg-1) (vector 4 (vector 4 (TextC-45Lexer-exact arg-0) (lambda () arg-1)) (lambda () (TextC-45Lexer-many (vector 5 csegen-571 arg-1))))))
(define LanguageC-45TOMLC-45Lexer-sepIntLit (vector 4 (vector 5 csegen-566 LanguageC-45TOMLC-45Lexer-nonZeroDigit) (lambda () (TextC-45Lexer-many (TextC-45LexerC-45Core-C-60C-124C-62 (TextC-45Lexer-is #\_) TextC-45Lexer-digit)))))
(define LanguageC-45TOMLC-45Lexer-integerLit (vector 4 (TextC-45LexerC-45Core-C-60C-124C-62 (LanguageC-45TOMLC-45Lexer-sepBaseLit "0x" TextC-45Lexer-hexDigit) (TextC-45LexerC-45Core-C-60C-124C-62 (LanguageC-45TOMLC-45Lexer-sepBaseLit "0o" TextC-45Lexer-octDigit) (TextC-45LexerC-45Core-C-60C-124C-62 (LanguageC-45TOMLC-45Lexer-sepBaseLit "0b" TextC-45Lexer-binDigit) LanguageC-45TOMLC-45Lexer-sepIntLit))) (lambda () (TextC-45LexerC-45Core-reject (TextC-45Lexer-oneOf ".eE")))))
(define TextC-45Lexer-newline (TextC-45LexerC-45Core-C-60C-124C-62 (TextC-45Lexer-exact "\u000d\u000a") (TextC-45Lexer-oneOf "\u000d\u000a")))
(define TextC-45Lexer-lineComment (lambda (arg-0) (vector 4 (vector 4 arg-0 (lambda () (TextC-45Lexer-manyUntil TextC-45Lexer-newline TextC-45Lexer-any))) (lambda () (TextC-45Lexer-opt TextC-45Lexer-newline)))))
(define TextC-45Lexer-space (TextC-45LexerC-45Core-pred (lambda (eta-0) (PreludeC-45Types-isSpace eta-0))))
(define TextC-45Lexer-spaces (TextC-45Lexer-some TextC-45Lexer-space))
(define TextC-45Lexer-toTokenMap (lambda (ext-0) (PreludeC-45TypesC-45List-mapAppend '() (lambda (lamc-0) (let ((e-2 (car lamc-0))) (let ((e-3 (cdr lamc-0))) (cons e-2 (lambda (eta-0) (cons e-3 eta-0)))))) ext-0)))
(define LanguageC-45TOMLC-45Lexer-tomlTokenMap (TextC-45Lexer-toTokenMap (cons (cons TextC-45Lexer-newline (vector 4 (vector 3 ))) (cons (cons (TextC-45Lexer-lineComment (TextC-45Lexer-is #\#)) (vector 6 )) (cons (cons TextC-45Lexer-spaces (vector 6 )) (cons (cons (TextC-45Lexer-is #\,) (vector 4 (vector 0 ))) (cons (cons (TextC-45Lexer-is #\.) (vector 4 (vector 1 ))) (cons (cons (TextC-45Lexer-is #\=) (vector 4 (vector 2 ))) (cons (cons (TextC-45Lexer-is #\[) (vector 4 (vector 4 0))) (cons (cons (TextC-45Lexer-is #\]) (vector 4 (vector 4 1))) (cons (cons (TextC-45Lexer-is #\{) (vector 4 (vector 5 0))) (cons (cons (TextC-45Lexer-is #\}) (vector 4 (vector 5 1))) (cons (cons (TextC-45LexerC-45Core-C-60C-124C-62 (TextC-45Lexer-exact "true") (TextC-45Lexer-exact "false")) (vector 0 )) (cons (cons LanguageC-45TOMLC-45Lexer-integerLit (vector 1 )) (cons (cons LanguageC-45TOMLC-45Lexer-floatLit (vector 2 )) (cons (cons LanguageC-45TOMLC-45Lexer-basicStringLit (vector 3 0)) (cons (cons LanguageC-45TOMLC-45Lexer-bareKey (vector 5 )) '())))))))))))))))))
(define LanguageC-45TOMLC-45Lexer-lexTOML (lambda (arg-0) (let ((sc0 (TextC-45LexerC-45Core-lex LanguageC-45TOMLC-45Lexer-tomlTokenMap arg-0))) (if (null? sc0) '() (let ((e-2 (car sc0))) (let ((e-3 (cdr sc0))) (if (null? e-3) '() (let ((e-7 (cdr e-3))) (if (null? e-7) '() (let ((e-11 (cdr e-7))) (cond ((equal? e-11 "") (box e-2))(else '()))))))))))))
(define LanguageC-45TOMLC-45Tokens-ignored (lambda (arg-0) (let ((e-1 (vector-ref arg-0 0))) (if (null? e-1) 0 (let ((e-5 (car e-1))) (case (vector-ref e-5 0) ((6) 1)(else 0)))))))
(define TextC-45Parser-option (lambda (arg-3 arg-4 arg-5) (cond ((equal? arg-3 0) (vector 12 0 0 arg-5 (lambda () (vector 0 arg-4)))) (else (vector 12 1 0 arg-5 (lambda () (vector 0 arg-4)))))))
(define TextC-45Parser-some (lambda (arg-3) (vector 8 0 arg-3 (lambda () (lambda (bind-0) (vector 9 0 0 (TextC-45Parser-many arg-3) (lambda (bind-1) (vector 0 (cons bind-0 bind-1)))))))))
(define TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 (lambda (arg-4 arg-5 arg-6) (cond ((equal? arg-4 0) (case (vector-ref arg-6 0) ((0) (let ((e-65 (vector-ref arg-6 1))) (vector 0 (arg-5 e-65))))(else (case (vector-ref arg-6 0) ((4) (let ((e-49 (vector-ref arg-6 1))) (let ((e-50 (vector-ref arg-6 2))) (let ((e-51 (vector-ref arg-6 3))) (vector 4 e-49 e-50 e-51))))) ((5) (let ((e-56 (vector-ref arg-6 1))) (vector 5 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 arg-4 arg-5 e-56)))) ((7) (let ((e-61 (vector-ref arg-6 1))) (vector 7 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 arg-4 arg-5 e-61))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((1) (let ((e-43 (vector-ref arg-6 1))) (let ((e-44 (vector-ref arg-6 2))) (vector 1 e-43 (lambda (eta-0) (PreludeC-45Types-u--map_Functor_Maybe arg-5 (e-44 eta-0)))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-36 (vector-ref arg-6 1))) (let ((e-37 (vector-ref arg-6 2))) (let ((e-38 (vector-ref arg-6 3))) (let ((e-39 (vector-ref arg-6 4))) (vector 12 e-36 e-37 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-36 arg-5 e-38) (lambda () (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-37 arg-5 (e-39)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((8) (let ((e-30 (vector-ref arg-6 1))) (let ((e-31 (vector-ref arg-6 2))) (let ((e-32 (vector-ref arg-6 3))) (vector 8 e-30 e-31 (lambda () (lambda (u--val) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-30 arg-5 ((e-32) u--val)))))))))(else (case (vector-ref arg-6 0) ((9) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 9 e-22 e-23 e-24 (lambda (u--val) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 arg-5 (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((10) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 10 e-15 e-16 (lambda () (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 arg-5 (e-17))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))))))(else (case (vector-ref arg-6 0) ((9) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 9 e-22 e-23 e-24 (lambda (u--val) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 arg-5 (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((10) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 10 e-15 e-16 (lambda () (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 arg-5 (e-17))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-36 (vector-ref arg-6 1))) (let ((e-37 (vector-ref arg-6 2))) (let ((e-38 (vector-ref arg-6 3))) (let ((e-39 (vector-ref arg-6 4))) (vector 12 e-36 e-37 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-36 arg-5 e-38) (lambda () (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-37 arg-5 (e-39)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((8) (let ((e-30 (vector-ref arg-6 1))) (let ((e-31 (vector-ref arg-6 2))) (let ((e-32 (vector-ref arg-6 3))) (vector 8 e-30 e-31 (lambda () (lambda (u--val) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-30 arg-5 ((e-32) u--val)))))))))(else (case (vector-ref arg-6 0) ((9) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 9 e-22 e-23 e-24 (lambda (u--val) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 arg-5 (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((10) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 10 e-15 e-16 (lambda () (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 arg-5 (e-17))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))))))(else (case (vector-ref arg-6 0) ((9) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 9 e-22 e-23 e-24 (lambda (u--val) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 arg-5 (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((10) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 10 e-15 e-16 (lambda () (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 arg-5 (e-17))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))))))))))))))(else (case (vector-ref arg-6 0) ((4) (let ((e-49 (vector-ref arg-6 1))) (let ((e-50 (vector-ref arg-6 2))) (let ((e-51 (vector-ref arg-6 3))) (vector 4 e-49 e-50 e-51))))) ((5) (let ((e-56 (vector-ref arg-6 1))) (vector 5 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 arg-4 arg-5 e-56)))) ((7) (let ((e-61 (vector-ref arg-6 1))) (vector 7 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 arg-4 arg-5 e-61))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((1) (let ((e-43 (vector-ref arg-6 1))) (let ((e-44 (vector-ref arg-6 2))) (vector 1 e-43 (lambda (eta-0) (PreludeC-45Types-u--map_Functor_Maybe arg-5 (e-44 eta-0)))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-36 (vector-ref arg-6 1))) (let ((e-37 (vector-ref arg-6 2))) (let ((e-38 (vector-ref arg-6 3))) (let ((e-39 (vector-ref arg-6 4))) (vector 12 e-36 e-37 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-36 arg-5 e-38) (lambda () (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-37 arg-5 (e-39)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((8) (let ((e-30 (vector-ref arg-6 1))) (let ((e-31 (vector-ref arg-6 2))) (let ((e-32 (vector-ref arg-6 3))) (vector 8 e-30 e-31 (lambda () (lambda (u--val) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-30 arg-5 ((e-32) u--val)))))))))(else (case (vector-ref arg-6 0) ((9) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 9 e-22 e-23 e-24 (lambda (u--val) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 arg-5 (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((10) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 10 e-15 e-16 (lambda () (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 arg-5 (e-17))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))))))(else (case (vector-ref arg-6 0) ((9) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 9 e-22 e-23 e-24 (lambda (u--val) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 arg-5 (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((10) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 10 e-15 e-16 (lambda () (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 arg-5 (e-17))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-36 (vector-ref arg-6 1))) (let ((e-37 (vector-ref arg-6 2))) (let ((e-38 (vector-ref arg-6 3))) (let ((e-39 (vector-ref arg-6 4))) (vector 12 e-36 e-37 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-36 arg-5 e-38) (lambda () (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-37 arg-5 (e-39)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((8) (let ((e-30 (vector-ref arg-6 1))) (let ((e-31 (vector-ref arg-6 2))) (let ((e-32 (vector-ref arg-6 3))) (vector 8 e-30 e-31 (lambda () (lambda (u--val) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-30 arg-5 ((e-32) u--val)))))))))(else (case (vector-ref arg-6 0) ((9) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 9 e-22 e-23 e-24 (lambda (u--val) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 arg-5 (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((10) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 10 e-15 e-16 (lambda () (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 arg-5 (e-17))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))))))(else (case (vector-ref arg-6 0) ((9) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 9 e-22 e-23 e-24 (lambda (u--val) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 arg-5 (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((10) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 10 e-15 e-16 (lambda () (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 arg-5 (e-17))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0))))))))))))))))))))))))
(define TextC-45Parser-many (lambda (arg-3) (TextC-45Parser-option 1 '() (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 (lambda (eta-0) (DataC-45List1-forget eta-0)) (TextC-45Parser-some arg-3)))))
(define TextC-45Parser-match (lambda (arg-2 arg-3 arg-4) (vector 1 "Unrecognised input" (lambda (u--t) (let ((sc0 (let ((e-1 (car arg-3))) ((e-1 (let ((e-4 (car u--t))) e-4)) arg-4)))) (cond ((equal? sc0 1) (box (let ((e-2 (cdr arg-2))) ((e-2 arg-4) (let ((e-3 (cdr u--t))) e-3))))) (else '())))))))
(define LanguageC-45TOMLC-45Parser-punct (lambda (arg-1) (TextC-45Parser-match csegen-490 csegen-493 (vector 4 arg-1))))
(define LanguageC-45TOMLC-45Parser-bare (TextC-45Parser-match csegen-490 csegen-493 (vector 5 )))
(define LanguageC-45TOMLC-45Parser-fromEither (lambda (arg-3 arg-4) (cond ((equal? arg-3 0) (vector 9 0 0 (vector 13 arg-4) (lambda (u--xb) (let ((e-1 (vector-ref u--xb 0))) (case (vector-ref e-1 0) ((1) (let ((e-4 (vector-ref e-1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref e-1 1))) (vector 4 (box (let ((e-4 (vector-ref u--xb 2))) e-4)) 0 e-5)))))))) (else (vector 8 0 (vector 13 arg-4) (lambda () (lambda (u--xb) (let ((e-1 (vector-ref u--xb 0))) (case (vector-ref e-1 0) ((1) (let ((e-4 (vector-ref e-1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref e-1 1))) (vector 4 (box (let ((e-4 (vector-ref u--xb 2))) e-4)) 0 e-5))))))))))))
(define TextC-45Token-value (lambda (arg-1 arg-2) (let ((e-1 (car arg-2))) (let ((e-2 (cdr arg-2))) (let ((e-3 (cdr arg-1))) ((e-3 e-1) e-2))))))
(define LanguageC-45TOMLC-45Tokens-getKeyString (lambda (arg-0) (if (null? arg-0) '() (let ((e-1 (car arg-0))) (case (vector-ref e-1 0) ((3) (let ((e-3 (vector-ref e-1 1))) (cond ((equal? e-3 0) (box (TextC-45Token-value csegen-490 arg-0))) ((equal? e-3 1) (box (TextC-45Token-value csegen-490 arg-0)))(else '()))))(else '()))))))
(define LanguageC-45TOMLC-45Parser-n--4102-9625-u--keyAtom (vector 12 1 1 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 (lambda (eta-0) (vector 0 eta-0)) LanguageC-45TOMLC-45Parser-bare) (lambda () (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 (lambda (eta-0) (vector 1 eta-0)) (LanguageC-45TOMLC-45Parser-fromEither 1 (vector 1 "string key" (lambda (eta-0) (LanguageC-45TOMLC-45Tokens-getKeyString eta-0))))))))
(define LanguageC-45TOMLC-45Parser-key (vector 8 0 LanguageC-45TOMLC-45Parser-n--4102-9625-u--keyAtom (lambda () (lambda (u--first) (vector 9 0 0 (TextC-45Parser-many (vector 9 1 1 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 (lambda (eta-0) (lambda (eta-1) eta-1)) (LanguageC-45TOMLC-45Parser-punct (vector 1 ))) (lambda (u--f) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 u--f LanguageC-45TOMLC-45Parser-n--4102-9625-u--keyAtom)))) (lambda (u--rest) (if (null? u--rest) (vector 0 (vector 0 u--first)) (vector 0 (vector 1 (cons u--first u--rest))))))))))
(define LanguageC-45TOMLC-45Parser-newlines (vector 12 1 0 (vector 8 0 (TextC-45Parser-some (LanguageC-45TOMLC-45Parser-punct (vector 3 ))) (lambda () (lambda (_-9506) (vector 0 (vector 0 ))))) (lambda () (vector 3 ))))
(define LanguageC-45TOMLC-45Parser-maybeNewlines (vector 9 0 0 (TextC-45Parser-many (LanguageC-45TOMLC-45Parser-punct (vector 3 ))) (lambda (u--_) (vector 0 (vector 0 )))))
(define LanguageC-45TOMLC-45Parser-allowNewlines (lambda (arg-2) (vector 9 1 0 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 (lambda (eta-0) (lambda (eta-1) eta-0)) (vector 9 0 1 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 0 (lambda (eta-0) (lambda (eta-1) eta-1)) LanguageC-45TOMLC-45Parser-maybeNewlines) (lambda (u--f) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 u--f arg-2)))) (lambda (u--f) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 0 u--f LanguageC-45TOMLC-45Parser-maybeNewlines)))))
(define TextC-45Parser-sepBy1 (lambda (arg-4 arg-5 arg-6) (vector 9 arg-4 0 (vector 9 0 arg-4 (vector 0 csegen-201) (lambda (u--f) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 arg-4 u--f arg-6))) (lambda (u--f) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 0 u--f (TextC-45Parser-many (vector 9 1 arg-4 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 (lambda (eta-0) (lambda (eta-1) eta-1)) arg-5) (lambda (f-0) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 arg-4 f-0 arg-6)))))))))
(define TextC-45Parser-sepBy (lambda (arg-4 arg-5 arg-6) (TextC-45Parser-option arg-4 '() (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 arg-4 (lambda (eta-0) (DataC-45List1-forget eta-0)) (TextC-45Parser-sepBy1 arg-4 arg-5 arg-6)))))
(define LanguageC-45TOMLC-45Parser-array (lambda () (vector 10 1 (LanguageC-45TOMLC-45Parser-punct (vector 4 0)) (lambda () (vector 11 0 1 (vector 6 ) (vector 9 0 1 (TextC-45Parser-sepBy 1 (LanguageC-45TOMLC-45Parser-allowNewlines (LanguageC-45TOMLC-45Parser-punct (vector 0 ))) (LanguageC-45TOMLC-45Parser-allowNewlines (LanguageC-45TOMLC-45Parser-value))) (lambda (u--vals) (vector 10 0 (LanguageC-45TOMLC-45Parser-punct (vector 4 1)) (lambda () (vector 0 (vector 4 u--vals)))))))))))
(define LanguageC-45TOMLC-45Parser-boolean (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 (lambda (eta-0) (vector 3 eta-0)) (TextC-45Parser-match csegen-490 csegen-493 (vector 0 ))))
(define LanguageC-45TOMLC-45Parser-float (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 (lambda (eta-0) (vector 2 eta-0)) (TextC-45Parser-match csegen-490 csegen-493 (vector 2 ))))
(define LanguageC-45TOMLC-45Parser-inlineTable (lambda () (vector 10 1 (LanguageC-45TOMLC-45Parser-punct (vector 5 0)) (lambda () (vector 11 0 1 (vector 6 ) (vector 9 0 1 (TextC-45Parser-sepBy 1 (LanguageC-45TOMLC-45Parser-punct (vector 0 )) (vector 8 1 LanguageC-45TOMLC-45Parser-key (lambda () (lambda (u--k) (vector 10 1 (LanguageC-45TOMLC-45Parser-punct (vector 2 )) (lambda () (vector 8 0 (LanguageC-45TOMLC-45Parser-value) (lambda () (lambda (u--v) (vector 0 (cons u--k u--v))))))))))) (lambda (u--vals) (vector 10 0 (LanguageC-45TOMLC-45Parser-punct (vector 5 1)) (lambda () (vector 0 (vector 5 u--vals)))))))))))
(define LanguageC-45TOMLC-45Parser-integer (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 (lambda (eta-0) (vector 1 eta-0)) (TextC-45Parser-match csegen-490 csegen-493 (vector 1 ))))
(define LanguageC-45TOMLC-45Tokens-getString (lambda (arg-0) (if (null? arg-0) '() (let ((e-1 (car arg-0))) (case (vector-ref e-1 0) ((3) (box (TextC-45Token-value csegen-490 arg-0)))(else '()))))))
(define LanguageC-45TOMLC-45Parser-string (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 (lambda (eta-0) (vector 0 eta-0)) (LanguageC-45TOMLC-45Parser-fromEither 1 (vector 1 "string" (lambda (eta-0) (LanguageC-45TOMLC-45Tokens-getString eta-0))))))
(define LanguageC-45TOMLC-45Parser-value (lambda () (vector 12 1 1 LanguageC-45TOMLC-45Parser-string (lambda () (vector 12 1 1 LanguageC-45TOMLC-45Parser-boolean (lambda () (vector 12 1 1 LanguageC-45TOMLC-45Parser-integer (lambda () (vector 12 1 1 LanguageC-45TOMLC-45Parser-float (lambda () (vector 12 1 1 (LanguageC-45TOMLC-45Parser-array) (lambda () (LanguageC-45TOMLC-45Parser-inlineTable)))))))))))))
(define LanguageC-45TOMLC-45Parser-keyValue (vector 8 1 LanguageC-45TOMLC-45Parser-key (lambda () (lambda (u--k) (vector 10 1 (LanguageC-45TOMLC-45Parser-punct (vector 2 )) (lambda () (vector 8 0 (LanguageC-45TOMLC-45Parser-value) (lambda () (lambda (u--v) (vector 11 0 0 LanguageC-45TOMLC-45Parser-newlines (vector 0 (vector 0 u--k u--v))))))))))))
(define LanguageC-45TOMLC-45Parser-tableArrayHeader (vector 10 1 (LanguageC-45TOMLC-45Parser-punct (vector 4 0)) (lambda () (vector 10 1 (LanguageC-45TOMLC-45Parser-punct (vector 4 0)) (lambda () (vector 11 0 1 (vector 6 ) (vector 8 1 LanguageC-45TOMLC-45Parser-key (lambda () (lambda (u--k) (vector 10 1 (LanguageC-45TOMLC-45Parser-punct (vector 4 1)) (lambda () (vector 10 0 (LanguageC-45TOMLC-45Parser-punct (vector 4 1)) (lambda () (vector 11 0 0 LanguageC-45TOMLC-45Parser-newlines (vector 0 (vector 2 u--k))))))))))))))))
(define LanguageC-45TOMLC-45Parser-tableHeader (vector 10 1 (LanguageC-45TOMLC-45Parser-punct (vector 4 0)) (lambda () (vector 8 1 LanguageC-45TOMLC-45Parser-key (lambda () (lambda (u--k) (vector 11 0 1 (vector 6 ) (vector 10 0 (LanguageC-45TOMLC-45Parser-punct (vector 4 1)) (lambda () (vector 11 0 0 LanguageC-45TOMLC-45Parser-newlines (vector 0 (vector 1 u--k))))))))))))
(define LanguageC-45TOMLC-45Parser-item (vector 12 1 1 LanguageC-45TOMLC-45Parser-keyValue (lambda () (vector 12 1 1 LanguageC-45TOMLC-45Parser-tableHeader (lambda () LanguageC-45TOMLC-45Parser-tableArrayHeader)))))
(define LanguageC-45TOMLC-45Parser-items (vector 11 0 0 LanguageC-45TOMLC-45Parser-maybeNewlines (vector 9 0 0 (TextC-45Parser-many LanguageC-45TOMLC-45Parser-item) (lambda (u--is) (vector 11 0 0 LanguageC-45TOMLC-45Parser-maybeNewlines (vector 11 0 0 (vector 3 ) (vector 0 u--is)))))))
(define DataC-45List-headC-39 (lambda (arg-1) (if (null? arg-1) '() (let ((e-2 (car arg-1))) (box e-2)))))
(define TextC-45Bounded-irrelevantBounds (lambda (arg-1) (vector arg-1 1 (vector -1 -1 -1 -1))))
(define TextC-45Bounded-endBounds (lambda (arg-0) (cons (let ((e-2 (vector-ref arg-0 2))) e-2) (let ((e-3 (vector-ref arg-0 3))) e-3))))
(define TextC-45Bounded-end (lambda (ext-0) (TextC-45Bounded-endBounds (let ((e-3 (vector-ref ext-0 2))) e-3))))
(define TextC-45Bounded-startBounds (lambda (arg-0) (cons (let ((e-0 (vector-ref arg-0 0))) e-0) (let ((e-1 (vector-ref arg-0 1))) e-1))))
(define TextC-45Bounded-start (lambda (ext-0) (TextC-45Bounded-startBounds (let ((e-3 (vector-ref ext-0 2))) e-3))))
(define TextC-45Bounded-u--map_Functor_WithBounds (lambda (arg-2 arg-3) (let ((e-1 (vector-ref arg-3 0))) (let ((e-2 (vector-ref arg-3 1))) (let ((e-3 (vector-ref arg-3 2))) (vector (arg-2 e-1) e-2 e-3))))))
(define PreludeC-45EqOrd-u--compare_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (lambda (arg-2 arg-3 arg-4 arg-5) (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) (let ((e-6 (car arg-5))) (let ((e-7 (cdr arg-5))) (let ((sc2 (let ((e-1 (vector-ref arg-2 0))) (let ((e-13 (cdr e-1))) ((e-13 e-2) e-6))))) (cond ((equal? sc2 1) (let ((e-12 (vector-ref arg-2 1))) ((e-12 e-2) e-6))) (else (let ((e-12 (vector-ref arg-3 1))) ((e-12 e-3) e-7)))))))))))
(define PreludeC-45EqOrd-u--C-62_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (lambda (arg-2 arg-3 arg-4 arg-5) (PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering (PreludeC-45EqOrd-u--compare_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 arg-2 arg-3 arg-4 arg-5) 2)))
(define PreludeC-45EqOrd-u--max_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (lambda (arg-2 arg-3 arg-4 arg-5) (let ((sc0 (PreludeC-45EqOrd-u--C-62_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 arg-2 arg-3 arg-4 arg-5))) (cond ((equal? sc0 1) arg-4) (else arg-5)))))
(define PreludeC-45EqOrd-u--C-60_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (lambda (arg-2 arg-3 arg-4 arg-5) (PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering (PreludeC-45EqOrd-u--compare_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 arg-2 arg-3 arg-4 arg-5) 0)))
(define PreludeC-45EqOrd-u--min_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (lambda (arg-2 arg-3 arg-4 arg-5) (let ((sc0 (PreludeC-45EqOrd-u--C-60_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 arg-2 arg-3 arg-4 arg-5))) (cond ((equal? sc0 1) arg-4) (else arg-5)))))
(define TextC-45Bounded-mergeBounds (lambda (arg-2 arg-3) (let ((e-6 (vector-ref arg-2 1))) (cond ((equal? e-6 1) (let ((e-9 (vector-ref arg-3 0))) (let ((e-10 (vector-ref arg-3 1))) (cond ((equal? e-10 1) (TextC-45Bounded-irrelevantBounds e-9))(else arg-3)))))(else (let ((e-1 (vector-ref arg-3 0))) (let ((e-2 (vector-ref arg-3 1))) (cond ((equal? e-2 1) (TextC-45Bounded-u--map_Functor_WithBounds (lambda (eta-0) e-1) arg-2))(else (let ((sc0 (PreludeC-45EqOrd-u--min_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 csegen-108 csegen-108 (TextC-45Bounded-start arg-2) (TextC-45Bounded-start arg-3)))) (let ((e-8 (car sc0))) (let ((e-4 (cdr sc0))) (let ((sc1 (PreludeC-45EqOrd-u--max_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 csegen-108 csegen-108 (TextC-45Bounded-end arg-2) (TextC-45Bounded-end arg-3)))) (let ((e-10 (car sc1))) (let ((e-9 (cdr sc1))) (vector (let ((e-13 (vector-ref arg-3 0))) e-13) 0 (vector e-8 e-4 e-10 e-9)))))))))))))))))
(define TextC-45ParserC-45Core-mergeWith (lambda (arg-4 arg-5) (case (vector-ref arg-5 0) ((1) (let ((e-3 (vector-ref arg-5 1))) (let ((e-4 (vector-ref arg-5 2))) (let ((e-5 (vector-ref arg-5 3))) (let ((e-6 (vector-ref arg-5 4))) (vector 1 e-3 e-4 (TextC-45Bounded-mergeBounds arg-4 e-5) e-6))))))(else arg-5))))
(define TextC-45Bounded-removeIrrelevance (lambda (arg-1) (let ((e-1 (vector-ref arg-1 0))) (let ((e-3 (vector-ref arg-1 2))) (vector e-1 1 e-3)))))
(define PreludeC-45Types-u--C-60C-124C-62_Alternative_Maybe (lambda (arg-1 arg-2) (if (null? arg-1) (arg-2) (let ((e-1 (unbox arg-1))) (box e-1)))))
(define TextC-45ParserC-45Core-case--doParse-3951 (lambda (arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (case (vector-ref arg-9 0) ((0) (let ((e-3 (vector-ref arg-9 1))) (let ((e-5 (vector-ref arg-9 3))) (vector 0 e-3 0 e-5))))(else arg-9))))
(define TextC-45ParserC-45Core-case--doParse-4048 (lambda (arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (case (vector-ref arg-9 0) ((0) (let ((e-3 (vector-ref arg-9 1))) (let ((e-5 (vector-ref arg-9 3))) (vector 0 e-3 1 e-5))))(else arg-9))))
(define DataC-45List1-appendl (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-2 (cdr arg-1))) (cons e-1 (PreludeC-45TypesC-45List-tailRecAppend e-2 arg-2))))))
(define DataC-45List1-C-43C-43 (lambda (arg-1 arg-2) (DataC-45List1-appendl arg-1 (DataC-45List1-forget arg-2))))
(define TextC-45ParserC-45Core-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32doParse-4529 (lambda (arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-11 arg-12 arg-13 arg-14 arg-15) (case (vector-ref arg-15 0) ((0) (let ((e-3 (vector-ref arg-15 1))) (let ((e-4 (vector-ref arg-15 2))) (let ((e-5 (vector-ref arg-15 3))) (let ((sc1 (cond ((equal? e-3 1) 1) (else e-4)))) (cond ((equal? sc1 1) (vector 0 e-3 e-4 e-5)) (else (vector 0 arg-9 0 (DataC-45List1-C-43C-43 arg-11 e-5))))))))) (else (let ((e-9 (vector-ref arg-15 1))) (let ((e-11 (vector-ref arg-15 3))) (let ((e-12 (vector-ref arg-15 4))) (vector 1 e-9 arg-9 e-11 e-12))))))))
(define TextC-45ParserC-45Core-case--doParse-4413 (lambda (arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-12) (case (vector-ref arg-12 0) ((0) (let ((e-3 (vector-ref arg-12 1))) (let ((e-4 (vector-ref arg-12 2))) (let ((e-5 (vector-ref arg-12 3))) (let ((sc1 (cond ((equal? e-3 1) 1) (else e-4)))) (cond ((equal? sc1 1) (vector 0 arg-10 e-4 e-5)) (else (TextC-45ParserC-45Core-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32doParse-4529 arg-3 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 e-5 e-4 e-3 arg-4 (TextC-45ParserC-45Core-doParse arg-3 arg-4 0 (arg-6) arg-9))))))))) (else (let ((e-9 (vector-ref arg-12 1))) (let ((e-11 (vector-ref arg-12 3))) (let ((e-12 (vector-ref arg-12 4))) (vector 1 e-9 arg-10 e-11 e-12))))))))
(define TextC-45ParserC-45Core-case--doParse-4767 (lambda (arg-3 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-13) (case (vector-ref arg-13 0) ((0) (let ((e-3 (vector-ref arg-13 1))) (let ((e-4 (vector-ref arg-13 2))) (let ((e-5 (vector-ref arg-13 3))) (vector 0 e-3 e-4 e-5))))) (else (let ((e-9 (vector-ref arg-13 1))) (let ((e-10 (vector-ref arg-13 2))) (let ((e-11 (vector-ref arg-13 3))) (let ((e-12 (vector-ref arg-13 4))) (TextC-45ParserC-45Core-mergeWith e-11 (TextC-45ParserC-45Core-doParse arg-3 e-9 e-10 (arg-8 (let ((e-1 (vector-ref e-11 0))) e-1)) e-12))))))))))
(define TextC-45ParserC-45Core-case--doParse-4881 (lambda (arg-3 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-12) (case (vector-ref arg-12 0) ((0) (let ((e-3 (vector-ref arg-12 1))) (let ((e-4 (vector-ref arg-12 2))) (let ((e-5 (vector-ref arg-12 3))) (vector 0 e-3 e-4 e-5))))) (else (let ((e-9 (vector-ref arg-12 1))) (let ((e-10 (vector-ref arg-12 2))) (let ((e-11 (vector-ref arg-12 3))) (let ((e-12 (vector-ref arg-12 4))) (TextC-45ParserC-45Core-mergeWith e-11 (TextC-45ParserC-45Core-doParse arg-3 e-9 e-10 ((arg-7) (let ((e-1 (vector-ref e-11 0))) e-1)) e-12))))))))))
(define TextC-45ParserC-45Core-case--doParse-5194 (lambda (arg-3 arg-5 arg-6 arg-7 arg-8 arg-10) (case (vector-ref arg-10 0) ((0) (let ((e-3 (vector-ref arg-10 1))) (let ((e-4 (vector-ref arg-10 2))) (let ((e-5 (vector-ref arg-10 3))) (vector 0 e-3 e-4 e-5))))) (else (let ((e-9 (vector-ref arg-10 1))) (let ((e-10 (vector-ref arg-10 2))) (let ((e-11 (vector-ref arg-10 3))) (let ((e-12 (vector-ref arg-10 4))) (vector 1 e-9 e-10 (TextC-45Bounded-u--map_Functor_WithBounds (lambda (eta-0) e-11) e-11) e-12)))))))))
(define TextC-45ParserC-45Core-doParse (lambda (arg-4 arg-5 arg-6 arg-7 arg-8) (case (vector-ref arg-7 0) ((0) (let ((e-3 (vector-ref arg-7 1))) (vector 1 arg-5 arg-6 (TextC-45Bounded-irrelevantBounds e-3) arg-8))) ((4) (let ((e-8 (vector-ref arg-7 1))) (let ((e-9 (vector-ref arg-7 2))) (let ((e-10 (vector-ref arg-7 3))) (vector 0 arg-6 e-9 (cons (cons e-10 (PreludeC-45Types-u--C-60C-124C-62_Alternative_Maybe e-8 (lambda () (PreludeC-45Types-u--map_Functor_Maybe (lambda (eta-0) (let ((e-3 (vector-ref eta-0 2))) e-3)) (DataC-45List-headC-39 arg-8))))) '())))))) ((5) (let ((e-15 (vector-ref arg-7 1))) (TextC-45ParserC-45Core-case--doParse-3951 arg-4 arg-5 e-15 arg-8 arg-6 (TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 e-15 arg-8)))) ((6) (vector 1 arg-5 1 (TextC-45Bounded-irrelevantBounds (vector 0 )) arg-8)) ((7) (let ((e-22 (vector-ref arg-7 1))) (TextC-45ParserC-45Core-case--doParse-4048 arg-4 arg-5 e-22 arg-8 arg-6 (TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 e-22 arg-8)))) ((1) (let ((e-26 (vector-ref arg-7 1))) (let ((e-27 (vector-ref arg-7 2))) (if (null? arg-8) (vector 0 arg-6 0 csegen-535) (let ((e-81 (car arg-8))) (let ((e-82 (cdr arg-8))) (let ((sc2 (e-27 (let ((e-1 (vector-ref e-81 0))) e-1)))) (if (null? sc2) (vector 0 arg-6 0 (cons (cons e-26 (box (let ((e-3 (vector-ref e-81 2))) e-3))) '())) (let ((e-2 (unbox sc2))) (vector 1 arg-5 arg-6 (TextC-45Bounded-u--map_Functor_WithBounds (lambda (eta-0) e-2) e-81) e-82)))))))))) ((3) (if (null? arg-8) (vector 1 arg-5 arg-6 (TextC-45Bounded-irrelevantBounds (vector 0 )) '()) (let ((e-85 (car arg-8))) (vector 0 arg-6 0 (cons (cons "Expected end of input" (box (let ((e-3 (vector-ref e-85 2))) e-3))) '()))))) ((2) (let ((e-32 (vector-ref arg-7 1))) (let ((e-33 (vector-ref arg-7 2))) (if (null? arg-8) (vector 0 arg-6 0 csegen-535) (let ((e-89 (car arg-8))) (let ((e-90 (cdr arg-8))) (let ((sc2 (e-33 (let ((e-1 (vector-ref e-89 0))) e-1)))) (cond ((equal? sc2 1) (vector 1 arg-5 arg-6 (TextC-45Bounded-removeIrrelevance e-89) (cons e-89 e-90))) (else (vector 0 arg-6 0 (cons (cons e-32 (box (let ((e-3 (vector-ref e-89 2))) e-3))) '()))))))))))) ((12) (let ((e-37 (vector-ref arg-7 1))) (let ((e-38 (vector-ref arg-7 2))) (let ((e-39 (vector-ref arg-7 3))) (let ((e-40 (vector-ref arg-7 4))) (TextC-45ParserC-45Core-case--doParse-4413 arg-4 arg-5 e-38 e-40 e-37 e-39 arg-8 arg-6 (TextC-45ParserC-45Core-doParse arg-4 arg-5 0 e-39 arg-8))))))) ((9) (let ((e-45 (vector-ref arg-7 1))) (let ((e-46 (vector-ref arg-7 2))) (let ((e-47 (vector-ref arg-7 3))) (let ((e-48 (vector-ref arg-7 4))) (TextC-45ParserC-45Core-case--doParse-4767 arg-4 e-45 e-46 arg-5 e-48 e-47 arg-8 arg-6 (TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 e-47 arg-8))))))) ((8) (let ((e-53 (vector-ref arg-7 1))) (let ((e-54 (vector-ref arg-7 2))) (let ((e-55 (vector-ref arg-7 3))) (TextC-45ParserC-45Core-case--doParse-4881 arg-4 e-53 arg-5 e-55 e-54 arg-8 arg-6 (TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 e-54 arg-8)))))) ((11) (let ((e-61 (vector-ref arg-7 3))) (let ((e-62 (vector-ref arg-7 4))) (let ((sc1 (TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 e-61 arg-8))) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (let ((e-4 (vector-ref sc1 2))) (let ((e-5 (vector-ref sc1 3))) (vector 0 e-3 e-4 e-5))))) (else (let ((e-9 (vector-ref sc1 1))) (let ((e-10 (vector-ref sc1 2))) (let ((e-11 (vector-ref sc1 3))) (let ((e-12 (vector-ref sc1 4))) (TextC-45ParserC-45Core-mergeWith e-11 (TextC-45ParserC-45Core-doParse arg-4 e-9 e-10 e-62 e-12)))))))))))) ((10) (let ((e-67 (vector-ref arg-7 2))) (let ((e-68 (vector-ref arg-7 3))) (let ((sc1 (TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 e-67 arg-8))) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (let ((e-4 (vector-ref sc1 2))) (let ((e-5 (vector-ref sc1 3))) (vector 0 e-3 e-4 e-5))))) (else (let ((e-9 (vector-ref sc1 1))) (let ((e-10 (vector-ref sc1 2))) (let ((e-11 (vector-ref sc1 3))) (let ((e-12 (vector-ref sc1 4))) (TextC-45ParserC-45Core-mergeWith e-11 (TextC-45ParserC-45Core-doParse arg-4 e-9 e-10 (e-68) e-12)))))))))))) ((13) (let ((e-73 (vector-ref arg-7 1))) (TextC-45ParserC-45Core-case--doParse-5194 arg-4 arg-5 e-73 arg-8 arg-6 (TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 e-73 arg-8)))) ((14) (if (null? arg-8) (vector 0 arg-6 0 csegen-535) (let ((e-93 (car arg-8))) (let ((e-94 (cdr arg-8))) (vector 1 arg-5 arg-6 (TextC-45Bounded-irrelevantBounds (let ((e-3 (vector-ref e-93 2))) e-3)) (cons e-93 e-94)))))) (else (let ((e-78 (vector-ref arg-7 1))) (vector 1 ((arg-4 arg-5) e-78) arg-6 (TextC-45Bounded-irrelevantBounds (vector 0 )) arg-8))))))
(define TextC-45ParserC-45Core-parse (lambda (arg-2 arg-3 arg-4) (let ((sc0 (TextC-45ParserC-45Core-doParse (lambda (eta-0) (lambda (eta-1) (vector 0 ))) (vector 0 ) 0 arg-3 arg-4))) (case (vector-ref sc0 0) ((0) (let ((e-5 (vector-ref sc0 3))) (vector 0 e-5))) (else (let ((e-11 (vector-ref sc0 3))) (let ((e-12 (vector-ref sc0 4))) (vector 1 (cons (let ((e-1 (vector-ref e-11 0))) e-1) e-12)))))))))
(define PreludeC-45Show-u--showPrec_Show_Int (lambda (ext-0 ext-1) (PreludeC-45Show-primNumShow (lambda (eta-0) (number->string eta-0)) ext-0 ext-1)))
(define PreludeC-45Show-u--show_Show_Int (lambda (arg-0) (PreludeC-45Show-u--showPrec_Show_Int (vector 0 ) arg-0)))
(define LanguageC-45TOMLC-45Parser-case--parseItems-10148 (lambda (arg-0 arg-1) (case (vector-ref arg-1 0) ((1) (let ((e-2 (vector-ref arg-1 1))) (if (null? e-2) (vector 0 (cons "unconsumed input" '())) (let ((e-8 (car e-2))) (let ((e-9 (cdr e-2))) (if (null? e-9) (vector 1 e-8) (vector 0 (cons "unconsumed input" '())))))))) (else (let ((e-5 (vector-ref arg-1 1))) (vector 0 (PreludeC-45Basics-flip (lambda (eta-0) (lambda (eta-1) (PreludeC-45TypesC-45List-mapAppend '() eta-0 eta-1))) (DataC-45List1-forget e-5) (lambda (lamc-0) (let ((e-1 (car lamc-0))) (let ((e-2 (cdr lamc-0))) (if (null? e-2) e-1 (let ((e-3 (unbox e-2))) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons (PreludeC-45Show-u--show_Show_Int (let ((e-0 (vector-ref e-3 0))) e-0)) (cons ":" (cons (PreludeC-45Show-u--show_Show_Int (let ((e-7 (vector-ref e-3 1))) e-7)) (cons "--" (cons (PreludeC-45Show-u--show_Show_Int (let ((e-6 (vector-ref e-3 2))) e-6)) (cons ":" (cons (PreludeC-45Show-u--show_Show_Int (let ((e-4 (vector-ref e-3 3))) e-4)) (cons ": " (cons e-1 '()))))))))))))))))))))))
(define LanguageC-45TOMLC-45Parser-parseItems (lambda (arg-0) (LanguageC-45TOMLC-45Parser-case--parseItems-10148 arg-0 (TextC-45ParserC-45Core-parse 0 LanguageC-45TOMLC-45Parser-items (PreludeC-45TypesC-45List-filterAppend '() (lambda (eta-0) (let ((sc0 (LanguageC-45TOMLC-45Tokens-ignored eta-0))) (cond ((equal? sc0 1) 0) (else 1)))) arg-0)))))
(define LanguageC-45TOML-takeWhileJust (lambda (arg-2 arg-3) (if (null? arg-3) (cons '() '()) (let ((e-2 (car arg-3))) (let ((e-3 (cdr arg-3))) (let ((sc1 (arg-2 e-2))) (if (null? sc1) (cons '() (cons e-2 e-3)) (let ((e-4 (unbox sc1))) (let ((sc2 (LanguageC-45TOML-takeWhileJust arg-2 e-3))) (let ((e-6 (car sc2))) (let ((e-5 (cdr sc2))) (cons (cons e-4 e-6) e-5))))))))))))
(define LanguageC-45TOML-toPair (lambda (arg-0) (case (vector-ref arg-0 0) ((0) (let ((e-0 (vector-ref arg-0 1))) (let ((e-1 (vector-ref arg-0 2))) (box (cons e-0 e-1))))) ((1) '()) (else '()))))
(define LanguageC-45TOML-n--3979-5515-u--loop (lambda (arg-0 arg-1 arg-2) (if (null? arg-2) '() (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (case (vector-ref e-2 0) ((1) (let ((e-4 (vector-ref e-2 1))) (LanguageC-45TOML-n--3979-5515-u--loop arg-0 (vector 1 e-4) e-3))) ((2) (let ((e-5 (vector-ref e-2 1))) (LanguageC-45TOML-n--3979-5515-u--loop arg-0 (vector 2 e-5) e-3)))(else (let ((sc1 (LanguageC-45TOML-takeWhileJust (lambda (eta-0) (LanguageC-45TOML-toPair eta-0)) arg-2))) (let ((e-5 (car sc1))) (let ((e-4 (cdr sc1))) (cons (cons arg-1 e-5) (LanguageC-45TOML-n--3979-5515-u--loop arg-0 arg-1 e-4))))))))))))
(define LanguageC-45TOML-sections (lambda (arg-0) (LanguageC-45TOML-n--3979-5515-u--loop arg-0 (vector 0 ) arg-0)))
(define LanguageC-45TOML-parseTOML (lambda (arg-0) (let ((sc0 (LanguageC-45TOMLC-45Lexer-lexTOML arg-0))) (if (null? sc0) (vector 0 (vector 1 )) (let ((e-1 (unbox sc0))) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (let ((sc1 (LanguageC-45TOMLC-45Parser-parseItems e-1))) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 (vector 2 e-2)))) (else (let ((e-5 (vector-ref sc1 1))) (vector 1 e-5))))) (lambda (u--items) (let ((u--sects (LanguageC-45TOML-sections u--items))) (LanguageC-45TOML-extendFile csegen-43 u--sects)))))))))
(define DataC-45Fuel-forever (lambda () (box (lambda () (DataC-45Fuel-forever)))))
(define SystemC-45FileC-45ReadWrite-fSeekLine (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (SystemC-45FileC-45ReadWrite-prim__seekLine arg-2 eta-0))))) (lambda (u--res) (let ((sc1 (PreludeC-45EqOrd-u--C-47C-61_Eq_Int u--res (blodwen-toSignedInt 0 63)))) (cond ((equal? sc1 1) (SystemC-45FileC-45Error-returnError arg-1)) (else (SystemC-45FileC-45Support-ok arg-1 (vector 0 )))))))))))
(define PreludeC-45InterfacesC-45Applicative-u--C-60C-42C-62_Applicative_ComposeC-40C-40C-46C-32C-36fC-41C-32C-36gC-41 (lambda (arg-4 arg-5 arg-6 arg-7) (let ((e-3 (vector-ref arg-4 2))) ((((e-3 'erased) 'erased) (let ((e-4 (vector-ref arg-4 2))) ((((e-4 'erased) 'erased) (let ((e-8 (vector-ref arg-4 1))) ((e-8 'erased) (lambda (clam-0) (lambda (clam-1) (let ((e-10 (vector-ref arg-5 2))) ((((e-10 'erased) 'erased) clam-0) clam-1))))))) arg-6))) arg-7))))
(define PreludeC-45InterfacesC-45Functor-u--map_Functor_ComposeC-40C-40C-46C-32C-36fC-41C-32C-36gC-41 (lambda (arg-4 arg-5 ext-0 ext-1) ((((arg-4 'erased) 'erased) (lambda (arg-1) ((((arg-5 'erased) 'erased) ext-0) arg-1))) ext-1)))
(define PreludeC-45InterfacesC-45Applicative-u--pure_Applicative_ComposeC-40C-40C-46C-32C-36fC-41C-32C-36gC-41 (lambda (arg-3 arg-4 ext-0) (let ((e-2 (vector-ref arg-3 1))) ((e-2 'erased) (let ((e-5 (vector-ref arg-4 1))) ((e-5 'erased) ext-0))))))
(define SystemC-45FileC-45ReadWrite-readLinesOnto (lambda (arg-1 arg-2 arg-3 arg-4 arg-5) (if (null? arg-4) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) (vector 1 (cons 0 (PreludeC-45TypesC-45List-reverse arg-2))))))) (let ((e-0 (unbox arg-4))) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (SystemC-45FileC-45ReadWrite-fEOF arg-1 arg-5)) (lambda (_-0) (cond ((equal? _-0 0) (cond ((equal? arg-3 0) (PreludeC-45InterfacesC-45Monad-u--C-62C-62C-61_Monad_ComposeC-40C-40C-46C-32C-36mC-41C-32C-36tC-41 (let ((e-7 (car arg-1))) e-7) (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (case (vector-ref arg-8743 0) ((0) (let ((e-6 (vector-ref arg-8743 1))) (vector 0 e-6))) (else (let ((e-6 (vector-ref arg-8743 1))) (vector 1 (u--func e-6))))))))) (lambda (u--a) (lambda (arg-9789) (vector 1 arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (case (vector-ref arg-9795 0) ((0) (let ((e-6 (vector-ref arg-9795 1))) (vector 0 e-6))) (else (let ((e-6 (vector-ref arg-9795 1))) (case (vector-ref arg-9802 0) ((1) (let ((e-8 (vector-ref arg-9802 1))) (vector 1 (e-6 e-8)))) (else (let ((e-11 (vector-ref arg-9802 1))) (vector 0 e-11)))))))))))) csegen-154 csegen-155) (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (case (vector-ref arg-8743 0) ((0) (let ((e-6 (vector-ref arg-8743 1))) (vector 0 e-6))) (else (let ((e-6 (vector-ref arg-8743 1))) (vector 1 (u--func e-6))))))))) csegen-171 csegen-175) (SystemC-45FileC-45ReadWrite-fGetLine arg-1 arg-5) (lambda (u--str) (SystemC-45FileC-45ReadWrite-readLinesOnto arg-1 (cons u--str arg-2) 0 (e-0) arg-5))))(else (let ((e-6 (- arg-3 1))) (PreludeC-45Interfaces-C-42C-62 (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (PreludeC-45InterfacesC-45Functor-u--map_Functor_ComposeC-40C-40C-46C-32C-36fC-41C-32C-36gC-41 (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) (let ((e-14 (vector-ref e-11 0))) e-14))) (lambda (b-0) (lambda (a-0) (lambda (func-0) (lambda (arg-8744) (case (vector-ref arg-8744 0) ((0) (let ((e-7 (vector-ref arg-8744 1))) (vector 0 e-7))) (else (let ((e-7 (vector-ref arg-8744 1))) (vector 1 (func-0 e-7))))))))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (PreludeC-45InterfacesC-45Applicative-u--pure_Applicative_ComposeC-40C-40C-46C-32C-36fC-41C-32C-36gC-41 (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) e-11)) (vector (lambda (u--b) (lambda (a-0) (lambda (u--func) (lambda (arg-8743) (case (vector-ref arg-8743 0) ((0) (let ((e-7 (vector-ref arg-8743 1))) (vector 0 e-7))) (else (let ((e-7 (vector-ref arg-8743 1))) (vector 1 (u--func e-7))))))))) (lambda (a-0) (lambda (arg-9790) (vector 1 arg-9790))) (lambda (u--b) (lambda (a-0) (lambda (arg-9795) (lambda (arg-9802) (case (vector-ref arg-9795 0) ((0) (let ((e-7 (vector-ref arg-9795 1))) (vector 0 e-7))) (else (let ((e-7 (vector-ref arg-9795 1))) (case (vector-ref arg-9802 0) ((1) (let ((e-8 (vector-ref arg-9802 1))) (vector 1 (e-7 e-8)))) (else (let ((e-11 (vector-ref arg-9802 1))) (vector 0 e-11)))))))))))) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (PreludeC-45InterfacesC-45Applicative-u--C-60C-42C-62_Applicative_ComposeC-40C-40C-46C-32C-36fC-41C-32C-36gC-41 (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) e-11)) (vector (lambda (b-0) (lambda (a-0) (lambda (u--func) (lambda (arg-8743) (case (vector-ref arg-8743 0) ((0) (let ((e-7 (vector-ref arg-8743 1))) (vector 0 e-7))) (else (let ((e-7 (vector-ref arg-8743 1))) (vector 1 (u--func e-7))))))))) (lambda (a-0) (lambda (arg-9789) (vector 1 arg-9789))) (lambda (b-0) (lambda (a-0) (lambda (arg-9796) (lambda (arg-9803) (case (vector-ref arg-9796 0) ((0) (let ((e-7 (vector-ref arg-9796 1))) (vector 0 e-7))) (else (let ((e-7 (vector-ref arg-9796 1))) (case (vector-ref arg-9803 0) ((1) (let ((e-8 (vector-ref arg-9803 1))) (vector 1 (e-7 e-8)))) (else (let ((e-11 (vector-ref arg-9803 1))) (vector 0 e-11)))))))))))) arg-9795 arg-9802)))))) (SystemC-45FileC-45ReadWrite-fSeekLine arg-1 arg-5) (SystemC-45FileC-45ReadWrite-readLinesOnto arg-1 arg-2 e-6 (box e-0) arg-5)))))) (else (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (vector 1 (cons 1 (PreludeC-45TypesC-45List-reverse arg-2)))))))))))))))))
(define SystemC-45FileC-45Handle-withFile (lambda (arg-3 arg-4 arg-5 arg-6 arg-7) (let ((e-1 (car arg-3))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (SystemC-45FileC-45Handle-openFile arg-3 arg-4 arg-5)) (lambda (_-0) (case (vector-ref _-0 0) ((1) (let ((e-6 (vector-ref _-0 1))) (let ((e-8 (car arg-3))) (let ((e-10 (vector-ref e-8 1))) ((((e-10 'erased) 'erased) (arg-7 e-6)) (lambda (u--res) (let ((e-13 (car arg-3))) (let ((e-15 (vector-ref e-13 1))) ((((e-15 'erased) 'erased) (SystemC-45FileC-45Handle-closeFile arg-3 e-6)) (lambda (_-10507) (let ((e-18 (car arg-3))) (let ((e-21 (vector-ref e-18 0))) (let ((e-23 (vector-ref e-21 1))) ((e-23 'erased) u--res)))))))))))))) (else (let ((e-6 (vector-ref _-0 1))) (let ((e-8 (car arg-3))) (let ((e-11 (vector-ref e-8 0))) (let ((e-14 (vector-ref e-11 0))) ((((e-14 'erased) 'erased) (lambda (eta-0) (vector 0 eta-0))) (arg-6 e-6))))))))))))))
(define SystemC-45FileC-45ReadWrite-readFilePage (lambda (arg-1 arg-2 arg-3 arg-4) (SystemC-45FileC-45Handle-withFile arg-1 arg-4 0 (lambda (eta-0) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) eta-0))))) (lambda (eta-0) (SystemC-45FileC-45ReadWrite-readLinesOnto arg-1 '() arg-2 arg-3 eta-0)))))
(define SystemC-45FileC-45ReadWrite-readFile (lambda (arg-1 ext-0) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) ((((e-8 'erased) 'erased) (lambda (eta-0) (case (vector-ref eta-0 0) ((0) (let ((e-9 (vector-ref eta-0 1))) (vector 0 e-9))) (else (let ((e-9 (vector-ref eta-0 1))) (vector 1 (PreludeC-45Types-fastConcat (Builtin-snd e-9)))))))) (SystemC-45FileC-45ReadWrite-readFilePage arg-1 0 (DataC-45Fuel-forever) ext-0)))))))
(define PackC-45CoreC-45IO-read (lambda (arg-1 arg-2) (PackC-45CoreC-45IO-eitherIO arg-1 (lambda (eta-0) (vector 4 arg-2 eta-0)) (SystemC-45FileC-45ReadWrite-readFile arg-1 (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 (let ((e-1 (car arg-2))) (let ((e-2 (cdr arg-2))) (DataC-45FilePath-C-60C-47C-62 e-1 (vector 1 (cons '() e-2)))))) '()))))))
(define PreludeC-45Types-getAt (lambda (arg-1 arg-2) (cond ((equal? arg-1 0) (if (null? arg-2) '() (let ((e-3 (car arg-2))) (box e-3))))(else (let ((e-1 (- arg-1 1))) (if (null? arg-2) '() (let ((e-7 (cdr arg-2))) (PreludeC-45Types-getAt e-1 e-7))))))))
(define PreludeC-45Show-protectEsc (lambda (arg-0 arg-1 arg-2) (string-append arg-1 (string-append (let ((sc0 (PreludeC-45Show-firstCharIs arg-0 arg-2))) (cond ((equal? sc0 1) "\\&") (else ""))) arg-2))))
(define PreludeC-45Show-n--2437-11789-u--asciiTab (lambda (arg-0) (cons "NUL" (cons "SOH" (cons "STX" (cons "ETX" (cons "EOT" (cons "ENQ" (cons "ACK" (cons "BEL" (cons "BS" (cons "HT" (cons "LF" (cons "VT" (cons "FF" (cons "CR" (cons "SO" (cons "SI" (cons "DLE" (cons "DC1" (cons "DC2" (cons "DC3" (cons "DC4" (cons "NAK" (cons "SYN" (cons "ETB" (cons "CAN" (cons "EM" (cons "SUB" (cons "ESC" (cons "FS" (cons "GS" (cons "RS" (cons "US" '()))))))))))))))))))))))))))))))))))
(define PreludeC-45Show-showLitChar (lambda (arg-0) (cond ((equal? arg-0 (integer->char 7)) (lambda (arg-1) (string-append "\\a" arg-1))) ((equal? arg-0 (integer->char 8)) (lambda (arg-1) (string-append "\\b" arg-1))) ((equal? arg-0 (integer->char 12)) (lambda (arg-1) (string-append "\\f" arg-1))) ((equal? arg-0 (integer->char 10)) (lambda (arg-1) (string-append "\\n" arg-1))) ((equal? arg-0 (integer->char 13)) (lambda (arg-1) (string-append "\\r" arg-1))) ((equal? arg-0 (integer->char 9)) (lambda (arg-1) (string-append "\\t" arg-1))) ((equal? arg-0 (integer->char 11)) (lambda (arg-1) (string-append "\\v" arg-1))) ((equal? arg-0 (integer->char 14)) (lambda (eta-0) (PreludeC-45Show-protectEsc (lambda (arg-1) (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\H)) "\\SO" eta-0))) ((equal? arg-0 (integer->char 127)) (lambda (arg-1) (string-append "\\DEL" arg-1))) ((equal? arg-0 #\\) (lambda (arg-1) (string-append "\\\\" arg-1)))(else (lambda (clam-0) (let ((sc0 (PreludeC-45Types-getAt (PreludeC-45Types-prim__integerToNat (char->integer arg-0)) (PreludeC-45Show-n--2437-11789-u--asciiTab arg-0)))) (if (null? sc0) (let ((sc1 (PreludeC-45EqOrd-u--C-62_Ord_Char arg-0 (integer->char 127)))) (cond ((equal? sc1 1) (string-cons #\\ (PreludeC-45Show-protectEsc (lambda (eta-0) (PreludeC-45Types-isDigit eta-0)) (PreludeC-45Show-u--show_Show_Int (cast-char-boundedInt arg-0 63)) clam-0))) (else (string-cons arg-0 clam-0)))) (let ((e-1 (unbox sc0))) (string-cons #\\ (string-append e-1 clam-0))))))))))
(define PreludeC-45Show-showLitString (lambda (arg-0) (lambda (clam-0) (if (null? arg-0) clam-0 (let ((e-2 (car arg-0))) (let ((e-3 (cdr arg-0))) (cond ((equal? e-2 #\") (string-append "\\\"" ((PreludeC-45Show-showLitString e-3) clam-0)))(else ((PreludeC-45Show-showLitChar e-2) ((PreludeC-45Show-showLitString e-3) clam-0))))))))))
(define PreludeC-45Show-u--show_Show_String (lambda (arg-0) (string-cons #\" ((PreludeC-45Show-showLitString (PreludeC-45Types-fastUnpack arg-0)) "\""))))
(define PreludeC-45Show-u--showPrec_Show_String (lambda (arg-0 arg-1) (PreludeC-45Show-u--show_Show_String arg-1)))
(define PreludeC-45Show-n--3219-12510-u--showC-39 (lambda (arg-1 arg-2 arg-3 arg-4) (if (null? arg-4) arg-3 (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) (if (null? e-3) (string-append arg-3 (let ((e-1 (car arg-1))) (e-1 e-2))) (PreludeC-45Show-n--3219-12510-u--showC-39 arg-1 arg-2 (string-append arg-3 (string-append (let ((e-1 (car arg-1))) (e-1 e-2)) ", ")) e-3)))))))
(define PreludeC-45Show-u--show_Show_C-40ListC-32C-36aC-41 (lambda (arg-1 arg-2) (string-append "[" (string-append (PreludeC-45Show-n--3219-12510-u--showC-39 arg-1 arg-2 "" arg-2) "]"))))
(define LanguageC-45TOML-u--show_Show_Error (lambda (arg-0) (case (vector-ref arg-0 0) ((0) (let ((e-0 (vector-ref arg-0 1))) (string-append "Dotted key part `" (string-append (PreludeC-45Show-u--show_Show_String e-0) "`is not a table")))) ((1) "Lexer error") ((2) (let ((e-2 (vector-ref arg-0 1))) (string-append "Parse error: " (PreludeC-45Show-u--show_Show_C-40ListC-32C-36aC-41 (cons (lambda (u--x) (PreludeC-45Show-u--show_Show_String u--x)) (lambda (u--d) (lambda (u--x) (PreludeC-45Show-u--showPrec_Show_String u--d u--x)))) e-2)))) (else "Unimplemented feature"))))
(define PackC-45CoreC-45TOML-readTOML (lambda (arg-1 arg-2) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-read arg-1 arg-2) (lambda (u--str) (let ((sc0 (LanguageC-45TOML-parseTOML u--str))) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 1))) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) e-6)) (vector 5 e-2)))) (else (let ((e-5 (vector-ref sc0 1))) (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-6 1))) ((e-8 'erased) (vector 0 (vector 32 arg-2 (LanguageC-45TOML-u--show_Show_Error e-5)))))))))))))))
(define ControlC-45MonadC-45ErrorC-45Interface-u--throwError_MonadError_C-36e_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (lambda (arg-3 ext-0) (let ((e-1 (vector-ref arg-3 0))) (let ((e-5 (vector-ref e-1 1))) ((e-5 'erased) (vector 0 ext-0))))))
(define PackC-45CoreC-45TOML-readFromTOML (lambda (arg-1 arg-3 arg-4) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45TOML-readTOML arg-1 arg-4) (lambda (u--v) (ControlC-45MonadC-45ErrorC-45Interface-liftEither (vector (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-2204) (ControlC-45MonadC-45ErrorC-45Interface-u--throwError_MonadError_C-36e_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-2204))) (lambda (u--a) (lambda (arg-2210) (lambda (arg-2213) (ControlC-45MonadC-45ErrorC-45Either-catchE (let ((e-1 (car arg-1))) e-1) arg-2210 arg-2213))))) (let ((sc0 ((arg-3 arg-4) u--v))) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 (vector 31 arg-4 e-2)))) (else (let ((e-5 (vector-ref sc0 1))) (vector 1 e-5))))))))))
(define DataC-45FilePathC-45File-splitFileName (lambda (arg-1) (let ((e-1 (car arg-1))) (let ((e-2 (cdr arg-1))) (PreludeC-45Types-u--C-62C-62C-61_Monad_Maybe (DataC-45FilePathC-45Body-split e-2) (lambda (_-0) (let ((e-4 (car _-0))) (let ((e-3 (cdr _-0))) (box (cons (cons e-1 e-4) e-3))))))))))
(define DataC-45FilePathC-45File-stemAndExt (lambda (ext-0) (PreludeC-45Types-u--map_Functor_Maybe (lambda (lamc-0) (let ((e-2 (car lamc-0))) (let ((e-3 (cdr lamc-0))) (let ((e-6 (cdr e-2))) (cons e-6 e-3))))) (DataC-45FilePathC-45File-splitFileName ext-0))))
(define PackC-45DatabaseC-45Types-toLatest (lambda (arg-0) (case (vector-ref arg-0 0) ((0) (let ((e-0 (vector-ref arg-0 1))) (vector 1 e-0)))(else arg-0))))
(define PackC-45DatabaseC-45TOML-idrisRepo "https://github.com/idris-lang/Idris2.git")
(define PackC-45CoreC-45Types-prefixKey (lambda (arg-1 ext-0) (case (vector-ref ext-0 0) ((0) (let ((e-2 (vector-ref ext-0 1))) (vector 0 (case (vector-ref e-2 0) ((0) (let ((e-0 (vector-ref e-2 1))) (vector 0 (cons arg-1 e-0)))) (else (let ((e-1 (vector-ref e-2 1))) (let ((e-3 (vector-ref e-2 2))) (vector 1 (cons arg-1 e-1) e-3)))))))) (else (let ((e-5 (vector-ref ext-0 1))) (vector 1 e-5))))))
(define PackC-45CoreC-45TOML-n--5948-6423-u--go (lambda (arg-1 arg-2 arg-3 arg-4 arg-5) (if (null? arg-4) (arg-3 arg-5) (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) (case (vector-ref arg-5 0) ((5) (let ((e-4 (vector-ref arg-5 1))) (let ((sc2 (DataC-45SortedMap-lookup e-2 e-4))) (if (null? sc2) (if (null? arg-1) (vector 0 (vector 0 (cons e-2 '()))) (let ((e-5 (unbox arg-1))) (vector 1 e-5))) (let ((e-5 (unbox sc2))) (PackC-45CoreC-45Types-prefixKey e-2 (PackC-45CoreC-45TOML-n--5948-6423-u--go arg-1 arg-2 arg-3 e-3 e-5)))))))(else (vector 0 (vector 1 '() "Table")))))))))
(define PackC-45CoreC-45TOML-valAtC-39 (lambda (arg-1 arg-2 arg-3 ext-0) (PackC-45CoreC-45TOML-n--5948-6423-u--go arg-3 arg-2 arg-1 (DataC-45List1-forget (DataC-45String-split csegen-378 arg-2)) ext-0)))
(define PackC-45CoreC-45TOML-maybeValAtC-39 (lambda (arg-1 arg-2 ext-0) (PackC-45CoreC-45TOML-valAtC-39 (lambda (eta-0) (let ((sc0 (arg-1 eta-0))) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (vector 1 (box e-5))))))) arg-2 (box '()) ext-0)))
(define PackC-45CoreC-45TOML-toRelFile (lambda (arg-0) (case (vector-ref arg-0 0) ((1) (let ((e-2 (vector-ref arg-0 1))) (if (null? e-2) (vector 0 (vector 1 '() "relative file path")) (let ((e-4 (car e-2))) (let ((e-5 (cdr e-2))) (vector 1 (cons (vector 1 e-4) e-5)))))))(else (vector 0 (vector 1 '() "relative file path"))))))
(define PackC-45CoreC-45TOML-trefine (lambda (arg-2 arg-3 arg-4 arg-5) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 ((arg-2 arg-4) arg-5) arg-3)))
(define PackC-45CoreC-45TOML-u--fromTOML_FromTOML_Bool (lambda (arg-0 arg-1) (case (vector-ref arg-1 0) ((3) (let ((e-0 (vector-ref arg-1 1))) (vector 1 e-0)))(else (vector 0 (vector 1 '() "Bool"))))))
(define PackC-45CoreC-45TOML-u--fromTOML_FromTOML_URL (lambda (ext-1 ext-0) (PackC-45CoreC-45TOML-tmap csegen-449 (lambda (eta-0) eta-0) ext-1 ext-0)))
(define PackC-45DatabaseC-45TOML-git (lambda (arg-1 arg-2 arg-3) (let ((sc0 (let ((sc1 (let ((sc2 (let ((sc3 (PackC-45CoreC-45TOML-valAtC-39 (lambda (arg-4) (PackC-45CoreC-45TOML-u--fromTOML_FromTOML_URL arg-2 arg-4)) "url" '() arg-3))) (case (vector-ref sc3 0) ((1) (let ((e-8 (vector-ref sc3 1))) (let ((sc4 (PackC-45CoreC-45TOML-valAtC-39 (lambda (arg-4) ((arg-1 arg-2) arg-4)) "commit" '() arg-3))) (case (vector-ref sc4 0) ((1) (let ((e-9 (vector-ref sc4 1))) (vector 1 (lambda (eta-2) (lambda (eta-3) (lambda (eta-4) (vector 0 e-8 e-9 eta-2 eta-3 eta-4))))))) (else (let ((e-11 (vector-ref sc4 1))) (vector 0 e-11))))))) (else (let ((e-11 (vector-ref sc3 1))) (vector 0 e-11))))))) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc2 1))) (let ((sc3 (PackC-45CoreC-45TOML-valAtC-39 (lambda (arg-4) (PackC-45CoreC-45TOML-trefine csegen-448 (lambda (eta-0) (PackC-45CoreC-45TOML-toRelFile eta-0)) arg-2 arg-4)) "ipkg" '() arg-3))) (case (vector-ref sc3 0) ((1) (let ((e-8 (vector-ref sc3 1))) (vector 1 (e-5 e-8)))) (else (let ((e-11 (vector-ref sc3 1))) (vector 0 e-11))))))))))) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 (PackC-45CoreC-45TOML-valAtC-39 (lambda (arg-4) (PackC-45CoreC-45TOML-u--fromTOML_FromTOML_Bool arg-2 arg-4)) "packagePath" (box 0) arg-3))) (case (vector-ref sc2 0) ((1) (let ((e-8 (vector-ref sc2 1))) (vector 1 (e-5 e-8)))) (else (let ((e-11 (vector-ref sc2 1))) (vector 0 e-11))))))))))) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 (PackC-45CoreC-45TOML-maybeValAtC-39 (lambda (arg-4) (PackC-45CoreC-45TOML-trefine csegen-448 (lambda (eta-0) (PackC-45CoreC-45TOML-toRelFile eta-0)) arg-2 arg-4)) "test" arg-3))) (case (vector-ref sc1 0) ((1) (let ((e-8 (vector-ref sc1 1))) (vector 1 (e-5 e-8)))) (else (let ((e-11 (vector-ref sc1 1))) (vector 0 e-11)))))))))))
(define PackC-45CoreC-45Types-toAbsPath (lambda (arg-0 arg-1) (case (vector-ref arg-1 0) ((0) (let ((e-2 (vector-ref arg-1 1))) (vector 0 e-2))) (else (let ((e-3 (vector-ref arg-1 1))) (DataC-45FilePath-C-60C-47C-62 arg-0 (vector 1 e-3)))))))
(define PackC-45CoreC-45TOML-u--fromTOML_FromTOML_C-40PathC-32AbsC-41 (lambda (arg-0 arg-1) (let ((sc0 (PackC-45CoreC-45TOML-u--fromTOML_FromTOML_FilePath arg-0 arg-1))) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (vector 1 (PackC-45CoreC-45Types-toAbsPath (let ((e-1 (car arg-0))) e-1) e-5))))))))
(define PackC-45DatabaseC-45TOML-local (lambda (arg-1 arg-2) (let ((sc0 (let ((sc1 (let ((sc2 (PackC-45CoreC-45TOML-valAtC-39 (lambda (arg-3) (PackC-45CoreC-45TOML-u--fromTOML_FromTOML_C-40PathC-32AbsC-41 arg-1 arg-3)) "path" '() arg-2))) (case (vector-ref sc2 0) ((1) (let ((e-8 (vector-ref sc2 1))) (let ((sc3 (PackC-45CoreC-45TOML-valAtC-39 (lambda (arg-3) (PackC-45CoreC-45TOML-trefine csegen-448 (lambda (eta-0) (PackC-45CoreC-45TOML-toRelFile eta-0)) arg-1 arg-3)) "ipkg" '() arg-2))) (case (vector-ref sc3 0) ((1) (let ((e-9 (vector-ref sc3 1))) (vector 1 (lambda (eta-2) (lambda (eta-3) (vector 1 e-8 e-9 eta-2 eta-3)))))) (else (let ((e-11 (vector-ref sc3 1))) (vector 0 e-11))))))) (else (let ((e-11 (vector-ref sc2 1))) (vector 0 e-11))))))) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 (PackC-45CoreC-45TOML-valAtC-39 (lambda (arg-3) (PackC-45CoreC-45TOML-u--fromTOML_FromTOML_Bool arg-1 arg-3)) "packagePath" (box 0) arg-2))) (case (vector-ref sc2 0) ((1) (let ((e-8 (vector-ref sc2 1))) (vector 1 (e-5 e-8)))) (else (let ((e-11 (vector-ref sc2 1))) (vector 0 e-11))))))))))) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 (PackC-45CoreC-45TOML-maybeValAtC-39 (lambda (arg-3) (PackC-45CoreC-45TOML-trefine csegen-448 (lambda (eta-0) (PackC-45CoreC-45TOML-toRelFile eta-0)) arg-1 arg-3)) "test" arg-2))) (case (vector-ref sc1 0) ((1) (let ((e-8 (vector-ref sc1 1))) (vector 1 (e-5 e-8)))) (else (let ((e-11 (vector-ref sc1 1))) (vector 0 e-11)))))))))))
(define PackC-45DatabaseC-45TOML-package (lambda (arg-1 arg-2 arg-3) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (PackC-45CoreC-45TOML-valAtC-39 (lambda (arg-4) (PackC-45CoreC-45TOML-u--fromTOML_FromTOML_String arg-2 arg-4)) "type" '() arg-3) (lambda (lcase-0) (cond ((equal? lcase-0 "git") (PackC-45DatabaseC-45TOML-git arg-1 arg-2 arg-3)) ((equal? lcase-0 "github") (PackC-45DatabaseC-45TOML-git arg-1 arg-2 arg-3)) ((equal? lcase-0 "local") (PackC-45DatabaseC-45TOML-local arg-2 arg-3))(else (vector 0 (vector 1 (cons "type" '()) "Package Type"))))))))
(define PackC-45CoreC-45TOML-u--fromKey_TOMLKey_PkgName (lambda (ext-0) (vector 1 ext-0)))
(define PackC-45CoreC-45TOML-keyVal (lambda (arg-2 arg-3 arg-4) (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) (PackC-45CoreC-45Types-prefixKey e-2 (let ((e-4 (cdr arg-2))) (let ((sc2 (e-4 e-2))) (case (vector-ref sc2 0) ((1) (let ((e-8 (vector-ref sc2 1))) (let ((sc3 (arg-3 e-3))) (case (vector-ref sc3 0) ((1) (let ((e-9 (vector-ref sc3 1))) (vector 1 (cons e-8 e-9)))) (else (let ((e-11 (vector-ref sc3 1))) (vector 0 e-11))))))) (else (let ((e-11 (vector-ref sc2 1))) (vector 0 e-11)))))))))))
(define PackC-45CoreC-45TOML-u--fromTOML_FromTOML_C-40C-40SortedMapC-32C-36kC-41C-32C-36vC-41 (lambda (arg-2 arg-3 arg-4 arg-5) (case (vector-ref arg-5 0) ((5) (let ((e-0 (vector-ref arg-5 1))) (let ((sc1 (PreludeC-45Types-u--traverse_Traversable_List (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (case (vector-ref arg-8743 0) ((0) (let ((e-2 (vector-ref arg-8743 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref arg-8743 1))) (vector 1 (u--func e-5))))))))) (lambda (u--a) (lambda (arg-9789) (vector 1 arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (case (vector-ref arg-9795 0) ((0) (let ((e-2 (vector-ref arg-9795 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref arg-9795 1))) (case (vector-ref arg-9802 0) ((1) (let ((e-8 (vector-ref arg-9802 1))) (vector 1 (e-5 e-8)))) (else (let ((e-11 (vector-ref arg-9802 1))) (vector 0 e-11)))))))))))) (lambda (eta-0) (PackC-45CoreC-45TOML-keyVal arg-2 (lambda (arg-1) ((arg-3 arg-4) arg-1)) eta-0)) (DataC-45SortedMap-toList e-0)))) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (vector 1 (DataC-45SortedMap-fromList (let ((e-1 (car arg-2))) e-1) e-5))))))))(else (vector 0 (vector 1 '() "Table"))))))
(define PackC-45DatabaseC-45Types-u--fromString_FromString_MetaCommit (lambda (arg-0) (let ((sc0 (DataC-45List1-forget (DataC-45String-split (lambda (arg-1) (PreludeC-45EqOrd-u--C-61C-61_Eq_Char #\: arg-1)) arg-0)))) (if (null? sc0) (vector 0 arg-0) (let ((e-1 (car sc0))) (let ((e-2 (cdr sc0))) (cond ((equal? e-1 "latest") (if (null? e-2) (vector 0 arg-0) (let ((e-4 (car e-2))) (let ((e-5 (cdr e-2))) (if (null? e-5) (vector 1 e-4) (vector 0 arg-0)))))) ((equal? e-1 "fetch-latest") (if (null? e-2) (vector 0 arg-0) (let ((e-8 (car e-2))) (let ((e-9 (cdr e-2))) (if (null? e-9) (vector 2 e-8) (vector 0 arg-0))))))(else (vector 0 arg-0)))))))))
(define PackC-45DatabaseC-45TOML-u--fromTOML_FromTOML_MetaCommit (lambda (ext-1 ext-0) (PackC-45CoreC-45TOML-tmap (lambda (eta-0) (lambda (eta-1) (PackC-45CoreC-45TOML-u--fromTOML_FromTOML_String eta-0 eta-1))) (lambda (eta-0) (PackC-45DatabaseC-45Types-u--fromString_FromString_MetaCommit eta-0)) ext-1 ext-0)))
(define DataC-45String-parseNumWithoutSign (lambda (arg-0 arg-1) (if (null? arg-0) (box arg-1) (let ((e-2 (car arg-0))) (let ((e-3 (cdr arg-0))) (let ((sc1 (let ((sc2 (PreludeC-45EqOrd-u--C-62C-61_Ord_Char e-2 #\0))) (cond ((equal? sc2 1) (PreludeC-45EqOrd-u--C-60C-61_Ord_Char e-2 #\9)) (else 0))))) (cond ((equal? sc1 1) (DataC-45String-parseNumWithoutSign e-3 (+ (* arg-1 10) (bs- (cast-char-boundedInt e-2 63) (cast-char-boundedInt #\0 63) 63)))) (else '()))))))))
(define DataC-45String-with--parsePositiveC-44parsePosTrimmed-8319 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (cond ((equal? arg-3 "") (if (null? arg-4) '() (let ((e-0 (car arg-4))) (let ((e-1 (cdr arg-4))) (cond ((equal? e-0 #\+) (PreludeC-45Types-u--map_Functor_Maybe (lambda (eta-0) (let ((e-3 (vector-ref arg-1 2))) (e-3 eta-0))) (DataC-45String-parseNumWithoutSign (PreludeC-45Types-fastUnpack e-1) 0)))(else (let ((sc3 (let ((sc4 (PreludeC-45EqOrd-u--C-62C-61_Ord_Char e-0 #\0))) (cond ((equal? sc4 1) (PreludeC-45EqOrd-u--C-60C-61_Ord_Char e-0 #\9)) (else 0))))) (cond ((equal? sc3 1) (PreludeC-45Types-u--map_Functor_Maybe (lambda (eta-0) (let ((e-3 (vector-ref arg-1 2))) (e-3 eta-0))) (DataC-45String-parseNumWithoutSign (PreludeC-45Types-fastUnpack e-1) (bs- (cast-char-boundedInt e-0 63) (cast-char-boundedInt #\0 63) 63)))) (else '())))))))))(else (let ((e-0 (car arg-4))) (let ((e-1 (cdr arg-4))) (cond ((equal? e-0 #\+) (PreludeC-45Types-u--map_Functor_Maybe (lambda (eta-0) (let ((e-3 (vector-ref arg-1 2))) (e-3 eta-0))) (DataC-45String-parseNumWithoutSign (PreludeC-45Types-fastUnpack e-1) 0)))(else (let ((sc1 (let ((sc2 (PreludeC-45EqOrd-u--C-62C-61_Ord_Char e-0 #\0))) (cond ((equal? sc2 1) (PreludeC-45EqOrd-u--C-60C-61_Ord_Char e-0 #\9)) (else 0))))) (cond ((equal? sc1 1) (PreludeC-45Types-u--map_Functor_Maybe (lambda (eta-0) (let ((e-3 (vector-ref arg-1 2))) (e-3 eta-0))) (DataC-45String-parseNumWithoutSign (PreludeC-45Types-fastUnpack e-1) (bs- (cast-char-boundedInt e-0 63) (cast-char-boundedInt #\0 63) 63)))) (else '())))))))))))
(define DataC-45String-n--4488-8313-u--parsePosTrimmed (lambda (arg-1 arg-2 arg-3) (DataC-45String-with--parsePositiveC-44parsePosTrimmed-8319 'erased arg-1 arg-3 arg-3 (DataC-45String-strM arg-3))))
(define DataC-45String-parsePositive (lambda (arg-1 arg-2) (DataC-45String-n--4488-8313-u--parsePosTrimmed arg-1 arg-2 (DataC-45String-trim arg-2))))
(define DataC-45List1-u--traverse_Traversable_List1 (lambda (arg-3 arg-4 arg-5) (let ((e-1 (car arg-5))) (let ((e-2 (cdr arg-5))) (let ((e-3 (vector-ref arg-3 2))) ((((e-3 'erased) 'erased) (let ((e-6 (vector-ref arg-3 2))) ((((e-6 'erased) 'erased) (let ((e-10 (vector-ref arg-3 1))) ((e-10 'erased) csegen-201))) (arg-4 e-1)))) (PreludeC-45Types-u--traverse_Traversable_List arg-3 arg-4 e-2)))))))
(define PackC-45CoreC-45TOML-readVersion (lambda (arg-0) (let ((sc0 (DataC-45List1-u--traverse_Traversable_List1 csegen-374 (lambda (eta-0) (DataC-45String-parsePositive (vector (lambda (arg-5762) (lambda (arg-5765) (+ arg-5762 arg-5765))) (lambda (arg-5772) (lambda (arg-5775) (* arg-5772 arg-5775))) (lambda (arg-5782) (PreludeC-45Types-prim__integerToNat arg-5782))) eta-0)) (DataC-45String-split csegen-378 arg-0)))) (if (null? sc0) (vector 0 (vector 1 '() "Package Version")) (let ((e-1 (unbox sc0))) (vector 1 e-1))))))
(define PackC-45CoreC-45TOML-u--fromTOML_FromTOML_PkgVersion (lambda (ext-0 ext-1) (PackC-45CoreC-45TOML-trefine csegen-449 (lambda (eta-0) (PackC-45CoreC-45TOML-readVersion eta-0)) ext-0 ext-1)))
(define PackC-45DatabaseC-45TOML-u--fromTOML_FromTOML_MetaDB (lambda (arg-0 arg-1) (let ((sc0 (let ((sc1 (let ((sc2 (PackC-45CoreC-45TOML-valAtC-39 (lambda (arg-2) (PackC-45CoreC-45TOML-u--fromTOML_FromTOML_URL arg-0 arg-2)) "idris2.url" (box PackC-45DatabaseC-45TOML-idrisRepo) arg-1))) (case (vector-ref sc2 0) ((1) (let ((e-8 (vector-ref sc2 1))) (let ((sc3 (PackC-45CoreC-45TOML-valAtC-39 (lambda (arg-2) (PackC-45DatabaseC-45TOML-u--fromTOML_FromTOML_MetaCommit arg-0 arg-2)) "idris2.commit" '() arg-1))) (case (vector-ref sc3 0) ((1) (let ((e-9 (vector-ref sc3 1))) (vector 1 (lambda (eta-2) (lambda (eta-3) (vector e-8 e-9 eta-2 eta-3)))))) (else (let ((e-11 (vector-ref sc3 1))) (vector 0 e-11))))))) (else (let ((e-11 (vector-ref sc2 1))) (vector 0 e-11))))))) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 (PackC-45CoreC-45TOML-valAtC-39 (lambda (arg-2) (PackC-45CoreC-45TOML-u--fromTOML_FromTOML_PkgVersion arg-0 arg-2)) "idris2.version" '() arg-1))) (case (vector-ref sc2 0) ((1) (let ((e-8 (vector-ref sc2 1))) (vector 1 (e-5 e-8)))) (else (let ((e-11 (vector-ref sc2 1))) (vector 0 e-11))))))))))) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 (PackC-45CoreC-45TOML-valAtC-39 (lambda (arg-2) (PackC-45CoreC-45TOML-u--fromTOML_FromTOML_C-40C-40SortedMapC-32C-36kC-41C-32C-36vC-41 (cons csegen-309 (lambda (u--k) (PackC-45CoreC-45TOML-u--fromKey_TOMLKey_PkgName u--k))) (lambda (arg-6283) (lambda (u--val) (PackC-45DatabaseC-45TOML-package (lambda (arg-6284) (lambda (val-0) (PackC-45DatabaseC-45TOML-u--fromTOML_FromTOML_MetaCommit arg-6284 val-0))) arg-6283 u--val))) arg-0 arg-2)) "db" (box csegen-443) arg-1))) (case (vector-ref sc1 0) ((1) (let ((e-8 (vector-ref sc1 1))) (vector 1 (e-5 e-8)))) (else (let ((e-11 (vector-ref sc1 1))) (vector 0 e-11)))))))))))
(define DataC-45SortedMapC-45Dependent-treeMap (lambda (arg-5 arg-6) (case (vector-ref arg-6 0) ((0) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (vector 0 e-3 ((arg-5 e-3) e-4))))) ((1) (let ((e-9 (vector-ref arg-6 1))) (let ((e-10 (vector-ref arg-6 2))) (let ((e-11 (vector-ref arg-6 3))) (vector 1 (DataC-45SortedMapC-45Dependent-treeMap (lambda (x-7696) (arg-5 x-7696)) e-9) e-10 (DataC-45SortedMapC-45Dependent-treeMap (lambda (x-7707) (arg-5 x-7707)) e-11)))))) (else (let ((e-16 (vector-ref arg-6 1))) (let ((e-17 (vector-ref arg-6 2))) (let ((e-18 (vector-ref arg-6 3))) (let ((e-19 (vector-ref arg-6 4))) (let ((e-20 (vector-ref arg-6 5))) (vector 2 (DataC-45SortedMapC-45Dependent-treeMap (lambda (x-7744) (arg-5 x-7744)) e-16) e-17 (DataC-45SortedMapC-45Dependent-treeMap (lambda (x-7755) (arg-5 x-7755)) e-18) e-19 (DataC-45SortedMapC-45Dependent-treeMap (lambda (x-7767) (arg-5 x-7767)) e-20)))))))))))
(define DataC-45SortedMapC-45Dependent-map (lambda (arg-3 arg-4) (case (vector-ref arg-4 0) ((0) (let ((e-2 (vector-ref arg-4 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref arg-4 1))) (let ((e-6 (vector-ref arg-4 2))) (let ((e-7 (vector-ref arg-4 3))) (vector 1 e-5 e-6 (DataC-45SortedMapC-45Dependent-treeMap (lambda (x-8092) (arg-3 x-8092)) e-7)))))))))
(define DataC-45SortedMap-u--map_Functor_C-40SortedMapC-32C-36kC-41 (lambda (arg-3 ext-0) (DataC-45SortedMapC-45Dependent-map (lambda (x-10390) arg-3) ext-0)))
(define PackC-45DatabaseC-45Types-u--map_Functor_Package_ (lambda (arg-2 arg-3) (case (vector-ref arg-3 0) ((0) (let ((e-1 (vector-ref arg-3 1))) (let ((e-2 (vector-ref arg-3 2))) (let ((e-3 (vector-ref arg-3 3))) (let ((e-4 (vector-ref arg-3 4))) (let ((e-5 (vector-ref arg-3 5))) (vector 0 e-1 (arg-2 e-2) e-3 e-4 e-5))))))) ((1) (let ((e-7 (vector-ref arg-3 1))) (let ((e-8 (vector-ref arg-3 2))) (let ((e-9 (vector-ref arg-3 3))) (let ((e-10 (vector-ref arg-3 4))) (vector 1 e-7 e-8 e-9 e-10)))))) (else (let ((e-12 (vector-ref arg-3 1))) (vector 2 e-12))))))
(define PackC-45DatabaseC-45Types-u--map_Functor_DB_ (lambda (arg-2 arg-3) (let ((e-1 (vector-ref arg-3 0))) (let ((e-2 (vector-ref arg-3 1))) (let ((e-3 (vector-ref arg-3 2))) (let ((e-4 (vector-ref arg-3 3))) (vector e-1 (arg-2 e-2) e-3 (DataC-45SortedMap-u--map_Functor_C-40SortedMapC-32C-36kC-41 (lambda (eta-0) (PackC-45DatabaseC-45Types-u--map_Functor_Package_ arg-2 eta-0)) e-4))))))))
(define PackC-45ConfigC-45Environment-loadDB (lambda (arg-1 arg-2 arg-3 arg-4) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-missing (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (DataC-45FilePath-C-60C-47C-62 arg-3 csegen-779)) (lambda (bind-0) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) bind-0 (lambda () (PackC-45ConfigC-45Environment-updateDB arg-1 arg-2 arg-3))))) (lambda (_-10507) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45Logging-log (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (let ((e-23 (vector-ref arg-4 21))) e-23) 0 (lambda () "reading package collection")) (lambda (_-10508) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45TOML-readFromTOML arg-1 (lambda (eta-0) (lambda (eta-1) (PackC-45DatabaseC-45TOML-u--fromTOML_FromTOML_MetaDB eta-0 eta-1))) (PackC-45ConfigC-45Environment-dbFile arg-3 arg-4)) (lambda (u--raw) (let ((sc0 (PreludeC-45Types-u--map_Functor_Maybe (lambda (eta-0) (Builtin-fst eta-0)) (DataC-45FilePathC-45File-stemAndExt (PackC-45ConfigC-45Environment-dbFile arg-3 arg-4))))) (if (null? sc0) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) u--raw) (let ((e-1 (unbox sc0))) (if (null? e-1) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) e-6)) u--raw) (let ((e-5 (car e-1))) (let ((e-6 (cdr e-1))) (cond ((equal? e-5 #\H) (if (null? e-6) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-8 (vector-ref e-3 0))) e-8)) u--raw) (let ((e-8 (car e-6))) (let ((e-9 (cdr e-6))) (cond ((equal? e-8 #\E) (if (null? e-9) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-10 (vector-ref e-3 0))) e-10)) u--raw) (let ((e-11 (car e-9))) (let ((e-12 (cdr e-9))) (cond ((equal? e-11 #\A) (if (null? e-12) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-10 (vector-ref e-3 0))) e-10)) u--raw) (let ((e-14 (car e-12))) (let ((e-15 (cdr e-12))) (cond ((equal? e-14 #\D) (if (null? e-15) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-10 (vector-ref e-3 0))) e-10)) (PackC-45DatabaseC-45Types-u--map_Functor_DB_ (lambda (eta-0) (PackC-45DatabaseC-45Types-toLatest eta-0)) u--raw)) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-10 (vector-ref e-3 0))) e-10)) u--raw)))(else (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-10 (vector-ref e-3 0))) e-10)) u--raw)))))))(else (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-10 (vector-ref e-3 0))) e-10)) u--raw)))))))(else (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-10 (vector-ref e-3 0))) e-10)) u--raw)))))))(else (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-8 (vector-ref e-3 0))) e-8)) u--raw)))))))))))))))))
(define PackC-45ConfigC-45Environment-commitFile (lambda (arg-0 arg-1 arg-2) (let ((u--relPath (PackC-45CoreC-45Types-toRelPath (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons arg-1 (cons "/" (cons arg-2 '()))))))) (cons (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 arg-0 csegen-826) u--relPath) (cons #\c (cons #\o (cons #\m (cons #\m (cons #\i (cons #\t '()))))))))))
(define SystemC-45FileC-45ReadWrite-fPutStr (lambda (arg-1 arg-2 arg-3) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (SystemC-45FileC-45ReadWrite-prim__writeLine arg-2 arg-3 eta-0))))) (lambda (u--res) (let ((sc1 (PreludeC-45EqOrd-u--C-61C-61_Eq_Int u--res (blodwen-toSignedInt 0 63)))) (cond ((equal? sc1 1) (SystemC-45FileC-45Error-returnError arg-1)) (else (SystemC-45FileC-45Support-ok arg-1 (vector 0 )))))))))))
(define SystemC-45FileC-45ReadWrite-writeFile (lambda (arg-1 arg-2 arg-3) (SystemC-45FileC-45Handle-withFile arg-1 arg-2 1 (lambda (eta-0) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) eta-0))))) (lambda (eta-0) (PreludeC-45Basics-flip (lambda (eta-1) (lambda (eta-2) (SystemC-45FileC-45ReadWrite-fPutStr arg-1 eta-1 eta-2))) arg-3 eta-0)))))
(define PackC-45CoreC-45IO-write (lambda (arg-1 arg-2 arg-3) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-mkDir arg-1 (let ((e-1 (car arg-2))) e-1)) (lambda (_-10507) (PackC-45CoreC-45IO-eitherIO arg-1 (lambda (eta-0) (vector 5 arg-2 eta-0)) (SystemC-45FileC-45ReadWrite-writeFile arg-1 (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 (let ((e-1 (car arg-2))) (let ((e-2 (cdr arg-2))) (DataC-45FilePath-C-60C-47C-62 e-1 (vector 1 (cons '() e-2)))))) '())) arg-3))))))
(define PackC-45ConfigC-45Environment-resolveMeta (lambda (arg-1 arg-2 arg-3 arg-4 arg-5) (case (vector-ref arg-5 0) ((0) (let ((e-0 (vector-ref arg-5 1))) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) e-0))) ((2) (let ((e-1 (vector-ref arg-5 1))) (PackC-45CoreC-45Git-gitLatest arg-1 arg-4 e-1))) (else (let ((e-2 (vector-ref arg-5 1))) (let ((u--cfile (PackC-45ConfigC-45Environment-commitFile arg-2 arg-4 e-2))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-fileMissing (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) (let ((e-9 (vector-ref e-6 0))) e-9))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) e-6)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) e-6)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) u--cfile) (lambda (u--commitMissing) (let ((sc1 (cond ((equal? u--commitMissing 1) 1) (else arg-3)))) (cond ((equal? sc1 1) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45Git-gitLatest arg-1 arg-4 e-2) (lambda (u--c) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-write arg-1 u--cfile u--c) (lambda (_-10507) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) e-6)) u--c)))))) (else (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) (let ((e-9 (vector-ref e-6 0))) e-9))) (lambda (u--s) (DataC-45String-trim u--s)) (PackC-45CoreC-45IO-read arg-1 u--cfile)))))))))))))
(define PackC-45CoreC-45GitC-45Consts-defaultPackRepo "https://github.com/stefan-hoeck/idris2-pack")
(define PackC-45DatabaseC-45Types-traverse (lambda (arg-3 arg-4 arg-5) (case (vector-ref arg-5 0) ((0) (let ((e-1 (vector-ref arg-5 1))) (let ((e-2 (vector-ref arg-5 2))) (let ((e-3 (vector-ref arg-5 3))) (let ((e-4 (vector-ref arg-5 4))) (let ((e-5 (vector-ref arg-5 5))) (let ((e-8 (vector-ref arg-3 0))) ((((e-8 'erased) 'erased) (lambda (u--cC-39) (vector 0 e-1 u--cC-39 e-3 e-4 e-5))) ((arg-4 e-1) e-2))))))))) ((1) (let ((e-7 (vector-ref arg-5 1))) (let ((e-8 (vector-ref arg-5 2))) (let ((e-9 (vector-ref arg-5 3))) (let ((e-10 (vector-ref arg-5 4))) (let ((e-2 (vector-ref arg-3 1))) ((e-2 'erased) (vector 1 e-7 e-8 e-9 e-10)))))))) (else (let ((e-12 (vector-ref arg-5 1))) (let ((e-2 (vector-ref arg-3 1))) ((e-2 'erased) (vector 2 e-12))))))))
(define DataC-45SortedMapC-45Dependent-treeTraverse (lambda (arg-6 arg-7 arg-8) (case (vector-ref arg-8 0) ((0) (let ((e-3 (vector-ref arg-8 1))) (let ((e-4 (vector-ref arg-8 2))) (let ((e-1 (vector-ref arg-6 0))) ((((e-1 'erased) 'erased) (lambda (eta-0) (vector 0 e-3 eta-0))) ((arg-7 e-3) e-4)))))) ((1) (let ((e-9 (vector-ref arg-8 1))) (let ((e-10 (vector-ref arg-8 2))) (let ((e-11 (vector-ref arg-8 3))) (let ((e-3 (vector-ref arg-6 2))) ((((e-3 'erased) 'erased) (let ((e-4 (vector-ref arg-6 2))) ((((e-4 'erased) 'erased) (let ((e-12 (vector-ref arg-6 0))) ((((e-12 'erased) 'erased) (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (vector 1 eta-0 eta-1 eta-2))))) (DataC-45SortedMapC-45Dependent-treeTraverse arg-6 (lambda (x-7890) (arg-7 x-7890)) e-9)))) (let ((e-8 (vector-ref arg-6 1))) ((e-8 'erased) e-10))))) (DataC-45SortedMapC-45Dependent-treeTraverse arg-6 (lambda (x-7910) (arg-7 x-7910)) e-11))))))) (else (let ((e-16 (vector-ref arg-8 1))) (let ((e-17 (vector-ref arg-8 2))) (let ((e-18 (vector-ref arg-8 3))) (let ((e-19 (vector-ref arg-8 4))) (let ((e-20 (vector-ref arg-8 5))) (let ((e-3 (vector-ref arg-6 2))) ((((e-3 'erased) 'erased) (let ((e-4 (vector-ref arg-6 2))) ((((e-4 'erased) 'erased) (let ((e-7 (vector-ref arg-6 2))) ((((e-7 'erased) 'erased) (let ((e-10 (vector-ref arg-6 2))) ((((e-10 'erased) 'erased) (let ((e-15 (vector-ref arg-6 0))) ((((e-15 'erased) 'erased) (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (lambda (eta-4) (vector 2 eta-0 eta-1 eta-2 eta-3 eta-4))))))) (DataC-45SortedMapC-45Dependent-treeTraverse arg-6 (lambda (x-7974) (arg-7 x-7974)) e-16)))) (let ((e-14 (vector-ref arg-6 1))) ((e-14 'erased) e-17))))) (DataC-45SortedMapC-45Dependent-treeTraverse arg-6 (lambda (x-7994) (arg-7 x-7994)) e-18)))) (let ((e-8 (vector-ref arg-6 1))) ((e-8 'erased) e-19))))) (DataC-45SortedMapC-45Dependent-treeTraverse arg-6 (lambda (x-8013) (arg-7 x-8013)) e-20))))))))))))
(define DataC-45SortedMapC-45Dependent-traverse (lambda (arg-4 arg-5 arg-6) (case (vector-ref arg-6 0) ((0) (let ((e-2 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-4 1))) ((e-4 'erased) (vector 0 e-2))))) (else (let ((e-5 (vector-ref arg-6 1))) (let ((e-6 (vector-ref arg-6 2))) (let ((e-7 (vector-ref arg-6 3))) (let ((e-1 (vector-ref arg-4 0))) ((((e-1 'erased) 'erased) (lambda (eta-0) (vector 1 e-5 e-6 eta-0))) (DataC-45SortedMapC-45Dependent-treeTraverse arg-4 (lambda (x-8463) (arg-5 x-8463)) e-7))))))))))
(define DataC-45SortedMap-u--traverse_Traversable_C-40SortedMapC-32C-36kC-41 (lambda (arg-4 arg-5 ext-0) (let ((e-1 (vector-ref arg-4 0))) ((((e-1 'erased) 'erased) (lambda (eta-0) eta-0)) (DataC-45SortedMapC-45Dependent-traverse arg-4 (lambda (x-10868) arg-5) ext-0)))))
(define PreludeC-45Types-u--traverse_Traversable_Maybe (lambda (arg-3 arg-4 arg-5) (if (null? arg-5) (let ((e-2 (vector-ref arg-3 1))) ((e-2 'erased) '())) (let ((e-2 (unbox arg-5))) (let ((e-1 (vector-ref arg-3 0))) ((((e-1 'erased) 'erased) (lambda (eta-0) (box eta-0))) (arg-4 e-2)))))))
(define PackC-45ConfigC-45Types-n--9432-12436-u--adj (lambda (arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((e-2 (vector-ref arg-4 0))) (let ((e-3 (vector-ref arg-4 1))) (let ((e-5 (vector-ref arg-4 3))) (let ((e-7 (vector-ref arg-4 5))) (let ((e-8 (vector-ref arg-4 6))) (let ((e-9 (vector-ref arg-4 7))) (let ((e-10 (vector-ref arg-4 8))) (let ((e-11 (vector-ref arg-4 9))) (let ((e-12 (vector-ref arg-4 10))) (let ((e-13 (vector-ref arg-4 11))) (let ((e-14 (vector-ref arg-4 12))) (let ((e-15 (vector-ref arg-4 13))) (let ((e-16 (vector-ref arg-4 14))) (let ((e-17 (vector-ref arg-4 15))) (let ((e-18 (vector-ref arg-4 16))) (let ((e-19 (vector-ref arg-4 17))) (let ((e-20 (vector-ref arg-4 18))) (let ((e-22 (vector-ref arg-4 20))) (let ((e-23 (vector-ref arg-4 21))) (let ((e-24 (vector-ref arg-4 22))) (let ((e-25 (vector-ref arg-4 23))) (let ((e-26 (vector-ref arg-4 24))) (vector e-2 e-3 arg-7 e-5 arg-8 e-7 e-8 e-9 e-10 e-11 e-12 e-13 e-14 e-15 e-16 e-17 e-18 e-19 e-20 arg-9 e-22 e-23 e-24 e-25 e-26)))))))))))))))))))))))))
(define PackC-45ConfigC-45Types-traverse (lambda (arg-3 arg-4 arg-5 arg-6) (let ((u--iurl (DataC-45Maybe-fromMaybe (lambda () arg-5) (let ((e-3 (vector-ref arg-6 1))) e-3)))) (let ((u--purl (DataC-45Maybe-fromMaybe (lambda () PackC-45CoreC-45GitC-45Consts-defaultPackRepo) (let ((e-5 (vector-ref arg-6 3))) e-5)))) (let ((u--cst (DataC-45SortedMap-u--traverse_Traversable_C-40SortedMapC-32C-36kC-41 arg-3 (lambda (eta-0) (DataC-45SortedMap-u--traverse_Traversable_C-40SortedMapC-32C-36kC-41 arg-3 (lambda (eta-1) (PackC-45DatabaseC-45Types-traverse arg-3 arg-4 eta-1)) eta-0)) (let ((e-21 (vector-ref arg-6 19))) e-21)))) (let ((u--ic (PreludeC-45Types-u--traverse_Traversable_Maybe arg-3 (arg-4 u--iurl) (let ((e-4 (vector-ref arg-6 2))) e-4)))) (let ((u--pc (PreludeC-45Types-u--traverse_Traversable_Maybe arg-3 (arg-4 u--purl) (let ((e-6 (vector-ref arg-6 4))) e-6)))) (let ((e-3 (vector-ref arg-3 2))) ((((e-3 'erased) 'erased) (let ((e-4 (vector-ref arg-3 2))) ((((e-4 'erased) 'erased) (let ((e-7 (vector-ref arg-3 2))) ((((e-7 'erased) 'erased) (let ((e-11 (vector-ref arg-3 1))) ((e-11 'erased) (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (PackC-45ConfigC-45Types-n--9432-12436-u--adj arg-3 arg-6 arg-5 arg-4 eta-0 eta-1 eta-2))))))) u--ic))) u--pc))) u--cst)))))))))
(define PackC-45DatabaseC-45Types-n--7561-8433-u--adj (lambda (arg-3 arg-4 arg-5 arg-6 arg-7) (let ((e-1 (vector-ref arg-4 0))) (let ((e-3 (vector-ref arg-4 2))) (vector e-1 arg-6 e-3 arg-7)))))
(define PackC-45DatabaseC-45Types-traverseDB (lambda (arg-3 arg-4 arg-5) (let ((u--ic ((arg-4 (let ((e-1 (vector-ref arg-5 0))) e-1)) (let ((e-2 (vector-ref arg-5 1))) e-2)))) (let ((u--pkgs (DataC-45SortedMap-u--traverse_Traversable_C-40SortedMapC-32C-36kC-41 arg-3 (lambda (eta-0) (PackC-45DatabaseC-45Types-traverse arg-3 arg-4 eta-0)) (let ((e-4 (vector-ref arg-5 3))) e-4)))) (let ((e-3 (vector-ref arg-3 2))) ((((e-3 'erased) 'erased) (let ((e-4 (vector-ref arg-3 2))) ((((e-4 'erased) 'erased) (let ((e-8 (vector-ref arg-3 1))) ((e-8 'erased) (lambda (eta-0) (lambda (eta-1) (PackC-45DatabaseC-45Types-n--7561-8433-u--adj arg-3 arg-5 arg-4 eta-0 eta-1)))))) u--ic))) u--pkgs))))))
(define PackC-45ConfigC-45Environment-env (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45ConfigC-45Environment-loadDB arg-1 arg-3 arg-2 arg-6) (lambda (u--mdb) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45DatabaseC-45Types-traverseDB (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (eta-0) (lambda (eta-1) (PackC-45ConfigC-45Environment-resolveMeta arg-1 arg-2 arg-7 eta-0 eta-1))) u--mdb) (lambda (u--db) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45ConfigC-45Types-traverse (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (eta-0) (lambda (eta-1) (PackC-45ConfigC-45Environment-resolveMeta arg-1 arg-2 arg-7 eta-0 eta-1))) (let ((e-1 (vector-ref u--db 0))) e-1) arg-6) (lambda (u--c) (let ((u--url (DataC-45Maybe-fromMaybe (lambda () (let ((e-1 (vector-ref u--db 0))) e-1)) (let ((e-3 (vector-ref u--c 1))) e-3)))) (let ((u--commit (DataC-45Maybe-fromMaybe (lambda () (let ((e-2 (vector-ref u--db 1))) e-2)) (let ((e-4 (vector-ref u--c 2))) e-4)))) (let ((u--env (vector arg-2 arg-3 u--c arg-4 (let ((e-3 (vector-ref u--db 2))) (let ((e-4 (vector-ref u--db 3))) (vector u--url u--commit e-3 e-4))) arg-5))) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) (lambda (eta-0) u--env) (PackC-45ConfigC-45Environment-cachePkgs arg-1 u--env)))))))))))))
(define PackC-45CoreC-45Types-C-60C-45C-62 (lambda (arg-2 arg-3 arg-4 arg-5) (PreludeC-45TypesC-45List-tailRecAppend (PreludeC-45TypesC-45List-tailRecAppend (arg-2 arg-4) (cons #\- '())) (arg-3 arg-5))))
(define PackC-45ConfigC-45Environment-packExec (lambda (arg-0) (cons (DataC-45FilePath-C-60C-47C-62 arg-0 csegen-236) csegen-27)))
(define DataC-45FilePathC-45FilePath-split (lambda (arg-0) (PreludeC-45Types-u--map_Functor_Maybe (lambda (lamc-0) (let ((e-2 (car lamc-0))) (let ((e-3 (cdr lamc-0))) (cons e-2 e-3)))) (DataC-45FilePath-split arg-0))))
(define PackC-45ConfigC-45Environment-useRacket (lambda (arg-0) (PreludeC-45Types-u--C-61C-61_Eq_C-40MaybeC-32C-36aC-41 csegen-338 (PreludeC-45Types-u--map_Functor_Maybe (lambda (eta-0) (Builtin-snd eta-0)) (DataC-45FilePathC-45FilePath-split (let ((e-7 (vector-ref arg-0 5))) e-7))) (box (cons #\r (cons #\a (cons #\c (cons #\k (cons #\e (cons #\t '()))))))))))
(define DataC-45FilePath-u--interpolate_Interpolation_FilePath (lambda (arg-0) (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 arg-0)))
(define PackC-45ConfigC-45Environment-schemeVar (lambda (arg-0) (let ((sc0 (PackC-45ConfigC-45Environment-useRacket arg-0))) (cond ((equal? sc0 1) "IDRIS2_CG=racket") (else (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "SCHEME=" (cons (DataC-45FilePath-u--interpolate_Interpolation_FilePath (let ((e-7 (vector-ref arg-0 5))) e-7)) '()))))))))
(define PackC-45RunnerC-45Install-pthStr (lambda (arg-0 arg-1 arg-2) (cond ((equal? arg-2 0) "") (else (let ((u--racket (let ((sc1 (PackC-45ConfigC-45Environment-useRacket arg-0))) (cond ((equal? sc1 1) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "export " (cons (PackC-45ConfigC-45Environment-schemeVar arg-0) '())))) (else ""))))) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "export IDRIS2_PACKAGE_PATH=\"$(" (cons (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 (let ((sc1 (PackC-45ConfigC-45Environment-packExec arg-1))) (let ((e-1 (car sc1))) (let ((e-2 (cdr sc1))) (DataC-45FilePath-C-60C-47C-62 e-1 (vector 1 (cons '() e-2))))))) (cons " package-path)\"\u000aexport IDRIS2_LIBS=\"$(" (cons (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 (let ((sc1 (PackC-45ConfigC-45Environment-packExec arg-1))) (let ((e-1 (car sc1))) (let ((e-2 (cdr sc1))) (DataC-45FilePath-C-60C-47C-62 e-1 (vector 1 (cons '() e-2))))))) (cons " libs-path)\"\u000aexport IDRIS2_DATA=\"$(" (cons (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 (let ((sc1 (PackC-45ConfigC-45Environment-packExec arg-1))) (let ((e-1 (car sc1))) (let ((e-2 (cdr sc1))) (DataC-45FilePath-C-60C-47C-62 e-1 (vector 1 (cons '() e-2))))))) (cons " data-path)\"\u000a" (cons u--racket '()))))))))))))))
(define PackC-45RunnerC-45Install-appLink (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((u--interp (case (vector-ref arg-7 0) ((5) "node ")(else "")))) (let ((u--target (cons (DataC-45FilePath-C-60C-47C-62 arg-3 csegen-236) arg-4))) (let ((u--content (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "#!/bin/sh\u000a\u000aAPPLICATION=\"$(" (cons (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 (let ((sc0 (PackC-45ConfigC-45Environment-packExec arg-3))) (let ((e-1 (car sc0))) (let ((e-2 (cdr sc0))) (DataC-45FilePath-C-60C-47C-62 e-1 (vector 1 (cons '() e-2))))))) (cons " app-path " (cons arg-5 (cons ")\"\u000a" (cons (PackC-45RunnerC-45Install-pthStr (let ((e-2 (vector-ref arg-2 2))) e-2) arg-3 arg-6) (cons "\u000a\u000a" (cons u--interp (cons "$APPLICATION \"$@\"" '())))))))))))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-write arg-1 u--target u--content) (lambda (_-10507) (PackC-45CoreC-45IO-sys arg-1 (vector 1 (lambda (eta-0) (vector 0 eta-0)) "chmod" (vector 1 (lambda (eta-0) (vector 0 eta-0)) "+x" (vector 1 csegen-204 u--target (vector 0 ))))))))))))
(define PackC-45ConfigC-45Environment-bootstrapCmd (lambda (arg-0) (let ((sc0 (PackC-45ConfigC-45Environment-useRacket arg-0))) (cond ((equal? sc0 1) "bootstrap-racket") (else "bootstrap")))))
(define DataC-45List-isPrefixOfBy (lambda (arg-2 arg-3 arg-4) (if (null? arg-3) 1 (if (null? arg-4) 0 (let ((e-1 (car arg-3))) (let ((e-2 (cdr arg-3))) (let ((e-4 (car arg-4))) (let ((e-5 (cdr arg-4))) (let ((sc4 ((arg-2 e-1) e-4))) (cond ((equal? sc4 1) (DataC-45List-isPrefixOfBy arg-2 e-2 e-5)) (else 0)))))))))))
(define DataC-45List-isPrefixOf (lambda (arg-1 ext-0 ext-1) (DataC-45List-isPrefixOfBy (lambda (eta-0) (lambda (eta-1) (let ((e-1 (car arg-1))) ((e-1 eta-0) eta-1)))) ext-0 ext-1)))
(define DataC-45String-isPrefixOf (lambda (arg-0 arg-1) (DataC-45List-isPrefixOf csegen-2 (PreludeC-45Types-fastUnpack arg-0) (PreludeC-45Types-fastUnpack arg-1))))
(define PackC-45RunnerC-45Install-hasTTC (lambda (ext-0) (PreludeC-45Types-u--foldMap_Foldable_List csegen-117 (lambda (eta-0) (DataC-45String-isPrefixOf "--ttc-version" (DataC-45String-trim eta-0))) (DataC-45String-lines ext-0))))
(define PackC-45ConfigC-45Environment-idrisExec (lambda (arg-0 arg-1) (cons (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 arg-0 csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-2 (vector-ref arg-1 1))) e-2))) csegen-226) csegen-236) csegen-224)))
(define PackC-45RunnerC-45Install-case--caseC-32blockC-32inC-32getTTCVersion-2159 (lambda (arg-1 arg-2 arg-3 arg-4 arg-5) (if (null? arg-5) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) (lambda (eta-0) '()) (PackC-45CoreC-45Logging-log (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (let ((e-2 (vector-ref arg-2 2))) (let ((e-23 (vector-ref e-2 21))) e-23)) 4 (lambda () (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Failed to parse TTC version " (cons arg-4 '())))))) (let ((e-1 (unbox arg-5))) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) (let ((e-9 (vector-ref e-6 0))) e-9))) (lambda (eta-0) (box e-1)) (PackC-45CoreC-45Logging-log (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) (let ((e-9 (vector-ref e-6 0))) e-9))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) e-6)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) e-6)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (let ((e-2 (vector-ref arg-2 2))) (let ((e-23 (vector-ref e-2 21))) e-23)) 0 (lambda () (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Using TTC version " (cons (PreludeC-45Types-fastPack e-1) '()))))))))))
(define PackC-45RunnerC-45Install-getTTCVersion (lambda (arg-1 arg-2) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-sysRun arg-1 (vector 1 csegen-204 (PackC-45ConfigC-45Environment-idrisExec (let ((e-0 (vector-ref arg-2 0))) e-0) (let ((e-4 (vector-ref arg-2 4))) e-4)) (vector 1 (lambda (eta-0) (vector 0 eta-0)) "--help" (vector 0 )))) (lambda (u--hlp) (let ((sc0 (PackC-45RunnerC-45Install-hasTTC u--hlp))) (cond ((equal? sc0 1) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-sysRun arg-1 (vector 1 csegen-204 (PackC-45ConfigC-45Environment-idrisExec (let ((e-0 (vector-ref arg-2 0))) e-0) (let ((e-4 (vector-ref arg-2 4))) e-4)) (vector 1 (lambda (eta-0) (vector 0 eta-0)) "--ttc-version" (vector 0 )))) (lambda (u--str) (PackC-45RunnerC-45Install-case--caseC-32blockC-32inC-32getTTCVersion-2159 arg-1 arg-2 u--hlp u--str (DataC-45FilePathC-45Body-fromChars (PreludeC-45Types-fastUnpack (DataC-45String-trim u--str))))))) (else (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) (lambda (eta-0) '()) (PackC-45CoreC-45Logging-log (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (let ((e-2 (vector-ref arg-2 2))) (let ((e-23 (vector-ref e-2 21))) e-23)) 0 (lambda () "No TTC version given by Idris"))))))))))
(define PackC-45ConfigC-45Environment-prefixVar (lambda (arg-0 arg-1) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "PREFIX=" (cons (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 arg-0 csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-2 (vector-ref arg-1 1))) e-2))) csegen-226)) '())))))
(define PackC-45CoreC-45IO-lineBufferedCmd (lambda (arg-0 arg-1) (PackC-45CoreC-45TypesC-45CmdArgList-C-43C-43 (let ((e-5 (vector-ref arg-0 5))) e-5) arg-1)))
(define PackC-45CoreC-45IO-logCmdOutput (lambda (arg-1 arg-2 arg-3 arg-4) (PreludeC-45Interfaces-when (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (PreludeC-45EqOrd-u--C-47C-61_Eq_String arg-4 "") (lambda () (PackC-45CoreC-45Logging-log arg-1 arg-2 arg-3 (lambda () arg-4))))))
(define System-n--5111-6613-u--process (lambda (arg-1 arg-2 arg-3 arg-4) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (SystemC-45FileC-45ReadWrite-fEOF arg-1 arg-4)) (lambda (bind-0) (cond ((equal? bind-0 1) (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) 1))))) (else (let ((e-7 (car arg-1))) (let ((e-9 (vector-ref e-7 1))) ((((e-9 'erased) 'erased) (SystemC-45FileC-45ReadWrite-fGetLine arg-1 arg-4)) (lambda (_-0) (case (vector-ref _-0 0) ((1) (let ((e-11 (vector-ref _-0 1))) (let ((e-13 (car arg-1))) (let ((e-15 (vector-ref e-13 1))) ((((e-15 'erased) 'erased) (arg-3 e-11)) (lambda (_-10507) (System-n--5111-6613-u--process arg-1 arg-2 arg-3 arg-4))))))) (else (let ((e-13 (car arg-1))) (let ((e-16 (vector-ref e-13 0))) (let ((e-18 (vector-ref e-16 1))) ((e-18 'erased) 0))))))))))))))))))
(define System-runProcessingOutput (lambda (arg-1 arg-2 arg-3) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (SystemC-45FileC-45Process-popen arg-1 arg-3 0)) (lambda (_-0) (case (vector-ref _-0 0) ((1) (let ((e-6 (vector-ref _-0 1))) (let ((e-8 (car arg-1))) (let ((e-10 (vector-ref e-8 1))) ((((e-10 'erased) 'erased) (System-n--5111-6613-u--process arg-1 arg-3 arg-2 e-6)) (lambda (_-1) (cond ((equal? _-1 1) (SystemC-45FileC-45Process-pclose arg-1 e-6)) (else (let ((e-13 (car arg-1))) (let ((e-16 (vector-ref e-13 0))) (let ((e-18 (vector-ref e-16 1))) ((e-18 'erased) (blodwen-toSignedInt 1 63))))))))))))) (else (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) (let ((e-13 (vector-ref e-11 1))) ((e-13 'erased) (blodwen-toSignedInt 1 63)))))))))))))
(define PackC-45CoreC-45IO-sysAndLog (lambda (arg-1 arg-2 arg-3 arg-4) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (System-runProcessingOutput (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (lambda (eta-0) (PackC-45CoreC-45IO-logCmdOutput (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (let ((e-2 (vector-ref arg-2 2))) (let ((e-23 (vector-ref e-2 21))) e-23)) arg-3 eta-0)) (PackC-45CoreC-45Types-escapeCmd (PackC-45CoreC-45IO-lineBufferedCmd arg-2 arg-4))) (lambda (_-0) (cond ((equal? _-0 0) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (vector 0 )))(else (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) (vector 0 (vector 7 arg-4 _-0))))))))))))
(define PreludeC-45Types-substr (lambda (arg-0 arg-1 arg-2) (let ((sc0 (PreludeC-45EqOrd-u--C-60_Ord_Integer arg-0 (PreludeC-45TypesC-45String-length arg-2)))) (cond ((equal? sc0 1) (string-substr (blodwen-toSignedInt arg-0 63) (blodwen-toSignedInt arg-1 63) arg-2)) (else "")))))
(define LibrariesC-45DataC-45StringC-45Extra-drop (lambda (arg-0 arg-1) (PreludeC-45Types-substr arg-0 (PreludeC-45TypesC-45String-length arg-1) arg-1)))
(define LibrariesC-45DataC-45StringC-45Extra-join (lambda (arg-1 arg-2 arg-3) (LibrariesC-45DataC-45StringC-45Extra-drop (PreludeC-45TypesC-45String-length arg-1) (let ((e-2 (vector-ref arg-2 1))) (((((e-2 'erased) 'erased) (lambda (u--acc) (lambda (u--x) (string-append u--acc (string-append arg-1 u--x))))) "") arg-3)))))
(define CoreC-45NameC-45Namespace-showSep (lambda (arg-0 ext-0) (LibrariesC-45DataC-45StringC-45Extra-join arg-0 csegen-197 ext-0)))
(define IdrisC-45PackageC-45Types-u--show_Show_PkgVersion (lambda (arg-0) (CoreC-45NameC-45Namespace-showSep "." (PreludeC-45TypesC-45List-mapAppend '() (lambda (eta-0) (PreludeC-45Show-u--show_Show_Nat eta-0)) (DataC-45List1-forget arg-0)))))
(define PackC-45CoreC-45Types-u--cast_Cast_PkgVersion_Body (lambda (ext-0) (DataC-45Maybe-fromMaybe (lambda () (PreludeC-45Types-fastUnpack "0")) (DataC-45FilePathC-45Body-fromChars (PreludeC-45Types-fastUnpack (IdrisC-45PackageC-45Types-u--show_Show_PkgVersion ext-0))))))
(define PackC-45RunnerC-45Install-mkIdris (lambda (arg-1 arg-2) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45Logging-log (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (let ((e-2 (vector-ref arg-2 2))) (let ((e-23 (vector-ref e-2 21))) e-23)) 0 (lambda () "Checking Idris installation")) (lambda (_-10507) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-missing (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-0 (vector-ref arg-2 0))) e-0) csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-4 (vector-ref arg-2 4))) (let ((e-8 (vector-ref e-4 1))) e-8)))) csegen-226) (vector 1 (cons '() (PackC-45CoreC-45Types-C-60C-45C-62 (lambda (eta-0) eta-0) (lambda (eta-0) (PackC-45CoreC-45Types-u--cast_Cast_PkgVersion_Body eta-0)) csegen-224 (let ((e-4 (vector-ref arg-2 4))) (let ((e-7 (vector-ref e-4 2))) e-7))))))) (lambda (bind-0) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) bind-0 (lambda () (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45Logging-log (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (let ((e-2 (vector-ref arg-2 2))) (let ((e-23 (vector-ref e-2 21))) e-23)) 0 (lambda () "No Idris compiler found. Installing...")) (lambda (_-10508) (PackC-45ConfigC-45Environment-withCoreGit arg-1 arg-2 (lambda (u--dir) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (let ((sc0 (let ((e-2 (vector-ref arg-2 2))) (let ((e-8 (vector-ref e-2 6))) e-8)))) (cond ((equal? sc0 1) (PackC-45CoreC-45IO-sysAndLog arg-1 arg-2 1 (vector 1 (lambda (eta-0) (vector 0 eta-0)) "make" (vector 1 (lambda (eta-0) (vector 0 eta-0)) (PackC-45ConfigC-45Environment-bootstrapCmd (let ((e-2 (vector-ref arg-2 2))) e-2)) (vector 1 (lambda (eta-0) (vector 0 eta-0)) (PackC-45ConfigC-45Environment-prefixVar (let ((e-0 (vector-ref arg-2 0))) e-0) (let ((e-4 (vector-ref arg-2 4))) e-4)) (vector 1 (lambda (eta-0) (vector 0 eta-0)) (PackC-45ConfigC-45Environment-schemeVar (let ((e-2 (vector-ref arg-2 2))) e-2)) (vector 0 ))))))) (else (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-sysAndLog arg-1 arg-2 1 (vector 1 (lambda (eta-0) (vector 0 eta-0)) "make" (vector 1 (lambda (eta-0) (vector 0 eta-0)) "support" (vector 1 (lambda (eta-0) (vector 0 eta-0)) (PackC-45ConfigC-45Environment-prefixVar (let ((e-0 (vector-ref arg-2 0))) e-0) (let ((e-4 (vector-ref arg-2 4))) e-4)) (vector 1 (lambda (eta-0) (vector 0 eta-0)) (PackC-45ConfigC-45Environment-schemeVar (let ((e-2 (vector-ref arg-2 2))) e-2)) (vector 0 )))))) (lambda (_-10509) (PackC-45CoreC-45IO-sysAndLog arg-1 arg-2 1 (vector 1 (lambda (eta-0) (vector 0 eta-0)) "make" (vector 1 (lambda (eta-0) (vector 0 eta-0)) "idris2-exec" (vector 1 (lambda (eta-0) (vector 0 eta-0)) (PackC-45ConfigC-45Environment-prefixVar (let ((e-0 (vector-ref arg-2 0))) e-0) (let ((e-4 (vector-ref arg-2 4))) e-4)) (vector 1 (lambda (eta-0) (vector 0 eta-0)) (PackC-45ConfigC-45Environment-schemeVar (let ((e-2 (vector-ref arg-2 2))) e-2)) (vector 0 ))))))))))) (lambda (_-10509) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-sysAndLog arg-1 arg-2 1 (vector 1 (lambda (eta-0) (vector 0 eta-0)) "make" (vector 1 (lambda (eta-0) (vector 0 eta-0)) "install-support" (vector 1 (lambda (eta-0) (vector 0 eta-0)) (PackC-45ConfigC-45Environment-prefixVar (let ((e-0 (vector-ref arg-2 0))) e-0) (let ((e-4 (vector-ref arg-2 4))) e-4)) (vector 0 ))))) (lambda (_-10510) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-sysAndLog arg-1 arg-2 1 (vector 1 (lambda (eta-0) (vector 0 eta-0)) "make" (vector 1 (lambda (eta-0) (vector 0 eta-0)) "install-idris2" (vector 1 (lambda (eta-0) (vector 0 eta-0)) (PackC-45ConfigC-45Environment-prefixVar (let ((e-0 (vector-ref arg-2 0))) e-0) (let ((e-4 (vector-ref arg-2 4))) e-4)) (vector 0 ))))) (lambda (_-10511) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-sysAndLog arg-1 arg-2 1 (vector 1 (lambda (eta-0) (vector 0 eta-0)) "make" (vector 1 (lambda (eta-0) (vector 0 eta-0)) "clean-libs" (vector 0 )))) (lambda (_-10512) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-sysAndLog arg-1 arg-2 1 (vector 1 (lambda (eta-0) (vector 0 eta-0)) "rm" (vector 1 (lambda (eta-0) (vector 0 eta-0)) "-r" (vector 1 (lambda (eta-0) (vector 0 eta-0)) "build/ttc" (vector 1 (lambda (eta-0) (vector 0 eta-0)) "build/exec" (vector 0 )))))) (lambda (_-10513) (PackC-45ConfigC-45Environment-cacheCoreIpkgFiles arg-1 arg-2 u--dir))))))))))))))))))) (lambda (_-10508) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45RunnerC-45Install-appLink arg-1 arg-2 (let ((e-0 (vector-ref arg-2 0))) e-0) csegen-224 "idris2" 1 (vector 0 )) (lambda (_-10509) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45RunnerC-45Install-getTTCVersion arg-1 arg-2) (lambda (u--ttc) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (cons arg-2 u--ttc))))))))))))
(define PackC-45RunnerC-45Install-idrisEnv (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45ConfigC-45Environment-env arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (lambda (u--e) (PackC-45RunnerC-45Install-mkIdris arg-1 u--e)))))
(define PackC-45ConfigC-45TOML-initToml (lambda (arg-0 arg-1) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "# The package collection to use\u000acollection = \"" (cons (PreludeC-45Types-fastPack arg-1) (cons "\"\u000a\u000a[install]\u000a\u000a# Whether to install packages together with their\u000a# sources or not. This is mainly useful for programmers\u000a# who have set their editor up with some *go to definition*\u000a# functionality (for instance by using idris2-lsp with neovim).\u000awith-src   = true\u000a\u000a# Whether to install API docs together with installed\u000a# libraries.\u000a# with-docs = false\u000a\u000a# Whether to use katla to generate HTML links to\u000a# semantically highlighted API sources\u000a# use-katla = false\u000a\u000a# Whether to prompt the user before building or installing\u000a# packages or applications with custom build hooks in their\u000a# `.ipkg` file.\u000asafety-prompt = true\u000a\u000a# Whether to prompt the user before running the garbage collector\u000a# via command `gc`.\u000agc-prompt = true\u000a\u000a# Whether to issue a warning in presence of a local `depends` directory\u000a# which might interfere with the libraries managed by pack\u000awarn-depends = true\u000a\u000a# List of packages and apps with custom build hooks we trust to\u000a# be safe. This gives more fine grained control over package safety\u000a# than `safety-prompt`.\u000awhitelist = [ \"pack\", \"lsp\" ]\u000a\u000a# Must-have libraries. These will be installed automatically\u000a# when using a new package collection.\u000a# libs       = [ \"toml\", \"elab-util\" ]\u000a\u000a# Must-have applications. These will be installed automatically\u000a# when using a new package collection.\u000a# apps       = [ \"lsp\" ]\u000a\u000a[pack]\u000a\u000a# Override this to use a custom Git repo for pack\u000a# url = \"https://github.com/stefan-hoeck/idris2-pack\"\u000a\u000a# Override this to use a custom commit and branch for pack\u000a# commit = \"latest:main\"\u000a\u000a[idris2]\u000a\u000a# Whether to build Idris2 with its bootstrap compiler.\u000a# Bootstrapping takes longer than building with an existing\u000a# Idris2 installation, but it will work even if the existing\u000a# Idris2 compiler is outdated.\u000abootstrap  = false\u000a\u000a# Name or path to the scheme executable to use.\u000ascheme      = \"" (cons arg-0 (cons "\"\u000a\u000a# Default code generator to us\u000a# codegen     = \"chez\"\u000a\u000a# Set this to `true` in order to run REPL sessions from within\u000a# `rlwrap`. This will give you additional features such as a\u000a# command history.\u000a# Alternatively, you can pass additional command-line arguments\u000a# to `rlwrap` by setting this to a string or an array of strings,\u000a# e.g. to \"-pGreen -aN\" or [\"-pGreen\", \"--no-children\"].\u000arepl.rlwrap = false\u000a\u000a# Packages to load automatically when starting a REPL session\u000a# without an `.ipkg` file in scope. This defaults to \"none\".\u000a# Note: Uncomment only one of the following examples:\u000a# repl.autoload   = \"installed\"\u000a# repl.autoload   = \"autolibs\"\u000a# repl.autoload   = [ \"sop\", \"toml\" ]\u000a\u000a# Override this to use a custom Git repo for the Idris compiler\u000a# url = \"https://github.com/idris-lang/Idris2\"\u000a\u000a# Override this to use a custom commit and branch for the Idris compiler\u000a# commit = \"latest:main\"\u000a\u000a# Below are some examples for custom packages\u000a\u000a# A local package to be available with all\u000a# package collections. The path to the package's root\u000a# directory can be absolute or relative. In the latter\u000a# case, it will be considered to be relative to the\u000a# parent directory of the `pack.toml` file where it is\u000a# defined.\u000a#\u000a# The path to `.ipkg` files must always relative to the\u000a# given `path`.\u000a# [custom.all.chem]\u000a# type = \"local\"\u000a# path = \"/data/idris/chem\"\u000a# ipkg = \"chem.ipkg\"\u000a\u000a# A package as a Git repository to be available with all\u000a# package collections.\u000a# [custom.all.foo]\u000a# type = \"git\"\u000a# url  = \"https://github.com/bar/foo\"\u000a# ipkg = \"foo.ipkg\"\u000a\u000a# Override library `toml` from package collection `nightly-220503`\u000a# by using a custom commit hash.\u000a# [custom.nightly-220503.toml]\u000a# type   = \"git\"\u000a# url    = \"https://github.com/cuddlefishie/toml-idr\"\u000a# commit = \"eb7a146f565276f82ebf30cb6d5502e9f65dcc3c\"\u000a# ipkg   = \"toml.ipkg\"\u000a\u000a# Uncomment and adjust the following entries to specify the\u000a# default log level associated with each pack command.\u000a# [log]\u000a\u000a# exec = \"debug\"\u000a# run  = \"info\"\u000a# test = \"warning\"" '()))))))))
(define PackC-45CoreC-45IO-case--mkTmpDirC-44go-7839 (lambda (arg-1 arg-2 arg-3 arg-4 arg-5) (if (null? arg-5) (PackC-45CoreC-45IO-n--8150-7791-u--go arg-1 arg-2 arg-3 (+ arg-4 1)) (let ((e-1 (unbox arg-5))) (let ((u--dir (DataC-45FilePath-C-60C-47C-62 arg-2 (vector 1 (cons '() e-1))))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) (SystemC-45FileC-45Meta-exists (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) (let ((e-9 (vector-ref e-6 0))) e-9))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) e-6)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) e-6)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 u--dir)) (lambda (_-0) (cond ((equal? _-0 0) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) (PackC-45CoreC-45IO-mkDir arg-1 u--dir) (lambda (_-10507) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) e-6)) u--dir)))) (else (PackC-45CoreC-45IO-n--8150-7791-u--go arg-1 arg-2 arg-3 (+ arg-4 1)))))))))))
(define PackC-45CoreC-45IO-n--8150-7791-u--go (lambda (arg-1 arg-2 arg-3 arg-4) (cond ((equal? arg-3 0) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) (vector 0 (vector 2 )))))))(else (let ((e-0 (- arg-3 1))) (PackC-45CoreC-45IO-case--mkTmpDirC-44go-7839 arg-1 arg-2 e-0 arg-4 (DataC-45FilePathC-45Body-fromChars (PreludeC-45Types-fastUnpack (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons ".tmp" (cons (PreludeC-45Show-u--show_Show_Nat arg-4) '())))))))))))
(define PackC-45CoreC-45IO-mkTmpDir (lambda (arg-1 arg-2) (PackC-45CoreC-45IO-n--8150-7791-u--go arg-1 arg-2 100 0)))
(define PackC-45ConfigC-45Environment-packToml (cons #\p (cons #\a (cons #\c (cons #\k csegen-804)))))
(define PackC-45CoreC-45Types-readDBName (lambda (arg-0) (let ((sc0 (DataC-45FilePathC-45Body-fromChars (PreludeC-45Types-fastUnpack arg-0)))) (if (null? sc0) (vector 0 (vector 16 arg-0)) (let ((e-1 (unbox sc0))) (vector 1 e-1))))))
(define System-exitWith (lambda (arg-2 arg-3) (if (null? arg-3) (let ((e-2 (cdr arg-2))) ((e-2 'erased) (lambda (eta-0) (System-prim__exit 0 eta-0)))) (let ((e-0 (car arg-3))) (let ((e-2 (cdr arg-2))) ((e-2 'erased) (lambda (eta-0) (System-prim__exit e-0 eta-0))))))))
(define System-exitFailure (lambda (arg-2) (System-exitWith arg-2 (cons 1 (vector 0 )))))
(define PackC-45CoreC-45Types-logLevels (cons (cons "debug" 0) (cons (cons "build" 1) (cons (cons "info" 2) (cons (cons "cache" 3) (cons (cons "warning" 4) (cons (cons "silence" 5) '())))))))
(define PackC-45CoreC-45Types-tomlPath (lambda (ext-0) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (DataC-45List-intersperse "." ext-0))))
(define PackC-45CoreC-45Types-printTOMLErr (lambda (arg-0) (case (vector-ref arg-0 0) ((0) (let ((e-0 (vector-ref arg-0 1))) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Missing toml key: " (cons (PackC-45CoreC-45Types-tomlPath e-0) (cons "." '())))))) (else (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Wrong type at " (cons (PackC-45CoreC-45Types-tomlPath e-1) (cons ". Expect " (cons e-2 (cons "." '()))))))))))))
(define PackC-45CoreC-45Types-quote (lambda (arg-1 arg-2) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "\"" (cons (arg-1 arg-2) (cons "\"" '()))))))
(define PrimIO-unsafeCreateWorld (lambda (arg-1) (arg-1 #f)))
(define PrimIO-unsafePerformIO (lambda (arg-1) (PrimIO-unsafeCreateWorld (lambda (u--w) (let ((eff-0 (arg-1 u--w))) eff-0)))))
(define SystemC-45Errno-strerror (lambda (arg-0) (PrimIO-unsafePerformIO (lambda (eta-0) (SystemC-45Errno-prim__strerror arg-0 eta-0)))))
(define SystemC-45FileC-45Error-u--show_Show_FileError (lambda (arg-0) (case (vector-ref arg-0 0) ((0) (let ((e-0 (vector-ref arg-0 1))) (SystemC-45Errno-strerror e-0))) ((1) "File Read Error") ((2) "File Write Error") ((3) "File Not Found") ((4) "Permission Denied") (else "File Exists"))))
(define PackC-45CoreC-45Types-u--interpolate_Interpolation_FileError (lambda (ext-0) (SystemC-45FileC-45Error-u--show_Show_FileError ext-0)))
(define PackC-45CoreC-45Types-u--interpolate_Interpolation_PkgVersion (lambda (ext-0) (IdrisC-45PackageC-45Types-u--show_Show_PkgVersion ext-0)))
(define PackC-45CoreC-45Types-printErr (lambda (arg-0) (case (vector-ref arg-0 0) ((0) "Failed to get current directory.") ((1) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Failed to figure out package directory.\u000aThis means, that neither environment variable \"PACK_DIR\"\u000anor environment varaible \"HOME\" was set." '()))) ((2) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Failed to create temporary directory.\u000aPlease check directory `PACK_DIR` and make sure to remove\u000aall `.tmpXY` directories you no longer need." '()))) ((3) (let ((e-0 (vector-ref arg-0 1))) (let ((e-1 (vector-ref arg-0 2))) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Error when creating directory " (cons (PackC-45CoreC-45Types-quote (lambda (eta-0) (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 eta-0)) e-0) (cons ": " (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_FileError e-1) (cons "." '()))))))))) ((4) (let ((e-2 (vector-ref arg-0 1))) (let ((e-3 (vector-ref arg-0 2))) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Error when reading file " (cons (PackC-45CoreC-45Types-quote csegen-323 e-2) (cons ": " (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_FileError e-3) (cons "." '()))))))))) ((5) (let ((e-4 (vector-ref arg-0 1))) (let ((e-5 (vector-ref arg-0 2))) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Error when writing to file " (cons (PackC-45CoreC-45Types-quote csegen-323 e-4) (cons ": " (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_FileError e-5) (cons "." '()))))))))) ((6) (let ((e-6 (vector-ref arg-0 1))) (let ((e-7 (vector-ref arg-0 2))) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Error when reading directory " (cons (PackC-45CoreC-45Types-quote (lambda (eta-0) (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 eta-0)) e-6) (cons ": " (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_FileError e-7) (cons "." '()))))))))) ((7) (let ((e-8 (vector-ref arg-0 1))) (let ((e-9 (vector-ref arg-0 2))) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Error when executing system command.\u000aCommand: " (cons (PackC-45CoreC-45Types-escapeCmd e-8) (cons "\u000aError code: " (cons (PreludeC-45Show-u--show_Show_Int e-9) '())))))))) ((8) (let ((e-10 (vector-ref arg-0 1))) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Failed to change to directory " (cons (PackC-45CoreC-45Types-quote (lambda (eta-0) (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 eta-0)) e-10) (cons "." '())))))) ((13) (let ((e-11 (vector-ref arg-0 1))) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Invalid package description: " (cons (PackC-45CoreC-45Types-quote (lambda (eta-0) eta-0) e-11) (cons ".\u000aThis should be of the format \"name,url,commit hash,ipkg file\"." '())))))) ((15) (let ((e-12 (vector-ref arg-0 1))) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Invalid data base header: " (cons (PackC-45CoreC-45Types-quote (lambda (eta-0) eta-0) e-12) (cons ".\u000aThis should be of the format \"idris2 commit hash,idris2 version\"." '())))))) ((16) (let ((e-13 (vector-ref arg-0 1))) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Invalid data collection name: " (cons (PackC-45CoreC-45Types-quote (lambda (eta-0) eta-0) e-13) (cons ".\u000aThis should be a non-empty string without path separators." '())))))) ((21) (let ((e-14 (vector-ref arg-0 1))) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Invalid file path body: " (cons (PackC-45CoreC-45Types-quote (lambda (eta-0) eta-0) e-14) (cons "." '())))))) ((17) (let ((e-15 (vector-ref arg-0 1))) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Invalid package type: " (cons (PackC-45CoreC-45Types-quote (lambda (eta-0) eta-0) e-15) (cons ".\u000aValid types are `lib` and `bin`." '())))))) ((18) (let ((e-16 (vector-ref arg-0 1))) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Invalid package version: " (cons (PackC-45CoreC-45Types-quote (lambda (eta-0) eta-0) e-16) (cons "." '())))))) ((19) (let ((e-17 (vector-ref arg-0 1))) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Invalid log level: " (cons (PackC-45CoreC-45Types-quote (lambda (eta-0) eta-0) e-17) (cons ". Valid values are\u000a" (cons (DataC-45String-joinBy "\u000a" (PreludeC-45TypesC-45List-mapAppend '() (lambda (eta-0) (string-append "- " (Builtin-fst eta-0))) PackC-45CoreC-45Types-logLevels)) '()))))))) ((9) (let ((e-18 (vector-ref arg-0 1))) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Unknown package: " (cons e-18 '()))))) ((10) (let ((e-19 (vector-ref arg-0 1))) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Not a local package: " (cons e-19 '()))))) ((11) (let ((e-20 (vector-ref arg-0 1))) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Package " (cons e-20 (cons " is not an application" '())))))) ((12) (let ((e-21 (vector-ref arg-0 1))) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Package " (cons (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 (let ((e-1 (car e-21))) (let ((e-2 (cdr e-21))) (DataC-45FilePath-C-60C-47C-62 e-1 (vector 1 (cons '() e-2)))))) (cons " is not an application" '())))))) ((14) "Empty package data base") ((20) (let ((e-22 (vector-ref arg-0 1))) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Failed to parse .ipkg file: " (cons (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 (let ((e-1 (car e-22))) (let ((e-2 (cdr e-22))) (DataC-45FilePath-C-60C-47C-62 e-1 (vector 1 (cons '() e-2)))))) '()))))) ((23) (let ((e-23 (vector-ref arg-0 1))) (let ((e-24 (vector-ref arg-0 2))) (let ((e-25 (vector-ref arg-0 3))) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Core package " (cons (PackC-45CoreC-45Types-quote (lambda (arg-823) arg-823) e-23) (cons " missing for Idris2 version " (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_PkgVersion e-24) (cons " (commit: " (cons e-25 (cons ")" '())))))))))))) ((24) (let ((e-26 (vector-ref arg-0 1))) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Unknown command line arg: " (cons e-26 '()))))) ((25) (let ((e-27 (vector-ref arg-0 1))) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Invalid command line args: " (cons (DataC-45String-unwords e-27) '()))))) ((26) (let ((e-28 (vector-ref arg-0 1))) e-28)) ((28) (let ((e-29 (vector-ref arg-0 1))) (let ((e-30 (vector-ref arg-0 2))) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Unknown command: \"" (cons e-29 (cons "\"\u000a\u000a" (cons e-30 '())))))))) ((29) (let ((e-31 (vector-ref arg-0 1))) (let ((e-33 (vector-ref arg-0 3))) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Invalid argument(s) for command `" (cons e-31 (cons "`.\u000a\u000a" (cons e-33 '())))))))) ((27) "Can only build or typecheck a single Idris2 package given as an `.ipkg` file.") ((22) (let ((e-34 (vector-ref arg-0 1))) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Not a file path : " (cons e-34 '()))))) ((30) (let ((e-35 (vector-ref arg-0 1))) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Failed to clone Git repository into " (cons (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 e-35) (cons ".\u000aDirectory already exists." '())))))) ((31) (let ((e-36 (vector-ref arg-0 1))) (let ((e-37 (vector-ref arg-0 2))) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Error in file " (cons (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 (let ((e-1 (car e-36))) (let ((e-2 (cdr e-36))) (DataC-45FilePath-C-60C-47C-62 e-1 (vector 1 (cons '() e-2)))))) (cons ": " (cons (PackC-45CoreC-45Types-printTOMLErr e-37) (cons "." '()))))))))) ((32) (let ((e-38 (vector-ref arg-0 1))) (let ((e-39 (vector-ref arg-0 2))) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Error in file " (cons (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 (let ((e-1 (car e-38))) (let ((e-2 (cdr e-38))) (DataC-45FilePath-C-60C-47C-62 e-1 (vector 1 (cons '() e-2)))))) (cons ": " (cons e-39 (cons "." '()))))))))) ((33) (let ((e-40 (vector-ref arg-0 1))) (cond ((equal? e-40 0) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons (PreludeC-45Show-u--show_Show_Nat e-40) (cons " packages failed to build." '()))))(else (let ((e-41 (- e-40 1))) (cond ((equal? e-41 0) "1 package failed to build.")(else (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons (PreludeC-45Show-u--show_Show_Nat e-40) (cons " packages failed to build." '())))))))))) ((34) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "You are not supposed to manually install or remove the pack\u000aapplication. In order to update pack to the latest version on\u000aGitHub, run `pack update`.\u000a\u000aNote: If you didn't run `pack install-app pack` or a similar\u000aoperation, \"pack\" might be listed as an auto-install application\u000ain one of your pack.toml files. Please remove it from there." '()))) (else "Aborted."))))
(define PackC-45CoreC-45Logging-fatal (lambda (arg-2 arg-3) (let ((e-1 (car arg-2))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (PackC-45CoreC-45Logging-printLogMessage arg-2 (lambda (eta-0) eta-0) "fatal" (PackC-45CoreC-45Types-printErr arg-3) '())) (lambda (_-10507) (System-exitFailure arg-2)))))))
(define PackC-45CoreC-45IO-run (lambda (arg-0 ext-0) (let ((act-1 (arg-0 ext-0))) ((PreludeC-45Types-either (lambda () (lambda (eta-0) (PackC-45CoreC-45Logging-fatal csegen-57 eta-0))) (lambda () (lambda (eta-0) (lambda (eta-1) eta-0))) act-1) ext-0))))
(define PackC-45CoreC-45TypesC-45PkgDesc-dependencies (lambda (arg-0) (PreludeC-45TypesC-45List-mapAppend '() (lambda (eta-0) (let ((e-0 (car eta-0))) e-0)) (let ((e-11 (vector-ref arg-0 11))) e-11))))
(define PackC-45CoreC-45Types-dependencies (lambda (arg-1) (PackC-45CoreC-45TypesC-45PkgDesc-dependencies (let ((e-1 (vector-ref arg-1 0))) e-1))))
(define PackC-45RunnerC-45Install-appInfo (lambda (ext-0) (PreludeC-45TypesC-45List-mapMaybeAppend '() (lambda (lcase-0) (case (vector-ref lcase-0 0) ((1) (let ((e-3 (vector-ref lcase-0 2))) (box (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons (let ((e-8 (vector-ref e-3 1))) e-8) '()))))) (else '()))) ext-0)))
(define PackC-45RunnerC-45Install-autoPairs (lambda (arg-0) (PreludeC-45TypesC-45List-tailRecAppend (PreludeC-45TypesC-45List-mapAppend '() (lambda (eta-0) (cons '() (PackC-45DatabaseC-45Types-corePkgName eta-0))) (cons 0 (cons 1 (cons 4 '())))) (PreludeC-45TypesC-45List-tailRecAppend (PreludeC-45TypesC-45List-mapAppend '() (lambda (__infixTupleSection-0) (cons '() __infixTupleSection-0)) (let ((e-18 (vector-ref arg-0 16))) e-18)) (PreludeC-45TypesC-45List-mapAppend '() (lambda (__infixTupleSection-0) (cons (box 1) __infixTupleSection-0)) (let ((e-19 (vector-ref arg-0 17))) e-19))))))
(define DataC-45String-null (lambda (ext-0) (PreludeC-45EqOrd-u--C-61C-61_Eq_String ext-0 "")))
(define DataC-45String-n--3912-7730-u--wordsHelper (lambda (arg-0 arg-1 arg-2) (if (null? arg-1) arg-2 (cons arg-2 (PreludeC-45TypesC-45SnocList-C-60C-62C-62 arg-1 '())))))
(define DataC-45String-n--3912-7731-u--wordsC-39 (lambda (arg-0 arg-1 arg-2 arg-3) (if (null? arg-1) (PreludeC-45TypesC-45SnocList-C-60C-62C-62 (DataC-45String-n--3912-7730-u--wordsHelper arg-0 arg-2 arg-3) '()) (let ((e-1 (car arg-1))) (let ((e-2 (cdr arg-1))) (let ((sc1 (PreludeC-45Types-isSpace e-1))) (cond ((equal? sc1 1) (DataC-45String-n--3912-7731-u--wordsC-39 arg-0 e-2 '() (DataC-45String-n--3912-7730-u--wordsHelper arg-0 arg-2 arg-3))) (else (DataC-45String-n--3912-7731-u--wordsC-39 arg-0 e-2 (cons arg-2 e-1) arg-3)))))))))
(define DataC-45String-words (lambda (arg-0) (PreludeC-45TypesC-45List-mapAppend '() (lambda (eta-0) (PreludeC-45Types-fastPack eta-0)) (DataC-45String-n--3912-7731-u--wordsC-39 arg-0 (PreludeC-45Types-fastUnpack arg-0) '() '()))))
(define PackC-45ConfigC-45Types-fromString (lambda (arg-0) (cond ((equal? arg-0 "chez") (vector 1 )) ((equal? arg-0 "chez-sep") (vector 2 )) ((equal? arg-0 "racket") (vector 3 )) ((equal? arg-0 "gambit") (vector 4 )) ((equal? arg-0 "node") (vector 5 )) ((equal? arg-0 "javascript") (vector 6 )) ((equal? arg-0 "refc") (vector 7 )) ((equal? arg-0 "vmcode-interp") (vector 8 ))(else (vector 9 arg-0)))))
(define PackC-45RunnerC-45Install-n--7420-1165-u--getCG (lambda (arg-0 arg-1 arg-2) (if (null? arg-2) (vector 0 ) (let ((e-1 (car arg-2))) (let ((e-2 (cdr arg-2))) (cond ((equal? e-1 "--cg") (if (null? e-2) (if (null? e-2) (vector 0 ) (PackC-45RunnerC-45Install-n--7420-1165-u--getCG arg-0 arg-1 e-2)) (let ((e-6 (car e-2))) (PackC-45ConfigC-45Types-fromString e-6)))) ((equal? e-1 "--codegen") (if (null? e-2) (if (null? e-2) (vector 0 ) (PackC-45RunnerC-45Install-n--7420-1165-u--getCG arg-0 arg-1 e-2)) (let ((e-9 (car e-2))) (PackC-45ConfigC-45Types-fromString e-9))))(else (if (null? e-2) (vector 0 ) (PackC-45RunnerC-45Install-n--7420-1165-u--getCG arg-0 arg-1 e-2)))))))))
(define PackC-45RunnerC-45Install-case--ipkgCodeGen-1208 (lambda (arg-0 arg-1 arg-2) (case (vector-ref arg-2 0) ((0) (PackC-45RunnerC-45Install-n--7420-1165-u--getCG arg-0 arg-1 (PreludeC-45Types-maybe (lambda () '()) (lambda () (lambda (eta-0) (PreludeC-45TypesC-45List-filterAppend '() (lambda (eta-1) (let ((sc1 (DataC-45String-null eta-1))) (cond ((equal? sc1 1) 0) (else 1)))) (DataC-45String-words (Builtin-snd eta-0))))) (let ((e-15 (vector-ref arg-0 15))) e-15))))(else arg-2))))
(define PackC-45RunnerC-45Install-ipkgCodeGen (lambda (arg-0 arg-1) (PackC-45RunnerC-45Install-case--ipkgCodeGen-1208 arg-1 arg-0 (let ((e-2 (vector-ref arg-0 2))) (let ((e-24 (vector-ref e-2 22))) e-24)))))
(define PackC-45CoreC-45TypesC-45CmdArg-C-43C-43 (lambda (arg-0 arg-1) (case (vector-ref arg-0 0) ((0) (let ((e-0 (vector-ref arg-0 1))) (case (vector-ref arg-1 0) ((0) (let ((e-2 (vector-ref arg-1 1))) (vector 0 (string-append e-0 e-2)))) (else (let ((e-3 (vector-ref arg-1 1))) (vector 1 (string-append (SystemC-45Escape-escapeArg e-0) e-3))))))) (else (let ((e-1 (vector-ref arg-0 1))) (case (vector-ref arg-1 0) ((0) (let ((e-4 (vector-ref arg-1 1))) (vector 1 (string-append e-1 (SystemC-45Escape-escapeArg e-4))))) (else (let ((e-5 (vector-ref arg-1 1))) (vector 1 (string-append e-1 e-5))))))))))
(define PackC-45CoreC-45Ipkg-buildPath (lambda (arg-1) (PreludeC-45Types-maybe (lambda () (DataC-45FilePath-C-60C-47C-62 (let ((e-3 (vector-ref arg-1 2))) (let ((e-5 (car e-3))) e-5)) (vector 1 (cons '() (cons #\b (cons #\u (cons #\i (cons #\l (cons #\d '()))))))))) (lambda () (lambda (eta-0) (PackC-45CoreC-45Types-toAbsPath (let ((e-3 (vector-ref arg-1 2))) (let ((e-5 (car e-3))) e-5)) (DataC-45FilePath-u--fromString_FromString_FilePath eta-0)))) (let ((e-1 (vector-ref arg-1 0))) (let ((e-17 (vector-ref e-1 17))) e-17)))))
(define PackC-45RunnerC-45Install-copyApp (lambda (arg-1 arg-2 arg-3) (let ((u--dir (DataC-45FilePath-C-60C-47C-62 (let ((e-1 (vector-ref arg-3 0))) (case (vector-ref e-1 0) ((0) (let ((e-10 (vector-ref e-1 2))) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-0 (car arg-2))) (let ((e-18 (vector-ref e-0 0))) e-18)) csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-0 (car arg-2))) (let ((e-14 (vector-ref e-0 4))) (let ((e-21 (vector-ref e-14 1))) e-21))))) (PackC-45CoreC-45Types-toRelPath (let ((e-16 (vector-ref arg-3 1))) e-16))) (PackC-45CoreC-45Types-toRelPath e-10)))) ((1) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-0 (car arg-2))) (let ((e-17 (vector-ref e-0 0))) e-17)) csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-0 (car arg-2))) (let ((e-13 (vector-ref e-0 4))) (let ((e-20 (vector-ref e-13 1))) e-20))))) csegen-219) (PackC-45CoreC-45Types-toRelPath (let ((e-15 (vector-ref arg-3 1))) e-15)))) (else (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-0 (car arg-2))) (let ((e-14 (vector-ref e-0 0))) e-14)) csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-0 (car arg-2))) (let ((e-9 (vector-ref e-0 4))) (let ((e-17 (vector-ref e-9 1))) e-17))))) csegen-226)))) csegen-236))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45Logging-log (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (let ((e-0 (car arg-2))) (let ((e-2 (vector-ref e-0 2))) (let ((e-23 (vector-ref e-2 21))) e-23))) 0 (lambda () (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Copying application to " (cons (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 u--dir) '()))))) (lambda (_-10507) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-mkDir arg-1 u--dir) (lambda (_-10508) (PackC-45CoreC-45IO-sys arg-1 (vector 1 (lambda (eta-0) (vector 0 eta-0)) "cp" (vector 1 (lambda (eta-0) (vector 0 eta-0)) "-r" (vector 1 (lambda (eta-0) eta-0) (PackC-45CoreC-45TypesC-45CmdArg-C-43C-43 (vector 0 (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 (PackC-45CoreC-45Ipkg-buildPath (let ((e-3 (vector-ref arg-3 2))) e-3))) (cons "/exec/" '())))) (vector 1 "*")) (vector 1 csegen-249 u--dir (vector 0 )))))))))))))
(define PackC-45DatabaseC-45Types-ipkg (lambda (arg-0 arg-1) (case (vector-ref arg-1 0) ((0) (let ((e-3 (vector-ref arg-1 3))) (let ((e-7 (car e-3))) (let ((e-6 (cdr e-3))) (cons (DataC-45FilePath-C-60C-47C-62 arg-0 e-7) e-6))))) ((1) (let ((e-8 (vector-ref arg-1 2))) (let ((e-1 (car e-8))) (let ((e-2 (cdr e-8))) (cons (DataC-45FilePath-C-60C-47C-62 arg-0 e-1) e-2))))) (else (let ((e-12 (vector-ref arg-1 1))) (let ((sc1 (PackC-45DatabaseC-45Types-coreIpkgPath e-12))) (let ((e-1 (car sc1))) (let ((e-2 (cdr sc1))) (cons (DataC-45FilePath-C-60C-47C-62 arg-0 e-1) e-2)))))))))
(define PackC-45CoreC-45IO-filterM (lambda (arg-2 arg-3 arg-4) (if (null? arg-4) (let ((e-1 (vector-ref arg-2 0))) (let ((e-5 (vector-ref e-1 1))) ((e-5 'erased) '()))) (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) (let ((e-5 (vector-ref arg-2 1))) ((((e-5 'erased) 'erased) (arg-3 e-2)) (lambda (_-0) (cond ((equal? _-0 1) (let ((e-8 (vector-ref arg-2 0))) (let ((e-11 (vector-ref e-8 0))) ((((e-11 'erased) 'erased) (lambda (arg-0) (cons e-2 arg-0))) (PackC-45CoreC-45IO-filterM arg-2 arg-3 e-3))))) (else (PackC-45CoreC-45IO-filterM arg-2 arg-3 e-3)))))))))))
(define PackC-45DatabaseC-45Types-readCorePkg (lambda (arg-0) (cond ((equal? arg-0 "prelude") (box 0)) ((equal? arg-0 "base") (box 1)) ((equal? arg-0 "contrib") (box 2)) ((equal? arg-0 "linear") (box 3)) ((equal? arg-0 "network") (box 4)) ((equal? arg-0 "test") (box 5)) ((equal? arg-0 "papers") (box 6)) ((equal? arg-0 "idris2") (box 7))(else '()))))
(define PackC-45DatabaseC-45Types-isCorePkg (lambda (ext-0) (DataC-45Maybe-isJust (PackC-45DatabaseC-45Types-readCorePkg ext-0))))
(define PackC-45ConfigC-45Environment-pathDirs (lambda (arg-1 arg-2 arg-3) (let ((sc0 (Builtin-fst arg-1))) (let ((e-1 (car sc0))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (PackC-45CoreC-45IO-filterM (let ((sc1 (Builtin-fst arg-1))) (let ((e-7 (car sc1))) e-7)) (lambda (lamc-0) (let ((e-7 (car lamc-0))) (let ((e-6 (cdr lamc-0))) (SystemC-45FileC-45Meta-exists (Builtin-fst arg-1) (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 ((arg-3 e-7) e-6)))))) (DataC-45SortedMap-toList (PackC-45ConfigC-45Types-allPackages (Builtin-snd (Builtin-snd (Builtin-snd arg-1))) (Builtin-fst (Builtin-snd (Builtin-snd arg-1))))))) (lambda (u--ps) (let ((u--psC-39 (PreludeC-45TypesC-45List-filterAppend '() (lambda (eta-0) (let ((sc1 (PackC-45DatabaseC-45Types-isCorePkg (Builtin-fst eta-0)))) (cond ((equal? sc1 1) 0) (else 1)))) u--ps))) (let ((sc1 (Builtin-fst arg-1))) (let ((e-7 (car sc1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (PreludeC-45Types-fastConcat (DataC-45List-intersperse ":" (cons arg-2 (PreludeC-45TypesC-45List-mapAppend '() (lambda (lamc-0) (let ((e-15 (car lamc-0))) (let ((e-14 (cdr lamc-0))) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 ((arg-3 e-15) e-14)) '()))))) u--psC-39)))))))))))))))))
(define PackC-45ConfigC-45Environment-packageDataDirs (lambda (arg-1 arg-2) (PackC-45ConfigC-45Environment-pathDirs (cons arg-1 (cons (let ((e-0 (vector-ref arg-2 0))) e-0) (cons (let ((e-4 (vector-ref arg-2 4))) e-4) (let ((e-2 (vector-ref arg-2 2))) e-2)))) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-0 (vector-ref arg-2 0))) e-0) csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-4 (vector-ref arg-2 4))) (let ((e-8 (vector-ref e-4 1))) e-8)))) csegen-226) (vector 1 (cons '() (PackC-45CoreC-45Types-C-60C-45C-62 (lambda (eta-0) eta-0) (lambda (eta-0) (PackC-45CoreC-45Types-u--cast_Cast_PkgVersion_Body eta-0)) csegen-224 (let ((e-4 (vector-ref arg-2 4))) (let ((e-7 (vector-ref e-4 2))) e-7)))))) csegen-803)) '())) (lambda (eta-0) (lambda (eta-1) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (case (vector-ref eta-1 0) ((0) (let ((e-2 (vector-ref eta-1 2))) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-0 (vector-ref arg-2 0))) e-0) csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-7 (vector-ref arg-2 4))) (let ((e-13 (vector-ref e-7 1))) e-13)))) (PackC-45CoreC-45Types-toRelPath eta-0)) (PackC-45CoreC-45Types-toRelPath e-2)))) ((1) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-0 (vector-ref arg-2 0))) e-0) csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-4 (vector-ref arg-2 4))) (let ((e-12 (vector-ref e-4 1))) e-12)))) csegen-219) (PackC-45CoreC-45Types-toRelPath eta-0))) (else (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-0 (vector-ref arg-2 0))) e-0) csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-4 (vector-ref arg-2 4))) (let ((e-8 (vector-ref e-4 1))) e-8)))) csegen-226))) (vector 1 (cons '() (PackC-45CoreC-45Types-C-60C-45C-62 (lambda (eta-2) eta-2) (lambda (eta-2) (PackC-45CoreC-45Types-u--cast_Cast_PkgVersion_Body eta-2)) csegen-224 (let ((e-4 (vector-ref arg-2 4))) (let ((e-7 (vector-ref e-4 2))) e-7)))))) csegen-803))))))
(define PackC-45ConfigC-45Environment-dataPath (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) ((((e-8 'erased) 'erased) (lambda (__infixTupleSection-0) (cons "IDRIS2_DATA" __infixTupleSection-0))) (PackC-45ConfigC-45Environment-packageDataDirs arg-1 arg-2)))))))
(define PackC-45ConfigC-45Environment-packageLibDirs (lambda (arg-1 arg-2) (PackC-45ConfigC-45Environment-pathDirs (cons arg-1 (cons (let ((e-0 (vector-ref arg-2 0))) e-0) (cons (let ((e-4 (vector-ref arg-2 4))) e-4) (let ((e-2 (vector-ref arg-2 2))) e-2)))) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-0 (vector-ref arg-2 0))) e-0) csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-4 (vector-ref arg-2 4))) (let ((e-8 (vector-ref e-4 1))) e-8)))) csegen-226) (vector 1 (cons '() (PackC-45CoreC-45Types-C-60C-45C-62 (lambda (eta-0) eta-0) (lambda (eta-0) (PackC-45CoreC-45Types-u--cast_Cast_PkgVersion_Body eta-0)) csegen-224 (let ((e-4 (vector-ref arg-2 4))) (let ((e-7 (vector-ref e-4 2))) e-7)))))) csegen-270)) '())) (lambda (eta-0) (lambda (eta-1) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (case (vector-ref eta-1 0) ((0) (let ((e-2 (vector-ref eta-1 2))) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-0 (vector-ref arg-2 0))) e-0) csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-7 (vector-ref arg-2 4))) (let ((e-13 (vector-ref e-7 1))) e-13)))) (PackC-45CoreC-45Types-toRelPath eta-0)) (PackC-45CoreC-45Types-toRelPath e-2)))) ((1) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-0 (vector-ref arg-2 0))) e-0) csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-4 (vector-ref arg-2 4))) (let ((e-12 (vector-ref e-4 1))) e-12)))) csegen-219) (PackC-45CoreC-45Types-toRelPath eta-0))) (else (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-0 (vector-ref arg-2 0))) e-0) csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-4 (vector-ref arg-2 4))) (let ((e-8 (vector-ref e-4 1))) e-8)))) csegen-226))) (vector 1 (cons '() (PackC-45CoreC-45Types-C-60C-45C-62 (lambda (eta-2) eta-2) (lambda (eta-2) (PackC-45CoreC-45Types-u--cast_Cast_PkgVersion_Body eta-2)) csegen-224 (let ((e-4 (vector-ref arg-2 4))) (let ((e-7 (vector-ref e-4 2))) e-7)))))) csegen-270))))))
(define PackC-45ConfigC-45Environment-libPath (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) ((((e-8 'erased) 'erased) (lambda (__infixTupleSection-0) (cons "IDRIS2_LIBS" __infixTupleSection-0))) (PackC-45ConfigC-45Environment-packageLibDirs arg-1 arg-2)))))))
(define PackC-45ConfigC-45Environment-packagePathDirs (lambda (arg-1 arg-2) (PackC-45ConfigC-45Environment-pathDirs (cons arg-1 (cons (let ((e-0 (vector-ref arg-2 0))) e-0) (cons (let ((e-4 (vector-ref arg-2 4))) e-4) (let ((e-2 (vector-ref arg-2 2))) e-2)))) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-0 (vector-ref arg-2 0))) e-0) csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-4 (vector-ref arg-2 4))) (let ((e-8 (vector-ref e-4 1))) e-8)))) csegen-226) (vector 1 (cons '() (PackC-45CoreC-45Types-C-60C-45C-62 (lambda (eta-0) eta-0) (lambda (eta-0) (PackC-45CoreC-45Types-u--cast_Cast_PkgVersion_Body eta-0)) csegen-224 (let ((e-4 (vector-ref arg-2 4))) (let ((e-7 (vector-ref e-4 2))) e-7))))))) '())) (lambda (eta-0) (lambda (eta-1) (DataC-45FilePath-C-60C-47C-62 (case (vector-ref eta-1 0) ((0) (let ((e-2 (vector-ref eta-1 2))) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-0 (vector-ref arg-2 0))) e-0) csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-7 (vector-ref arg-2 4))) (let ((e-13 (vector-ref e-7 1))) e-13)))) (PackC-45CoreC-45Types-toRelPath eta-0)) (PackC-45CoreC-45Types-toRelPath e-2)))) ((1) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-0 (vector-ref arg-2 0))) e-0) csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-4 (vector-ref arg-2 4))) (let ((e-12 (vector-ref e-4 1))) e-12)))) csegen-219) (PackC-45CoreC-45Types-toRelPath eta-0))) (else (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-0 (vector-ref arg-2 0))) e-0) csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-4 (vector-ref arg-2 4))) (let ((e-8 (vector-ref e-4 1))) e-8)))) csegen-226))) (vector 1 (cons '() (PackC-45CoreC-45Types-C-60C-45C-62 (lambda (eta-2) eta-2) (lambda (eta-2) (PackC-45CoreC-45Types-u--cast_Cast_PkgVersion_Body eta-2)) csegen-224 (let ((e-4 (vector-ref arg-2 4))) (let ((e-7 (vector-ref e-4 2))) e-7)))))))))))
(define PackC-45ConfigC-45Environment-packagePath (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) ((((e-8 'erased) 'erased) (lambda (__infixTupleSection-0) (cons "IDRIS2_PACKAGE_PATH" __infixTupleSection-0))) (PackC-45ConfigC-45Environment-packagePathDirs arg-1 arg-2)))))))
(define PreludeC-45Interfaces-sequence (lambda (arg-3 arg-4 ext-0) (let ((e-3 (vector-ref arg-4 2))) ((((((e-3 'erased) 'erased) 'erased) arg-3) (lambda (eta-0) eta-0)) ext-0))))
(define PackC-45ConfigC-45Environment-buildEnv (lambda (arg-1 arg-2) (let ((u--pre (let ((sc0 (PackC-45ConfigC-45Environment-useRacket (let ((e-2 (vector-ref arg-2 2))) e-2)))) (cond ((equal? sc0 1) (cons (cons "IDRIS2_CG" "racket") '())) (else '()))))) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) ((((e-8 'erased) 'erased) (lambda (arg-0) (PreludeC-45TypesC-45List-tailRecAppend u--pre arg-0))) (PreludeC-45Interfaces-sequence (let ((e-10 (car arg-1))) (let ((e-13 (vector-ref e-10 0))) e-13)) (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (PreludeC-45TypesC-45List-mapAppend '() u--func arg-8743))))) csegen-197 (lambda (u--b) (lambda (u--a) (lambda (u--f) (lambda (i_con-0) (lambda (arg-13951) (lambda (arg-13958) (PreludeC-45Types-u--traverse_Traversable_List i_con-0 arg-13951 arg-13958)))))))) (cons (PackC-45ConfigC-45Environment-packagePath arg-1 arg-2) (cons (PackC-45ConfigC-45Environment-libPath arg-1 arg-2) (cons (PackC-45ConfigC-45Environment-dataPath arg-1 arg-2) '())))))))))))
(define PackC-45CoreC-45IO-readIfExists (lambda (arg-1 arg-2 arg-3) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (SystemC-45FileC-45Meta-exists (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 (let ((e-1 (car arg-2))) (let ((e-2 (cdr arg-2))) (DataC-45FilePath-C-60C-47C-62 e-1 (vector 1 (cons '() e-2))))))) (lambda (_-0) (cond ((equal? _-0 1) (PackC-45CoreC-45IO-read arg-1 arg-2)) (else (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-3)))))))
(define PackC-45RunnerC-45Install-checkBuildDir (lambda (arg-1 arg-2 arg-3) (let ((u--buildDir (PackC-45CoreC-45Ipkg-buildPath arg-3))) (let ((u--version (cons u--buildDir (PreludeC-45Types-fastUnpack ".idrisCommit")))) (let ((u--commit (let ((e-0 (car arg-2))) (let ((e-4 (vector-ref e-0 4))) (let ((e-10 (vector-ref e-4 1))) e-10))))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-readIfExists arg-1 u--version "") (lambda (u--str) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (PreludeC-45EqOrd-u--C-47C-61_Eq_String u--str u--commit) (lambda () (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-rmDir arg-1 u--buildDir) (lambda (_-10507) (PackC-45CoreC-45IO-write arg-1 u--version u--commit))))))))))))
(define PackC-45RunnerC-45Install-dependsMsg (lambda (arg-0) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Found local package directory at " (cons (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 arg-0) (cons ".\u000aUsing local package directories together with pack is highly discouraged,\u000aas they might interfere with the packages managed by pack in an unpredictable\u000amanner." '()))))))
(define PackC-45ConfigC-45Types-u--interpolate_Interpolation_Codegen (lambda (arg-0) (case (vector-ref arg-0 0) ((0) "") ((1) "chez") ((2) "chez-sep") ((3) "racket") ((4) "gambit") ((5) "node") ((6) "javascript") ((7) "refc") ((8) "vmcode-interp") (else (let ((e-0 (vector-ref arg-0 1))) e-0)))))
(define PackC-45ConfigC-45Environment-case--idrisWithCG-3225 (lambda (arg-0 arg-1) (case (vector-ref arg-1 0) ((0) (vector 1 csegen-204 (PackC-45ConfigC-45Environment-idrisExec (let ((e-0 (vector-ref arg-0 0))) e-0) (let ((e-4 (vector-ref arg-0 4))) e-4)) (vector 0 )))(else (vector 1 csegen-204 (PackC-45ConfigC-45Environment-idrisExec (let ((e-0 (vector-ref arg-0 0))) e-0) (let ((e-4 (vector-ref arg-0 4))) e-4)) (vector 1 (lambda (eta-0) (vector 0 eta-0)) "--cg" (vector 1 (lambda (eta-0) (vector 0 (PackC-45ConfigC-45Types-u--interpolate_Interpolation_Codegen eta-0))) arg-1 (vector 0 ))))))))
(define PackC-45ConfigC-45Environment-idrisWithCG (lambda (arg-0) (PackC-45ConfigC-45Environment-case--idrisWithCG-3225 arg-0 (let ((e-2 (vector-ref arg-0 2))) (let ((e-24 (vector-ref e-2 22))) e-24)))))
(define PackC-45CoreC-45IO-dispEnv (lambda (ext-0) (DataC-45String-unwords (PreludeC-45TypesC-45List-mapAppend '() (lambda (lamc-0) (let ((e-2 (car lamc-0))) (let ((e-3 (cdr lamc-0))) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons e-2 (cons "=" (cons (PackC-45CoreC-45Types-quote (lambda (eta-0) eta-0) e-3) '()))))))) ext-0))))
(define PackC-45CoreC-45IO-cmdWithEnv (lambda (arg-0 arg-1) (if (null? arg-1) (PackC-45CoreC-45Types-escapeCmd arg-0) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons (PackC-45CoreC-45IO-dispEnv arg-1) (cons " " (cons (PackC-45CoreC-45Types-escapeCmd arg-0) '())))))))
(define PackC-45CoreC-45IO-sysWithEnvAndLog (lambda (arg-1 arg-2 arg-3 arg-4 arg-5) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (System-runProcessingOutput (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (lambda (eta-0) (PackC-45CoreC-45IO-logCmdOutput (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (let ((e-2 (vector-ref arg-2 2))) (let ((e-23 (vector-ref e-2 21))) e-23)) arg-3 eta-0)) (PackC-45CoreC-45IO-cmdWithEnv (PackC-45CoreC-45IO-lineBufferedCmd arg-2 arg-4) arg-5)) (lambda (_-0) (cond ((equal? _-0 0) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (vector 0 )))(else (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) (vector 0 (vector 7 arg-4 _-0))))))))))))
(define PackC-45RunnerC-45Install-libPkg (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((u--exe (PackC-45ConfigC-45Environment-idrisWithCG (let ((e-0 (car arg-2))) e-0)))) (let ((u--s (PackC-45CoreC-45TypesC-45CmdArgList-C-43C-43 u--exe (PackC-45CoreC-45TypesC-45CmdArgList-C-43C-43 arg-6 (vector 1 (lambda (eta-0) (vector 0 (PreludeC-45Types-fastPack eta-0))) (let ((e-3 (vector-ref arg-7 2))) (let ((e-4 (cdr e-3))) e-4)) (vector 0 )))))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) (lambda (arg-0) (PreludeC-45TypesC-45List-tailRecAppend arg-3 arg-0)) (PackC-45ConfigC-45Environment-buildEnv (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (let ((e-0 (car arg-2))) e-0))) (lambda (u--pre) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45Logging-log (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (let ((e-0 (car arg-2))) (let ((e-2 (vector-ref e-0 2))) (let ((e-23 (vector-ref e-2 21))) e-23))) 0 (lambda () (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "About to run: " (cons (PackC-45CoreC-45Types-escapeCmd u--s) '()))))) (lambda (_-10507) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) arg-5 (lambda () (PackC-45RunnerC-45Install-checkBuildDir arg-1 arg-2 arg-7))) (lambda (_-10508) ((let ((u--dependsDir (DataC-45FilePath-C-60C-47C-62 (let ((e-3 (vector-ref arg-7 2))) (let ((e-5 (car e-3))) e-5)) (vector 1 (cons '() (cons #\d (cons #\e (cons #\p (cons #\e (cons #\n (cons #\d (cons #\s '())))))))))))) (lambda () (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (SystemC-45FileC-45Meta-exists (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 u--dependsDir)) (lambda (bind-0) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) bind-0 (lambda () (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (let ((e-0 (car arg-2))) (let ((e-2 (vector-ref e-0 2))) (let ((e-11 (vector-ref e-2 9))) e-11))) (lambda () (PackC-45CoreC-45Logging-log (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (let ((e-0 (car arg-2))) (let ((e-2 (vector-ref e-0 2))) (let ((e-23 (vector-ref e-2 21))) e-23))) 4 (lambda () (PackC-45RunnerC-45Install-dependsMsg u--dependsDir))))))))) (lambda (_-10509) (PackC-45CoreC-45IO-inDir arg-1 (let ((e-3 (vector-ref arg-7 2))) (let ((e-5 (car e-3))) e-5)) (lambda (_-1948) (PackC-45CoreC-45IO-sysWithEnvAndLog arg-1 (let ((e-0 (car arg-2))) e-0) arg-4 u--s u--pre))))))))))))))))))
(define PackC-45DatabaseC-45Types-usePackagePath (lambda (arg-1) (case (vector-ref arg-1 0) ((0) (let ((e-4 (vector-ref arg-1 4))) e-4)) ((1) (let ((e-9 (vector-ref arg-1 3))) e-9)) (else 0))))
(define PackC-45RunnerC-45Database-withPkgEnv (lambda (arg-2 arg-3 arg-4 arg-5 arg-6) (case (vector-ref arg-5 0) ((0) (let ((e-1 (vector-ref arg-5 1))) (let ((e-2 (vector-ref arg-5 2))) (PackC-45CoreC-45Git-withGit arg-2 (let ((e-10 (vector-ref arg-3 1))) e-10) (let ((e-0 (vector-ref arg-3 0))) e-0) arg-4 e-1 e-2 arg-6)))) ((1) (let ((e-7 (vector-ref arg-5 1))) (PackC-45CoreC-45IO-inDir arg-2 e-7 arg-6))) (else (PackC-45ConfigC-45Environment-withCoreGit arg-2 arg-3 arg-6)))))
(define PackC-45RunnerC-45Install-case--installApp-3460 (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (cond ((equal? arg-6 2) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (vector 0 ))) ((equal? arg-6 1) (cond ((equal? arg-3 0) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (vector 0 ))) (else (PackC-45RunnerC-45Install-appLink arg-1 (let ((e-0 (car arg-4))) e-0) (let ((e-0 (car arg-4))) (let ((e-7 (vector-ref e-0 0))) e-7)) (let ((e-5 (vector-ref arg-2 4))) e-5) (let ((e-2 (vector-ref arg-2 1))) e-2) (PackC-45DatabaseC-45Types-usePackagePath (let ((e-1 (vector-ref arg-2 0))) e-1)) arg-5))))(else (PackC-45RunnerC-45Database-withPkgEnv arg-1 (let ((e-0 (car arg-4))) e-0) (let ((e-2 (vector-ref arg-2 1))) e-2) (let ((e-1 (vector-ref arg-2 0))) e-1) (lambda (u--dir) (let ((u--ipkgAbs (PackC-45DatabaseC-45Types-ipkg u--dir (let ((e-1 (vector-ref arg-2 0))) e-1)))) (let ((e-1 (vector-ref arg-2 0))) (case (vector-ref e-1 0) ((2) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-9 (car arg-1))) (let ((e-12 (vector-ref e-9 0))) e-12)) (vector 0 ))) ((0) (let ((e-10 (vector-ref e-1 2))) (let ((e-9 (vector-ref e-1 3))) (let ((e-8 (vector-ref e-1 4))) (let ((u--cache (PackC-45ConfigC-45Environment-ipkgCachePath (let ((e-0 (car arg-4))) (let ((e-18 (vector-ref e-0 0))) e-18)) (let ((e-16 (vector-ref arg-2 1))) e-16) e-10 e-9))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-13 (car arg-1))) e-13) (PackC-45CoreC-45IO-copyFile arg-1 u--cache u--ipkgAbs) (lambda (_-10507) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-13 (car arg-1))) e-13) (PackC-45RunnerC-45Install-libPkg arg-1 arg-4 '() 1 1 csegen-232 (let ((e-15 (vector-ref arg-2 2))) e-15)) (lambda (_-10508) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-13 (car arg-1))) e-13) (PackC-45RunnerC-45Install-copyApp arg-1 arg-4 arg-2) (lambda (_-10509) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-13 (car arg-1))) (let ((e-16 (vector-ref e-13 0))) (let ((e-19 (vector-ref e-16 0))) e-19))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-13 (car arg-1))) (let ((e-16 (vector-ref e-13 0))) e-16)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-13 (car arg-1))) (let ((e-16 (vector-ref e-13 0))) e-16)) arg-9795 arg-9802)))))) arg-3 (lambda () (PackC-45RunnerC-45Install-appLink arg-1 (let ((e-0 (car arg-4))) e-0) (let ((e-0 (car arg-4))) (let ((e-18 (vector-ref e-0 0))) e-18)) (let ((e-13 (vector-ref arg-2 4))) e-13) (let ((e-16 (vector-ref arg-2 1))) e-16) e-8 arg-5)))))))))))))) (else (let ((e-11 (vector-ref e-1 3))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-8 (car arg-1))) e-8) (PackC-45RunnerC-45Install-libPkg arg-1 arg-4 '() 1 1 csegen-232 (let ((e-14 (vector-ref arg-2 2))) e-14)) (lambda (_-10507) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-8 (car arg-1))) e-8) (PackC-45RunnerC-45Install-copyApp arg-1 arg-4 arg-2) (lambda (_-10508) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-8 (car arg-1))) e-8) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-8 (car arg-1))) (let ((e-15 (vector-ref e-8 0))) (let ((e-18 (vector-ref e-15 0))) e-18))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-8 (car arg-1))) (let ((e-15 (vector-ref e-8 0))) e-15)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-8 (car arg-1))) (let ((e-15 (vector-ref e-8 0))) e-15)) arg-9795 arg-9802)))))) arg-3 (lambda () (PackC-45RunnerC-45Install-appLink arg-1 (let ((e-0 (car arg-4))) e-0) (let ((e-0 (car arg-4))) (let ((e-17 (vector-ref e-0 0))) e-17)) (let ((e-8 (vector-ref arg-2 4))) e-8) (let ((e-15 (vector-ref arg-2 1))) e-15) e-11 arg-5))) (lambda (_-10509) (PackC-45CoreC-45IO-write arg-1 (cons (DataC-45FilePath-C-60C-47C-62 (let ((e-16 (vector-ref arg-2 0))) (case (vector-ref e-16 0) ((0) (let ((e-20 (vector-ref e-16 2))) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-0 (car arg-4))) (let ((e-28 (vector-ref e-0 0))) e-28)) csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-0 (car arg-4))) (let ((e-24 (vector-ref e-0 4))) (let ((e-31 (vector-ref e-24 1))) e-31))))) (PackC-45CoreC-45Types-toRelPath (let ((e-26 (vector-ref arg-2 1))) e-26))) (PackC-45CoreC-45Types-toRelPath e-20)))) ((1) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-0 (car arg-4))) (let ((e-27 (vector-ref e-0 0))) e-27)) csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-0 (car arg-4))) (let ((e-23 (vector-ref e-0 4))) (let ((e-30 (vector-ref e-23 1))) e-30))))) csegen-219) (PackC-45CoreC-45Types-toRelPath (let ((e-25 (vector-ref arg-2 1))) e-25)))) (else (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-0 (car arg-4))) (let ((e-24 (vector-ref e-0 0))) e-24)) csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-0 (car arg-4))) (let ((e-20 (vector-ref e-0 4))) (let ((e-27 (vector-ref e-20 1))) e-27))))) csegen-226)))) csegen-236) (PreludeC-45Types-fastUnpack ".timestamp")) ""))))))))))))))))))
(define PackC-45RunnerC-45Install-installApp (lambda (arg-1 arg-2 arg-3 arg-4) (let ((u--cg (PackC-45RunnerC-45Install-ipkgCodeGen (let ((e-0 (car arg-2))) e-0) (let ((e-3 (vector-ref arg-4 2))) (let ((e-9 (vector-ref e-3 0))) e-9))))) (PackC-45RunnerC-45Install-case--installApp-3460 arg-1 arg-4 arg-3 arg-2 u--cg (let ((e-4 (vector-ref arg-4 3))) e-4)))))
(define PackC-45CoreC-45Types-isHtmlBody (lambda (ext-0) (PreludeC-45Types-u--C-61C-61_Eq_C-40MaybeC-32C-36aC-41 csegen-338 (box csegen-344) (PreludeC-45Types-u--map_Functor_Maybe (lambda (eta-0) (Builtin-snd eta-0)) (DataC-45FilePathC-45Body-split ext-0)))))
(define PackC-45CoreC-45IO-htmlFiles (lambda (arg-1 arg-2) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) (lambda (eta-0) (PreludeC-45TypesC-45List-filterAppend '() (lambda (eta-1) (PackC-45CoreC-45Types-isHtmlBody eta-1)) eta-0)) (PackC-45CoreC-45IO-entries arg-1 arg-2))))
(define PackC-45ConfigC-45Environment-pkgExec (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (cons (DataC-45FilePath-C-60C-47C-62 (case (vector-ref arg-3 0) ((0) (let ((e-2 (vector-ref arg-3 2))) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 arg-0 csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-8 (vector-ref arg-1 1))) e-8))) (PackC-45CoreC-45Types-toRelPath arg-2)) (PackC-45CoreC-45Types-toRelPath e-2)))) ((1) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 arg-0 csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-2 (vector-ref arg-1 1))) e-2))) csegen-219) (PackC-45CoreC-45Types-toRelPath arg-2))) (else (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 arg-0 csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-2 (vector-ref arg-1 1))) e-2))) csegen-226))) csegen-236) arg-4)))
(define PackC-45RunnerC-45Install-case--preInstall-3049 (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (case (vector-ref arg-6 0) ((0) (let ((e-2 (vector-ref arg-6 2))) (let ((e-3 (vector-ref arg-6 3))) (let ((u--cache (PackC-45ConfigC-45Environment-ipkgCachePath (let ((e-0 (car arg-3))) (let ((e-12 (vector-ref e-0 0))) e-12)) (let ((e-9 (vector-ref arg-2 1))) e-9) e-2 e-3))) (PackC-45CoreC-45IO-copyFile arg-1 u--cache arg-5))))) ((1) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (vector 0 ))) (else (let ((e-12 (vector-ref arg-6 1))) (let ((u--cache (PackC-45ConfigC-45Environment-coreCachePath (let ((e-0 (car arg-3))) (let ((e-7 (vector-ref e-0 0))) e-7)) (let ((e-0 (car arg-3))) (let ((e-4 (vector-ref e-0 4))) e-4)) e-12))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-copyFile arg-1 u--cache arg-5) (lambda (_-10507) ((cond ((equal? e-12 7) (lambda () (PackC-45CoreC-45IO-sysAndLog arg-1 (let ((e-0 (car arg-3))) e-0) 1 (vector 1 (lambda (eta-0) (vector 0 eta-0)) "make" (vector 1 (lambda (eta-0) (vector 0 eta-0)) "src/IdrisPaths.idr" (vector 1 (lambda (eta-0) (vector 0 eta-0)) (PackC-45ConfigC-45Environment-prefixVar (let ((e-0 (car arg-3))) (let ((e-7 (vector-ref e-0 0))) e-7)) (let ((e-0 (car arg-3))) (let ((e-4 (vector-ref e-0 4))) e-4))) (vector 0 )))))))(else (lambda () (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (vector 0 ))))))))))))))
(define PackC-45RunnerC-45Install-preInstall (lambda (arg-1 arg-2 arg-3) (PackC-45RunnerC-45Database-withPkgEnv arg-1 (let ((e-0 (car arg-2))) e-0) (let ((e-2 (vector-ref arg-3 1))) e-2) (let ((e-1 (vector-ref arg-3 0))) e-1) (lambda (u--dir) (let ((u--ipkgAbs (PackC-45DatabaseC-45Types-ipkg u--dir (let ((e-1 (vector-ref arg-3 0))) e-1)))) (PackC-45RunnerC-45Install-case--preInstall-3049 arg-1 arg-3 arg-2 u--dir u--ipkgAbs (let ((e-1 (vector-ref arg-3 0))) e-1)))))))
(define PackC-45CoreC-45Ipkg-exec (lambda (arg-1) (PreludeC-45Types-u--C-62C-62C-61_Monad_Maybe (let ((e-1 (vector-ref arg-1 0))) (let ((e-14 (vector-ref e-1 14))) e-14)) csegen-364)))
(define PackC-45ConfigC-45Types-lookupLib (lambda (arg-1 arg-2 arg-3) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) ((((e-8 'erased) 'erased) (lambda (eta-0) (DataC-45SortedMap-lookup arg-3 eta-0))) (let ((e-9 (cdr arg-1))) ((e-9 'erased) (lambda (eta-0) (unbox arg-2))))))))))
(define DataC-45IORef-modifyIORef (lambda (arg-2 arg-3 arg-4) (let ((e-1 (car arg-2))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-2))) ((e-6 'erased) (lambda (eta-0) (unbox arg-3))))) (lambda (u--val) (let ((e-6 (cdr arg-2))) ((e-6 'erased) (lambda (eta-0) (set-box! arg-3 (arg-4 u--val)))))))))))
(define PackC-45ConfigC-45Types-cacheLib (lambda (arg-1 arg-2 arg-3 arg-4) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) ((((e-8 'erased) 'erased) (lambda (eta-0) arg-4)) (DataC-45IORef-modifyIORef arg-1 arg-2 (lambda (eta-0) (DataC-45SortedMap-insert arg-3 arg-4 eta-0)))))))))
(define PackC-45RunnerC-45Database-isOutdated (lambda (arg-0) (if (null? arg-0) 0 (let ((e-3 (cdr arg-0))) (case (vector-ref e-3 0) ((2) 1)(else 0))))))
(define PackC-45RunnerC-45Database-checkOutdated (lambda (arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 (PreludeC-45Types-u--foldMap_Foldable_List csegen-117 (lambda (eta-0) (PackC-45RunnerC-45Database-isOutdated eta-0)) arg-5))) (cond ((equal? sc0 1) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-6)) (else (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) (SystemC-45FileC-45Meta-exists (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-2 arg-12953)))) (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 (let ((e-1 (car arg-3))) (let ((e-2 (cdr arg-3))) (DataC-45FilePath-C-60C-47C-62 e-1 (vector 1 (cons '() e-2))))))) (lambda (_-0) (cond ((equal? _-0 1) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) (lambda (eta-0) (DataC-45String-trim eta-0)) (PackC-45CoreC-45IO-sysRun arg-2 (vector 1 (lambda (eta-0) (vector 0 eta-0)) "find" (vector 1 csegen-249 arg-4 (vector 1 (lambda (eta-0) (vector 0 eta-0)) "-newer" (vector 1 csegen-204 arg-3 (vector 0 ))))))) (lambda (_-1) (cond ((equal? _-1 "") (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-7))(else (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-6)))))) (else (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-6))))))))))
(define PreludeC-45Uninhabited-void (lambda (ext-0) (display "Error: Executed 'void'")))
(define PreludeC-45Uninhabited-absurd (lambda (arg-2 arg-3) (PreludeC-45Uninhabited-void 'erased)))
(define PackC-45DatabaseC-45Types-u--uninhabited_Uninhabited_C-40IsLocalC-32C-40CoreC-32C-91_C-32C-61C-32_C-93C-41C-41 (lambda (arg-0) (blodwen-error-quit "No clauses")))
(define PackC-45DatabaseC-45Types-u--uninhabited_Uninhabited_C-40IsLocalC-32C-40GitC-32C-91_C-32C-61C-32_C-93C-41C-41 (lambda (arg-0) (blodwen-error-quit "No clauses")))
(define PackC-45DatabaseC-45Types-isLocal (lambda (arg-0) (case (vector-ref arg-0 0) ((2) (vector 1 (lambda (eta-0) (PreludeC-45Uninhabited-absurd (lambda (arg-534) (PackC-45DatabaseC-45Types-u--uninhabited_Uninhabited_C-40IsLocalC-32C-40CoreC-32C-91_C-32C-61C-32_C-93C-41C-41 arg-534)) eta-0)))) ((0) (vector 1 (lambda (eta-0) (PreludeC-45Uninhabited-absurd (lambda (arg-534) (PackC-45DatabaseC-45Types-u--uninhabited_Uninhabited_C-40IsLocalC-32C-40GitC-32C-91_C-32C-61C-32_C-93C-41C-41 arg-534)) eta-0)))) (else (vector 0 (vector 0 ))))))
(define PackC-45CoreC-45Types-u--cast_Cast_C-40MaybeC-32PkgVersionC-41_Body (lambda (arg-0) (if (null? arg-0) (cons #\0 '()) (let ((e-2 (unbox arg-0))) (PackC-45CoreC-45Types-u--cast_Cast_PkgVersion_Body e-2)))))
(define PackC-45ConfigC-45Environment-pkgRelDir (lambda (arg-1) (let ((sc0 (DataC-45FilePathC-45Body-fromChars (PreludeC-45Types-fastUnpack (let ((e-1 (vector-ref arg-1 0))) (let ((e-0 (vector-ref e-1 0))) e-0)))))) (if (null? sc0) (DataC-45FilePath-C-60C-47C-62 (PackC-45CoreC-45Types-toRelPath (let ((e-1 (vector-ref arg-1 0))) (let ((e-0 (vector-ref e-1 0))) e-0))) (vector 1 (cons '() (PackC-45CoreC-45Types-u--cast_Cast_C-40MaybeC-32PkgVersionC-41_Body (let ((e-1 (vector-ref arg-1 0))) (let ((e-27 (vector-ref e-1 1))) e-27)))))) (let ((e-1 (unbox sc0))) (DataC-45FilePath-C-60C-47C-62 DataC-45FilePath-u--neutral_Monoid_C-40PathC-32RelC-41 (vector 1 (cons '() (PackC-45CoreC-45Types-C-60C-45C-62 (lambda (eta-0) eta-0) (lambda (eta-0) (PackC-45CoreC-45Types-u--cast_Cast_C-40MaybeC-32PkgVersionC-41_Body eta-0)) e-1 (let ((e-4 (vector-ref arg-1 0))) (let ((e-28 (vector-ref e-4 1))) e-28)))))))))))
(define PackC-45ConfigC-45Environment-pkgInstallDir (lambda (arg-1 arg-2 arg-3 arg-4 arg-5) (let ((u--vers (let ((e-3 (vector-ref arg-2 2))) e-3))) (let ((u--dir (DataC-45FilePath-C-60C-47C-62 (case (vector-ref arg-4 0) ((0) (let ((e-2 (vector-ref arg-4 2))) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 arg-1 csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-8 (vector-ref arg-2 1))) e-8))) (PackC-45CoreC-45Types-toRelPath arg-3)) (PackC-45CoreC-45Types-toRelPath e-2)))) ((1) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 arg-1 csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-2 (vector-ref arg-2 1))) e-2))) csegen-219) (PackC-45CoreC-45Types-toRelPath arg-3))) (else (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 arg-1 csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-2 (vector-ref arg-2 1))) e-2))) csegen-226))) (vector 1 (cons '() (PackC-45CoreC-45Types-C-60C-45C-62 (lambda (eta-0) eta-0) (lambda (eta-0) (PackC-45CoreC-45Types-u--cast_Cast_PkgVersion_Body eta-0)) csegen-224 (let ((e-3 (vector-ref arg-2 2))) e-3))))))) (case (vector-ref arg-4 0) ((2) (let ((e-1 (vector-ref arg-4 1))) (DataC-45FilePath-C-60C-47C-62 u--dir (vector 1 (cons '() (PackC-45CoreC-45Types-C-60C-45C-62 (lambda (eta-0) (PackC-45DatabaseC-45Types-u--cast_Cast_CorePkg_Body eta-0)) (lambda (eta-0) (PackC-45CoreC-45Types-u--cast_Cast_PkgVersion_Body eta-0)) e-1 u--vers)))))) ((0) (DataC-45FilePath-C-60C-47C-62 u--dir (PackC-45ConfigC-45Environment-pkgRelDir arg-5))) (else (DataC-45FilePath-C-60C-47C-62 u--dir (PackC-45ConfigC-45Environment-pkgRelDir arg-5))))))))
(define PackC-45CoreC-45Ipkg-sourcePath (lambda (arg-1) (PreludeC-45Types-maybe (lambda () (let ((e-3 (vector-ref arg-1 2))) (let ((e-5 (car e-3))) e-5))) (lambda () (lambda (eta-0) (PackC-45CoreC-45Types-toAbsPath (let ((e-3 (vector-ref arg-1 2))) (let ((e-5 (car e-3))) e-5)) (DataC-45FilePath-u--fromString_FromString_FilePath eta-0)))) (let ((e-1 (vector-ref arg-1 0))) (let ((e-16 (vector-ref e-1 16))) e-16)))))
(define PackC-45RunnerC-45Database-libStatus (lambda (arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) (SystemC-45FileC-45Meta-exists (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-2 arg-12953)))) (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 (PackC-45ConfigC-45Environment-pkgInstallDir (let ((e-0 (vector-ref arg-3 0))) e-0) (let ((e-4 (vector-ref arg-3 4))) e-4) arg-4 arg-5 arg-6))) (lambda (_-0) (cond ((equal? _-0 1) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) (SystemC-45FileC-45Meta-exists (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-2 arg-12953)))) (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 (DataC-45FilePath-C-60C-47C-62 (case (vector-ref arg-5 0) ((0) (let ((e-2 (vector-ref arg-5 2))) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-0 (vector-ref arg-3 0))) e-0) csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-7 (vector-ref arg-3 4))) (let ((e-13 (vector-ref e-7 1))) e-13)))) (PackC-45CoreC-45Types-toRelPath arg-4)) (PackC-45CoreC-45Types-toRelPath e-2)))) ((1) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-0 (vector-ref arg-3 0))) e-0) csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-4 (vector-ref arg-3 4))) (let ((e-12 (vector-ref e-4 1))) e-12)))) csegen-219) (PackC-45CoreC-45Types-toRelPath arg-4))) (else (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-0 (vector-ref arg-3 0))) e-0) csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-4 (vector-ref arg-3 4))) (let ((e-8 (vector-ref e-4 1))) e-8)))) csegen-226))) csegen-231))) (lambda (u--b) (let ((sc1 (PackC-45DatabaseC-45Types-isLocal arg-5))) (case (vector-ref sc1 0) ((1) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-2))) (let ((e-6 (vector-ref e-3 0))) e-6)) (vector 1 u--b))) (else (let ((u--ts (cons (DataC-45FilePath-C-60C-47C-62 (case (vector-ref arg-5 0) ((0) (let ((e-2 (vector-ref arg-5 2))) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-0 (vector-ref arg-3 0))) e-0) csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-8 (vector-ref arg-3 4))) (let ((e-14 (vector-ref e-8 1))) e-14)))) (PackC-45CoreC-45Types-toRelPath arg-4)) (PackC-45CoreC-45Types-toRelPath e-2)))) ((1) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-0 (vector-ref arg-3 0))) e-0) csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-4 (vector-ref arg-3 4))) (let ((e-13 (vector-ref e-4 1))) e-13)))) csegen-219) (PackC-45CoreC-45Types-toRelPath arg-4))) (else (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-0 (vector-ref arg-3 0))) e-0) csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-4 (vector-ref arg-3 4))) (let ((e-9 (vector-ref e-4 1))) e-9)))) csegen-226))) (vector 1 (cons '() (PackC-45CoreC-45Types-C-60C-45C-62 (lambda (eta-0) eta-0) (lambda (eta-0) (PackC-45CoreC-45Types-u--cast_Cast_PkgVersion_Body eta-0)) csegen-224 (let ((e-4 (vector-ref arg-3 4))) (let ((e-8 (vector-ref e-4 2))) e-8)))))) (PreludeC-45Types-fastUnpack ".timestamp")))) (let ((u--dir (PackC-45CoreC-45Ipkg-sourcePath arg-6))) (PackC-45RunnerC-45Database-checkOutdated arg-2 u--ts u--dir arg-7 (vector 2 ) (vector 1 u--b)))))))))) (else (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) (vector 0 ))))))))
(define PackC-45CoreC-45Ipkg-addField (lambda (arg-0 arg-1) (case (vector-ref arg-1 0) ((0) (let ((e-1 (vector-ref arg-1 2))) (let ((e-26 (vector-ref arg-0 0))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-26 (box e-1) e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 e-13 e-14 e-15 e-16 e-17 e-18 e-19 e-20 e-21 e-22 e-23 e-24))))))))))))))))))))))))))) ((1) (let ((e-3 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-25 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 (box e-3) e-25 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 e-13 e-14 e-15 e-16 e-17 e-18 e-19 e-20 e-21 e-22 e-23 e-24))))))))))))))))))))))))))) ((2) arg-0) ((3) (let ((e-7 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-26 (vector-ref arg-0 6))) (let ((e-25 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 (box e-7) e-4 e-5 e-26 e-25 e-8 e-9 e-10 e-11 e-12 e-13 e-14 e-15 e-16 e-17 e-18 e-19 e-20 e-21 e-22 e-23 e-24))))))))))))))))))))))))))) ((4) (let ((e-9 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-26 (vector-ref arg-0 8))) (let ((e-25 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 (box e-9) e-5 e-6 e-7 e-26 e-25 e-10 e-11 e-12 e-13 e-14 e-15 e-16 e-17 e-18 e-19 e-20 e-21 e-22 e-23 e-24))))))))))))))))))))))))))) ((5) (let ((e-11 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-26 (vector-ref arg-0 10))) (let ((e-25 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 (box e-11) e-6 e-7 e-8 e-9 e-26 e-25 e-12 e-13 e-14 e-15 e-16 e-17 e-18 e-19 e-20 e-21 e-22 e-23 e-24))))))))))))))))))))))))))) ((6) (let ((e-13 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-26 (vector-ref arg-0 12))) (let ((e-25 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 (box e-13) e-7 e-8 e-9 e-10 e-11 e-26 e-25 e-14 e-15 e-16 e-17 e-18 e-19 e-20 e-21 e-22 e-23 e-24))))))))))))))))))))))))))) ((7) (let ((e-15 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-26 (vector-ref arg-0 14))) (let ((e-25 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 (box e-15) e-8 e-9 e-10 e-11 e-12 e-13 e-26 e-25 e-16 e-17 e-18 e-19 e-20 e-21 e-22 e-23 e-24))))))))))))))))))))))))))) ((8) (let ((e-17 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-26 (vector-ref arg-0 16))) (let ((e-25 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 (box e-17) e-9 e-10 e-11 e-12 e-13 e-14 e-15 e-26 e-25 e-18 e-19 e-20 e-21 e-22 e-23 e-24))))))))))))))))))))))))))) ((9) (let ((e-19 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-26 (vector-ref arg-0 18))) (let ((e-25 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 (box e-19) e-10 e-11 e-12 e-13 e-14 e-15 e-16 e-17 e-26 e-25 e-20 e-21 e-22 e-23 e-24))))))))))))))))))))))))))) ((10) (let ((e-21 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-26 (vector-ref arg-0 20))) (let ((e-25 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 (box e-21) e-11 e-12 e-13 e-14 e-15 e-16 e-17 e-18 e-19 e-26 e-25 e-22 e-23 e-24))))))))))))))))))))))))))) ((11) (let ((e-22 (vector-ref arg-1 1))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-25 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-22 e-12 e-13 e-14 e-15 e-16 e-17 e-18 e-19 e-20 e-21 e-25 e-23 e-24))))))))))))))))))))))))))) ((12) (let ((e-23 (vector-ref arg-1 1))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-25 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 (PreludeC-45TypesC-45List-mapAppend '() (lambda (lamc-0) (let ((e-26 (cdr lamc-0))) (cons e-26 ""))) e-23) e-13 e-14 e-15 e-16 e-17 e-18 e-19 e-20 e-21 e-22 e-25 e-24))))))))))))))))))))))))))) ((13) (let ((e-25 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-26 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 (box (cons e-25 "")) e-14 e-15 e-16 e-17 e-18 e-19 e-20 e-21 e-22 e-23 e-26))))))))))))))))))))))))))) ((14) (let ((e-26 (vector-ref arg-1 1))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 e-13 (box e-26) e-15 e-16 e-17 e-18 e-19 e-20 e-21 e-22 e-23 e-24))))))))))))))))))))))))))) ((15) (let ((e-27 (vector-ref arg-1 1))) (let ((e-28 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 e-13 e-14 (box (cons e-27 e-28)) e-16 e-17 e-18 e-19 e-20 e-21 e-22 e-23 e-24)))))))))))))))))))))))))))) ((16) (let ((e-30 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 e-13 e-14 e-15 (box e-30) e-17 e-18 e-19 e-20 e-21 e-22 e-23 e-24))))))))))))))))))))))))))) ((17) (let ((e-32 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 e-13 e-14 e-15 e-16 (box e-32) e-18 e-19 e-20 e-21 e-22 e-23 e-24))))))))))))))))))))))))))) ((18) (let ((e-34 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 e-13 e-14 e-15 e-16 e-17 (box e-34) e-19 e-20 e-21 e-22 e-23 e-24))))))))))))))))))))))))))) ((19) (let ((e-35 (vector-ref arg-1 1))) (let ((e-36 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 e-13 e-14 e-15 e-16 e-17 e-18 (box (cons e-35 e-36)) e-20 e-21 e-22 e-23 e-24)))))))))))))))))))))))))))) ((20) (let ((e-37 (vector-ref arg-1 1))) (let ((e-38 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 e-13 e-14 e-15 e-16 e-17 e-18 e-19 (box (cons e-37 e-38)) e-21 e-22 e-23 e-24)))))))))))))))))))))))))))) ((21) (let ((e-39 (vector-ref arg-1 1))) (let ((e-40 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 e-13 e-14 e-15 e-16 e-17 e-18 e-19 e-20 (box (cons e-39 e-40)) e-22 e-23 e-24)))))))))))))))))))))))))))) ((22) (let ((e-41 (vector-ref arg-1 1))) (let ((e-42 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 e-13 e-14 e-15 e-16 e-17 e-18 e-19 e-20 e-21 (box (cons e-41 e-42)) e-23 e-24)))))))))))))))))))))))))))) ((23) (let ((e-43 (vector-ref arg-1 1))) (let ((e-44 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 e-13 e-14 e-15 e-16 e-17 e-18 e-19 e-20 e-21 e-22 (box (cons e-43 e-44)) e-24)))))))))))))))))))))))))))) (else (let ((e-45 (vector-ref arg-1 1))) (let ((e-46 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 e-13 e-14 e-15 e-16 e-17 e-18 e-19 e-20 e-21 e-22 e-23 (box (cons e-45 e-46)))))))))))))))))))))))))))))))))
(define IdrisC-45PackageC-45Types-initPkgDesc (lambda (arg-0) (vector arg-0 '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '())))
(define PackC-45CoreC-45Ipkg-addFields (lambda (ext-0 ext-1) (PreludeC-45Types-u--foldl_Foldable_List (lambda (eta-0) (lambda (eta-1) (PackC-45CoreC-45Ipkg-addField eta-0 eta-1))) (IdrisC-45PackageC-45Types-initPkgDesc ext-0) ext-1)))
(define LibrariesC-45TextC-45LexerC-45Core-scan (lambda (arg-1 arg-2 arg-3) (case (vector-ref arg-1 0) ((0) (box (cons arg-2 arg-3))) ((1) '()) ((2) (if (null? arg-3) (box (cons arg-2 '())) '())) ((3) (let ((e-2 (vector-ref arg-1 1))) (let ((e-3 (vector-ref arg-1 2))) (let ((sc1 (PreludeC-45EqOrd-u--C-61C-61_Eq_Bool (DataC-45Maybe-isJust (LibrariesC-45TextC-45LexerC-45Core-scan e-3 arg-2 arg-3)) e-2))) (cond ((equal? sc1 1) (box (cons arg-2 arg-3))) (else '())))))) ((4) (let ((e-4 (vector-ref arg-1 1))) (if (null? arg-3) '() (let ((e-25 (car arg-3))) (let ((e-26 (cdr arg-3))) (let ((sc2 (e-4 e-25))) (cond ((equal? sc2 1) (box (cons (cons e-25 arg-2) e-26))) (else '())))))))) ((5) (let ((e-6 (vector-ref arg-1 1))) (let ((e-7 (vector-ref arg-1 2))) (PreludeC-45Types-u--C-62C-62C-61_Monad_Maybe (LibrariesC-45TextC-45LexerC-45Core-scan e-6 arg-2 arg-3) (lambda (_-0) (let ((e-2 (car _-0))) (let ((e-3 (cdr _-0))) (LibrariesC-45TextC-45LexerC-45Core-scan (e-7) e-2 e-3)))))))) ((6) (let ((e-10 (vector-ref arg-1 1))) (let ((e-11 (vector-ref arg-1 2))) (PreludeC-45Types-u--C-62C-62C-61_Monad_Maybe (LibrariesC-45TextC-45LexerC-45Core-scan e-10 arg-2 arg-3) (lambda (_-0) (let ((e-2 (car _-0))) (let ((e-3 (cdr _-0))) (LibrariesC-45TextC-45LexerC-45Core-scan e-11 e-2 e-3)))))))) ((7) (let ((e-13 (vector-ref arg-1 1))) (let ((e-14 (vector-ref arg-1 2))) (PreludeC-45Types-u--C-62C-62C-61_Monad_Maybe (LibrariesC-45TextC-45LexerC-45Core-scan e-13 arg-2 arg-3) (lambda (_-0) (let ((e-2 (car _-0))) (let ((e-3 (cdr _-0))) (LibrariesC-45TextC-45LexerC-45Core-scan e-14 e-2 e-3)))))))) (else (let ((e-17 (vector-ref arg-1 1))) (let ((e-18 (vector-ref arg-1 2))) (PreludeC-45Types-maybe (lambda () (LibrariesC-45TextC-45LexerC-45Core-scan e-18 arg-2 arg-3)) (lambda () (lambda (eta-0) (box eta-0))) (LibrariesC-45TextC-45LexerC-45Core-scan e-17 arg-2 arg-3))))))))
(define LibrariesC-45TextC-45LexerC-45Core-n--3861-2522-u--countNLs (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (PreludeC-45TypesC-45List-lengthTR (PreludeC-45TypesC-45List-filterAppend '() csegen-357 arg-7))))
(define LibrariesC-45TextC-45LexerC-45Core-n--3861-2523-u--getCols (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 (DataC-45List-span csegen-356 arg-7))) (let ((e-2 (car sc0))) (let ((e-3 (cdr sc0))) (if (null? e-3) (bs+ arg-8 (blodwen-toSignedInt (PreludeC-45TypesC-45List-lengthTR e-2) 63) 63) (blodwen-toSignedInt (PreludeC-45TypesC-45List-lengthTR e-2) 63)))))))
(define LibrariesC-45TextC-45LexerC-45Core-case--tokeniseC-44getFirstToken-2657 (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (if (null? arg-11) (LibrariesC-45TextC-45LexerC-45Core-n--3861-2524-u--getFirstToken arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-9 arg-10) (let ((e-1 (unbox arg-11))) (let ((e-5 (car e-1))) (let ((e-6 (cdr e-1))) (let ((u--lineC-39 (bs+ arg-5 (blodwen-toSignedInt (LibrariesC-45TextC-45LexerC-45Core-n--3861-2522-u--countNLs arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 e-5) 63) 63))) (let ((u--colC-39 (LibrariesC-45TextC-45LexerC-45Core-n--3861-2523-u--getCols arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 e-5 arg-4))) (box (cons (vector (arg-8 (PreludeC-45Types-fastPack (PreludeC-45TypesC-45List-reverse e-5))) 0 (vector arg-5 arg-4 u--lineC-39 u--colC-39)) (cons u--lineC-39 (cons u--colC-39 e-6))))))))))))
(define LibrariesC-45TextC-45LexerC-45Core-n--3861-2524-u--getFirstToken (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (if (null? arg-7) '() (let ((e-2 (car arg-7))) (let ((e-3 (cdr arg-7))) (let ((e-6 (car e-2))) (let ((e-7 (cdr e-2))) (LibrariesC-45TextC-45LexerC-45Core-case--tokeniseC-44getFirstToken-2657 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 e-6 e-7 e-3 arg-8 (LibrariesC-45TextC-45LexerC-45Core-scan e-6 '() arg-8)))))))))
(define LibrariesC-45TextC-45LexerC-45Core-case--tokenise-2747 (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (if (null? arg-7) (cons (PreludeC-45TypesC-45List-reverse arg-3) (cons arg-5 (cons arg-4 arg-1))) (let ((e-1 (unbox arg-7))) (let ((e-5 (car e-1))) (let ((e-6 (cdr e-1))) (let ((e-9 (car e-6))) (let ((e-10 (cdr e-6))) (let ((e-13 (car e-10))) (let ((e-14 (cdr e-10))) (let ((sc4 (arg-6 (let ((e-4 (vector-ref e-5 0))) e-4)))) (cond ((equal? sc4 1) (cons (PreludeC-45TypesC-45List-reverse arg-3) (cons arg-5 (cons arg-4 '())))) (else (LibrariesC-45TextC-45LexerC-45Core-tokenise arg-6 e-9 e-13 (cons e-5 arg-3) arg-2 e-14))))))))))))))
(define LibrariesC-45TextC-45LexerC-45Core-tokenise (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (LibrariesC-45TextC-45LexerC-45Core-case--tokenise-2747 arg-6 arg-5 arg-4 arg-3 arg-2 arg-1 (LibrariesC-45TextC-45LexerC-45Core-n--3861-2524-u--getFirstToken arg-6 arg-5 arg-4 arg-3 arg-2 arg-1 arg-5 arg-6))))
(define LibrariesC-45TextC-45LexerC-45Core-lexTo (lambda (arg-1 arg-2 arg-3) (let ((sc0 (LibrariesC-45TextC-45LexerC-45Core-tokenise arg-1 0 0 '() arg-2 (PreludeC-45Types-fastUnpack arg-3)))) (let ((e-2 (car sc0))) (let ((e-3 (cdr sc0))) (let ((e-6 (car e-3))) (let ((e-7 (cdr e-3))) (let ((e-10 (car e-7))) (let ((e-11 (cdr e-7))) (cons e-2 (cons e-6 (cons e-10 (PreludeC-45Types-fastPack e-11)))))))))))))
(define LibrariesC-45TextC-45Lexer-is (lambda (arg-0) (LibrariesC-45TextC-45LexerC-45Core-pred (lambda (arg-1) (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 arg-0)))))
(define ParserC-45LexerC-45Package-andop (vector 5 (LibrariesC-45TextC-45Lexer-is #\&) (lambda () (LibrariesC-45TextC-45Lexer-is #\&))))
(define LibrariesC-45TextC-45Lexer-isNot (lambda (arg-0) (LibrariesC-45TextC-45LexerC-45Core-pred (lambda (arg-1) (PreludeC-45EqOrd-u--C-47C-61_Eq_Char arg-1 arg-0)))))
(define LibrariesC-45TextC-45LexerC-45Core-reject (lambda (ext-0) (vector 3 0 ext-0)))
(define ParserC-45LexerC-45Common-comment (vector 5 (vector 5 (vector 5 (vector 5 (LibrariesC-45TextC-45Lexer-is #\-) (lambda () (LibrariesC-45TextC-45Lexer-is #\-))) (lambda () (LibrariesC-45TextC-45Lexer-many (LibrariesC-45TextC-45Lexer-is #\-)))) (lambda () (LibrariesC-45TextC-45LexerC-45Core-reject (LibrariesC-45TextC-45Lexer-is #\})))) (lambda () (LibrariesC-45TextC-45Lexer-many (LibrariesC-45TextC-45Lexer-isNot (integer->char 10))))))
(define ParserC-45LexerC-45Package-dot (LibrariesC-45TextC-45Lexer-is #\.))
(define ParserC-45LexerC-45Package-eqop (vector 5 (LibrariesC-45TextC-45Lexer-is #\=) (lambda () (LibrariesC-45TextC-45Lexer-is #\=))))
(define ParserC-45LexerC-45Package-equals (LibrariesC-45TextC-45Lexer-is #\=))
(define ParserC-45LexerC-45Package-gt (LibrariesC-45TextC-45Lexer-is #\>))
(define ParserC-45LexerC-45Package-gte (vector 5 (LibrariesC-45TextC-45Lexer-is #\>) (lambda () (LibrariesC-45TextC-45Lexer-is #\=))))
(define ParserC-45LexerC-45Common-identAllowDashes (vector 5 (LibrariesC-45TextC-45LexerC-45Core-pred (lambda (eta-0) (ParserC-45LexerC-45Common-isIdentStart 0 eta-0))) (lambda () (LibrariesC-45TextC-45Lexer-many (LibrariesC-45TextC-45LexerC-45Core-pred csegen-667)))))
(define LibrariesC-45TextC-45Lexer-digit (LibrariesC-45TextC-45LexerC-45Core-pred (lambda (eta-0) (PreludeC-45Types-isDigit eta-0))))
(define LibrariesC-45TextC-45Lexer-digits (LibrariesC-45TextC-45Lexer-some LibrariesC-45TextC-45Lexer-digit))
(define LibrariesC-45TextC-45Lexer-intLit (vector 6 (LibrariesC-45TextC-45Lexer-opt (LibrariesC-45TextC-45Lexer-is #\-)) LibrariesC-45TextC-45Lexer-digits))
(define ParserC-45LexerC-45Package-lt (LibrariesC-45TextC-45Lexer-is #\<))
(define ParserC-45LexerC-45Package-lte (vector 5 (LibrariesC-45TextC-45Lexer-is #\<) (lambda () (LibrariesC-45TextC-45Lexer-is #\=))))
(define DataC-45List1-reverseOnto (lambda (arg-1 arg-2) (if (null? arg-2) arg-1 (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (DataC-45List1-reverseOnto (cons e-2 (DataC-45List1-forget arg-1)) e-3))))))
(define DataC-45List1-reverse (lambda (arg-1) (let ((e-1 (car arg-1))) (let ((e-2 (cdr arg-1))) (DataC-45List1-reverseOnto (DataC-45List1-singleton e-1) e-2)))))
(define CoreC-45NameC-45Namespace-mkNamespacedIdent (lambda (arg-0) (let ((u--nns (DataC-45List1-reverse (DataC-45String-split (lambda (arg-1) (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\.)) arg-0)))) (let ((u--name (let ((e-1 (car u--nns))) e-1))) (let ((u--ns (let ((e-2 (cdr u--nns))) e-2))) (if (null? u--ns) (cons '() u--name) (cons (box u--ns) u--name)))))))
(define ParserC-45LexerC-45Common-identNormal (vector 5 (LibrariesC-45TextC-45LexerC-45Core-pred (lambda (eta-0) (ParserC-45LexerC-45Common-isIdentStart 2 eta-0))) (lambda () (LibrariesC-45TextC-45Lexer-many (LibrariesC-45TextC-45LexerC-45Core-pred (lambda (eta-0) (ParserC-45LexerC-45Common-isIdentTrailing 2 eta-0)))))))
(define LibrariesC-45TextC-45LexerC-45Core-expect (lambda (ext-0) (vector 3 1 ext-0)))
(define ParserC-45LexerC-45Common-namespaceIdent (vector 5 csegen-736 (lambda () (LibrariesC-45TextC-45Lexer-many (vector 5 (vector 5 (LibrariesC-45TextC-45Lexer-is #\.) (lambda () csegen-736)) (lambda () (LibrariesC-45TextC-45LexerC-45Core-expect (LibrariesC-45TextC-45Lexer-is #\.))))))))
(define ParserC-45LexerC-45Common-namespacedIdent (vector 5 ParserC-45LexerC-45Common-namespaceIdent (lambda () (LibrariesC-45TextC-45Lexer-opt (vector 5 (LibrariesC-45TextC-45Lexer-is #\.) (lambda () ParserC-45LexerC-45Common-identNormal))))))
(define ParserC-45LexerC-45Package-separator (LibrariesC-45TextC-45Lexer-is #\,))
(define LibrariesC-45TextC-45LexerC-45Core-concatMap (lambda (arg-2 arg-3) (if (null? arg-3) (vector 0 ) (let ((e-2 (car arg-3))) (let ((e-3 (cdr arg-3))) (if (null? e-3) (arg-2 e-2) (vector 7 (arg-2 e-2) (LibrariesC-45TextC-45LexerC-45Core-concatMap arg-2 e-3))))))))
(define LibrariesC-45TextC-45LexerC-45Core-fail (vector 1 ))
(define LibrariesC-45TextC-45Lexer-exact (lambda (arg-0) (let ((sc0 (PreludeC-45Types-fastUnpack arg-0))) (if (null? sc0) LibrariesC-45TextC-45LexerC-45Core-fail (let ((e-2 (car sc0))) (let ((e-3 (cdr sc0))) (LibrariesC-45TextC-45LexerC-45Core-concatMap (lambda (eta-0) (LibrariesC-45TextC-45Lexer-is eta-0)) (cons e-2 e-3))))))))
(define LibrariesC-45TextC-45Lexer-oneOf (lambda (arg-0) (LibrariesC-45TextC-45LexerC-45Core-pred (lambda (u--x) (PreludeC-45Types-elem csegen-197 csegen-2 u--x (PreludeC-45Types-fastUnpack arg-0))))))
(define LibrariesC-45TextC-45Lexer-newline (LibrariesC-45TextC-45LexerC-45Core-C-60C-124C-62 (LibrariesC-45TextC-45Lexer-exact "\u000d\u000a") (LibrariesC-45TextC-45Lexer-oneOf "\u000d\u000a")))
(define LibrariesC-45TextC-45Lexer-space (LibrariesC-45TextC-45LexerC-45Core-pred (lambda (eta-0) (PreludeC-45Types-isSpace eta-0))))
(define ParserC-45LexerC-45Common-spacesOrNewlines (LibrariesC-45TextC-45Lexer-some (LibrariesC-45TextC-45LexerC-45Core-C-60C-124C-62 LibrariesC-45TextC-45Lexer-space LibrariesC-45TextC-45Lexer-newline)))
(define LibrariesC-45TextC-45Lexer-any (LibrariesC-45TextC-45LexerC-45Core-pred (lambda (eta-0) 1)))
(define LibrariesC-45TextC-45Lexer-escape (lambda (arg-0 arg-1) (vector 5 arg-0 (lambda () arg-1))))
(define LibrariesC-45TextC-45Lexer-manyUntil (lambda (arg-1 arg-2) (LibrariesC-45TextC-45Lexer-many (vector 6 (LibrariesC-45TextC-45LexerC-45Core-reject arg-1) arg-2))))
(define LibrariesC-45TextC-45Lexer-manyThen (lambda (arg-1 arg-2) (vector 6 (LibrariesC-45TextC-45Lexer-manyUntil arg-1 arg-2) arg-1)))
(define LibrariesC-45TextC-45Lexer-surround (lambda (arg-0 arg-1 arg-2) (vector 5 arg-0 (lambda () (LibrariesC-45TextC-45Lexer-manyThen arg-1 arg-2)))))
(define LibrariesC-45TextC-45Lexer-quote (lambda (arg-0 arg-1) (LibrariesC-45TextC-45Lexer-surround arg-0 arg-0 arg-1)))
(define LibrariesC-45TextC-45Lexer-stringLit (LibrariesC-45TextC-45Lexer-quote (LibrariesC-45TextC-45Lexer-is #\") (LibrariesC-45TextC-45LexerC-45Core-C-60C-124C-62 (LibrariesC-45TextC-45Lexer-escape (LibrariesC-45TextC-45Lexer-is #\\) LibrariesC-45TextC-45Lexer-any) LibrariesC-45TextC-45Lexer-any)))
(define LibrariesC-45UtilsC-45String-stripSurrounds (lambda (arg-0 arg-1 arg-2) (PreludeC-45Types-substr arg-0 (PreludeC-45Types-prim__integerToNat (- (PreludeC-45TypesC-45String-length arg-2) (+ arg-0 arg-1))) arg-2)))
(define LibrariesC-45UtilsC-45String-stripQuotes (lambda (ext-0) (LibrariesC-45UtilsC-45String-stripSurrounds 1 1 ext-0)))
(define ParserC-45LexerC-45Package-rawTokens (cons (cons ParserC-45LexerC-45Common-comment (lambda (eta-0) (vector 0 (LibrariesC-45DataC-45StringC-45Extra-drop 2 eta-0)))) (cons (cons ParserC-45LexerC-45Common-namespacedIdent (lambda (eta-0) (PreludeC-45Basics-uncurry (lambda (eta-1) (lambda (eta-2) (vector 3 eta-1 eta-2))) (CoreC-45NameC-45Namespace-mkNamespacedIdent eta-0)))) (cons (cons ParserC-45LexerC-45Common-identAllowDashes (lambda (eta-0) (vector 3 '() eta-0))) (cons (cons ParserC-45LexerC-45Package-separator (lambda (eta-0) (vector 4 ))) (cons (cons ParserC-45LexerC-45Package-dot (lambda (eta-0) (vector 5 ))) (cons (cons ParserC-45LexerC-45Package-lte (lambda (eta-0) (vector 6 ))) (cons (cons ParserC-45LexerC-45Package-gte (lambda (eta-0) (vector 7 ))) (cons (cons ParserC-45LexerC-45Package-lt (lambda (eta-0) (vector 8 ))) (cons (cons ParserC-45LexerC-45Package-gt (lambda (eta-0) (vector 9 ))) (cons (cons ParserC-45LexerC-45Package-eqop (lambda (eta-0) (vector 10 ))) (cons (cons ParserC-45LexerC-45Package-andop (lambda (eta-0) (vector 11 ))) (cons (cons ParserC-45LexerC-45Package-equals (lambda (eta-0) (vector 2 ))) (cons (cons ParserC-45LexerC-45Common-spacesOrNewlines (lambda (eta-0) (vector 12 ))) (cons (cons LibrariesC-45TextC-45Lexer-stringLit (lambda (u--s) (vector 13 (LibrariesC-45UtilsC-45String-stripQuotes u--s)))) (cons (cons LibrariesC-45TextC-45Lexer-intLit (lambda (u--i) (vector 14 (cast-string-int u--i)))) '()))))))))))))))))
(define ParserC-45LexerC-45Package-n--5382-9564-u--useful (lambda (arg-0 arg-1) (case (vector-ref arg-1 0) ((0) 0) ((12) 0)(else 1))))
(define ParserC-45LexerC-45Package-case--lex-9583 (lambda (arg-0 arg-1) (let ((e-2 (car arg-1))) (let ((e-3 (cdr arg-1))) (if (null? e-3) (vector 0 e-3) (let ((e-6 (car e-3))) (let ((e-7 (cdr e-3))) (if (null? e-7) (vector 0 e-3) (let ((e-10 (car e-7))) (let ((e-11 (cdr e-7))) (cond ((equal? e-11 "") (vector 1 (PreludeC-45TypesC-45List-tailRecAppend (PreludeC-45TypesC-45List-filterAppend '() (lambda (eta-0) (ParserC-45LexerC-45Package-n--5382-9564-u--useful arg-0 (let ((e-1 (vector-ref eta-0 0))) e-1))) e-2) (cons (vector (vector 1 ) 0 (vector e-6 e-10 e-6 e-10)) '()))))(else (vector 0 e-3)))))))))))))
(define ParserC-45LexerC-45Package-lex (lambda (arg-0) (ParserC-45LexerC-45Package-case--lex-9583 arg-0 (LibrariesC-45TextC-45LexerC-45Core-lexTo (lambda (eta-0) 0) ParserC-45LexerC-45Package-rawTokens arg-0))))
(define LibrariesC-45TextC-45Bounded-irrelevantBounds (lambda (arg-1) (vector arg-1 1 (vector -1 -1 -1 -1))))
(define LibrariesC-45TextC-45Bounded-endBounds (lambda (arg-0) (cons (let ((e-2 (vector-ref arg-0 2))) e-2) (let ((e-3 (vector-ref arg-0 3))) e-3))))
(define LibrariesC-45TextC-45Bounded-end (lambda (ext-0) (LibrariesC-45TextC-45Bounded-endBounds (let ((e-3 (vector-ref ext-0 2))) e-3))))
(define LibrariesC-45TextC-45Bounded-startBounds (lambda (arg-0) (cons (let ((e-0 (vector-ref arg-0 0))) e-0) (let ((e-1 (vector-ref arg-0 1))) e-1))))
(define LibrariesC-45TextC-45Bounded-start (lambda (ext-0) (LibrariesC-45TextC-45Bounded-startBounds (let ((e-3 (vector-ref ext-0 2))) e-3))))
(define LibrariesC-45TextC-45Bounded-u--map_Functor_WithBounds (lambda (arg-2 arg-3) (let ((e-1 (vector-ref arg-3 0))) (let ((e-2 (vector-ref arg-3 1))) (let ((e-3 (vector-ref arg-3 2))) (vector (arg-2 e-1) e-2 e-3))))))
(define LibrariesC-45TextC-45Bounded-mergeBounds (lambda (arg-2 arg-3) (let ((e-6 (vector-ref arg-2 1))) (cond ((equal? e-6 1) (let ((e-9 (vector-ref arg-3 0))) (let ((e-10 (vector-ref arg-3 1))) (cond ((equal? e-10 1) (LibrariesC-45TextC-45Bounded-irrelevantBounds e-9))(else arg-3)))))(else (let ((e-1 (vector-ref arg-3 0))) (let ((e-2 (vector-ref arg-3 1))) (cond ((equal? e-2 1) (LibrariesC-45TextC-45Bounded-u--map_Functor_WithBounds (lambda (eta-0) e-1) arg-2))(else (let ((sc0 (PreludeC-45EqOrd-u--min_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 csegen-108 csegen-108 (LibrariesC-45TextC-45Bounded-start arg-2) (LibrariesC-45TextC-45Bounded-start arg-3)))) (let ((e-8 (car sc0))) (let ((e-4 (cdr sc0))) (let ((sc1 (PreludeC-45EqOrd-u--max_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 csegen-108 csegen-108 (LibrariesC-45TextC-45Bounded-end arg-2) (LibrariesC-45TextC-45Bounded-end arg-3)))) (let ((e-10 (car sc1))) (let ((e-9 (cdr sc1))) (vector (let ((e-13 (vector-ref arg-3 0))) e-13) 0 (vector e-8 e-4 e-10 e-9)))))))))))))))))
(define LibrariesC-45TextC-45ParserC-45Core-mergeWith (lambda (arg-4 arg-5) (case (vector-ref arg-5 0) ((1) (let ((e-3 (vector-ref arg-5 1))) (let ((e-4 (vector-ref arg-5 2))) (let ((e-5 (vector-ref arg-5 3))) (let ((e-6 (vector-ref arg-5 4))) (let ((e-7 (vector-ref arg-5 5))) (vector 1 e-3 e-4 e-5 (LibrariesC-45TextC-45Bounded-mergeBounds arg-4 e-6) e-7)))))))(else arg-5))))
(define LibrariesC-45TextC-45Bounded-removeIrrelevance (lambda (arg-1) (let ((e-1 (vector-ref arg-1 0))) (let ((e-3 (vector-ref arg-1 2))) (vector e-1 1 e-3)))))
(define LibrariesC-45TextC-45ParserC-45Core-case--doParse-3986 (lambda (arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (case (vector-ref arg-10 0) ((0) (let ((e-3 (vector-ref arg-10 1))) (let ((e-5 (vector-ref arg-10 3))) (vector 0 e-3 0 e-5))))(else arg-10))))
(define LibrariesC-45TextC-45ParserC-45Core-case--doParse-4087 (lambda (arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (case (vector-ref arg-10 0) ((0) (let ((e-3 (vector-ref arg-10 1))) (let ((e-5 (vector-ref arg-10 3))) (vector 0 e-3 1 e-5))))(else arg-10))))
(define LibrariesC-45TextC-45ParserC-45Core-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32doParse-4586 (lambda (arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-12 arg-13 arg-14 arg-15 arg-16) (case (vector-ref arg-16 0) ((0) (let ((e-3 (vector-ref arg-16 1))) (let ((e-4 (vector-ref arg-16 2))) (let ((e-5 (vector-ref arg-16 3))) (let ((sc1 (cond ((equal? e-3 1) 1) (else e-4)))) (cond ((equal? sc1 1) (vector 0 e-3 e-4 e-5)) (else (vector 0 arg-9 0 (DataC-45List1-C-43C-43 arg-12 e-5))))))))) (else (let ((e-9 (vector-ref arg-16 1))) (let ((e-10 (vector-ref arg-16 2))) (let ((e-12 (vector-ref arg-16 4))) (let ((e-13 (vector-ref arg-16 5))) (vector 1 e-9 e-10 arg-9 e-12 e-13)))))))))
(define LibrariesC-45TextC-45ParserC-45Core-case--doParse-4464 (lambda (arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-13) (case (vector-ref arg-13 0) ((0) (let ((e-3 (vector-ref arg-13 1))) (let ((e-4 (vector-ref arg-13 2))) (let ((e-5 (vector-ref arg-13 3))) (let ((sc1 (cond ((equal? e-3 1) 1) (else e-4)))) (cond ((equal? sc1 1) (vector 0 arg-10 e-4 e-5)) (else (LibrariesC-45TextC-45ParserC-45Core-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32doParse-4586 arg-3 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 e-5 e-4 e-3 arg-4 (LibrariesC-45TextC-45ParserC-45Core-doParse arg-3 arg-4 arg-11 0 (arg-6) arg-9))))))))) (else (let ((e-9 (vector-ref arg-13 1))) (let ((e-10 (vector-ref arg-13 2))) (let ((e-12 (vector-ref arg-13 4))) (let ((e-13 (vector-ref arg-13 5))) (vector 1 e-9 e-10 arg-10 e-12 e-13)))))))))
(define LibrariesC-45TextC-45ParserC-45Core-case--doParse-4834 (lambda (arg-3 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-14) (case (vector-ref arg-14 0) ((0) (let ((e-3 (vector-ref arg-14 1))) (let ((e-4 (vector-ref arg-14 2))) (let ((e-5 (vector-ref arg-14 3))) (vector 0 e-3 e-4 e-5))))) (else (let ((e-9 (vector-ref arg-14 1))) (let ((e-10 (vector-ref arg-14 2))) (let ((e-11 (vector-ref arg-14 3))) (let ((e-12 (vector-ref arg-14 4))) (let ((e-13 (vector-ref arg-14 5))) (LibrariesC-45TextC-45ParserC-45Core-mergeWith e-12 (LibrariesC-45TextC-45ParserC-45Core-doParse arg-3 e-9 e-10 e-11 (arg-8 (let ((e-1 (vector-ref e-12 0))) e-1)) e-13)))))))))))
(define LibrariesC-45TextC-45ParserC-45Core-case--doParse-4952 (lambda (arg-3 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-13) (case (vector-ref arg-13 0) ((0) (let ((e-3 (vector-ref arg-13 1))) (let ((e-4 (vector-ref arg-13 2))) (let ((e-5 (vector-ref arg-13 3))) (vector 0 e-3 e-4 e-5))))) (else (let ((e-9 (vector-ref arg-13 1))) (let ((e-10 (vector-ref arg-13 2))) (let ((e-11 (vector-ref arg-13 3))) (let ((e-12 (vector-ref arg-13 4))) (let ((e-13 (vector-ref arg-13 5))) (LibrariesC-45TextC-45ParserC-45Core-mergeWith e-12 (LibrariesC-45TextC-45ParserC-45Core-doParse arg-3 e-9 e-10 e-11 ((arg-7) (let ((e-1 (vector-ref e-12 0))) e-1)) e-13)))))))))))
(define LibrariesC-45TextC-45ParserC-45Core-case--doParse-5277 (lambda (arg-3 arg-5 arg-6 arg-7 arg-8 arg-9 arg-11) (case (vector-ref arg-11 0) ((0) (let ((e-3 (vector-ref arg-11 1))) (let ((e-4 (vector-ref arg-11 2))) (let ((e-5 (vector-ref arg-11 3))) (vector 0 e-3 e-4 e-5))))) (else (let ((e-9 (vector-ref arg-11 1))) (let ((e-10 (vector-ref arg-11 2))) (let ((e-11 (vector-ref arg-11 3))) (let ((e-12 (vector-ref arg-11 4))) (let ((e-13 (vector-ref arg-11 5))) (vector 1 e-9 e-10 e-11 (LibrariesC-45TextC-45Bounded-u--map_Functor_WithBounds (lambda (eta-0) e-12) e-12) e-13))))))))))
(define LibrariesC-45TextC-45ParserC-45Core-doParse (lambda (arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (case (vector-ref arg-8 0) ((0) (let ((e-3 (vector-ref arg-8 1))) (vector 1 arg-5 arg-6 arg-7 (LibrariesC-45TextC-45Bounded-irrelevantBounds e-3) arg-9))) ((5) (let ((e-6 (vector-ref arg-8 1))) (let ((e-7 (vector-ref arg-8 2))) (vector 1 arg-5 (cons (cons e-6 e-7) arg-6) arg-7 (LibrariesC-45TextC-45Bounded-irrelevantBounds (vector 0 )) arg-9)))) ((4) (let ((e-12 (vector-ref arg-8 1))) (let ((e-13 (vector-ref arg-8 2))) (let ((e-14 (vector-ref arg-8 3))) (vector 0 arg-7 e-13 (cons (cons e-14 (PreludeC-45Types-u--C-60C-124C-62_Alternative_Maybe e-12 (lambda () (PreludeC-45Types-u--map_Functor_Maybe (lambda (eta-0) (let ((e-3 (vector-ref eta-0 2))) e-3)) (DataC-45List-headC-39 arg-9))))) '())))))) ((6) (let ((e-19 (vector-ref arg-8 1))) (LibrariesC-45TextC-45ParserC-45Core-case--doParse-3986 arg-4 arg-5 e-19 arg-9 arg-7 arg-6 (LibrariesC-45TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 arg-7 e-19 arg-9)))) ((7) (vector 1 arg-5 arg-6 1 (LibrariesC-45TextC-45Bounded-irrelevantBounds (vector 0 )) arg-9)) ((8) (let ((e-26 (vector-ref arg-8 1))) (LibrariesC-45TextC-45ParserC-45Core-case--doParse-4087 arg-4 arg-5 e-26 arg-9 arg-7 arg-6 (LibrariesC-45TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 arg-7 e-26 arg-9)))) ((1) (let ((e-30 (vector-ref arg-8 1))) (let ((e-31 (vector-ref arg-8 2))) (if (null? arg-9) (vector 0 arg-7 0 csegen-362) (let ((e-85 (car arg-9))) (let ((e-86 (cdr arg-9))) (let ((sc2 (e-31 (let ((e-1 (vector-ref e-85 0))) e-1)))) (if (null? sc2) (vector 0 arg-7 0 (cons (cons e-30 (box (let ((e-3 (vector-ref e-85 2))) e-3))) '())) (let ((e-2 (unbox sc2))) (vector 1 arg-5 arg-6 arg-7 (LibrariesC-45TextC-45Bounded-u--map_Functor_WithBounds (lambda (eta-0) e-2) e-85) e-86)))))))))) ((3) (if (null? arg-9) (vector 1 arg-5 arg-6 arg-7 (LibrariesC-45TextC-45Bounded-irrelevantBounds (vector 0 )) '()) (let ((e-89 (car arg-9))) (vector 0 arg-7 0 (cons (cons "Expected end of input" (box (let ((e-3 (vector-ref e-89 2))) e-3))) '()))))) ((2) (let ((e-36 (vector-ref arg-8 1))) (let ((e-37 (vector-ref arg-8 2))) (if (null? arg-9) (vector 0 arg-7 0 csegen-362) (let ((e-93 (car arg-9))) (let ((e-94 (cdr arg-9))) (let ((sc2 (e-37 (let ((e-1 (vector-ref e-93 0))) e-1)))) (cond ((equal? sc2 1) (vector 1 arg-5 arg-6 arg-7 (LibrariesC-45TextC-45Bounded-removeIrrelevance e-93) (cons e-93 e-94))) (else (vector 0 arg-7 0 (cons (cons e-36 (box (let ((e-3 (vector-ref e-93 2))) e-3))) '()))))))))))) ((13) (let ((e-41 (vector-ref arg-8 1))) (let ((e-42 (vector-ref arg-8 2))) (let ((e-43 (vector-ref arg-8 3))) (let ((e-44 (vector-ref arg-8 4))) (LibrariesC-45TextC-45ParserC-45Core-case--doParse-4464 arg-4 arg-5 e-42 e-44 e-41 e-43 arg-9 arg-7 arg-6 (LibrariesC-45TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 0 e-43 arg-9))))))) ((10) (let ((e-49 (vector-ref arg-8 1))) (let ((e-50 (vector-ref arg-8 2))) (let ((e-51 (vector-ref arg-8 3))) (let ((e-52 (vector-ref arg-8 4))) (LibrariesC-45TextC-45ParserC-45Core-case--doParse-4834 arg-4 e-49 e-50 arg-5 e-52 e-51 arg-9 arg-7 arg-6 (LibrariesC-45TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 arg-7 e-51 arg-9))))))) ((9) (let ((e-57 (vector-ref arg-8 1))) (let ((e-58 (vector-ref arg-8 2))) (let ((e-59 (vector-ref arg-8 3))) (LibrariesC-45TextC-45ParserC-45Core-case--doParse-4952 arg-4 e-57 arg-5 e-59 e-58 arg-9 arg-7 arg-6 (LibrariesC-45TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 arg-7 e-58 arg-9)))))) ((12) (let ((e-65 (vector-ref arg-8 3))) (let ((e-66 (vector-ref arg-8 4))) (let ((sc1 (LibrariesC-45TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 arg-7 e-65 arg-9))) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (let ((e-4 (vector-ref sc1 2))) (let ((e-5 (vector-ref sc1 3))) (vector 0 e-3 e-4 e-5))))) (else (let ((e-9 (vector-ref sc1 1))) (let ((e-10 (vector-ref sc1 2))) (let ((e-11 (vector-ref sc1 3))) (let ((e-12 (vector-ref sc1 4))) (let ((e-13 (vector-ref sc1 5))) (LibrariesC-45TextC-45ParserC-45Core-mergeWith e-12 (LibrariesC-45TextC-45ParserC-45Core-doParse arg-4 e-9 e-10 e-11 e-66 e-13))))))))))))) ((11) (let ((e-71 (vector-ref arg-8 2))) (let ((e-72 (vector-ref arg-8 3))) (let ((sc1 (LibrariesC-45TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 arg-7 e-71 arg-9))) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (let ((e-4 (vector-ref sc1 2))) (let ((e-5 (vector-ref sc1 3))) (vector 0 e-3 e-4 e-5))))) (else (let ((e-9 (vector-ref sc1 1))) (let ((e-10 (vector-ref sc1 2))) (let ((e-11 (vector-ref sc1 3))) (let ((e-12 (vector-ref sc1 4))) (let ((e-13 (vector-ref sc1 5))) (LibrariesC-45TextC-45ParserC-45Core-mergeWith e-12 (LibrariesC-45TextC-45ParserC-45Core-doParse arg-4 e-9 e-10 e-11 (e-72) e-13))))))))))))) ((14) (let ((e-77 (vector-ref arg-8 1))) (LibrariesC-45TextC-45ParserC-45Core-case--doParse-5277 arg-4 arg-5 e-77 arg-9 arg-7 arg-6 (LibrariesC-45TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 arg-7 e-77 arg-9)))) ((15) (if (null? arg-9) (vector 0 arg-7 0 csegen-362) (let ((e-97 (car arg-9))) (let ((e-98 (cdr arg-9))) (vector 1 arg-5 arg-6 arg-7 (LibrariesC-45TextC-45Bounded-irrelevantBounds (let ((e-3 (vector-ref e-97 2))) e-3)) (cons e-97 e-98)))))) (else (let ((e-82 (vector-ref arg-8 1))) (vector 1 ((arg-4 arg-5) e-82) arg-6 arg-7 (LibrariesC-45TextC-45Bounded-irrelevantBounds (vector 0 )) arg-9))))))
(define LibrariesC-45TextC-45ParserC-45Core-parse (lambda (arg-2 arg-3 arg-4) (let ((sc0 (LibrariesC-45TextC-45ParserC-45Core-doParse (lambda (eta-0) (lambda (eta-1) (vector 0 ))) (vector 0 ) '() 0 arg-3 arg-4))) (case (vector-ref sc0 0) ((0) (let ((e-5 (vector-ref sc0 3))) (vector 0 e-5))) (else (let ((e-10 (vector-ref sc0 2))) (let ((e-12 (vector-ref sc0 4))) (let ((e-13 (vector-ref sc0 5))) (vector 1 (cons e-10 (cons (let ((e-1 (vector-ref e-12 0))) e-1) e-13)))))))))))
(define ParserC-45RuleC-45Package-equals (vector 1 "Expected equals" (lambda (lcase-0) (case (vector-ref lcase-0 0) ((2) (box (vector 0 )))(else '())))))
(define LibrariesC-45TextC-45Parser-location (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 0 (lambda (eta-0) (LibrariesC-45TextC-45Bounded-startBounds eta-0)) (vector 15 )))
(define CoreC-45NameC-45Namespace-mkNestedNamespace (lambda (arg-0 arg-1) (if (null? arg-0) (cons arg-1 '()) (let ((e-2 (unbox arg-0))) (cons arg-1 e-2)))))
(define ParserC-45RuleC-45Package-moduleIdent (vector 1 "Expected module identifier" (lambda (lcase-0) (case (vector-ref lcase-0 0) ((3) (let ((e-0 (vector-ref lcase-0 1))) (let ((e-1 (vector-ref lcase-0 2))) (box (CoreC-45NameC-45Namespace-mkNestedNamespace e-0 e-1)))))(else '())))))
(define PreludeC-45InterfacesC-45BoolC-45Semigroup-u--C-60C-43C-62_Semigroup_AllBool (lambda (arg-0 arg-1) (cond ((equal? arg-0 1) arg-1) (else 0))))
(define ParserC-45RuleC-45Package-packageName (vector 1 "Expected package name" (lambda (lcase-0) (case (vector-ref lcase-0 0) ((3) (let ((e-0 (vector-ref lcase-0 1))) (let ((e-1 (vector-ref lcase-0 2))) (if (null? e-0) (let ((sc2 (let ((sc3 (PreludeC-45Types-fastUnpack e-1))) (if (null? sc3) 0 (let ((e-2 (car sc3))) (let ((e-3 (cdr sc3))) (let ((sc4 (ParserC-45LexerC-45Common-isIdentStart 0 e-2))) (cond ((equal? sc4 1) (PreludeC-45Types-u--foldMap_Foldable_List (cons (lambda (arg-8332) (lambda (arg-8335) (PreludeC-45InterfacesC-45BoolC-45Semigroup-u--C-60C-43C-62_Semigroup_AllBool arg-8332 arg-8335))) 1) csegen-667 e-3)) (else 0))))))))) (cond ((equal? sc2 1) (box e-1)) (else '()))) '()))))(else '())))))
(define ParserC-45RuleC-45Package-sepC-39 (vector 1 "Expected separator" (lambda (lcase-0) (case (vector-ref lcase-0 0) ((4) (box (vector 0 )))(else '())))))
(define ParserC-45RuleC-45Package-sep (lambda (arg-1) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 (lambda (eta-0) (DataC-45List1-forget eta-0)) (LibrariesC-45TextC-45Parser-sepBy1 1 ParserC-45RuleC-45Package-sepC-39 arg-1))))
(define ParserC-45RuleC-45Package-stringLit (vector 1 "Expected string" (lambda (lcase-0) (case (vector-ref lcase-0 0) ((13) (let ((e-0 (vector-ref lcase-0 1))) (box e-0)))(else '())))))
(define ParserC-45RuleC-45Package-andop (vector 1 "Expected &&" (lambda (lcase-0) (case (vector-ref lcase-0 0) ((11) (box (vector 0 )))(else '())))))
(define IdrisC-45PackageC-45Types-anyBounds (vector '() 1 '() 1))
(define LibrariesC-45TextC-45Parser-sepBy (lambda (arg-4 arg-5 arg-6) (LibrariesC-45TextC-45Parser-option arg-4 '() (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 arg-4 (lambda (eta-0) (DataC-45List1-forget eta-0)) (LibrariesC-45TextC-45Parser-sepBy1 arg-4 arg-5 arg-6)))))
(define ParserC-45RuleC-45Package-eqop (vector 1 "Expected ==" (lambda (lcase-0) (case (vector-ref lcase-0 0) ((10) (box (vector 0 )))(else '())))))
(define ParserC-45RuleC-45Package-gt (vector 1 "Expected >=" (lambda (lcase-0) (case (vector-ref lcase-0 0) ((9) (box (vector 0 )))(else '())))))
(define ParserC-45RuleC-45Package-gte (vector 1 "Expected >=" (lambda (lcase-0) (case (vector-ref lcase-0 0) ((7) (box (vector 0 )))(else '())))))
(define ParserC-45RuleC-45Package-lt (vector 1 "Expected <=" (lambda (lcase-0) (case (vector-ref lcase-0 0) ((8) (box (vector 0 )))(else '())))))
(define ParserC-45RuleC-45Package-lte (vector 1 "Expected <=" (lambda (lcase-0) (case (vector-ref lcase-0 0) ((6) (box (vector 0 )))(else '())))))
(define PackC-45CoreC-45Ipkg-n--7469-5741-u--bound (lambda (arg-0) (vector 13 1 1 (vector 11 1 ParserC-45RuleC-45Package-lte (lambda () (vector 9 0 csegen-616 (lambda () (lambda (u--vs) (vector 0 (cons (vector 0 arg-0 (DataC-45List1-u--map_Functor_List1 (lambda (eta-0) (PreludeC-45Types-prim__integerToNat eta-0)) u--vs) 1) '()))))))) (lambda () (vector 13 1 1 (vector 11 1 ParserC-45RuleC-45Package-gte (lambda () (vector 9 0 csegen-616 (lambda () (lambda (u--vs) (vector 0 (cons (vector 1 arg-0 (DataC-45List1-u--map_Functor_List1 (lambda (eta-0) (PreludeC-45Types-prim__integerToNat eta-0)) u--vs) 1) '()))))))) (lambda () (vector 13 1 1 (vector 11 1 ParserC-45RuleC-45Package-lt (lambda () (vector 9 0 csegen-616 (lambda () (lambda (u--vs) (vector 0 (cons (vector 0 arg-0 (DataC-45List1-u--map_Functor_List1 (lambda (eta-0) (PreludeC-45Types-prim__integerToNat eta-0)) u--vs) 0) '()))))))) (lambda () (vector 13 1 1 (vector 11 1 ParserC-45RuleC-45Package-gt (lambda () (vector 9 0 csegen-616 (lambda () (lambda (u--vs) (vector 0 (cons (vector 1 arg-0 (DataC-45List1-u--map_Functor_List1 (lambda (eta-0) (PreludeC-45Types-prim__integerToNat eta-0)) u--vs) 0) '()))))))) (lambda () (vector 11 1 ParserC-45RuleC-45Package-eqop (lambda () (vector 9 0 csegen-616 (lambda () (lambda (u--vs) (vector 0 (cons (vector 0 arg-0 (DataC-45List1-u--map_Functor_List1 (lambda (eta-0) (PreludeC-45Types-prim__integerToNat eta-0)) u--vs) 1) (cons (vector 1 arg-0 (DataC-45List1-u--map_Functor_List1 (lambda (eta-0) (PreludeC-45Types-prim__integerToNat eta-0)) u--vs) 1) '()))))))))))))))))))
(define PackC-45CoreC-45Ipkg-n--7469-5742-u--mkBound (lambda (arg-0 arg-1 arg-2) (if (null? arg-1) (vector 0 arg-2) (let ((e-1 (car arg-1))) (let ((e-2 (cdr arg-1))) (case (vector-ref e-1 0) ((0) (let ((e-5 (vector-ref e-1 2))) (let ((e-6 (vector-ref e-1 3))) (PreludeC-45Types-maybe (lambda () (PackC-45CoreC-45Ipkg-n--7469-5742-u--mkBound arg-0 e-2 (let ((e-0 (vector-ref arg-2 0))) (let ((e-8 (vector-ref arg-2 1))) (vector e-0 e-8 (box e-5) e-6))))) (lambda () (lambda (_-6039) (vector 4 '() 0 "Dependency already has an upper bound"))) (let ((e-7 (vector-ref arg-2 2))) e-7))))) (else (let ((e-8 (vector-ref e-1 2))) (let ((e-9 (vector-ref e-1 3))) (PreludeC-45Types-maybe (lambda () (PackC-45CoreC-45Ipkg-n--7469-5742-u--mkBound arg-0 e-2 (let ((e-4 (vector-ref arg-2 2))) (let ((e-3 (vector-ref arg-2 3))) (vector (box e-8) e-9 e-4 e-3))))) (lambda () (lambda (_-6080) (vector 4 '() 0 "Dependency already has a lower bound"))) (let ((e-0 (vector-ref arg-2 0))) e-0)))))))))))
(define PackC-45CoreC-45Ipkg-n--7469-5744-u--depends (lambda (arg-0) (vector 9 0 ParserC-45RuleC-45Package-packageName (lambda () (lambda (u--name) (vector 10 0 0 (LibrariesC-45TextC-45Parser-sepBy 1 ParserC-45RuleC-45Package-andop (PackC-45CoreC-45Ipkg-n--7469-5741-u--bound arg-0)) (lambda (u--bs) (vector 10 0 0 (PackC-45CoreC-45Ipkg-n--7469-5742-u--mkBound arg-0 (PreludeC-45Types-u--foldMap_Foldable_List csegen-615 (lambda (eta-0) eta-0) u--bs) IdrisC-45PackageC-45Types-anyBounds) (lambda (bind-0) (vector 0 (cons u--name bind-0)))))))))))
(define PackC-45CoreC-45Ipkg-n--7469-5743-u--langversions (lambda (arg-0) (vector 10 0 0 (LibrariesC-45TextC-45Parser-sepBy 1 ParserC-45RuleC-45Package-andop (PackC-45CoreC-45Ipkg-n--7469-5741-u--bound arg-0)) (lambda (u--bs) (PackC-45CoreC-45Ipkg-n--7469-5742-u--mkBound arg-0 (PreludeC-45Types-u--foldMap_Foldable_List csegen-615 (lambda (eta-0) eta-0) u--bs) IdrisC-45PackageC-45Types-anyBounds)))))
(define PackC-45CoreC-45Ipkg-n--7469-5745-u--strField (lambda (arg-0 arg-1 arg-2) (vector 10 0 1 LibrariesC-45TextC-45Parser-location (lambda (u--start) (vector 11 1 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 (lambda (eta-0) (vector 0 )) (ParserC-45RuleC-45Package-exactProperty arg-2)) (lambda () (vector 11 1 ParserC-45RuleC-45Package-equals (lambda () (vector 9 0 ParserC-45RuleC-45Package-stringLit (lambda () (lambda (u--str) (vector 10 0 0 LibrariesC-45TextC-45Parser-location (lambda (u--end) (vector 0 ((arg-1 (vector 0 (vector 1 arg-0) u--start u--end)) u--str)))))))))))))))
(define PackC-45CoreC-45Ipkg-field (lambda (arg-0) (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--7469-5745-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 3 eta-0 eta-1))) "authors") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--7469-5745-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 4 eta-0 eta-1))) "maintainers") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--7469-5745-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 5 eta-0 eta-1))) "license") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--7469-5745-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 6 eta-0 eta-1))) "brief") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--7469-5745-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 7 eta-0 eta-1))) "readme") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--7469-5745-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 8 eta-0 eta-1))) "homepage") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--7469-5745-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 9 eta-0 eta-1))) "sourceloc") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--7469-5745-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 10 eta-0 eta-1))) "bugtracker") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--7469-5745-u--strField arg-0 csegen-633 "options") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--7469-5745-u--strField arg-0 csegen-633 "opts") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--7469-5745-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 16 eta-0 eta-1))) "sourcedir") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--7469-5745-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 17 eta-0 eta-1))) "builddir") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--7469-5745-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 18 eta-0 eta-1))) "outputdir") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--7469-5745-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 19 eta-0 eta-1))) "prebuild") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--7469-5745-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 20 eta-0 eta-1))) "postbuild") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--7469-5745-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 21 eta-0 eta-1))) "preinstall") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--7469-5745-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 22 eta-0 eta-1))) "postinstall") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--7469-5745-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 23 eta-0 eta-1))) "preclean") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--7469-5745-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 24 eta-0 eta-1))) "postclean") (lambda () (vector 13 1 1 (vector 10 0 1 LibrariesC-45TextC-45Parser-location (lambda (u--start) (vector 11 1 csegen-643 (lambda () (vector 11 1 ParserC-45RuleC-45Package-equals (lambda () (vector 9 0 csegen-616 (lambda () (lambda (u--vs) (vector 10 0 0 LibrariesC-45TextC-45Parser-location (lambda (u--end) (vector 0 (vector 0 (vector 0 (vector 1 arg-0) u--start u--end) (DataC-45List1-u--map_Functor_List1 (lambda (eta-0) (PreludeC-45Types-prim__integerToNat eta-0)) u--vs)))))))))))))) (lambda () (vector 13 1 1 (vector 10 0 1 LibrariesC-45TextC-45Parser-location (lambda (u--start) (vector 11 0 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 (lambda (eta-0) (vector 0 )) (ParserC-45RuleC-45Package-exactProperty "langversion")) (lambda () (vector 10 0 0 (PackC-45CoreC-45Ipkg-n--7469-5743-u--langversions arg-0) (lambda (u--lvs) (vector 10 0 0 LibrariesC-45TextC-45Parser-location (lambda (u--end) (vector 0 (vector 1 (vector 0 (vector 1 arg-0) u--start u--end) u--lvs)))))))))) (lambda () (vector 13 1 1 (vector 10 0 1 LibrariesC-45TextC-45Parser-location (lambda (u--start) (vector 11 1 csegen-643 (lambda () (vector 11 1 ParserC-45RuleC-45Package-equals (lambda () (vector 9 0 ParserC-45RuleC-45Package-stringLit (lambda () (lambda (u--v) (vector 10 0 0 LibrariesC-45TextC-45Parser-location (lambda (u--end) (vector 0 (vector 2 (vector 0 (vector 1 arg-0) u--start u--end) u--v))))))))))))) (lambda () (vector 13 1 1 (vector 11 1 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 (lambda (eta-0) (vector 0 )) (ParserC-45RuleC-45Package-exactProperty "depends")) (lambda () (vector 11 1 ParserC-45RuleC-45Package-equals (lambda () (vector 9 0 (ParserC-45RuleC-45Package-sep (PackC-45CoreC-45Ipkg-n--7469-5744-u--depends arg-0)) (lambda () (lambda (u--ds) (vector 0 (vector 11 u--ds))))))))) (lambda () (vector 13 1 1 (vector 11 1 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 (lambda (eta-0) (vector 0 )) (ParserC-45RuleC-45Package-exactProperty "modules")) (lambda () (vector 11 1 ParserC-45RuleC-45Package-equals (lambda () (vector 9 0 (ParserC-45RuleC-45Package-sep (vector 10 0 1 LibrariesC-45TextC-45Parser-location (lambda (u--start) (vector 9 0 ParserC-45RuleC-45Package-moduleIdent (lambda () (lambda (u--m) (vector 10 0 0 LibrariesC-45TextC-45Parser-location (lambda (u--end) (vector 0 (cons (vector 0 (vector 1 arg-0) u--start u--end) u--m)))))))))) (lambda () (lambda (u--ms) (vector 0 (vector 12 u--ms))))))))) (lambda () (vector 13 1 1 (vector 11 1 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 (lambda (eta-0) (vector 0 )) (ParserC-45RuleC-45Package-exactProperty "main")) (lambda () (vector 11 1 ParserC-45RuleC-45Package-equals (lambda () (vector 10 0 1 LibrariesC-45TextC-45Parser-location (lambda (u--start) (vector 9 0 ParserC-45RuleC-45Package-moduleIdent (lambda () (lambda (u--m) (vector 10 0 0 LibrariesC-45TextC-45Parser-location (lambda (u--end) (vector 0 (vector 13 (vector 0 (vector 1 arg-0) u--start u--end) u--m))))))))))))) (lambda () (vector 11 1 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 (lambda (eta-0) (vector 0 )) (ParserC-45RuleC-45Package-exactProperty "executable")) (lambda () (vector 11 1 ParserC-45RuleC-45Package-equals (lambda () (vector 9 0 (vector 13 1 1 ParserC-45RuleC-45Package-stringLit (lambda () ParserC-45RuleC-45Package-packageName)) (lambda () (lambda (u--e) (vector 0 (vector 14 u--e)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(define PackC-45CoreC-45Ipkg-pkgDesc (lambda (arg-0) (vector 11 1 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 (lambda (eta-0) (vector 0 )) (ParserC-45RuleC-45Package-exactProperty "package")) (lambda () (vector 9 0 ParserC-45RuleC-45Package-packageName (lambda () (lambda (u--name) (vector 10 0 0 (LibrariesC-45TextC-45Parser-many (PackC-45CoreC-45Ipkg-field arg-0)) (lambda (u--fields) (vector 0 (cons u--name u--fields)))))))))))
(define PackC-45CoreC-45Ipkg-parseIpkg (lambda (arg-0 arg-1) (let ((u--err (vector 20 arg-0))) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (let ((sc0 (ParserC-45LexerC-45Package-lex arg-1))) (case (vector-ref sc0 0) ((0) (vector 0 u--err)) (else (let ((e-5 (vector-ref sc0 1))) (vector 1 e-5))))) (lambda (u--toks) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (let ((sc0 (LibrariesC-45TextC-45ParserC-45Core-parse 1 (PackC-45CoreC-45Ipkg-pkgDesc (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 (let ((e-1 (car arg-0))) (let ((e-2 (cdr arg-0))) (DataC-45FilePath-C-60C-47C-62 e-1 (vector 1 (cons '() e-2)))))) '()))) u--toks))) (case (vector-ref sc0 0) ((0) (vector 0 u--err)) (else (let ((e-5 (vector-ref sc0 1))) (vector 1 e-5))))) (lambda (_-0) (let ((e-3 (cdr _-0))) (let ((e-6 (car e-3))) (let ((e-10 (car e-6))) (let ((e-11 (cdr e-6))) (vector 1 (PackC-45CoreC-45Ipkg-addFields e-10 e-11)))))))))))))
(define PackC-45CoreC-45Ipkg-parseIpkgFile (lambda (arg-1 arg-2 arg-3) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-read arg-1 arg-2) (lambda (u--str) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (ControlC-45MonadC-45ErrorC-45Interface-liftEither (vector (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-2204) (ControlC-45MonadC-45ErrorC-45Interface-u--throwError_MonadError_C-36e_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-2204))) (lambda (u--a) (lambda (arg-2210) (lambda (arg-2213) (ControlC-45MonadC-45ErrorC-45Either-catchE (let ((e-1 (car arg-1))) e-1) arg-2210 arg-2213))))) (PackC-45CoreC-45Ipkg-parseIpkg arg-2 u--str)) (lambda (u--desc) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (vector u--desc u--str arg-3))))))))
(define PackC-45RunnerC-45Database-loadIpkg (lambda (arg-1 arg-2 arg-3 arg-4) (case (vector-ref arg-4 0) ((0) (let ((e-2 (vector-ref arg-4 2))) (let ((e-3 (vector-ref arg-4 3))) (let ((u--cache (PackC-45ConfigC-45Environment-ipkgCachePath (let ((e-0 (vector-ref arg-2 0))) e-0) arg-3 e-2 e-3))) (let ((u--tmpLoc (let ((e-7 (car e-3))) (let ((e-6 (cdr e-3))) (cons (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-12 (vector-ref arg-2 1))) e-12) (PackC-45CoreC-45Types-toRelPath arg-3)) e-7) e-6))))) (PackC-45CoreC-45Ipkg-parseIpkgFile arg-1 u--cache u--tmpLoc)))))) ((1) (let ((e-7 (vector-ref arg-4 1))) (let ((e-8 (vector-ref arg-4 2))) (PackC-45CoreC-45Ipkg-parseIpkgFile arg-1 (let ((e-1 (car e-8))) (let ((e-2 (cdr e-8))) (cons (DataC-45FilePath-C-60C-47C-62 e-7 e-1) e-2))) (let ((e-1 (car e-8))) (let ((e-2 (cdr e-8))) (cons (DataC-45FilePath-C-60C-47C-62 e-7 e-1) e-2))))))) (else (let ((e-12 (vector-ref arg-4 1))) (let ((u--cache (PackC-45ConfigC-45Environment-coreCachePath (let ((e-0 (vector-ref arg-2 0))) e-0) (let ((e-4 (vector-ref arg-2 4))) e-4) e-12))) (let ((u--tmpLoc (let ((sc1 (PackC-45DatabaseC-45Types-coreIpkgPath e-12))) (let ((e-1 (car sc1))) (let ((e-2 (cdr sc1))) (cons (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-7 (vector-ref arg-2 1))) e-7) (PackC-45CoreC-45Types-toRelPath PackC-45CoreC-45GitC-45Consts-compiler)) e-1) e-2)))))) (PackC-45CoreC-45Ipkg-parseIpkgFile arg-1 u--cache u--tmpLoc))))))))
(define PackC-45RunnerC-45Database-n--9180-7993-u--resolveDep (lambda (arg-1 arg-2 arg-3 arg-4) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45RunnerC-45Database-resolveLib arg-1 arg-2 arg-4) (lambda (u--rl) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (cons (let ((e-1 (vector-ref u--rl 0))) e-1) (let ((e-4 (vector-ref u--rl 3))) e-4)))))))
(define PackC-45RunnerC-45Database-case--caseC-32blockC-32inC-32resolveLib-8081 (lambda (arg-1 arg-2 arg-3 arg-4 arg-5) (if (null? arg-5) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) (vector 0 (vector 9 arg-3)))))) (let ((e-2 (unbox arg-5))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45RunnerC-45Database-loadIpkg arg-1 arg-2 arg-3 e-2) (lambda (u--d) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PreludeC-45Types-u--traverse_Traversable_List (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) (let ((e-9 (vector-ref e-6 0))) e-9))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) e-6)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) e-6)) arg-9795 arg-9802)))))) (lambda (eta-0) (PackC-45RunnerC-45Database-n--9180-7993-u--resolveDep arg-1 arg-2 arg-3 eta-0)) (PackC-45CoreC-45Types-dependencies u--d)) (lambda (u--deps) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45RunnerC-45Database-libStatus arg-1 arg-2 arg-3 e-2 u--d u--deps) (lambda (u--lib) (PackC-45ConfigC-45Types-cacheLib (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) (let ((e-9 (vector-ref e-6 0))) e-9))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) e-6)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) e-6)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (let ((e-3 (vector-ref arg-2 3))) e-3) arg-3 (vector e-2 arg-3 u--d u--lib u--deps))))))))))))
(define PackC-45RunnerC-45Database-resolveLib (lambda (arg-1 arg-2 arg-3) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45ConfigC-45Types-lookupLib (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (let ((e-3 (vector-ref arg-2 3))) e-3) arg-3) (lambda (_-0) (if (null? _-0) (let ((_-1 '())) (PackC-45RunnerC-45Database-case--caseC-32blockC-32inC-32resolveLib-8081 arg-1 arg-2 arg-3 _-1 (DataC-45SortedMap-lookup arg-3 (PackC-45ConfigC-45Types-allPackages (let ((e-2 (vector-ref arg-2 2))) e-2) (let ((e-4 (vector-ref arg-2 4))) e-4))))) (let ((e-2 (unbox _-0))) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) e-6)) e-2)))))))
(define PackC-45RunnerC-45Database-appStatus (lambda (arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) (SystemC-45FileC-45Meta-exists (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-2 arg-12953)))) (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 (let ((sc0 (PackC-45ConfigC-45Environment-pkgExec (let ((e-0 (vector-ref arg-3 0))) e-0) (let ((e-4 (vector-ref arg-3 4))) e-4) arg-4 arg-5 arg-8))) (let ((e-1 (car sc0))) (let ((e-2 (cdr sc0))) (DataC-45FilePath-C-60C-47C-62 e-1 (vector 1 (cons '() e-2)))))))) (lambda (_-0) (cond ((equal? _-0 1) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) (SystemC-45FileC-45Meta-exists (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-2 arg-12953)))) (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-0 (vector-ref arg-3 0))) e-0) csegen-236) (vector 1 (cons '() arg-8))))) (lambda (_-1) (cond ((equal? _-1 1) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) 2)) (else (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) 1))))) (lambda (u--installed) (let ((sc1 (PackC-45DatabaseC-45Types-isLocal arg-5))) (case (vector-ref sc1 0) ((1) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-2))) (let ((e-6 (vector-ref e-3 0))) e-6)) u--installed)) (else (let ((u--ts (cons (DataC-45FilePath-C-60C-47C-62 (case (vector-ref arg-5 0) ((0) (let ((e-2 (vector-ref arg-5 2))) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-0 (vector-ref arg-3 0))) e-0) csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-8 (vector-ref arg-3 4))) (let ((e-14 (vector-ref e-8 1))) e-14)))) (PackC-45CoreC-45Types-toRelPath arg-4)) (PackC-45CoreC-45Types-toRelPath e-2)))) ((1) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-0 (vector-ref arg-3 0))) e-0) csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-4 (vector-ref arg-3 4))) (let ((e-13 (vector-ref e-4 1))) e-13)))) csegen-219) (PackC-45CoreC-45Types-toRelPath arg-4))) (else (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-0 (vector-ref arg-3 0))) e-0) csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-4 (vector-ref arg-3 4))) (let ((e-9 (vector-ref e-4 1))) e-9)))) csegen-226))) csegen-236) (PreludeC-45Types-fastUnpack ".timestamp")))) (let ((u--src (PackC-45CoreC-45Ipkg-sourcePath arg-6))) (PackC-45RunnerC-45Database-checkOutdated arg-2 u--ts u--src arg-7 3 u--installed))))))))) (else (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) 0)))))))
(define PackC-45RunnerC-45Database-case--caseC-32blockC-32inC-32resolveApp-8272 (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (if (null? arg-10) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) (vector 0 (vector 11 arg-8)))))) (let ((e-2 (unbox arg-10))) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) (let ((e-9 (vector-ref e-6 0))) e-9))) (lambda (u--s) (vector arg-4 arg-8 arg-7 u--s e-2 arg-6)) (PackC-45RunnerC-45Database-appStatus arg-1 arg-2 arg-8 arg-4 arg-7 arg-6 e-2))))))
(define PackC-45RunnerC-45Database-resolveApp (lambda (arg-1 arg-2 arg-3) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45RunnerC-45Database-resolveLib arg-1 arg-2 arg-3) (lambda (_-0) (let ((e-1 (vector-ref _-0 0))) (let ((e-2 (vector-ref _-0 1))) (let ((e-3 (vector-ref _-0 2))) (let ((e-4 (vector-ref _-0 3))) (let ((e-5 (vector-ref _-0 4))) (let ((_-1 (vector e-1 e-2 e-3 e-4 e-5))) (PackC-45RunnerC-45Database-case--caseC-32blockC-32inC-32resolveApp-8272 arg-1 arg-2 arg-3 e-1 e-4 e-5 e-3 e-2 _-1 (PackC-45CoreC-45Ipkg-exec e-3))))))))))))
(define DataC-45FilePathC-45Body-preDot (lambda (arg-0) (cons #\. arg-0)))
(define DataC-45FilePathC-45Body-C-60C-46C-62 (lambda (arg-0 arg-1) (let ((eff-0 (DataC-45FilePathC-45Body-preDot arg-1))) (PreludeC-45TypesC-45List-tailRecAppend arg-0 eff-0))))
(define DataC-45FilePathC-45RelPath-parse (lambda (arg-0) (cond ((equal? arg-0 ".") (box (vector 1 '())))(else (let ((u--ps (DataC-45List-split csegen-365 (PreludeC-45Types-fastUnpack arg-0)))) (PreludeC-45Types-u--map_Functor_Maybe (lambda (eta-0) (vector 1 (PreludeC-45TypesC-45SnocList-C-60C-62C-60 '() eta-0))) (PreludeC-45Types-u--traverse_Traversable_List csegen-374 (lambda (eta-0) (DataC-45FilePathC-45Body-fromChars eta-0)) (DataC-45List1-forget u--ps))))))))
(define DataC-45FilePathC-45FileC-45RelFile-parse (lambda (arg-0) (let ((sc0 (DataC-45FilePathC-45RelPath-parse arg-0))) (if (null? sc0) '() (let ((e-1 (unbox sc0))) (case (vector-ref e-1 0) ((1) (let ((e-2 (vector-ref e-1 1))) (if (null? e-2) '() (let ((e-4 (car e-2))) (let ((e-5 (cdr e-2))) (box (cons (vector 1 e-4) e-5)))))))(else '())))))))
(define PackC-45CoreC-45Ipkg-replaceDot (lambda (arg-0) (cond ((equal? arg-0 #\.) #\/)(else arg-0))))
(define PackC-45CoreC-45Ipkg-n--10208-8476-u--ttm (lambda (arg-1 arg-2 arg-3 arg-4) (if (null? arg-1) (let ((e-1 (car arg-4))) (let ((e-2 (cdr arg-4))) (cons (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (PackC-45CoreC-45Ipkg-buildPath arg-3) csegen-609) e-1) (DataC-45FilePathC-45Body-C-60C-46C-62 e-2 csegen-611)))) (let ((e-1 (unbox arg-1))) (let ((e-3 (car arg-4))) (let ((e-2 (cdr arg-4))) (cons (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (PackC-45CoreC-45Ipkg-buildPath arg-3) csegen-609) (vector 1 (cons '() e-1))) e-3) (DataC-45FilePathC-45Body-C-60C-46C-62 e-2 csegen-611))))))))
(define PackC-45CoreC-45Ipkg-sourceForDoc (lambda (arg-1 arg-2 arg-3) (PreludeC-45Types-u--C-62C-62C-61_Monad_Maybe (PreludeC-45Types-u--map_Functor_Maybe (lambda (eta-0) (Builtin-fst eta-0)) (DataC-45FilePathC-45File-stemAndExt arg-3)) (lambda (_-0) (PreludeC-45Types-u--C-62C-62C-61_Monad_Maybe (DataC-45FilePathC-45FileC-45RelFile-parse (PreludeC-45Types-fastPack (PreludeC-45TypesC-45List-mapAppend '() (lambda (eta-0) (PackC-45CoreC-45Ipkg-replaceDot eta-0)) _-0))) (lambda (u--rf) (box (vector arg-3 (let ((e-1 (car u--rf))) (let ((e-2 (cdr u--rf))) (cons (DataC-45FilePath-C-60C-47C-62 (PackC-45CoreC-45Ipkg-sourcePath arg-2) e-1) (DataC-45FilePathC-45Body-C-60C-46C-62 e-2 (cons #\i (cons #\d (cons #\r '()))))))) (PackC-45CoreC-45Ipkg-n--10208-8476-u--ttm arg-1 arg-3 arg-2 u--rf) (cons (let ((e-1 (car arg-3))) e-1) (DataC-45FilePathC-45Body-C-60C-46C-62 _-0 (cons #\s (cons #\r (cons #\c (cons #\. csegen-344))))))))))))))
(define DataC-45SortedMapC-45Dependent-branch4 (lambda (arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (vector 1 (vector 1 arg-4 arg-5 arg-6) arg-7 (vector 1 arg-8 arg-9 arg-10))))
(define DataC-45SortedMapC-45Dependent-branch5 (lambda (arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12) (vector 1 (vector 1 arg-4 arg-5 arg-6) arg-7 (vector 2 arg-8 arg-9 arg-10 arg-11 arg-12))))
(define DataC-45SortedMapC-45Dependent-branch6 (lambda (arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14) (vector 2 (vector 1 arg-4 arg-5 arg-6) arg-7 (vector 1 arg-8 arg-9 arg-10) arg-11 (vector 1 arg-12 arg-13 arg-14))))
(define DataC-45SortedMapC-45Dependent-branch7 (lambda (arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16) (vector 2 (vector 2 arg-4 arg-5 arg-6 arg-7 arg-8) arg-9 (vector 1 arg-10 arg-11 arg-12) arg-13 (vector 1 arg-14 arg-15 arg-16))))
(define DataC-45SortedMapC-45Dependent-merge1 (lambda (arg-4 arg-5 arg-6 arg-7 arg-8) (case (vector-ref arg-6 0) ((1) (let ((e-4 (vector-ref arg-6 1))) (let ((e-5 (vector-ref arg-6 2))) (let ((e-6 (vector-ref arg-6 3))) (case (vector-ref arg-8 0) ((1) (let ((e-20 (vector-ref arg-8 1))) (let ((e-21 (vector-ref arg-8 2))) (let ((e-22 (vector-ref arg-8 3))) (DataC-45SortedMapC-45Dependent-branch5 arg-4 arg-5 e-4 e-5 e-6 arg-7 e-20 e-21 e-22))))) (else (let ((e-27 (vector-ref arg-8 1))) (let ((e-28 (vector-ref arg-8 2))) (let ((e-29 (vector-ref arg-8 3))) (let ((e-30 (vector-ref arg-8 4))) (let ((e-31 (vector-ref arg-8 5))) (DataC-45SortedMapC-45Dependent-branch6 arg-4 arg-5 e-4 e-5 e-6 arg-7 e-27 e-28 e-29 e-30 e-31)))))))))))) (else (let ((e-11 (vector-ref arg-6 1))) (let ((e-12 (vector-ref arg-6 2))) (let ((e-13 (vector-ref arg-6 3))) (let ((e-14 (vector-ref arg-6 4))) (let ((e-15 (vector-ref arg-6 5))) (case (vector-ref arg-8 0) ((1) (let ((e-36 (vector-ref arg-8 1))) (let ((e-37 (vector-ref arg-8 2))) (let ((e-38 (vector-ref arg-8 3))) (DataC-45SortedMapC-45Dependent-branch6 arg-4 arg-5 e-11 e-12 e-13 e-14 e-15 arg-7 e-36 e-37 e-38))))) (else (let ((e-43 (vector-ref arg-8 1))) (let ((e-44 (vector-ref arg-8 2))) (let ((e-45 (vector-ref arg-8 3))) (let ((e-46 (vector-ref arg-8 4))) (let ((e-47 (vector-ref arg-8 5))) (DataC-45SortedMapC-45Dependent-branch7 arg-4 arg-5 e-11 e-12 e-13 e-14 e-15 arg-7 e-43 e-44 e-45 e-46 e-47)))))))))))))))))
(define DataC-45SortedMapC-45Dependent-merge2 (lambda (arg-4 arg-5 arg-6 arg-7 arg-8) (case (vector-ref arg-4 0) ((1) (let ((e-4 (vector-ref arg-4 1))) (let ((e-5 (vector-ref arg-4 2))) (let ((e-6 (vector-ref arg-4 3))) (case (vector-ref arg-8 0) ((1) (let ((e-20 (vector-ref arg-8 1))) (let ((e-21 (vector-ref arg-8 2))) (let ((e-22 (vector-ref arg-8 3))) (DataC-45SortedMapC-45Dependent-branch5 e-4 e-5 e-6 arg-5 arg-6 arg-7 e-20 e-21 e-22))))) (else (let ((e-27 (vector-ref arg-8 1))) (let ((e-28 (vector-ref arg-8 2))) (let ((e-29 (vector-ref arg-8 3))) (let ((e-30 (vector-ref arg-8 4))) (let ((e-31 (vector-ref arg-8 5))) (DataC-45SortedMapC-45Dependent-branch6 e-4 e-5 e-6 arg-5 arg-6 arg-7 e-27 e-28 e-29 e-30 e-31)))))))))))) (else (let ((e-11 (vector-ref arg-4 1))) (let ((e-12 (vector-ref arg-4 2))) (let ((e-13 (vector-ref arg-4 3))) (let ((e-14 (vector-ref arg-4 4))) (let ((e-15 (vector-ref arg-4 5))) (case (vector-ref arg-8 0) ((1) (let ((e-36 (vector-ref arg-8 1))) (let ((e-37 (vector-ref arg-8 2))) (let ((e-38 (vector-ref arg-8 3))) (DataC-45SortedMapC-45Dependent-branch6 e-11 e-12 e-13 e-14 e-15 arg-5 arg-6 arg-7 e-36 e-37 e-38))))) (else (let ((e-43 (vector-ref arg-8 1))) (let ((e-44 (vector-ref arg-8 2))) (let ((e-45 (vector-ref arg-8 3))) (let ((e-46 (vector-ref arg-8 4))) (let ((e-47 (vector-ref arg-8 5))) (DataC-45SortedMapC-45Dependent-branch7 e-11 e-12 e-13 e-14 e-15 arg-5 arg-6 arg-7 e-43 e-44 e-45 e-46 e-47)))))))))))))))))
(define DataC-45SortedMapC-45Dependent-merge3 (lambda (arg-4 arg-5 arg-6 arg-7 arg-8) (case (vector-ref arg-4 0) ((1) (let ((e-4 (vector-ref arg-4 1))) (let ((e-5 (vector-ref arg-4 2))) (let ((e-6 (vector-ref arg-4 3))) (case (vector-ref arg-6 0) ((1) (let ((e-20 (vector-ref arg-6 1))) (let ((e-21 (vector-ref arg-6 2))) (let ((e-22 (vector-ref arg-6 3))) (DataC-45SortedMapC-45Dependent-branch5 e-4 e-5 e-6 arg-5 e-20 e-21 e-22 arg-7 arg-8))))) (else (let ((e-27 (vector-ref arg-6 1))) (let ((e-28 (vector-ref arg-6 2))) (let ((e-29 (vector-ref arg-6 3))) (let ((e-30 (vector-ref arg-6 4))) (let ((e-31 (vector-ref arg-6 5))) (DataC-45SortedMapC-45Dependent-branch6 e-4 e-5 e-6 arg-5 e-27 e-28 e-29 e-30 e-31 arg-7 arg-8)))))))))))) (else (let ((e-11 (vector-ref arg-4 1))) (let ((e-12 (vector-ref arg-4 2))) (let ((e-13 (vector-ref arg-4 3))) (let ((e-14 (vector-ref arg-4 4))) (let ((e-15 (vector-ref arg-4 5))) (case (vector-ref arg-6 0) ((1) (let ((e-36 (vector-ref arg-6 1))) (let ((e-37 (vector-ref arg-6 2))) (let ((e-38 (vector-ref arg-6 3))) (DataC-45SortedMapC-45Dependent-branch6 e-11 e-12 e-13 e-14 e-15 arg-5 e-36 e-37 e-38 arg-7 arg-8))))) (else (let ((e-43 (vector-ref arg-6 1))) (let ((e-44 (vector-ref arg-6 2))) (let ((e-45 (vector-ref arg-6 3))) (let ((e-46 (vector-ref arg-6 4))) (let ((e-47 (vector-ref arg-6 5))) (DataC-45SortedMapC-45Dependent-branch7 e-11 e-12 e-13 e-14 e-15 arg-5 e-43 e-44 e-45 e-46 e-47 arg-7 arg-8)))))))))))))))))
(define DataC-45SortedMapC-45Dependent-treeDelete (lambda (arg-3 arg-4 arg-5 arg-6) (cond ((equal? arg-4 0) (let ((e-4 (vector-ref arg-6 1))) (let ((e-5 (vector-ref arg-6 2))) (let ((sc2 (let ((e-1 (vector-ref arg-3 0))) (let ((e-12 (car e-1))) ((e-12 arg-5) e-4))))) (cond ((equal? sc2 1) (vector 1 (vector 0 ))) (else (vector 0 (vector 0 e-4 e-5))))))))(else (let ((e-0 (- arg-4 1))) (cond ((equal? e-0 0) (case (vector-ref arg-6 0) ((1) (let ((e-11 (vector-ref arg-6 1))) (let ((e-12 (vector-ref arg-6 2))) (let ((e-13 (vector-ref arg-6 3))) (let ((sc2 (let ((e-5 (vector-ref arg-3 4))) ((e-5 arg-5) e-12)))) (cond ((equal? sc2 1) (let ((sc3 (DataC-45SortedMapC-45Dependent-treeDelete arg-3 0 arg-5 e-11))) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 (vector 1 e-2 e-12 e-13)))) (else (vector 1 e-13))))) (else (let ((sc3 (DataC-45SortedMapC-45Dependent-treeDelete arg-3 0 arg-5 e-13))) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 (vector 1 e-11 e-12 e-2)))) (else (vector 1 e-11))))))))))) (else (let ((e-18 (vector-ref arg-6 1))) (let ((e-19 (vector-ref arg-6 2))) (let ((e-20 (vector-ref arg-6 3))) (let ((e-21 (vector-ref arg-6 4))) (let ((e-22 (vector-ref arg-6 5))) (let ((sc2 (let ((e-5 (vector-ref arg-3 4))) ((e-5 arg-5) e-19)))) (cond ((equal? sc2 1) (let ((sc3 (DataC-45SortedMapC-45Dependent-treeDelete arg-3 0 arg-5 e-18))) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 (vector 2 e-2 e-19 e-20 e-21 e-22)))) (else (vector 0 (vector 1 e-20 e-21 e-22)))))) (else (let ((sc3 (let ((e-5 (vector-ref arg-3 4))) ((e-5 arg-5) e-21)))) (cond ((equal? sc3 1) (let ((sc4 (DataC-45SortedMapC-45Dependent-treeDelete arg-3 0 arg-5 e-20))) (case (vector-ref sc4 0) ((0) (let ((e-2 (vector-ref sc4 1))) (vector 0 (vector 2 e-18 e-19 e-2 e-21 e-22)))) (else (vector 0 (vector 1 e-18 e-19 e-22)))))) (else (let ((sc4 (DataC-45SortedMapC-45Dependent-treeDelete arg-3 0 arg-5 e-22))) (case (vector-ref sc4 0) ((0) (let ((e-2 (vector-ref sc4 1))) (vector 0 (vector 2 e-18 e-19 e-20 e-21 e-2)))) (else (vector 0 (vector 1 e-18 e-19 e-20)))))))))))))))))))(else (let ((e-6 (- e-0 1))) (case (vector-ref arg-6 0) ((1) (let ((e-27 (vector-ref arg-6 1))) (let ((e-28 (vector-ref arg-6 2))) (let ((e-29 (vector-ref arg-6 3))) (let ((sc1 (let ((e-5 (vector-ref arg-3 4))) ((e-5 arg-5) e-28)))) (cond ((equal? sc1 1) (let ((sc2 (DataC-45SortedMapC-45Dependent-treeDelete arg-3 (+ e-6 1) arg-5 e-27))) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 (vector 1 e-2 e-28 e-29)))) (else (let ((e-5 (vector-ref sc2 1))) (case (vector-ref e-29 0) ((1) (let ((e-4 (vector-ref e-29 1))) (let ((e-8 (vector-ref e-29 2))) (let ((e-7 (vector-ref e-29 3))) (vector 1 (vector 2 e-5 e-28 e-4 e-8 e-7)))))) (else (let ((e-11 (vector-ref e-29 1))) (let ((e-12 (vector-ref e-29 2))) (let ((e-13 (vector-ref e-29 3))) (let ((e-14 (vector-ref e-29 4))) (let ((e-15 (vector-ref e-29 5))) (vector 0 (DataC-45SortedMapC-45Dependent-branch4 e-5 e-28 e-11 e-12 e-13 e-14 e-15)))))))))))))) (else (let ((sc2 (DataC-45SortedMapC-45Dependent-treeDelete arg-3 (+ e-6 1) arg-5 e-29))) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 (vector 1 e-27 e-28 e-2)))) (else (let ((e-5 (vector-ref sc2 1))) (case (vector-ref e-27 0) ((1) (let ((e-4 (vector-ref e-27 1))) (let ((e-8 (vector-ref e-27 2))) (let ((e-7 (vector-ref e-27 3))) (vector 1 (vector 2 e-4 e-8 e-7 e-28 e-5)))))) (else (let ((e-11 (vector-ref e-27 1))) (let ((e-12 (vector-ref e-27 2))) (let ((e-13 (vector-ref e-27 3))) (let ((e-14 (vector-ref e-27 4))) (let ((e-15 (vector-ref e-27 5))) (vector 0 (DataC-45SortedMapC-45Dependent-branch4 e-11 e-12 e-13 e-14 e-15 e-28 e-5)))))))))))))))))))) (else (let ((e-34 (vector-ref arg-6 1))) (let ((e-35 (vector-ref arg-6 2))) (let ((e-36 (vector-ref arg-6 3))) (let ((e-37 (vector-ref arg-6 4))) (let ((e-38 (vector-ref arg-6 5))) (let ((sc1 (let ((e-5 (vector-ref arg-3 4))) ((e-5 arg-5) e-35)))) (cond ((equal? sc1 1) (let ((sc2 (DataC-45SortedMapC-45Dependent-treeDelete arg-3 (+ e-6 1) arg-5 e-34))) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 (vector 2 e-2 e-35 e-36 e-37 e-38)))) (else (let ((e-5 (vector-ref sc2 1))) (vector 0 (DataC-45SortedMapC-45Dependent-merge1 e-5 e-35 e-36 e-37 e-38))))))) (else (let ((sc2 (let ((e-5 (vector-ref arg-3 4))) ((e-5 arg-5) e-37)))) (cond ((equal? sc2 1) (let ((sc3 (DataC-45SortedMapC-45Dependent-treeDelete arg-3 (+ e-6 1) arg-5 e-36))) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 (vector 2 e-34 e-35 e-2 e-37 e-38)))) (else (let ((e-5 (vector-ref sc3 1))) (vector 0 (DataC-45SortedMapC-45Dependent-merge2 e-34 e-35 e-5 e-37 e-38))))))) (else (let ((sc3 (DataC-45SortedMapC-45Dependent-treeDelete arg-3 (+ e-6 1) arg-5 e-38))) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 (vector 2 e-34 e-35 e-36 e-37 e-2)))) (else (let ((e-5 (vector-ref sc3 1))) (vector 0 (DataC-45SortedMapC-45Dependent-merge3 e-34 e-35 e-36 e-37 e-5)))))))))))))))))))))))))))
(define DataC-45SortedMapC-45Dependent-delete (lambda (arg-2 arg-3) (case (vector-ref arg-3 0) ((0) (let ((e-2 (vector-ref arg-3 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref arg-3 1))) (let ((e-6 (vector-ref arg-3 2))) (let ((e-7 (vector-ref arg-3 3))) (cond ((equal? e-6 0) (let ((sc2 (DataC-45SortedMapC-45Dependent-treeDelete e-5 0 arg-2 e-7))) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 1 e-5 0 e-2))) (else (vector 0 e-5)))))(else (let ((e-8 (- e-6 1))) (let ((sc1 (DataC-45SortedMapC-45Dependent-treeDelete e-5 (+ e-8 1) arg-2 e-7))) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 1 e-5 (+ e-8 1) e-2))) (else (let ((e-9 (vector-ref sc1 1))) (vector 1 e-5 e-8 e-9)))))))))))))))
(define DataC-45SortedMap-delete (lambda (arg-2 ext-0) (DataC-45SortedMapC-45Dependent-delete arg-2 ext-0)))
(define PackC-45ConfigC-45Types-uncacheLib (lambda (arg-1 arg-2 arg-3) (DataC-45IORef-modifyIORef arg-1 arg-2 (lambda (eta-0) (DataC-45SortedMap-delete arg-3 eta-0)))))
(define PackC-45RunnerC-45Install-n--10142-3906-u--docsDir (lambda (arg-1 arg-2 arg-3 arg-4 arg-5) (DataC-45FilePath-C-60C-47C-62 (PackC-45CoreC-45Ipkg-buildPath (let ((e-3 (vector-ref arg-2 2))) e-3)) csegen-231)))
(define PackC-45RunnerC-45Install-n--10142-3908-u--htmlDir (lambda (arg-1 arg-2 arg-3 arg-4 arg-5) (DataC-45FilePath-C-60C-47C-62 (PackC-45RunnerC-45Install-n--10142-3906-u--docsDir arg-1 arg-2 arg-3 arg-4 arg-5) csegen-231)))
(define PackC-45ConfigC-45Environment-libInstallPrefix (lambda (arg-1 arg-2 arg-3) (cons (cons "IDRIS2_PREFIX" (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 (let ((e-1 (vector-ref arg-3 0))) (case (vector-ref e-1 0) ((0) (let ((e-9 (vector-ref e-1 2))) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 arg-1 csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-13 (vector-ref arg-2 1))) e-13))) (PackC-45CoreC-45Types-toRelPath (let ((e-14 (vector-ref arg-3 1))) e-14))) (PackC-45CoreC-45Types-toRelPath e-9)))) ((1) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 arg-1 csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-12 (vector-ref arg-2 1))) e-12))) csegen-219) (PackC-45CoreC-45Types-toRelPath (let ((e-13 (vector-ref arg-3 1))) e-13)))) (else (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 arg-1 csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-8 (vector-ref arg-2 1))) e-8))) csegen-226))))) '()))) '())))
(define PackC-45RunnerC-45Install-n--10142-3907-u--pre (lambda (arg-1 arg-2 arg-3 arg-4 arg-5) (PackC-45ConfigC-45Environment-libInstallPrefix (let ((e-0 (car arg-3))) (let ((e-7 (vector-ref e-0 0))) e-7)) (let ((e-0 (car arg-3))) (let ((e-4 (vector-ref e-0 4))) e-4)) arg-2)))
(define DataC-45String-n--3884-7700-u--unlinesC-39 (lambda (arg-0) (if (null? arg-0) '() (let ((e-2 (car arg-0))) (let ((e-3 (cdr arg-0))) (cons e-2 (cons "\u000a" (DataC-45String-n--3884-7700-u--unlinesC-39 e-3))))))))
(define DataC-45String-fastUnlines (lambda (ext-0) (PreludeC-45Types-fastConcat (DataC-45String-n--3884-7700-u--unlinesC-39 ext-0))))
(define PackC-45CoreC-45Ipkg-n--10362-8622-u--beforeH1 (lambda (arg-1 arg-2 arg-3) (if (null? arg-3) '() (let ((e-2 (car arg-3))) (let ((e-3 (cdr arg-3))) (cond ((equal? e-2 #\<) (if (null? e-3) (cons e-2 (PackC-45CoreC-45Ipkg-n--10362-8622-u--beforeH1 arg-1 arg-2 e-3)) (let ((e-5 (car e-3))) (let ((e-6 (cdr e-3))) (cond ((equal? e-5 #\/) (if (null? e-6) (cons e-2 (PackC-45CoreC-45Ipkg-n--10362-8622-u--beforeH1 arg-1 arg-2 e-3)) (let ((e-8 (car e-6))) (let ((e-9 (cdr e-6))) (cond ((equal? e-8 #\h) (if (null? e-9) (cons e-2 (PackC-45CoreC-45Ipkg-n--10362-8622-u--beforeH1 arg-1 arg-2 e-3)) (let ((e-11 (car e-9))) (let ((e-12 (cdr e-9))) (cond ((equal? e-11 #\1) (if (null? e-12) (cons e-2 (PackC-45CoreC-45Ipkg-n--10362-8622-u--beforeH1 arg-1 arg-2 e-3)) (let ((e-14 (car e-12))) (let ((e-15 (cdr e-12))) (cond ((equal? e-14 #\>) (PreludeC-45TypesC-45List-tailRecAppend (PreludeC-45Types-fastUnpack "</h1><span style=\"float:right\">") (PreludeC-45TypesC-45List-tailRecAppend (PreludeC-45Types-fastUnpack (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "(<a href=\"" (cons (PreludeC-45Types-fastPack (let ((e-4 (vector-ref arg-2 3))) (let ((e-10 (cdr e-4))) e-10))) (cons "\">source</a>)</span>" '()))))) e-15)))(else (cons e-2 (PackC-45CoreC-45Ipkg-n--10362-8622-u--beforeH1 arg-1 arg-2 e-3))))))))(else (cons e-2 (PackC-45CoreC-45Ipkg-n--10362-8622-u--beforeH1 arg-1 arg-2 e-3))))))))(else (cons e-2 (PackC-45CoreC-45Ipkg-n--10362-8622-u--beforeH1 arg-1 arg-2 e-3))))))))(else (cons e-2 (PackC-45CoreC-45Ipkg-n--10362-8622-u--beforeH1 arg-1 arg-2 e-3))))))))(else (cons e-2 (PackC-45CoreC-45Ipkg-n--10362-8622-u--beforeH1 arg-1 arg-2 e-3)))))))))
(define PackC-45CoreC-45Ipkg-n--10362-8623-u--insertSrc (lambda (arg-1 arg-2 arg-3) (if (null? arg-3) '() (let ((e-2 (car arg-3))) (let ((e-3 (cdr arg-3))) (cond ((equal? e-2 #\<) (if (null? e-3) (cons e-2 (PackC-45CoreC-45Ipkg-n--10362-8623-u--insertSrc arg-1 arg-2 e-3)) (let ((e-5 (car e-3))) (let ((e-6 (cdr e-3))) (cond ((equal? e-5 #\h) (if (null? e-6) (cons e-2 (PackC-45CoreC-45Ipkg-n--10362-8623-u--insertSrc arg-1 arg-2 e-3)) (let ((e-8 (car e-6))) (let ((e-9 (cdr e-6))) (cond ((equal? e-8 #\1) (if (null? e-9) (cons e-2 (PackC-45CoreC-45Ipkg-n--10362-8623-u--insertSrc arg-1 arg-2 e-3)) (let ((e-11 (car e-9))) (let ((e-12 (cdr e-9))) (cond ((equal? e-11 #\>) (PreludeC-45TypesC-45List-tailRecAppend (PreludeC-45Types-fastUnpack "<h1>") (PackC-45CoreC-45Ipkg-n--10362-8622-u--beforeH1 arg-1 arg-2 e-12)))(else (cons e-2 (PackC-45CoreC-45Ipkg-n--10362-8623-u--insertSrc arg-1 arg-2 e-3))))))))(else (cons e-2 (PackC-45CoreC-45Ipkg-n--10362-8623-u--insertSrc arg-1 arg-2 e-3))))))))(else (cons e-2 (PackC-45CoreC-45Ipkg-n--10362-8623-u--insertSrc arg-1 arg-2 e-3))))))))(else (cons e-2 (PackC-45CoreC-45Ipkg-n--10362-8623-u--insertSrc arg-1 arg-2 e-3)))))))))
(define PackC-45CoreC-45Ipkg-insertSources (lambda (arg-1 arg-2) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-read arg-1 (let ((e-0 (vector-ref arg-2 0))) e-0)) (lambda (u--str) (PackC-45CoreC-45IO-write arg-1 (let ((e-0 (vector-ref arg-2 0))) e-0) (DataC-45String-fastUnlines (PreludeC-45TypesC-45List-mapAppend '() (lambda (eta-0) (PreludeC-45Types-fastPack (PackC-45CoreC-45Ipkg-n--10362-8623-u--insertSrc arg-1 arg-2 (PreludeC-45Types-fastUnpack eta-0)))) (DataC-45String-lines u--str))))))))
(define PackC-45RunnerC-45Install-case--caseC-32blockC-32inC-32installDocs-4229 (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (if (null? arg-10) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (vector 0 )) (let ((e-1 (unbox arg-10))) (let ((e-4 (vector-ref e-1 1))) (let ((e-5 (vector-ref e-1 2))) (let ((e-6 (vector-ref e-1 3))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-7 (car arg-1))) e-7) (PackC-45CoreC-45IO-sysAndLog arg-1 (let ((e-0 (car arg-3))) e-0) 1 (vector 1 csegen-204 arg-7 (vector 1 (lambda (eta-0) (vector 0 eta-0)) "html" (vector 1 csegen-204 e-4 (vector 1 csegen-204 e-5 (vector 1 (lambda (eta-0) eta-0) (vector 1 ">") (vector 1 csegen-204 e-6 (vector 0 )))))))) (lambda (_-10507) (PackC-45CoreC-45Ipkg-insertSources arg-1 e-1))))))))))
(define PackC-45RunnerC-45Install-case--installDocs-3859 (lambda (arg-1 arg-2 arg-3 arg-4) (case (vector-ref arg-4 0) ((1) (let ((e-1 (vector-ref arg-4 1))) (cond ((equal? e-1 1) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) e-6)) (vector 0 )))(else (PackC-45RunnerC-45Database-withPkgEnv arg-1 (let ((e-0 (car arg-3))) e-0) (let ((e-2 (vector-ref arg-2 1))) e-2) (let ((e-6 (vector-ref arg-2 0))) e-6) (lambda (u--dir) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) (PackC-45CoreC-45Logging-log (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) (let ((e-9 (vector-ref e-6 0))) e-9))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) e-6)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) e-6)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (let ((e-0 (car arg-3))) (let ((e-6 (vector-ref e-0 2))) (let ((e-23 (vector-ref e-6 21))) e-23))) 2 (lambda () (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Building source docs for: " (cons (let ((e-2 (vector-ref arg-2 1))) e-2) '()))))) (lambda (_-10507) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) (PackC-45RunnerC-45Install-preInstall arg-1 arg-3 arg-2) (lambda (_-10508) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) (PackC-45RunnerC-45Install-libPkg arg-1 arg-3 (PackC-45RunnerC-45Install-n--10142-3907-u--pre arg-1 arg-2 arg-3 arg-4 u--dir) 1 0 csegen-205 (let ((e-3 (vector-ref arg-2 2))) e-3)) (lambda (_-10509) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) (let ((e-9 (vector-ref e-6 0))) e-9))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) e-6)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) e-6)) arg-9795 arg-9802)))))) (let ((e-0 (car arg-3))) (let ((e-6 (vector-ref e-0 2))) (let ((e-15 (vector-ref e-6 13))) e-15))) (lambda () (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) (PackC-45CoreC-45Logging-log (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) (let ((e-9 (vector-ref e-6 0))) e-9))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) e-6)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) e-6)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (let ((e-0 (car arg-3))) (let ((e-6 (vector-ref e-0 2))) (let ((e-23 (vector-ref e-6 21))) e-23))) 2 (lambda () (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Building highlighted sources for: " (cons (let ((e-2 (vector-ref arg-2 1))) e-2) '()))))) (lambda (_-10510) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) (PackC-45CoreC-45IO-mkDir arg-1 (PackC-45RunnerC-45Install-n--10142-3908-u--htmlDir arg-1 arg-2 arg-3 arg-4 u--dir)) (lambda (_-10511) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) (PackC-45RunnerC-45Database-resolveApp arg-1 (let ((e-0 (car arg-3))) e-0) "katla") (lambda (u--rp) (let ((u--katla (PackC-45ConfigC-45Environment-pkgExec (let ((e-0 (car arg-3))) (let ((e-8 (vector-ref e-0 0))) e-8)) (let ((e-0 (car arg-3))) (let ((e-4 (vector-ref e-0 4))) e-4)) (let ((e-2 (vector-ref u--rp 1))) e-2) (let ((e-7 (vector-ref u--rp 0))) e-7) (let ((e-5 (vector-ref u--rp 4))) e-5)))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) (let ((e-9 (vector-ref e-6 0))) e-9))) (lambda (eta-0) (PreludeC-45TypesC-45List-mapAppend '() (lambda (eta-1) (cons (PackC-45RunnerC-45Install-n--10142-3908-u--htmlDir arg-1 arg-2 arg-3 arg-4 u--dir) eta-1)) eta-0)) (PackC-45CoreC-45IO-htmlFiles arg-1 (PackC-45RunnerC-45Install-n--10142-3908-u--htmlDir arg-1 arg-2 arg-3 arg-4 u--dir))) (lambda (u--fs) (PreludeC-45Interfaces-for_ (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) (let ((e-9 (vector-ref e-6 0))) e-9))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) e-6)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) e-6)) arg-9795 arg-9802)))))) csegen-197 u--fs (lambda (u--htmlFile) (PackC-45RunnerC-45Install-case--caseC-32blockC-32inC-32installDocs-4229 arg-1 arg-2 arg-3 arg-4 u--dir u--rp u--katla u--fs u--htmlFile (PackC-45CoreC-45Ipkg-sourceForDoc (let ((e-2 (cdr arg-3))) e-2) (let ((e-3 (vector-ref arg-2 2))) e-3) u--htmlFile))))))))))))))) (lambda (_-10510) ((let ((u--docs (DataC-45FilePath-C-60C-47C-62 (let ((e-6 (vector-ref arg-2 0))) (case (vector-ref e-6 0) ((0) (let ((e-10 (vector-ref e-6 2))) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-0 (car arg-3))) (let ((e-18 (vector-ref e-0 0))) e-18)) csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-0 (car arg-3))) (let ((e-14 (vector-ref e-0 4))) (let ((e-21 (vector-ref e-14 1))) e-21))))) (PackC-45CoreC-45Types-toRelPath (let ((e-15 (vector-ref arg-2 1))) e-15))) (PackC-45CoreC-45Types-toRelPath e-10)))) ((1) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-0 (car arg-3))) (let ((e-17 (vector-ref e-0 0))) e-17)) csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-0 (car arg-3))) (let ((e-13 (vector-ref e-0 4))) (let ((e-20 (vector-ref e-13 1))) e-20))))) csegen-219) (PackC-45CoreC-45Types-toRelPath (let ((e-14 (vector-ref arg-2 1))) e-14)))) (else (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-0 (car arg-3))) (let ((e-14 (vector-ref e-0 0))) e-14)) csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-0 (car arg-3))) (let ((e-9 (vector-ref e-0 4))) (let ((e-17 (vector-ref e-9 1))) e-17))))) csegen-226)))) csegen-231))) (lambda () (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) (SystemC-45FileC-45Meta-exists (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) (let ((e-9 (vector-ref e-6 0))) e-9))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) e-6)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) e-6)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 u--docs)) (lambda (bind-0) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) (let ((e-9 (vector-ref e-6 0))) e-9))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) e-6)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) e-6)) arg-9795 arg-9802)))))) bind-0 (lambda () (PackC-45CoreC-45IO-rmDir arg-1 u--docs))))) (lambda (_-10511) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) (PackC-45CoreC-45IO-copyDir arg-1 (PackC-45RunnerC-45Install-n--10142-3906-u--docsDir arg-1 arg-2 arg-3 arg-4 u--dir) u--docs) (lambda (_-10512) (PackC-45ConfigC-45Types-uncacheLib (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) (let ((e-9 (vector-ref e-6 0))) e-9))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) e-6)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) e-6)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (let ((e-0 (car arg-3))) (let ((e-3 (vector-ref e-0 3))) e-3)) (let ((e-2 (vector-ref arg-2 1))) e-2)))))))))))))))))))))))(else (PackC-45RunnerC-45Database-withPkgEnv arg-1 (let ((e-0 (car arg-3))) e-0) (let ((e-2 (vector-ref arg-2 1))) e-2) (let ((e-1 (vector-ref arg-2 0))) e-1) (lambda (u--dir) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45Logging-log (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (let ((e-0 (car arg-3))) (let ((e-2 (vector-ref e-0 2))) (let ((e-23 (vector-ref e-2 21))) e-23))) 2 (lambda () (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Building source docs for: " (cons (let ((e-2 (vector-ref arg-2 1))) e-2) '()))))) (lambda (_-10507) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45RunnerC-45Install-preInstall arg-1 arg-3 arg-2) (lambda (_-10508) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45RunnerC-45Install-libPkg arg-1 arg-3 (PackC-45RunnerC-45Install-n--10142-3907-u--pre arg-1 arg-2 arg-3 arg-4 u--dir) 1 0 csegen-205 (let ((e-3 (vector-ref arg-2 2))) e-3)) (lambda (_-10509) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (let ((e-0 (car arg-3))) (let ((e-2 (vector-ref e-0 2))) (let ((e-15 (vector-ref e-2 13))) e-15))) (lambda () (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45Logging-log (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (let ((e-0 (car arg-3))) (let ((e-2 (vector-ref e-0 2))) (let ((e-23 (vector-ref e-2 21))) e-23))) 2 (lambda () (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Building highlighted sources for: " (cons (let ((e-2 (vector-ref arg-2 1))) e-2) '()))))) (lambda (_-10510) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-mkDir arg-1 (PackC-45RunnerC-45Install-n--10142-3908-u--htmlDir arg-1 arg-2 arg-3 arg-4 u--dir)) (lambda (_-10511) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45RunnerC-45Database-resolveApp arg-1 (let ((e-0 (car arg-3))) e-0) "katla") (lambda (u--rp) (let ((u--katla (PackC-45ConfigC-45Environment-pkgExec (let ((e-0 (car arg-3))) (let ((e-7 (vector-ref e-0 0))) e-7)) (let ((e-0 (car arg-3))) (let ((e-4 (vector-ref e-0 4))) e-4)) (let ((e-2 (vector-ref u--rp 1))) e-2) (let ((e-1 (vector-ref u--rp 0))) e-1) (let ((e-5 (vector-ref u--rp 4))) e-5)))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) (lambda (eta-0) (PreludeC-45TypesC-45List-mapAppend '() (lambda (eta-1) (cons (PackC-45RunnerC-45Install-n--10142-3908-u--htmlDir arg-1 arg-2 arg-3 arg-4 u--dir) eta-1)) eta-0)) (PackC-45CoreC-45IO-htmlFiles arg-1 (PackC-45RunnerC-45Install-n--10142-3908-u--htmlDir arg-1 arg-2 arg-3 arg-4 u--dir))) (lambda (u--fs) (PreludeC-45Interfaces-for_ (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) csegen-197 u--fs (lambda (u--htmlFile) (PackC-45RunnerC-45Install-case--caseC-32blockC-32inC-32installDocs-4229 arg-1 arg-2 arg-3 arg-4 u--dir u--rp u--katla u--fs u--htmlFile (PackC-45CoreC-45Ipkg-sourceForDoc (let ((e-1 (cdr arg-3))) e-1) (let ((e-3 (vector-ref arg-2 2))) e-3) u--htmlFile))))))))))))))) (lambda (_-10510) ((let ((u--docs (DataC-45FilePath-C-60C-47C-62 (let ((e-1 (vector-ref arg-2 0))) (case (vector-ref e-1 0) ((0) (let ((e-9 (vector-ref e-1 2))) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-0 (car arg-3))) (let ((e-17 (vector-ref e-0 0))) e-17)) csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-0 (car arg-3))) (let ((e-13 (vector-ref e-0 4))) (let ((e-20 (vector-ref e-13 1))) e-20))))) (PackC-45CoreC-45Types-toRelPath (let ((e-14 (vector-ref arg-2 1))) e-14))) (PackC-45CoreC-45Types-toRelPath e-9)))) ((1) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-0 (car arg-3))) (let ((e-16 (vector-ref e-0 0))) e-16)) csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-0 (car arg-3))) (let ((e-12 (vector-ref e-0 4))) (let ((e-19 (vector-ref e-12 1))) e-19))))) csegen-219) (PackC-45CoreC-45Types-toRelPath (let ((e-13 (vector-ref arg-2 1))) e-13)))) (else (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-0 (car arg-3))) (let ((e-13 (vector-ref e-0 0))) e-13)) csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-0 (car arg-3))) (let ((e-8 (vector-ref e-0 4))) (let ((e-16 (vector-ref e-8 1))) e-16))))) csegen-226)))) csegen-231))) (lambda () (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (SystemC-45FileC-45Meta-exists (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 u--docs)) (lambda (bind-0) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) bind-0 (lambda () (PackC-45CoreC-45IO-rmDir arg-1 u--docs))))) (lambda (_-10511) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-copyDir arg-1 (PackC-45RunnerC-45Install-n--10142-3906-u--docsDir arg-1 arg-2 arg-3 arg-4 u--dir) u--docs) (lambda (_-10512) (PackC-45ConfigC-45Types-uncacheLib (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (let ((e-0 (car arg-3))) (let ((e-3 (vector-ref e-0 3))) e-3)) (let ((e-2 (vector-ref arg-2 1))) e-2)))))))))))))))))))))))
(define PackC-45RunnerC-45Install-installDocs (lambda (arg-1 arg-2 arg-3) (PackC-45RunnerC-45Install-case--installDocs-3859 arg-1 arg-3 arg-2 (let ((e-4 (vector-ref arg-3 3))) e-4))))
(define PackC-45RunnerC-45Install-installCmd (lambda (arg-0) (cond ((equal? arg-0 1) (vector 1 (lambda (eta-0) (vector 0 eta-0)) "--install-with-src" (vector 0 ))) (else (vector 1 (lambda (eta-0) (vector 0 eta-0)) "--install" (vector 0 ))))))
(define PackC-45DatabaseC-45TypesC-45ResolvedLib-isInstalled (lambda (arg-1) (let ((e-4 (vector-ref arg-1 3))) (case (vector-ref e-4 0) ((0) 0)(else 1)))))
(define PackC-45RunnerC-45Install-withSrcStr (lambda (arg-0) (let ((sc0 (let ((e-13 (vector-ref arg-0 11))) e-13))) (cond ((equal? sc0 1) " (with sources)") (else "")))))
(define PackC-45RunnerC-45Install-installImpl (lambda (arg-1 arg-2 arg-3 arg-4) (let ((u--pre (PackC-45ConfigC-45Environment-libInstallPrefix (let ((e-0 (car arg-2))) (let ((e-7 (vector-ref e-0 0))) e-7)) (let ((e-0 (car arg-2))) (let ((e-4 (vector-ref e-0 4))) e-4)) arg-4))) (let ((u--instCmd (PackC-45RunnerC-45Install-installCmd (let ((e-0 (car arg-2))) (let ((e-2 (vector-ref e-0 2))) (let ((e-13 (vector-ref e-2 11))) e-13)))))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45Logging-log (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (let ((e-0 (car arg-2))) (let ((e-2 (vector-ref e-0 2))) (let ((e-23 (vector-ref e-2 21))) e-23))) 2 (lambda () (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Installing library" (cons (PackC-45RunnerC-45Install-withSrcStr (let ((e-0 (car arg-2))) (let ((e-2 (vector-ref e-0 2))) e-2))) (cons ": " (cons (let ((e-2 (vector-ref arg-4 1))) e-2) '()))))))) (lambda (_-10507) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (PackC-45DatabaseC-45TypesC-45ResolvedLib-isInstalled arg-4) (lambda () (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45Logging-log (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (let ((e-0 (car arg-2))) (let ((e-2 (vector-ref e-0 2))) (let ((e-23 (vector-ref e-2 21))) e-23))) 2 (lambda () (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Removing currently installed version of " (cons (let ((e-2 (vector-ref arg-4 1))) e-2) '()))))) (lambda (_-10508) (PackC-45CoreC-45IO-rmDir arg-1 (PackC-45ConfigC-45Environment-pkgInstallDir (let ((e-0 (car arg-2))) (let ((e-7 (vector-ref e-0 0))) e-7)) (let ((e-0 (car arg-2))) (let ((e-4 (vector-ref e-0 4))) e-4)) (let ((e-2 (vector-ref arg-4 1))) e-2) (let ((e-1 (vector-ref arg-4 0))) e-1) (let ((e-3 (vector-ref arg-4 2))) e-3))))))) (lambda (_-10508) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45RunnerC-45Install-libPkg arg-1 arg-2 u--pre 1 1 csegen-232 (let ((e-3 (vector-ref arg-4 2))) e-3)) (lambda (_-10509) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45RunnerC-45Install-libPkg arg-1 arg-2 u--pre 0 0 u--instCmd (let ((e-3 (vector-ref arg-4 2))) e-3)) (lambda (_-10510) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (SystemC-45FileC-45Meta-exists (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 (DataC-45FilePath-C-60C-47C-62 arg-3 csegen-270))) (lambda (bind-0) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) bind-0 (lambda () (PackC-45CoreC-45IO-copyDir arg-1 (DataC-45FilePath-C-60C-47C-62 arg-3 csegen-270) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-1 (vector-ref arg-4 0))) (case (vector-ref e-1 0) ((0) (let ((e-9 (vector-ref e-1 2))) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-0 (car arg-2))) (let ((e-17 (vector-ref e-0 0))) e-17)) csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-0 (car arg-2))) (let ((e-13 (vector-ref e-0 4))) (let ((e-20 (vector-ref e-13 1))) e-20))))) (PackC-45CoreC-45Types-toRelPath (let ((e-14 (vector-ref arg-4 1))) e-14))) (PackC-45CoreC-45Types-toRelPath e-9)))) ((1) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-0 (car arg-2))) (let ((e-16 (vector-ref e-0 0))) e-16)) csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-0 (car arg-2))) (let ((e-12 (vector-ref e-0 4))) (let ((e-19 (vector-ref e-12 1))) e-19))))) csegen-219) (PackC-45CoreC-45Types-toRelPath (let ((e-13 (vector-ref arg-4 1))) e-13)))) (else (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-0 (car arg-2))) (let ((e-13 (vector-ref e-0 0))) e-13)) csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-0 (car arg-2))) (let ((e-8 (vector-ref e-0 4))) (let ((e-16 (vector-ref e-8 1))) e-16))))) csegen-226)))) (vector 1 (cons '() (PackC-45CoreC-45Types-C-60C-45C-62 (lambda (eta-0) eta-0) (lambda (eta-0) (PackC-45CoreC-45Types-u--cast_Cast_PkgVersion_Body eta-0)) csegen-224 (let ((e-0 (car arg-2))) (let ((e-4 (vector-ref e-0 4))) (let ((e-9 (vector-ref e-4 2))) e-9))))))) csegen-270))))))))))))))))))
(define PackC-45RunnerC-45Install-case--installLib-3258 (lambda (arg-1 arg-2 arg-3 arg-4) (case (vector-ref arg-4 0) ((1) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) e-6)) (vector 0 )))(else (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45RunnerC-45Install-preInstall arg-1 arg-3 arg-2) (lambda (_-10507) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45RunnerC-45Database-withPkgEnv arg-1 (let ((e-0 (car arg-3))) e-0) (let ((e-2 (vector-ref arg-2 1))) e-2) (let ((e-1 (vector-ref arg-2 0))) e-1) (lambda (u--dir) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45RunnerC-45Install-installImpl arg-1 arg-3 u--dir arg-2) (lambda (_-10508) ((let ((e-1 (vector-ref arg-2 0))) (case (vector-ref e-1 0) ((1) (lambda () (PackC-45CoreC-45IO-write arg-1 (cons (DataC-45FilePath-C-60C-47C-62 (let ((e-14 (vector-ref arg-2 0))) (case (vector-ref e-14 0) ((0) (let ((e-18 (vector-ref e-14 2))) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-0 (car arg-3))) (let ((e-26 (vector-ref e-0 0))) e-26)) csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-0 (car arg-3))) (let ((e-22 (vector-ref e-0 4))) (let ((e-29 (vector-ref e-22 1))) e-29))))) (PackC-45CoreC-45Types-toRelPath (let ((e-23 (vector-ref arg-2 1))) e-23))) (PackC-45CoreC-45Types-toRelPath e-18)))) ((1) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-0 (car arg-3))) (let ((e-25 (vector-ref e-0 0))) e-25)) csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-0 (car arg-3))) (let ((e-21 (vector-ref e-0 4))) (let ((e-28 (vector-ref e-21 1))) e-28))))) csegen-219) (PackC-45CoreC-45Types-toRelPath (let ((e-22 (vector-ref arg-2 1))) e-22)))) (else (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-0 (car arg-3))) (let ((e-22 (vector-ref e-0 0))) e-22)) csegen-213) (PackC-45CoreC-45Types-toRelPath (let ((e-0 (car arg-3))) (let ((e-18 (vector-ref e-0 4))) (let ((e-25 (vector-ref e-18 1))) e-25))))) csegen-226)))) (vector 1 (cons '() (PackC-45CoreC-45Types-C-60C-45C-62 (lambda (eta-0) eta-0) (lambda (eta-0) (PackC-45CoreC-45Types-u--cast_Cast_PkgVersion_Body eta-0)) csegen-224 (let ((e-0 (car arg-3))) (let ((e-12 (vector-ref e-0 4))) (let ((e-18 (vector-ref e-12 2))) e-18))))))) (PreludeC-45Types-fastUnpack ".timestamp")) "")))(else (lambda () (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) e-10)) (vector 0 ))))))))))) (lambda (_-10508) (PackC-45ConfigC-45Types-uncacheLib (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (let ((e-0 (car arg-3))) (let ((e-3 (vector-ref e-0 3))) e-3)) (let ((e-2 (vector-ref arg-2 1))) e-2))))))))))
(define PackC-45RunnerC-45Install-installLib (lambda (arg-1 arg-2 arg-3) (PackC-45RunnerC-45Install-case--installLib-3258 arg-1 arg-3 arg-2 (let ((e-4 (vector-ref arg-3 3))) e-4))))
(define PackC-45RunnerC-45Install-katla (lambda (arg-0) (let ((sc0 (let ((sc1 (let ((e-14 (vector-ref arg-0 12))) e-14))) (cond ((equal? sc1 1) (let ((e-15 (vector-ref arg-0 13))) e-15)) (else 0))))) (cond ((equal? sc0 1) (cons (cons (box 0) "katla") '())) (else '())))))
(define PackC-45RunnerC-45Install-libInfo (lambda (ext-0) (PreludeC-45TypesC-45List-mapMaybeAppend '() (lambda (lcase-0) (case (vector-ref lcase-0 0) ((0) (let ((e-2 (vector-ref lcase-0 1))) (box (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons (let ((e-6 (vector-ref e-2 1))) e-6) '()))))) (else '()))) ext-0)))
(define PackC-45CoreC-45Logging-case--logMany-1796 (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((e-2 (car arg-7))) (let ((e-3 (cdr arg-7))) (cond ((equal? e-2 1) (if (null? e-3) (lambda () (PackC-45CoreC-45Logging-printLogMessage arg-1 (lambda (eta-0) (PackC-45CoreC-45Types-u--interpolate_Interpolation_LogLevel eta-0)) arg-5 (arg-4) e-3)) (let ((e-5 (car e-3))) (let ((e-6 (cdr e-3))) (if (null? e-6) (lambda () (PackC-45CoreC-45Logging-printLogMessage arg-1 (lambda (eta-0) (PackC-45CoreC-45Types-u--interpolate_Interpolation_LogLevel eta-0)) arg-5 (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons (arg-4) (cons " " (cons e-5 '())))) '())) (lambda () (PackC-45CoreC-45Logging-printLogMessage arg-1 (lambda (eta-0) (PackC-45CoreC-45Types-u--interpolate_Interpolation_LogLevel eta-0)) arg-5 (arg-4) e-3)))))))(else (lambda () (PackC-45CoreC-45Logging-printLogMessage arg-1 (lambda (eta-0) (PackC-45CoreC-45Types-u--interpolate_Interpolation_LogLevel eta-0)) arg-5 (arg-4) e-3))))))))
(define PackC-45CoreC-45Logging-logMany (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (PreludeC-45Interfaces-when (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (let ((sc0 (PackC-45CoreC-45Types-u--C-62C-61_Ord_LogLevel arg-4 arg-2))) (cond ((equal? sc0 1) (let ((sc1 (PreludeC-45Types-u--null_Foldable_List (arg-6)))) (cond ((equal? sc1 1) 0) (else 1)))) (else 0))) (PackC-45CoreC-45Logging-case--logMany-1796 arg-1 arg-3 arg-6 arg-5 arg-4 arg-2 (cons arg-3 (arg-6))))))
(define PackC-45RunnerC-45Database-safe (lambda (arg-2 arg-3 arg-4) (let ((e-1 (vector-ref arg-4 0))) (let ((e-2 (vector-ref arg-4 1))) (let ((e-3 (vector-ref arg-4 2))) (let ((u--unsafe (DataC-45Maybe-isJust (PreludeC-45Types-u--C-60C-124C-62_Alternative_Maybe (let ((e-19 (vector-ref e-1 19))) e-19) (lambda () (PreludeC-45Types-u--C-60C-124C-62_Alternative_Maybe (let ((e-20 (vector-ref e-1 20))) e-20) (lambda () (PreludeC-45Types-u--C-60C-124C-62_Alternative_Maybe (let ((e-21 (vector-ref e-1 21))) e-21) (lambda () (let ((e-22 (vector-ref e-1 22))) e-22)))))))))) (let ((sc0 (let ((sc1 (let ((e-7 (vector-ref arg-3 2))) (let ((e-9 (vector-ref e-7 7))) e-9)))) (cond ((equal? sc1 1) (cond ((equal? u--unsafe 1) (let ((sc3 (PreludeC-45Types-elem csegen-197 csegen-289 (let ((e-0 (vector-ref e-1 0))) e-0) (let ((e-7 (vector-ref arg-3 2))) (let ((e-12 (vector-ref e-7 10))) e-12))))) (cond ((equal? sc3 1) 0) (else 1)))) (else 0))) (else 0))))) (cond ((equal? sc0 0) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-5 (car arg-2))) (let ((e-8 (vector-ref e-5 0))) e-8)) (vector e-1 e-2 e-3))) (else (let ((u--msg (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Package " (cons (let ((e-0 (vector-ref e-1 0))) e-0) (cons " uses custom build hooks. Continue (yes/*no)?" '())))))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-5 (car arg-2))) e-5) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-5 (car arg-2))) e-5) (PackC-45CoreC-45Logging-log (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-5 (car arg-2))) (let ((e-8 (vector-ref e-5 0))) (let ((e-11 (vector-ref e-8 0))) e-11))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-5 (car arg-2))) (let ((e-8 (vector-ref e-5 0))) e-8)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-5 (car arg-2))) (let ((e-8 (vector-ref e-5 0))) e-8)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-5 (car arg-2))) e-5) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-5 (car arg-2))) e-5) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-2 arg-12953)))) 4 4 (lambda () u--msg)) (lambda (_-10507) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-5 (car arg-2))) (let ((e-8 (vector-ref e-5 0))) (let ((e-11 (vector-ref e-8 0))) e-11))) (lambda (eta-0) (DataC-45String-trim eta-0)) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-2 (lambda (eta-0) (PreludeC-45IO-prim__getStr eta-0)))))) (lambda (_-0) (cond ((equal? _-0 "yes") (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-5 (car arg-2))) (let ((e-8 (vector-ref e-5 0))) e-8)) (vector e-1 e-2 e-3)))(else (let ((e-5 (car arg-2))) (let ((e-8 (vector-ref e-5 0))) (let ((e-10 (vector-ref e-8 1))) ((e-10 'erased) (vector 0 (vector 35 ))))))))))))))))))))
(define PackC-45RunnerC-45Database-notPack (lambda (arg-2 arg-3 arg-4) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) (PackC-45RunnerC-45Database-safe arg-2 arg-3 arg-4) (lambda (_-0) (let ((e-1 (vector-ref _-0 0))) (let ((e-2 (vector-ref _-0 1))) (let ((e-3 (vector-ref _-0 2))) (let ((e-14 (vector-ref e-1 14))) (if (null? e-14) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-29 (car arg-2))) (let ((e-32 (vector-ref e-29 0))) e-32)) (vector e-1 e-2 e-3)) (let ((e-28 (unbox e-14))) (cond ((equal? e-28 "pack") (let ((e-30 (car arg-2))) (let ((e-33 (vector-ref e-30 0))) (let ((e-35 (vector-ref e-33 1))) ((e-35 'erased) (vector 0 (vector 34 )))))))(else (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-30 (car arg-2))) (let ((e-33 (vector-ref e-30 0))) e-33)) (vector e-1 e-2 e-3))))))))))))))
(define PackC-45RunnerC-45Database-safeApp (lambda (arg-2 arg-3 arg-4) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) (lambda (eta-0) (let ((e-1 (vector-ref arg-4 0))) (let ((e-2 (vector-ref arg-4 1))) (let ((e-4 (vector-ref arg-4 3))) (let ((e-5 (vector-ref arg-4 4))) (let ((e-6 (vector-ref arg-4 5))) (vector e-1 e-2 eta-0 e-4 e-5 e-6))))))) (PackC-45RunnerC-45Database-notPack arg-2 arg-3 (let ((e-3 (vector-ref arg-4 2))) e-3)))))
(define PackC-45RunnerC-45Database-safeLib (lambda (arg-2 arg-3 arg-4) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) (lambda (eta-0) (let ((e-1 (vector-ref arg-4 0))) (let ((e-2 (vector-ref arg-4 1))) (let ((e-4 (vector-ref arg-4 3))) (let ((e-5 (vector-ref arg-4 4))) (vector e-1 e-2 eta-0 e-4 e-5)))))) (PackC-45RunnerC-45Database-safe arg-2 arg-3 (let ((e-3 (vector-ref arg-4 2))) e-3)))))
(define PackC-45RunnerC-45Database-checkLOA (lambda (arg-1 arg-2 arg-3) (case (vector-ref arg-3 0) ((0) (let ((e-2 (vector-ref arg-3 1))) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) (let ((e-9 (vector-ref e-6 0))) e-9))) (lambda (eta-0) (vector 0 eta-0)) (PackC-45RunnerC-45Database-safeLib arg-1 arg-2 e-2)))) (else (let ((e-5 (vector-ref arg-3 1))) (let ((e-6 (vector-ref arg-3 2))) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-7 (vector-ref e-1 0))) (let ((e-10 (vector-ref e-7 0))) e-10))) (lambda (eta-0) (vector 1 e-5 eta-0)) (PackC-45RunnerC-45Database-safeApp arg-1 arg-2 e-6))))))))
(define PackC-45RunnerC-45Database-appNeedsInstalling (lambda (arg-1 arg-2) (cond ((equal? arg-2 0) 1) ((equal? arg-2 1) arg-1) ((equal? arg-2 3) 1) (else 0))))
(define PackC-45RunnerC-45Database-pkgNeedsInstalling (lambda (arg-1 arg-2) (case (vector-ref arg-2 0) ((0) 1) ((1) (let ((e-2 (vector-ref arg-2 1))) (cond ((equal? e-2 1) 0) (else (let ((e-14 (vector-ref arg-1 12))) e-14))))) (else 1))))
(define PackC-45RunnerC-45Database-needsInstalling (lambda (arg-2 arg-3) (case (vector-ref arg-3 0) ((0) (let ((e-2 (vector-ref arg-3 1))) (PackC-45RunnerC-45Database-pkgNeedsInstalling arg-2 (let ((e-4 (vector-ref e-2 3))) e-4)))) (else (let ((e-5 (vector-ref arg-3 1))) (let ((e-6 (vector-ref arg-3 2))) (PackC-45RunnerC-45Database-appNeedsInstalling e-5 (let ((e-4 (vector-ref e-6 3))) e-4))))))))
(define PackC-45RunnerC-45Database-showPlan (lambda (ext-0) (DataC-45String-fastUnlines (PreludeC-45TypesC-45List-mapAppend '() (lambda (lamc-0) (let ((e-2 (car lamc-0))) (let ((e-3 (cdr lamc-0))) (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons (if (null? e-2) "library" "app") (cons " " (cons e-3 '()))))))) ext-0))))
(define PreludeC-45EqOrd-u--C-61C-61_Eq_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (lambda (arg-2 arg-3 arg-4 arg-5) (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) (let ((e-6 (car arg-5))) (let ((e-7 (cdr arg-5))) (let ((sc2 (let ((e-1 (car arg-2))) ((e-1 e-2) e-6)))) (cond ((equal? sc2 1) (let ((e-1 (car arg-3))) ((e-1 e-3) e-7))) (else 0)))))))))
(define PreludeC-45EqOrd-u--C-47C-61_Eq_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (lambda (arg-2 arg-3 arg-4 arg-5) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 arg-2 arg-3 arg-4 arg-5))) (cond ((equal? sc0 1) 0) (else 1)))))
(define PreludeC-45EqOrd-u--C-60C-61_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (lambda (arg-2 arg-3 arg-4 arg-5) (PreludeC-45EqOrd-u--C-47C-61_Eq_Ordering (PreludeC-45EqOrd-u--compare_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 arg-2 arg-3 arg-4 arg-5) 2)))
(define PreludeC-45EqOrd-u--C-62C-61_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (lambda (arg-2 arg-3 arg-4 arg-5) (PreludeC-45EqOrd-u--C-47C-61_Eq_Ordering (PreludeC-45EqOrd-u--compare_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 arg-2 arg-3 arg-4 arg-5) 0)))
(define PackC-45DatabaseC-45TypesC-45ResolveApp-dependencies (lambda (arg-1) (PackC-45CoreC-45Types-dependencies (let ((e-3 (vector-ref arg-1 2))) e-3))))
(define PackC-45DatabaseC-45TypesC-45ResolvedLib-dependencies (lambda (arg-1) (PackC-45CoreC-45Types-dependencies (let ((e-3 (vector-ref arg-1 2))) e-3))))
(define PackC-45DatabaseC-45TypesC-45LibOrApp-dependencies (lambda (arg-2) (case (vector-ref arg-2 0) ((0) (let ((e-2 (vector-ref arg-2 1))) (PackC-45DatabaseC-45TypesC-45ResolvedLib-dependencies e-2))) (else (let ((e-6 (vector-ref arg-2 2))) (PackC-45DatabaseC-45TypesC-45ResolveApp-dependencies e-6))))))
(define PackC-45RunnerC-45Database-resolveAny (lambda (arg-1 arg-2 arg-3 arg-4) (if (null? arg-3) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) (lambda (eta-0) (vector 0 eta-0)) (PackC-45RunnerC-45Database-resolveLib arg-1 arg-2 arg-4)) (let ((e-0 (unbox arg-3))) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) (lambda (eta-0) (vector 1 e-0 eta-0)) (PackC-45RunnerC-45Database-resolveApp arg-1 arg-2 arg-4))))))
(define PackC-45RunnerC-45Database-n--10781-9607-u--go (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (if (null? arg-6) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (PreludeC-45TypesC-45SnocList-C-60C-62C-62 arg-5 '())) (let ((e-2 (car arg-6))) (let ((e-3 (cdr arg-6))) (case (vector-ref e-2 0) ((0) (let ((e-6 (vector-ref e-2 1))) (case (vector-ref e-6 0) ((0) (let ((e-12 (vector-ref e-6 1))) (PackC-45RunnerC-45Database-n--10781-9607-u--go arg-1 arg-2 arg-3 (DataC-45SortedMap-insert (cons '() (let ((e-8 (vector-ref e-12 1))) e-8)) (vector 0 ) arg-4) (cons arg-5 (vector 0 e-12)) e-3))) (else (let ((e-15 (vector-ref e-6 1))) (let ((e-16 (vector-ref e-6 2))) (PackC-45RunnerC-45Database-n--10781-9607-u--go arg-1 arg-2 arg-3 (DataC-45SortedMap-insert (cons (box e-15) (let ((e-9 (vector-ref e-16 1))) e-9)) (vector 0 ) arg-4) (cons arg-5 (vector 1 e-15 e-16)) e-3))))))) (else (let ((e-9 (vector-ref e-2 1))) (let ((sc2 (DataC-45SortedMap-lookup e-9 arg-4))) (if (null? sc2) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45RunnerC-45Database-resolveAny arg-1 arg-2 (Builtin-fst e-9) (Builtin-snd e-9)) (lambda (u--loa) (let ((u--deps (PreludeC-45TypesC-45List-mapAppend '() (lambda (u--d) (vector 1 (cons '() u--d))) (PackC-45DatabaseC-45TypesC-45LibOrApp-dependencies u--loa)))) (PackC-45RunnerC-45Database-n--10781-9607-u--go arg-1 arg-2 arg-3 arg-4 arg-5 (PreludeC-45TypesC-45List-tailRecAppend u--deps (cons (vector 0 u--loa) e-3)))))) (PackC-45RunnerC-45Database-n--10781-9607-u--go arg-1 arg-2 arg-3 arg-4 arg-5 e-3)))))))))))
(define PackC-45RunnerC-45Database-transitiveDeps (lambda (arg-1 arg-2 arg-3) (PackC-45RunnerC-45Database-n--10781-9607-u--go arg-1 arg-2 arg-3 (DataC-45SortedMap-empty (vector (cons (lambda (arg-534) (lambda (arg-537) (PreludeC-45EqOrd-u--C-61C-61_Eq_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 csegen-285 csegen-289 arg-534 arg-537))) (lambda (arg-544) (lambda (arg-547) (PreludeC-45EqOrd-u--C-47C-61_Eq_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 csegen-285 csegen-289 arg-544 arg-547)))) (lambda (arg-1424) (lambda (arg-1427) (PreludeC-45EqOrd-u--compare_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 csegen-300 csegen-309 arg-1424 arg-1427))) (lambda (arg-1434) (lambda (arg-1437) (PreludeC-45EqOrd-u--C-60_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 csegen-300 csegen-309 arg-1434 arg-1437))) (lambda (arg-1444) (lambda (arg-1447) (PreludeC-45EqOrd-u--C-62_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 csegen-300 csegen-309 arg-1444 arg-1447))) (lambda (arg-1454) (lambda (arg-1457) (PreludeC-45EqOrd-u--C-60C-61_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 csegen-300 csegen-309 arg-1454 arg-1457))) (lambda (arg-1464) (lambda (arg-1467) (PreludeC-45EqOrd-u--C-62C-61_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 csegen-300 csegen-309 arg-1464 arg-1467))) (lambda (arg-1474) (lambda (arg-1477) (PreludeC-45EqOrd-u--max_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 csegen-300 csegen-309 arg-1474 arg-1477))) (lambda (arg-1484) (lambda (arg-1487) (PreludeC-45EqOrd-u--min_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 csegen-300 csegen-309 arg-1484 arg-1487))))) '() (PreludeC-45TypesC-45List-mapAppend '() (lambda (eta-0) (vector 1 eta-0)) arg-3))))
(define PackC-45RunnerC-45Database-plan (lambda (arg-1 arg-2 arg-3) (let ((u--psC-39 (cons (cons '() "prelude") (cons (cons '() "base") arg-3)))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45Logging-log (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (let ((e-2 (vector-ref arg-2 2))) (let ((e-23 (vector-ref e-2 21))) e-23)) 0 (lambda () (PreludeC-45Types-u--foldMap_Foldable_List csegen-203 (lambda (eta-0) eta-0) (cons "Building plan for the following libraries: \u000a " (cons (PackC-45RunnerC-45Database-showPlan arg-3) '()))))) (lambda (_-10507) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) (lambda (eta-0) (PreludeC-45TypesC-45List-filterAppend '() (lambda (eta-1) (PackC-45RunnerC-45Database-needsInstalling (let ((e-2 (vector-ref arg-2 2))) e-2) eta-1)) eta-0)) (PackC-45RunnerC-45Database-transitiveDeps arg-1 arg-2 u--psC-39)) (lambda (u--loas) (PreludeC-45Types-u--traverse_Traversable_List (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (eta-0) (PackC-45RunnerC-45Database-checkLOA arg-1 arg-2 eta-0)) u--loas))))))))
(define PackC-45RunnerC-45Install-install (lambda (arg-1 arg-2 arg-3) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45RunnerC-45Database-plan arg-1 (let ((e-0 (car arg-2))) e-0) (PreludeC-45TypesC-45List-tailRecAppend (PreludeC-45TypesC-45List-tailRecAppend (PackC-45RunnerC-45Install-katla (let ((e-0 (car arg-2))) (let ((e-2 (vector-ref e-0 2))) e-2))) (PackC-45RunnerC-45Install-autoPairs (let ((e-0 (car arg-2))) (let ((e-2 (vector-ref e-0 2))) e-2)))) arg-3)) (lambda (u--all) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45Logging-logMany (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (let ((e-0 (car arg-2))) (let ((e-2 (vector-ref e-0 2))) (let ((e-23 (vector-ref e-2 21))) e-23))) 0 2 (lambda () "Installing libraries:") (lambda () (PackC-45RunnerC-45Install-libInfo u--all))) (lambda (_-10507) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45Logging-logMany (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (let ((e-0 (car arg-2))) (let ((e-2 (vector-ref e-0 2))) (let ((e-23 (vector-ref e-2 21))) e-23))) 0 2 (lambda () "Installing apps:") (lambda () (PackC-45RunnerC-45Install-appInfo u--all))) (lambda (_-10508) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PreludeC-45Interfaces-for_ (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) csegen-197 u--all (lambda (lcase-0) (case (vector-ref lcase-0 0) ((0) (let ((e-2 (vector-ref lcase-0 1))) (PackC-45RunnerC-45Install-installLib arg-1 arg-2 e-2))) (else (let ((e-5 (vector-ref lcase-0 1))) (let ((e-6 (vector-ref lcase-0 2))) (PackC-45RunnerC-45Install-installApp arg-1 arg-2 e-5 e-6))))))) (lambda (_-10509) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (let ((e-0 (car arg-2))) (let ((e-2 (vector-ref e-0 2))) (let ((e-14 (vector-ref e-2 12))) e-14))) (lambda () (PreludeC-45Interfaces-for_ (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) csegen-197 u--all (lambda (lcase-0) (case (vector-ref lcase-0 0) ((0) (let ((e-2 (vector-ref lcase-0 1))) (PackC-45RunnerC-45Install-installDocs arg-1 arg-2 e-2))) (else (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-7 (vector-ref e-1 0))) e-7)) (vector 0 ))))))))))))))))))
(define PackC-45RunnerC-45Install-installDeps (lambda (arg-1 arg-2 ext-0) (PackC-45RunnerC-45Install-install arg-1 arg-2 (PreludeC-45TypesC-45List-mapAppend '() (lambda (__infixTupleSection-0) (cons '() __infixTupleSection-0)) (PackC-45CoreC-45Types-dependencies ext-0)))))
(define PackC-45CoreC-45IO-rmFile (lambda (arg-1 arg-2) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (SystemC-45FileC-45Meta-exists (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 (let ((e-1 (car arg-2))) (let ((e-2 (cdr arg-2))) (DataC-45FilePath-C-60C-47C-62 e-1 (vector 1 (cons '() e-2))))))) (lambda (bind-0) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) bind-0 (lambda () (PackC-45CoreC-45IO-sys arg-1 (vector 1 (lambda (eta-0) (vector 0 eta-0)) "rm" (vector 1 csegen-204 arg-2 (vector 0 ))))))))))
(define PackC-45CoreC-45IO-link (lambda (arg-1 arg-2 arg-3) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-rmFile arg-1 arg-3) (lambda (_-10507) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-mkDir arg-1 (let ((e-1 (car arg-3))) e-1)) (lambda (_-10508) (PackC-45CoreC-45IO-sys arg-1 (vector 1 (lambda (eta-0) (vector 0 eta-0)) "ln" (vector 1 (lambda (eta-0) (vector 0 eta-0)) "-s" (vector 1 csegen-249 arg-2 (vector 1 csegen-204 arg-3 (vector 0 ))))))))))))
(define PackC-45RunnerC-45Database-parseLibIpkg (lambda (arg-1 arg-2 arg-3 arg-4) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45Ipkg-parseIpkgFile arg-1 arg-3 arg-4) (lambda (eta-0) (PackC-45RunnerC-45Database-safe arg-1 arg-2 eta-0)))))
(define PackC-45RunnerC-45Install-update (lambda (arg-1 arg-2) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45Logging-log (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (let ((e-0 (car arg-2))) (let ((e-2 (vector-ref e-0 2))) (let ((e-23 (vector-ref e-2 21))) e-23))) 2 (lambda () "Updating pack. If this fails, try switching to the latest package collection.")) (lambda (_-10507) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PreludeC-45Types-maybe (lambda () (PackC-45CoreC-45Git-gitLatest arg-1 (DataC-45Maybe-fromMaybe (lambda () PackC-45CoreC-45GitC-45Consts-defaultPackRepo) (let ((e-0 (car arg-2))) (let ((e-2 (vector-ref e-0 2))) (let ((e-29 (vector-ref e-2 3))) e-29)))) "main")) (lambda () (lambda (eta-0) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) eta-0))) (let ((e-0 (car arg-2))) (let ((e-2 (vector-ref e-0 2))) (let ((e-28 (vector-ref e-2 4))) e-28)))) (lambda (u--commit) (PackC-45CoreC-45Git-withGit arg-1 (let ((e-0 (car arg-2))) (let ((e-6 (vector-ref e-0 1))) e-6)) (let ((e-0 (car arg-2))) (let ((e-7 (vector-ref e-0 0))) e-7)) "pack" (DataC-45Maybe-fromMaybe (lambda () PackC-45CoreC-45GitC-45Consts-defaultPackRepo) (let ((e-0 (car arg-2))) (let ((e-2 (vector-ref e-0 2))) (let ((e-29 (vector-ref e-2 3))) e-29)))) u--commit (lambda (u--dir) (let ((u--ipkg (cons u--dir (cons #\p (cons #\a (cons #\c (cons #\k csegen-242))))))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45RunnerC-45Database-parseLibIpkg arg-1 (let ((e-0 (car arg-2))) e-0) u--ipkg u--ipkg) (lambda (u--d) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45RunnerC-45Install-installDeps arg-1 arg-2 u--d) (lambda (_-10508) ((let ((u--installDir (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-0 (car arg-2))) (let ((e-7 (vector-ref e-0 0))) e-7)) csegen-213) csegen-248) (PackC-45CoreC-45Types-toRelPath u--commit)))) (let ((u--installedExec (DataC-45FilePath-C-60C-47C-62 u--installDir csegen-248))) (lambda () (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (SystemC-45FileC-45Meta-exists (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8743) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8743))))) (lambda (u--a) (lambda (arg-9789) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9789))) (lambda (u--b) (lambda (u--a) (lambda (arg-9795) (lambda (arg-9802) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9795 arg-9802)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-10269) (lambda (arg-10272) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10269 arg-10272))))) (lambda (u--a) (lambda (arg-10283) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-10283)))) (lambda (u--a) (lambda (arg-12953) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-12953)))) (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 u--installedExec)) (lambda (u--ex) (cond ((equal? u--ex 1) (PackC-45CoreC-45IO-link arg-1 u--installedExec (PackC-45ConfigC-45Environment-packExec (let ((e-0 (car arg-2))) (let ((e-7 (vector-ref e-0 0))) e-7))))) (else (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45RunnerC-45Install-libPkg arg-1 arg-2 '() 1 1 csegen-232 u--d) (lambda (_-10509) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-mkDir arg-1 u--installDir) (lambda (_-10510) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-sys arg-1 (vector 1 (lambda (eta-0) (vector 0 eta-0)) "cp" (vector 1 (lambda (eta-0) (vector 0 eta-0)) "-r" (vector 1 (lambda (eta-0) eta-0) (vector 1 "build/exec/*") (vector 1 csegen-249 u--installDir (vector 0 )))))) (lambda (_-10511) (PackC-45CoreC-45IO-link arg-1 u--installedExec (PackC-45ConfigC-45Environment-packExec (let ((e-0 (car arg-2))) (let ((e-7 (vector-ref e-0 0))) e-7)))))))))))))))))))))))))))))))
(define MicroPack-main (lambda (ext-0) (PackC-45CoreC-45IO-run (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 csegen-56 (PackC-45ConfigC-45Environment-getPackDir csegen-57) (lambda (u--dir) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 csegen-56 (PackC-45CoreC-45IO-mkTmpDir csegen-57 u--dir) (lambda (u--td) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 csegen-56 (PackC-45ConfigC-45Types-emptyCache csegen-76) (lambda (u--cache) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 csegen-56 (PackC-45CoreC-45IO-mkDir csegen-57 u--dir) (lambda (_-10507) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 csegen-56 (PackC-45ConfigC-45Environment-defaultColl csegen-57 u--td u--dir) (lambda (u--defCol) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 csegen-56 (System-getArgs csegen-76) (lambda (u--args) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 csegen-56 (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (lambda (eta-4) (PreludeC-45IO-u--map_Functor_IO eta-2 eta-3 eta-4)))))) (lambda (eta-0) (DataC-45Maybe-fromMaybe (lambda () "scheme") eta-0)) (System-getEnv csegen-76 "SCHEME")) (lambda (u--scheme) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 csegen-56 (PackC-45ConfigC-45Environment-getLineBufferingCmd csegen-76) (lambda (u--linebuf) (let ((u--db (if (null? u--args) u--defCol (let ((e-2 (cdr u--args))) (if (null? e-2) u--defCol (let ((e-4 (car e-2))) (let ((e-5 (cdr e-2))) (if (null? e-5) (PreludeC-45Types-either (lambda () (lambda (eta-0) u--defCol)) (lambda () (lambda (eta-0) eta-0)) (PackC-45CoreC-45Types-readDBName e-4)) u--defCol)))))))) (let ((u--conf (MicroPack-microInit u--scheme u--db))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 csegen-56 (PackC-45CoreC-45IO-write csegen-57 (cons (DataC-45FilePath-C-60C-47C-62 u--dir (vector 1 (cons '() (cons #\u (cons #\s (cons #\e (cons #\r '()))))))) PackC-45ConfigC-45Environment-packToml) (PackC-45ConfigC-45TOML-initToml u--scheme u--db)) (lambda (_-10508) (PackC-45CoreC-45IO-finally csegen-56 (PackC-45CoreC-45IO-rmDir csegen-57 u--td) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 csegen-56 (PackC-45RunnerC-45Install-idrisEnv csegen-57 u--dir u--td u--cache u--linebuf u--conf 1) (lambda (eta-0) (PackC-45RunnerC-45Install-update csegen-57 eta-0)))))))))))))))))))))))) ext-0)))
(define PreludeC-45EqOrd-compareInteger (lambda (ext-0 ext-1) (PreludeC-45EqOrd-u--compare_Ord_Integer ext-0 ext-1)))
(void (PrimIO-unsafePerformIO (lambda (eta-0) (MicroPack-main eta-0))))
)
(collect-garbage)