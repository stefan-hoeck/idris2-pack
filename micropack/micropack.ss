#!/usr/bin/chez --program

;; @generated by Idris 0.5.1-23e3695d7, Chez backend
(import (chezscheme))
(case (machine-type)
  [(i3fb ti3fb a6fb ta6fb) #f]
  [(i3le ti3le a6le ta6le tarm64le) (load-shared-object "libc.so.6")]
  [(i3osx ti3osx a6osx ta6osx tarm64osx) (load-shared-object "libc.dylib")]
  [(i3nt ti3nt a6nt ta6nt) (load-shared-object "msvcrt.dll")]
  [else (load-shared-object "libc.so")])

(let ()
(define (blodwen-os)
  (case (machine-type)
    [(i3le ti3le a6le ta6le) "unix"]  ; GNU/Linux
    [(i3ob ti3ob a6ob ta6ob) "unix"]  ; OpenBSD
    [(i3fb ti3fb a6fb ta6fb) "unix"]  ; FreeBSD
    [(i3nb ti3nb a6nb ta6nb) "unix"]  ; NetBSD
    [(i3osx ti3osx a6osx ta6osx tarm64osx) "darwin"]
    [(i3nt ti3nt a6nt ta6nt) "windows"]
    [else "unknown"]))

(define blodwen-lazy
  (lambda (f)
    (let ([evaluated #f] [res void])
      (lambda ()
        (if (not evaluated)
            (begin (set! evaluated #t)
                   (set! res (f))
                   (set! f void))
            (void))
        res))))

(define (blodwen-toSignedInt x bits)
  (if (logbit? bits x)
      (logor x (ash -1 bits))
      (logand x (sub1 (ash 1 bits)))))

(define (blodwen-toUnsignedInt x bits)
  (logand x (sub1 (ash 1 bits))))

(define (blodwen-euclidDiv a b)
  (let ((q (quotient a b))
        (r (remainder a b)))
    (if (< r 0)
      (if (> b 0) (- q 1) (+ q 1))
      q)))

(define (blodwen-euclidMod a b)
  (let ((r (remainder a b)))
    (if (< r 0)
      (if (> b 0) (+ r b) (- r b))
      r)))

(define bu+ (lambda (x y bits) (blodwen-toUnsignedInt (+ x y) bits)))
(define bu- (lambda (x y bits) (blodwen-toUnsignedInt (- x y) bits)))
(define bu* (lambda (x y bits) (blodwen-toUnsignedInt (* x y) bits)))
(define bu/ (lambda (x y bits) (blodwen-toUnsignedInt (quotient x y) bits)))

(define bs+ (lambda (x y bits) (blodwen-toSignedInt (+ x y) bits)))
(define bs- (lambda (x y bits) (blodwen-toSignedInt (- x y) bits)))
(define bs* (lambda (x y bits) (blodwen-toSignedInt (* x y) bits)))
(define bs/ (lambda (x y bits) (blodwen-toSignedInt (blodwen-euclidDiv x y) bits)))

(define (integer->bits8 x) (logand x (sub1 (ash 1 8))))
(define (integer->bits16 x) (logand x (sub1 (ash 1 16))))
(define (integer->bits32 x) (logand x (sub1 (ash 1 32))))
(define (integer->bits64 x) (logand x (sub1 (ash 1 64))))

(define (bits16->bits8 x) (logand x (sub1 (ash 1 8))))
(define (bits32->bits8 x) (logand x (sub1 (ash 1 8))))
(define (bits64->bits8 x) (logand x (sub1 (ash 1 8))))
(define (bits32->bits16 x) (logand x (sub1 (ash 1 16))))
(define (bits64->bits16 x) (logand x (sub1 (ash 1 16))))
(define (bits64->bits32 x) (logand x (sub1 (ash 1 32))))

(define (blodwen-bits-shl-signed x y bits) (blodwen-toSignedInt (ash x y) bits))

(define (blodwen-bits-shl x y bits) (logand (ash x y) (sub1 (ash 1 bits))))

(define blodwen-shl (lambda (x y) (ash x y)))
(define blodwen-shr (lambda (x y) (ash x (- y))))
(define blodwen-and (lambda (x y) (logand x y)))
(define blodwen-or (lambda (x y) (logor x y)))
(define blodwen-xor (lambda (x y) (logxor x y)))

(define cast-num
  (lambda (x)
    (if (number? x) x 0)))
(define destroy-prefix
  (lambda (x)
    (cond
      ((equal? x "") "")
      ((equal? (string-ref x 0) #\#) "")
      (else x))))

(define exact-floor
  (lambda (x)
    (inexact->exact (floor x))))

(define exact-truncate
  (lambda (x)
    (inexact->exact (truncate x))))

(define exact-truncate-boundedInt
  (lambda (x y)
    (blodwen-toSignedInt (exact-truncate x) y)))

(define exact-truncate-boundedUInt
  (lambda (x y)
    (blodwen-toUnsignedInt (exact-truncate x) y)))

(define cast-char-boundedInt
  (lambda (x y)
    (blodwen-toSignedInt (char->integer x) y)))

(define cast-char-boundedUInt
  (lambda (x y)
    (blodwen-toUnsignedInt (char->integer x) y)))

(define cast-string-int
  (lambda (x)
    (exact-truncate (cast-num (string->number (destroy-prefix x))))))

(define cast-string-boundedInt
  (lambda (x y)
    (blodwen-toSignedInt (cast-string-int x) y)))

(define cast-string-boundedUInt
  (lambda (x y)
    (blodwen-toUnsignedInt (cast-string-int x) y)))

(define cast-int-char
  (lambda (x)
    (if (or
          (and (>= x 0) (<= x #xd7ff))
          (and (>= x #xe000) (<= x #x10ffff)))
        (integer->char x)
        (integer->char 0))))

(define cast-string-double
  (lambda (x)
    (exact->inexact (cast-num (string->number (destroy-prefix x))))))


(define (string-concat xs) (apply string-append xs))
(define (string-unpack s) (string->list s))
(define (string-pack xs) (list->string xs))

(define string-cons (lambda (x y) (string-append (string x) y)))
(define string-reverse (lambda (x)
  (list->string (reverse (string->list x)))))
(define (string-substr off len s)
    (let* ((l (string-length s))
          (b (max 0 off))
          (x (max 0 len))
          (end (min l (+ b x))))
          (if (> b l)
              ""
              (substring s b end))))

(define (blodwen-string-iterator-new s)
  0)

(define (blodwen-string-iterator-to-string _ s ofs f)
  (f (substring s ofs (string-length s))))

(define (blodwen-string-iterator-next s ofs)
  (if (>= ofs (string-length s))
      '() ; EOF
      (cons (string-ref s ofs) (+ ofs 1))))

(define either-left
  (lambda (x)
    (vector 0 x)))

(define either-right
  (lambda (x)
    (vector 1 x)))

(define blodwen-error-quit
  (lambda (msg)
    (display msg)
    (newline)
    (exit 1)))

(define (blodwen-get-line p)
    (if (port? p)
        (let ((str (get-line p)))
            (if (eof-object? str)
                ""
                str))
        void))

(define (blodwen-get-char p)
    (if (port? p)
        (let ((chr (get-char p)))
            (if (eof-object? chr)
                #\nul
                chr))
        void))

;; Buffers

(define (blodwen-new-buffer size)
  (make-bytevector size 0))

(define (blodwen-buffer-size buf)
  (bytevector-length buf))

(define (blodwen-buffer-setbyte buf loc val)
  (bytevector-u8-set! buf loc val))

(define (blodwen-buffer-getbyte buf loc)
  (bytevector-u8-ref buf loc))

(define (blodwen-buffer-setbits16 buf loc val)
  (bytevector-u16-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getbits16 buf loc)
  (bytevector-u16-ref buf loc (native-endianness)))

(define (blodwen-buffer-setbits32 buf loc val)
  (bytevector-u32-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getbits32 buf loc)
  (bytevector-u32-ref buf loc (native-endianness)))

(define (blodwen-buffer-setbits64 buf loc val)
  (bytevector-u64-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getbits64 buf loc)
  (bytevector-u64-ref buf loc (native-endianness)))

(define (blodwen-buffer-setint32 buf loc val)
  (bytevector-s32-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getint32 buf loc)
  (bytevector-s32-ref buf loc (native-endianness)))

(define (blodwen-buffer-setint buf loc val)
  (bytevector-s64-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getint buf loc)
  (bytevector-s64-ref buf loc (native-endianness)))

(define (blodwen-buffer-setdouble buf loc val)
  (bytevector-ieee-double-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getdouble buf loc)
  (bytevector-ieee-double-ref buf loc (native-endianness)))

(define (blodwen-stringbytelen str)
  (bytevector-length (string->utf8 str)))

(define (blodwen-buffer-setstring buf loc val)
  (let* [(strvec (string->utf8 val))
         (len (bytevector-length strvec))]
    (bytevector-copy! strvec 0 buf loc len)))

(define (blodwen-buffer-getstring buf loc len)
  (let [(newvec (make-bytevector len))]
    (bytevector-copy! buf loc newvec 0 len)
    (utf8->string newvec)))

(define (blodwen-buffer-copydata buf start len dest loc)
  (bytevector-copy! buf start dest loc len))

;; Threads

(define-record thread-handle (semaphore))

(define (blodwen-thread proc)
  (let [(sema (blodwen-make-semaphore 0))]
    (fork-thread (lambda () (proc (vector 0)) (blodwen-semaphore-post sema)))
    (make-thread-handle sema)
    ))

(define (blodwen-thread-wait handle)
  (blodwen-semaphore-wait (thread-handle-semaphore handle)))

;; Thread mailboxes

(define blodwen-thread-data
  (make-thread-parameter #f))

(define (blodwen-get-thread-data ty)
  (blodwen-thread-data))

(define (blodwen-set-thread-data ty a)
  (blodwen-thread-data a))

;; Semaphore

(define-record semaphore (box mutex condition))

(define (blodwen-make-semaphore init)
  (make-semaphore (box init) (make-mutex) (make-condition)))

(define (blodwen-semaphore-post sema)
  (with-mutex (semaphore-mutex sema)
    (let [(sema-box (semaphore-box sema))]
      (set-box! sema-box (+ (unbox sema-box) 1))
      (condition-signal (semaphore-condition sema))
    )))

(define (blodwen-semaphore-wait sema)
  (with-mutex (semaphore-mutex sema)
    (let [(sema-box (semaphore-box sema))]
      (when (= (unbox sema-box) 0)
        (condition-wait (semaphore-condition sema) (semaphore-mutex sema)))
      (set-box! sema-box (- (unbox sema-box) 1))
      )))

;; Barrier

(define-record barrier (count-box num-threads mutex cond))

(define (blodwen-make-barrier num-threads)
  (make-barrier (box 0) num-threads (make-mutex) (make-condition)))

(define (blodwen-barrier-wait barrier)
  (let [(count-box (barrier-count-box barrier))
        (num-threads (barrier-num-threads barrier))
        (mutex (barrier-mutex barrier))
        (condition (barrier-cond barrier))]
    (with-mutex mutex
    (let* [(count-old (unbox count-box))
           (count-new (+ count-old 1))]
      (set-box! count-box count-new)
      (if (= count-new num-threads)
          (condition-broadcast condition)
          (condition-wait condition mutex))
      ))))

;; Channel
; With thanks to Alain Zscheile (@zseri) for help with understanding condition
; variables, and figuring out where the problems were and how to solve them.

(define-record channel (read-mut read-cv read-box val-cv val-box))

(define (blodwen-make-channel ty)
  (make-channel
    (make-mutex)
    (make-condition)
    (box #t)
    (make-condition)
    (box '())
    ))

; block on the read status using read-cv until the value has been read
(define (channel-put-while-helper chan)
  (let ([read-mut (channel-read-mut chan)]
        [read-box (channel-read-box chan)]
        [read-cv  (channel-read-cv  chan)]
        )
    (if (unbox read-box)
      (void)    ; val has been read, so everything is fine
      (begin    ; otherwise, block/spin with cv
        (condition-wait read-cv read-mut)
        (channel-put-while-helper chan)
        )
      )))

(define (blodwen-channel-put ty chan val)
  (with-mutex (channel-read-mut chan)
    (channel-put-while-helper chan)
    (let ([read-box (channel-read-box chan)]
          [val-box  (channel-val-box  chan)]
          )
      (set-box! val-box val)
      (set-box! read-box #f)
      ))
  (condition-signal (channel-val-cv chan))
  )

; block on the value until it has been set
(define (channel-get-while-helper chan)
  (let ([read-mut (channel-read-mut chan)]
        [read-box (channel-read-box chan)]
        [val-cv   (channel-val-cv   chan)]
        )
    (if (unbox read-box)
      (begin
        (condition-wait val-cv read-mut)
        (channel-get-while-helper chan)
        )
      (void)
      )))

(define (blodwen-channel-get ty chan)
  (mutex-acquire (channel-read-mut chan))
  (channel-get-while-helper chan)
  (let* ([val-box  (channel-val-box  chan)]
         [read-box (channel-read-box chan)]
         [read-cv  (channel-read-cv  chan)]
         [the-val  (unbox val-box)]
         )
    (set-box! val-box '())
    (set-box! read-box #t)
    (mutex-release (channel-read-mut chan))
    (condition-signal read-cv)
    the-val))

;; Mutex

(define (blodwen-make-mutex)
  (make-mutex))
(define (blodwen-mutex-acquire mutex)
  (mutex-acquire mutex))
(define (blodwen-mutex-release mutex)
  (mutex-release mutex))

;; Condition variable

(define (blodwen-make-condition)
  (make-condition))
(define (blodwen-condition-wait condition mutex)
  (condition-wait condition mutex))
(define (blodwen-condition-wait-timeout condition mutex timeout)
  (let* [(sec (div timeout 1000000))
         (micro (mod timeout 1000000))]
    (condition-wait condition mutex (make-time 'time-duration (* 1000 micro) sec))))
(define (blodwen-condition-signal condition)
  (condition-signal condition))
(define (blodwen-condition-broadcast condition)
  (condition-broadcast condition))

;; Future

(define-record future-internal (result ready mutex signal))
(define (blodwen-make-future work)
  (let ([future (make-future-internal #f #f (make-mutex) (make-condition))])
    (fork-thread (lambda ()
      (let ([result (work)])
        (with-mutex (future-internal-mutex future)
          (set-future-internal-result! future result)
          (set-future-internal-ready! future #t)
          (condition-broadcast (future-internal-signal future))))))
    future))
(define (blodwen-await-future ty future)
  (let ([mutex (future-internal-mutex future)])
    (with-mutex mutex
      (if (not (future-internal-ready future))
          (condition-wait (future-internal-signal future) mutex))
      (future-internal-result future))))

(define (blodwen-sleep s) (sleep (make-time 'time-duration 0 s)))
(define (blodwen-usleep s)
  (let ((sec (div s 1000000))
        (micro (mod s 1000000)))
       (sleep (make-time 'time-duration (* 1000 micro) sec))))

(define (blodwen-clock-time-utc) (current-time 'time-utc))
(define (blodwen-clock-time-monotonic) (current-time 'time-monotonic))
(define (blodwen-clock-time-duration) (current-time 'time-duration))
(define (blodwen-clock-time-process) (current-time 'time-process))
(define (blodwen-clock-time-thread) (current-time 'time-thread))
(define (blodwen-clock-time-gccpu) (current-time 'time-collector-cpu))
(define (blodwen-clock-time-gcreal) (current-time 'time-collector-real))
(define (blodwen-is-time? clk) (if (time? clk) 1 0))
(define (blodwen-clock-second time) (time-second time))
(define (blodwen-clock-nanosecond time) (time-nanosecond time))


(define (blodwen-arg-count)
  (length (command-line)))

(define (blodwen-arg n)
  (if (< n (length (command-line))) (list-ref (command-line) n) ""))

(define (blodwen-hasenv var)
  (if (eq? (getenv var) #f) 0 1))

;; Randoms
(define random-seed-register 0)
(define (initialize-random-seed-once)
  (if (= (virtual-register random-seed-register) 0)
      (let ([seed (time-nanosecond (current-time))])
        (set-virtual-register! random-seed-register seed)
        (random-seed seed))))

(define (blodwen-random-seed seed)
  (set-virtual-register! random-seed-register seed)
  (random-seed seed))
(define blodwen-random
  (case-lambda
    ;; no argument, pick a real value from [0, 1.0)
    [() (begin
          (initialize-random-seed-once)
          (random 1.0))]
    ;; single argument k, pick an integral value from [0, k)
    [(k)
      (begin
        (initialize-random-seed-once)
        (if (> k 0)
              (random k)
              (assertion-violationf 'blodwen-random "invalid range argument ~a" k)))]))

;; For finalisers

(define blodwen-finaliser (make-guardian))
(define (blodwen-register-object obj proc)
  (let [(x (cons obj proc))]
       (blodwen-finaliser x)
       x))
(define blodwen-run-finalisers
  (lambda ()
    (let run ()
      (let ([x (blodwen-finaliser)])
        (when x
          (((cdr x) (car x)) 'erased)
          (run))))))

;; For creating and reading back scheme objects

; read a scheme string and evaluate it, returning 'Just result' on success
; TODO: catch exception!
(define (blodwen-eval-scheme str)
  (guard
     (x [#t '()]) ; Nothing on failure
     (box (eval (read (open-input-string str)))))
  ); box == Just

(define (blodwen-eval-okay obj)
  (if (null? obj)
      0
      1))

(define (blodwen-get-eval-result obj)
  (unbox obj))

(define (blodwen-debug-scheme obj)
  (display obj) (newline))

(define (blodwen-is-number obj)
  (if (number? obj) 1 0))

(define (blodwen-is-integer obj)
  (if (and (number? obj) (exact? obj)) 1 0))

(define (blodwen-is-float obj)
  (if (flonum? obj) 1 0))

(define (blodwen-is-char obj)
  (if (char? obj) 1 0))

(define (blodwen-is-string obj)
  (if (string? obj) 1 0))

(define (blodwen-is-procedure obj)
  (if (procedure? obj) 1 0))

(define (blodwen-is-symbol obj)
  (if (symbol? obj) 1 0))

(define (blodwen-is-vector obj)
  (if (vector? obj) 1 0))

(define (blodwen-is-nil obj)
  (if (null? obj) 1 0))

(define (blodwen-is-pair obj)
  (if (pair? obj) 1 0))

(define (blodwen-is-box obj)
  (if (box? obj) 1 0))

(define (blodwen-make-symbol str)
  (string->symbol str))

; The below rely on checking that the objects are the right type first.

(define (blodwen-vector-ref obj i)
  (vector-ref obj i))

(define (blodwen-vector-length obj)
  (vector-length obj))

(define (blodwen-vector-list obj)
  (vector->list obj))

(define (blodwen-unbox obj)
  (unbox obj))

(define (blodwen-apply obj arg)
  (obj arg))

(define (blodwen-force obj)
  (obj))

(define (blodwen-read-symbol sym)
  (symbol->string sym))

(define (blodwen-id x) x)
(define System-prim__system (lambda (farg-0 farg-1) ((foreign-procedure "idris2_system" (string) int) farg-0)))
(define System-prim__getEnv (lambda (farg-0 farg-1) ((foreign-procedure "getenv" (string) void*) farg-0)))
(define System-prim__getArgCount (lambda (farg-0) (blodwen-arg-count )))
(define System-prim__getArg (lambda (farg-0 farg-1) (blodwen-arg farg-0)))
(define System-prim__exit (lambda (farg-0 farg-1) ((foreign-procedure "exit" (int) void) farg-0) (vector 0 )))
(define PreludeC-45Types-fastUnpack (lambda (farg-0) (string-unpack farg-0)))
(define PreludeC-45Types-fastPack (lambda (farg-0) (string-pack farg-0)))
(define PreludeC-45Types-fastConcat (lambda (farg-0) (string-concat farg-0)))
(define PreludeC-45IO-prim__putStr (lambda (farg-0 farg-1) ((foreign-procedure "idris2_putStr" (string) void) farg-0) (vector 0 )))
(define PreludeC-45IO-prim__getString (lambda (farg-0) ((foreign-procedure "idris2_getString" (void*) string) farg-0)))
(define PreludeC-45IO-prim__getStr (lambda (farg-0) ((foreign-procedure "idris2_getStr" () string) )))
(define PrimIO-prim__nullAnyPtr (lambda (farg-0) ((foreign-procedure "idris2_isNull" (void*) int) farg-0)))
(define SystemC-45FileC-45ReadWrite-prim__writeLine (lambda (farg-0 farg-1 farg-2) ((foreign-procedure "idris2_writeLine" (void* string) int) farg-0 farg-1)))
(define SystemC-45FileC-45ReadWrite-prim__seekLine (lambda (farg-0 farg-1) ((foreign-procedure "idris2_seekLine" (void*) int) farg-0)))
(define SystemC-45FileC-45ReadWrite-prim__readLine (lambda (farg-0 farg-1) ((foreign-procedure "idris2_readLine" (void*) void*) farg-0)))
(define SystemC-45FileC-45ReadWrite-prim__eof (lambda (farg-0 farg-1) ((foreign-procedure "idris2_eof" (void*) int) farg-0)))
(define SystemC-45FFI-prim__free (lambda (farg-0 farg-1) ((foreign-procedure "idris2_free" (void*) void) farg-0) (vector 0 )))
(define SystemC-45FileC-45Error-prim__fileErrno (lambda (farg-0) ((foreign-procedure "idris2_fileErrno" () int) )))
(define SystemC-45Errno-prim__strerror (lambda (farg-0 farg-1) ((foreign-procedure "idris2_strerror" (int) string) farg-0)))
(define SystemC-45Errno-prim__getErrno (lambda (farg-0) ((foreign-procedure "idris2_getErrno" () int) )))
(define SystemC-45FileC-45Handle-prim__open (lambda (farg-0 farg-1 farg-2) ((foreign-procedure "idris2_openFile" (string string) void*) farg-0 farg-1)))
(define SystemC-45FileC-45Handle-prim__close (lambda (farg-0 farg-1) ((foreign-procedure "idris2_closeFile" (void*) void) farg-0) (vector 0 )))
(define SystemC-45FileC-45Process-prim__popen (lambda (farg-0 farg-1 farg-2) ((foreign-procedure "idris2_popen" (string string) void*) farg-0 farg-1)))
(define SystemC-45FileC-45Process-prim__pclose (lambda (farg-0 farg-1) ((foreign-procedure "idris2_pclose" (void*) int) farg-0)))
(define SystemC-45Directory-prim__openDir (lambda (farg-0 farg-1) ((foreign-procedure "idris2_openDir" (string) void*) farg-0)))
(define SystemC-45Directory-prim__dirEntry (lambda (farg-0 farg-1) ((foreign-procedure "idris2_nextDirEntry" (void*) void*) farg-0)))
(define SystemC-45Directory-prim__currentDir (lambda (farg-0) ((foreign-procedure "idris2_currentDirectory" () void*) )))
(define SystemC-45Directory-prim__closeDir (lambda (farg-0 farg-1) ((foreign-procedure "idris2_closeDir" (void*) void) farg-0) (vector 0 )))
(define SystemC-45Directory-prim__changeDir (lambda (farg-0 farg-1) ((foreign-procedure "idris2_changeDir" (string) int) farg-0)))
(define csegen-2(blodwen-lazy (lambda () (cons (lambda (arg-528) (lambda (arg-531) (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-528 arg-531))) (lambda (arg-538) (lambda (arg-541) (PreludeC-45EqOrd-u--C-47C-61_Eq_Char arg-538 arg-541)))))))
(define csegen-3(blodwen-lazy (lambda () (lambda (eta-0) (lambda (eta-1) (let ((eff-0 eta-0)) (let ((eff-1 eta-1)) (PreludeC-45Types-u--C-61C-61_Eq_C-40ListC-32C-36aC-41 (csegen-2) eff-0 eff-1))))))))
(define csegen-14(blodwen-lazy (lambda () (vector (csegen-2) (lambda (arg-1418) (lambda (arg-1421) (PreludeC-45EqOrd-u--compare_Ord_Char arg-1418 arg-1421))) (lambda (arg-1428) (lambda (arg-1431) (PreludeC-45EqOrd-u--C-60_Ord_Char arg-1428 arg-1431))) (lambda (arg-1438) (lambda (arg-1441) (PreludeC-45EqOrd-u--C-62_Ord_Char arg-1438 arg-1441))) (lambda (arg-1448) (lambda (arg-1451) (PreludeC-45EqOrd-u--C-60C-61_Ord_Char arg-1448 arg-1451))) (lambda (arg-1458) (lambda (arg-1461) (PreludeC-45EqOrd-u--C-62C-61_Ord_Char arg-1458 arg-1461))) (lambda (arg-1468) (lambda (arg-1471) (PreludeC-45EqOrd-u--max_Ord_Char arg-1468 arg-1471))) (lambda (arg-1478) (lambda (arg-1481) (PreludeC-45EqOrd-u--min_Ord_Char arg-1478 arg-1481)))))))
(define csegen-15(blodwen-lazy (lambda () (lambda (eta-0) (lambda (eta-1) (let ((eff-0 eta-0)) (let ((eff-1 eta-1)) (PreludeC-45Types-u--compare_Ord_C-40ListC-32C-36aC-41 (csegen-14) eff-0 eff-1))))))))
(define csegen-27(blodwen-lazy (lambda () (cons #\p (cons #\a (cons #\c (cons #\k '())))))))
(define csegen-34(blodwen-lazy (lambda () (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (PreludeC-45IO-u--map_Functor_IO u--func arg-8737))))))))
(define csegen-38(blodwen-lazy (lambda () (vector (csegen-34) (lambda (u--a) (lambda (arg-9440) (lambda (eta-0) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (PrimIO-io_bind arg-9446 (lambda (u--fC-39) (PrimIO-io_bind arg-9453 (lambda (u--aC-39) (lambda (eta-0) (u--fC-39 u--aC-39))))))))))))))
(define csegen-44(blodwen-lazy (lambda () (vector (csegen-38) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (PrimIO-io_bind arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (PrimIO-io_bind arg-9934 (lambda (eta-0) eta-0))))))))
(define csegen-45(blodwen-lazy (lambda () (cons (csegen-44) (lambda (u--a) (lambda (arg-11999) arg-11999))))))
(define csegen-61(blodwen-lazy (lambda () (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (csegen-34) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (csegen-38) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (csegen-38) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (csegen-44) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (csegen-44) arg-9934)))))))
(define csegen-64(blodwen-lazy (lambda () (cons (csegen-61) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (csegen-45) arg-11999)))))))
(define csegen-83(blodwen-lazy (lambda () (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (PreludeC-45Types-u--map_Functor_List u--func arg-8737))))))))
(define csegen-98(blodwen-lazy (lambda () (vector (lambda (u--acc) (lambda (u--elem) (lambda (u--func) (lambda (u--init) (lambda (u--input) (PreludeC-45Types-u--foldr_Foldable_List u--func u--init u--input)))))) (lambda (u--elem) (lambda (u--acc) (lambda (u--func) (lambda (u--init) (lambda (u--input) (PreludeC-45Types-u--foldl_Foldable_List u--func u--init u--input)))))) (lambda (u--elem) (lambda (arg-10420) (PreludeC-45Types-u--null_Foldable_List arg-10420))) (lambda (u--elem) (lambda (u--acc) (lambda (u--m) (lambda (i_con-0) (lambda (u--funcM) (lambda (u--init) (lambda (u--input) (PreludeC-45Types-u--foldlM_Foldable_List i_con-0 u--funcM u--init u--input)))))))) (lambda (u--elem) (lambda (arg-10449) arg-10449)) (lambda (u--a) (lambda (u--m) (lambda (i_con-0) (lambda (u--f) (lambda (arg-10463) (PreludeC-45Types-u--foldMap_Foldable_List i_con-0 u--f arg-10463))))))))))
(define csegen-103(blodwen-lazy (lambda () (vector (csegen-83) (csegen-98) (lambda (u--b) (lambda (u--a) (lambda (u--f) (lambda (i_con-0) (lambda (arg-13115) (lambda (arg-13122) (PreludeC-45Types-u--traverse_Traversable_List i_con-0 arg-13115 arg-13122)))))))))))
(define csegen-106(blodwen-lazy (lambda () (vector (lambda (arg-5756) (lambda (arg-5759) (bs+ arg-5756 arg-5759 63))) (lambda (arg-5766) (lambda (arg-5769) (bs* arg-5766 arg-5769 63))) (lambda (arg-5776) (blodwen-toSignedInt arg-5776 63))))))
(define csegen-120(blodwen-lazy (lambda () (vector (cons (lambda (arg-528) (lambda (arg-531) (PreludeC-45EqOrd-u--C-61C-61_Eq_Int arg-528 arg-531))) (lambda (arg-538) (lambda (arg-541) (PreludeC-45EqOrd-u--C-47C-61_Eq_Int arg-538 arg-541)))) (lambda (arg-1418) (lambda (arg-1421) (PreludeC-45EqOrd-u--compare_Ord_Int arg-1418 arg-1421))) (lambda (arg-1428) (lambda (arg-1431) (PreludeC-45EqOrd-u--C-60_Ord_Int arg-1428 arg-1431))) (lambda (arg-1438) (lambda (arg-1441) (PreludeC-45EqOrd-u--C-62_Ord_Int arg-1438 arg-1441))) (lambda (arg-1448) (lambda (arg-1451) (PreludeC-45EqOrd-u--C-60C-61_Ord_Int arg-1448 arg-1451))) (lambda (arg-1458) (lambda (arg-1461) (PreludeC-45EqOrd-u--C-62C-61_Ord_Int arg-1458 arg-1461))) (lambda (arg-1468) (lambda (arg-1471) (PreludeC-45EqOrd-u--max_Ord_Int arg-1468 arg-1471))) (lambda (arg-1478) (lambda (arg-1481) (PreludeC-45EqOrd-u--min_Ord_Int arg-1478 arg-1481)))))))
(define csegen-142(blodwen-lazy (lambda () (lambda (eta-0) (lambda (eta-1) (cons eta-0 eta-1))))))
(define csegen-144(blodwen-lazy (lambda () (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (eta-0 (eta-1 eta-2))))))))
(define csegen-187(blodwen-lazy (lambda () (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 arg-9920 arg-9923))))))))
(define csegen-188(blodwen-lazy (lambda () (lambda (u--a) (lambda (arg-9934) (PreludeC-45Types-u--join_Monad_C-40EitherC-32C-36eC-41 arg-9934))))))
(define csegen-204(blodwen-lazy (lambda () (vector (lambda (u--acc) (lambda (u--elem) (lambda (u--func) (lambda (u--init) (lambda (u--input) (PreludeC-45Types-u--foldr_Foldable_C-40EitherC-32C-36eC-41 u--func u--init u--input)))))) (lambda (u--elem) (lambda (u--acc) (lambda (u--func) (lambda (u--init) (lambda (u--input) (PreludeC-45Types-u--foldl_Foldable_C-40EitherC-32C-36eC-41 u--func u--init u--input)))))) (lambda (u--elem) (lambda (arg-10420) (PreludeC-45Types-u--null_Foldable_C-40EitherC-32C-36eC-41 arg-10420))) (lambda (u--elem) (lambda (u--acc) (lambda (u--m) (lambda (i_con-0) (lambda (u--funcM) (lambda (u--init) (lambda (u--input) (PreludeC-45Types-u--foldlM_Foldable_C-40EitherC-32C-36eC-41 i_con-0 u--funcM u--init u--input)))))))) (lambda (u--elem) (lambda (arg-10449) (PreludeC-45Types-u--toList_Foldable_C-40EitherC-32C-36eC-41 arg-10449))) (lambda (u--a) (lambda (u--m) (lambda (i_con-0) (lambda (u--f) (lambda (arg-10463) (PreludeC-45Types-u--foldMap_Foldable_C-40EitherC-32C-36eC-41 i_con-0 u--f arg-10463))))))))))
(define csegen-208(blodwen-lazy (lambda () (lambda (u--b) (lambda (u--a) (lambda (u--f) (lambda (i_con-0) (lambda (arg-13115) (lambda (arg-13122) (PreludeC-45Types-u--traverse_Traversable_C-40EitherC-32C-36eC-41 i_con-0 arg-13115 arg-13122))))))))))
(define csegen-218(blodwen-lazy (lambda () (cons (lambda (arg-528) (lambda (arg-531) (PreludeC-45EqOrd-u--C-61C-61_Eq_String arg-528 arg-531))) (lambda (arg-538) (lambda (arg-541) (PreludeC-45EqOrd-u--C-47C-61_Eq_String arg-538 arg-541)))))))
(define csegen-222(blodwen-lazy (lambda () (lambda (eta-0) (lambda (eta-1) (cons eta-0 eta-1))))))
(define csegen-225(blodwen-lazy (lambda () (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (PreludeC-45Types-u--map_Functor_List eta-2 eta-3))))))))
(define csegen-226(blodwen-lazy (lambda () (let ((eff-0 (csegen-225))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))))))
(define csegen-229(blodwen-lazy (lambda () (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (PreludeC-45Types-u--map_Functor_Maybe eta-2 eta-3))))))))
(define csegen-230(blodwen-lazy (lambda () (let ((eff-0 (csegen-229))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))))))
(define csegen-233(blodwen-lazy (lambda () (cons (lambda (arg-8326) (lambda (arg-8329) (string-append arg-8326 arg-8329))) ""))))
(define csegen-234(blodwen-lazy (lambda () (let ((eff-0 (lambda (eta-0) (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 eta-0)))) (lambda (arg-0) (eff-0 arg-0))))))
(define csegen-235(blodwen-lazy (lambda () (lambda (eta-0) ((csegen-234) (let ((e-1 (car eta-0))) (let ((e-2 (cdr eta-0))) (DataC-45FilePath-C-60C-47C-62 e-1 (vector 1 (cons '() e-2))))))))))
(define csegen-236(blodwen-lazy (lambda () (let ((eff-0 (csegen-235))) (lambda (arg-0) (eff-0 arg-0))))))
(define csegen-237(blodwen-lazy (lambda () (let ((eff-0 (lambda (eta-0) eta-0))) (lambda (arg-0) (eff-0 arg-0))))))
(define csegen-239(blodwen-lazy (lambda () ((csegen-237) " "))))
(define csegen-242(blodwen-lazy (lambda () (cons #\a (cons #\l (cons #\l '()))))))
(define csegen-248(blodwen-lazy (lambda () (vector 1 (cons '() (cons #\i (cons #\n (cons #\s (cons #\t (csegen-242))))))))))
(define csegen-250(blodwen-lazy (lambda () (let ((eff-0 (lambda (eta-0) (PackC-45CoreC-45Types-toRelPath (let ((eff-0 eta-0)) eff-0))))) (lambda (arg-0) (eff-0 arg-0))))))
(define csegen-256(blodwen-lazy (lambda () (vector 1 (cons '() (cons #\l (cons #\o (cons #\c (cons #\a (cons #\l '()))))))))))
(define csegen-261(blodwen-lazy (lambda () (cons #\i (cons #\d (cons #\r (cons #\i (cons #\s (cons #\2 '())))))))))
(define csegen-263(blodwen-lazy (lambda () (vector 1 (cons '() (csegen-261))))))
(define csegen-267(blodwen-lazy (lambda () (vector 1 (cons '() (cons #\b (cons #\i (cons #\n '()))))))))
(define csegen-273(blodwen-lazy (lambda () (vector 1 (cons '() (cons #\d (cons #\o (cons #\c (cons #\s '())))))))))
(define csegen-275(blodwen-lazy (lambda () (vector 1 (cons '() (csegen-27))))))
(define csegen-279(blodwen-lazy (lambda () (cons #\. (cons #\i (cons #\p (cons #\k (cons #\g '()))))))))
(define csegen-302(blodwen-lazy (lambda () (let ((eff-0 (lambda (eta-0) (let ((eff-0 eta-0)) eff-0)))) (lambda (arg-0) (eff-0 arg-0))))))
(define csegen-305(blodwen-lazy (lambda () (cons #\i (cons #\b '())))))
(define csegen-308(blodwen-lazy (lambda () (vector 1 (cons '() (cons #\l (csegen-305)))))))
(define csegen-309(blodwen-lazy (lambda () ((csegen-226) (lambda (__infixTupleSection-0) (cons '() __infixTupleSection-0))))))
(define csegen-311(blodwen-lazy (lambda () (let ((eff-0 (lambda (eta-0) (lambda (eta-1) (PreludeC-45TypesC-45List-tailRecAppend eta-0 eta-1))))) (lambda (arg-0) (lambda (arg-1) ((eff-0 arg-0) arg-1)))))))
(define csegen-323(blodwen-lazy (lambda () (cons (lambda (arg-528) (lambda (arg-531) (PackC-45CoreC-45Types-u--C-61C-61_Eq_InstallType arg-528 arg-531))) (lambda (arg-538) (lambda (arg-541) (PackC-45CoreC-45Types-u--C-47C-61_Eq_InstallType arg-538 arg-541)))))))
(define csegen-324(blodwen-lazy (lambda () (lambda (eta-0) (lambda (eta-1) (PreludeC-45EqOrd-u--C-61C-61_Eq_String eta-0 eta-1))))))
(define csegen-327(blodwen-lazy (lambda () (cons (lambda (arg-528) (lambda (arg-531) (PreludeC-45Basics-on (csegen-324) (lambda (eta-0) (let ((eff-0 eta-0)) eff-0)) arg-528 arg-531))) (lambda (arg-538) (lambda (arg-541) (let ((sc0 (PreludeC-45Basics-on (csegen-324) (lambda (eta-0) (let ((eff-0 eta-0)) eff-0)) arg-538 arg-541))) (cond ((equal? sc0 1) 0) (else 1)))))))))
(define csegen-338(blodwen-lazy (lambda () (vector (csegen-323) (lambda (arg-1418) (lambda (arg-1421) (PackC-45CoreC-45Types-u--compare_Ord_InstallType arg-1418 arg-1421))) (lambda (arg-1428) (lambda (arg-1431) (PackC-45CoreC-45Types-u--C-60_Ord_InstallType arg-1428 arg-1431))) (lambda (arg-1438) (lambda (arg-1441) (PackC-45CoreC-45Types-u--C-62_Ord_InstallType arg-1438 arg-1441))) (lambda (arg-1448) (lambda (arg-1451) (PackC-45CoreC-45Types-u--C-60C-61_Ord_InstallType arg-1448 arg-1451))) (lambda (arg-1458) (lambda (arg-1461) (PackC-45CoreC-45Types-u--C-62C-61_Ord_InstallType arg-1458 arg-1461))) (lambda (arg-1468) (lambda (arg-1471) (PackC-45CoreC-45Types-u--max_Ord_InstallType arg-1468 arg-1471))) (lambda (arg-1478) (lambda (arg-1481) (PackC-45CoreC-45Types-u--min_Ord_InstallType arg-1478 arg-1481)))))))
(define csegen-339(blodwen-lazy (lambda () (lambda (eta-0) (lambda (eta-1) (PreludeC-45EqOrd-u--compare_Ord_String eta-0 eta-1))))))
(define csegen-347(blodwen-lazy (lambda () (vector (csegen-327) (lambda (arg-1418) (lambda (arg-1421) (PreludeC-45Basics-on (csegen-339) (lambda (eta-0) (let ((eff-0 eta-0)) eff-0)) arg-1418 arg-1421))) (lambda (arg-1428) (lambda (arg-1431) (PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering (PreludeC-45Basics-on (csegen-339) (lambda (eta-0) (let ((eff-0 eta-0)) eff-0)) arg-1428 arg-1431) 0))) (lambda (arg-1438) (lambda (arg-1441) (PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering (PreludeC-45Basics-on (csegen-339) (lambda (eta-0) (let ((eff-0 eta-0)) eff-0)) arg-1438 arg-1441) 2))) (lambda (arg-1448) (lambda (arg-1451) (PreludeC-45EqOrd-u--C-47C-61_Eq_Ordering (PreludeC-45Basics-on (csegen-339) (lambda (eta-0) (let ((eff-0 eta-0)) eff-0)) arg-1448 arg-1451) 2))) (lambda (arg-1458) (lambda (arg-1461) (PreludeC-45EqOrd-u--C-47C-61_Eq_Ordering (PreludeC-45Basics-on (csegen-339) (lambda (eta-0) (let ((eff-0 eta-0)) eff-0)) arg-1458 arg-1461) 0))) (lambda (arg-1468) (lambda (arg-1471) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering (PreludeC-45Basics-on (csegen-339) (lambda (eta-0) (let ((eff-0 eta-0)) eff-0)) arg-1468 arg-1471) 2))) (cond ((equal? sc0 1) arg-1468) (else arg-1471))))) (lambda (arg-1478) (lambda (arg-1481) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering (PreludeC-45Basics-on (csegen-339) (lambda (eta-0) (let ((eff-0 eta-0)) eff-0)) arg-1478 arg-1481) 0))) (cond ((equal? sc0 1) arg-1478) (else arg-1481)))))))))
(define csegen-357(blodwen-lazy (lambda () (DataC-45SortedMap-empty (csegen-347)))))
(define csegen-412(blodwen-lazy (lambda () (cons (lambda (arg-528) (lambda (arg-531) (let ((eff-0 arg-528)) (let ((eff-1 arg-531)) (PreludeC-45Types-u--C-61C-61_Eq_C-40ListC-32C-36aC-41 (csegen-2) eff-0 eff-1))))) (lambda (arg-538) (lambda (arg-541) (let ((sc0 (let ((eff-0 arg-538)) (let ((eff-1 arg-541)) (PreludeC-45Types-u--C-61C-61_Eq_C-40ListC-32C-36aC-41 (csegen-2) eff-0 eff-1))))) (cond ((equal? sc0 1) 0) (else 1)))))))))
(define csegen-413(blodwen-lazy (lambda () (cons #\m (cons #\l '())))))
(define csegen-415(blodwen-lazy (lambda () (cons #\t (cons #\o (csegen-413))))))
(define csegen-417(blodwen-lazy (lambda () ((csegen-230) (lambda (eta-0) (Builtin-snd eta-0))))))
(define csegen-419(blodwen-lazy (lambda () (cons #\h (cons #\t (csegen-413))))))
(define csegen-433(blodwen-lazy (lambda () (lambda (arg-0) (PreludeC-45EqOrd-u--C-47C-61_Eq_Char arg-0 (integer->char 10))))))
(define csegen-434(blodwen-lazy (lambda () (lambda (arg-0) (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-0 (integer->char 10))))))
(define csegen-437(blodwen-lazy (lambda () (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45Bounded-u--map_Functor_WithBounds u--func arg-8737))))))))
(define csegen-451(blodwen-lazy (lambda () (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 eta-2 eta-3))))))))
(define csegen-458(blodwen-lazy (lambda () (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (LibrariesC-45TextC-45Bounded-u--map_Functor_WithBounds eta-2 eta-3))))))))
(define csegen-460(blodwen-lazy (lambda () ((csegen-237) "End of input"))))
(define csegen-462(blodwen-lazy (lambda () (cons (cons (csegen-460) '()) '()))))
(define csegen-463(blodwen-lazy (lambda () ((csegen-237) "Expected end of input"))))
(define csegen-465(blodwen-lazy (lambda () (lambda (eta-0) (DataC-45FilePathC-45Body-fromChars (PreludeC-45Types-fastUnpack eta-0))))))
(define csegen-466(blodwen-lazy (lambda () (lambda (arg-0) (PreludeC-45EqOrd-u--C-61C-61_Eq_Char #\/ arg-0)))))
(define csegen-468(blodwen-lazy (lambda () (let ((eff-0 (lambda (eta-0) (let ((eff-0 eta-0)) (PreludeC-45Types-fastPack eff-0))))) (lambda (arg-0) (eff-0 arg-0))))))
(define csegen-476(blodwen-lazy (lambda () (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (PreludeC-45Types-u--map_Functor_Maybe u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (box arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (PreludeC-45Types-u--C-60C-42C-62_Applicative_Maybe arg-9446 arg-9453)))))))))
(define csegen-478(blodwen-lazy (lambda () (cons #\. (cons #\. '())))))
(define csegen-480(blodwen-lazy (lambda () (lambda (arg-0) (PreludeC-45EqOrd-u--C-61C-61_Eq_Char #\. arg-0)))))
(define csegen-484(blodwen-lazy (lambda () ((let ((eff-0 (csegen-451))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) (lambda (eta-0) (vector 0 ))))))
(define csegen-488(blodwen-lazy (lambda () (cons (lambda (arg-8326) (lambda (arg-8329) (PreludeC-45TypesC-45List-tailRecAppend arg-8326 arg-8329))) '()))))
(define csegen-489(blodwen-lazy (lambda () (LibrariesC-45TextC-45Parser-sepBy1 1 (ParserC-45RuleC-45Package-dotC-39) (ParserC-45RuleC-45Package-integerLit)))))
(define csegen-492(blodwen-lazy (lambda () (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (DataC-45List1-u--map_Functor_List1 eta-2 eta-3))))))))
(define csegen-493(blodwen-lazy (lambda () ((csegen-230) (lambda (eta-0) (Builtin-fst eta-0))))))
(define csegen-517(blodwen-lazy (lambda () (lambda (eta-0) (lambda (eta-1) (vector 15 eta-0 eta-1))))))
(define csegen-527(blodwen-lazy (lambda () ((csegen-484) (ParserC-45RuleC-45Package-exactProperty "version")))))
(define csegen-550(blodwen-lazy (lambda () (lambda (eta-0) (ParserC-45LexerC-45Common-isIdentTrailing 0 eta-0)))))
(define csegen-620(blodwen-lazy (lambda () (vector 5 (LibrariesC-45TextC-45LexerC-45Core-pred (lambda (eta-0) (ParserC-45LexerC-45Common-isIdentStart 1 eta-0))) (lambda () (LibrariesC-45TextC-45Lexer-many (LibrariesC-45TextC-45LexerC-45Core-pred (lambda (eta-0) (ParserC-45LexerC-45Common-isIdentTrailing 1 eta-0)))))))))
(define csegen-646(blodwen-lazy (lambda () (lambda (eta-0) (cond ((equal? eta-0 1) 0) (else 1))))))
(define csegen-662(blodwen-lazy (lambda () (let ((eff-0 (lambda (eta-0) (lambda (eta-1) (PackC-45CoreC-45TOML-u--fromTOML_FromTOML_URL eta-0 eta-1))))) (lambda (arg-0) (lambda (arg-1) ((eff-0 arg-0) arg-1)))))))
(define csegen-663(blodwen-lazy (lambda () (lambda (eta-0) (lambda (eta-1) (PackC-45CoreC-45TOML-u--fromTOML_FromTOML_Commit eta-0 eta-1))))))
(define csegen-680(blodwen-lazy (lambda () (let ((eff-0 (lambda (eta-0) (lambda (eta-1) (PackC-45CoreC-45TOML-trefine (lambda (arg-6250) (lambda (u--val) (PackC-45CoreC-45TOML-u--fromTOML_FromTOML_FilePath arg-6250 u--val))) (lambda (eta-2) (PackC-45CoreC-45TOML-toRelFile eta-2)) eta-0 eta-1))))) (lambda (arg-0) (lambda (arg-1) ((eff-0 arg-0) arg-1)))))))
(define csegen-682(blodwen-lazy (lambda () (let ((eff-0 (lambda (eta-0) (lambda (eta-1) (PackC-45CoreC-45TOML-u--fromTOML_FromTOML_Bool eta-0 eta-1))))) (lambda (arg-0) (lambda (arg-1) ((eff-0 arg-0) arg-1)))))))
(define csegen-683(blodwen-lazy (lambda () (lambda (arg-6250) (lambda (u--val) (PackC-45CoreC-45TOML-u--fromTOML_FromTOML_String arg-6250 u--val))))))
(define csegen-696(blodwen-lazy (lambda () (DataC-45SortedMap-empty (vector (csegen-218) (lambda (arg-1418) (lambda (arg-1421) (PreludeC-45EqOrd-u--compare_Ord_String arg-1418 arg-1421))) (lambda (arg-1428) (lambda (arg-1431) (PreludeC-45EqOrd-u--C-60_Ord_String arg-1428 arg-1431))) (lambda (arg-1438) (lambda (arg-1441) (PreludeC-45EqOrd-u--C-62_Ord_String arg-1438 arg-1441))) (lambda (arg-1448) (lambda (arg-1451) (PreludeC-45EqOrd-u--C-60C-61_Ord_String arg-1448 arg-1451))) (lambda (arg-1458) (lambda (arg-1461) (PreludeC-45EqOrd-u--C-62C-61_Ord_String arg-1458 arg-1461))) (lambda (arg-1468) (lambda (arg-1471) (PreludeC-45EqOrd-u--max_Ord_String arg-1468 arg-1471))) (lambda (arg-1478) (lambda (arg-1481) (PreludeC-45EqOrd-u--min_Ord_String arg-1478 arg-1481))))))))
(define csegen-702(blodwen-lazy (lambda () ((csegen-237) ":"))))
(define csegen-707(blodwen-lazy (lambda () (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 eta-2 eta-3))))))))
(define csegen-708(blodwen-lazy (lambda () (let ((eff-0 (csegen-707))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))))))
(define csegen-733(blodwen-lazy (lambda () (cons (lambda (arg-823) (LanguageC-45TOMLC-45Tokens-u--TokType_TokenKind_TOMLTokenKind arg-823)) (lambda (u--kind) (lambda (arg-832) (LanguageC-45TOMLC-45Tokens-u--tokValue_TokenKind_TOMLTokenKind u--kind arg-832)))))))
(define csegen-736(blodwen-lazy (lambda () (cons (lambda (arg-528) (lambda (arg-531) (LanguageC-45TOMLC-45Tokens-u--C-61C-61_Eq_TOMLTokenKind arg-528 arg-531))) (lambda (arg-538) (lambda (arg-541) (LanguageC-45TOMLC-45Tokens-u--C-47C-61_Eq_TOMLTokenKind arg-538 arg-541)))))))
(define csegen-748(blodwen-lazy (lambda () (let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))))))
(define csegen-749(blodwen-lazy (lambda () ((csegen-748) (lambda (eta-0) (lambda (eta-1) eta-1))))))
(define csegen-786(blodwen-lazy (lambda () (let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 0 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))))))
(define csegen-793(blodwen-lazy (lambda () (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (TextC-45Bounded-u--map_Functor_WithBounds eta-2 eta-3))))))))
(define csegen-796(blodwen-lazy (lambda () (cons (cons (csegen-460) '()) '()))))
(define csegen-799(blodwen-lazy (lambda () (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45Bounded-u--map_Functor_WithBounds u--func arg-8737))))))))
(define csegen-830(blodwen-lazy (lambda () (TextC-45Lexer-opt (TextC-45Lexer-oneOf "+-")))))
(define csegen-835(blodwen-lazy (lambda () (TextC-45Lexer-opt (TextC-45Lexer-is #\_)))))
(define csegen-845(blodwen-lazy (lambda () (TextC-45Lexer-many (vector 5 (csegen-835) (TextC-45Lexer-digit))))))
(define csegen-877(blodwen-lazy (lambda () (vector 1 (cons '() (cons #\d (cons #\b '())))))))
(define csegen-880(blodwen-lazy (lambda () (let ((eff-0 (lambda (eta-0) (PackC-45CoreC-45Types-toRelPath eta-0)))) (lambda (arg-0) (eff-0 arg-0))))))
(define csegen-903(blodwen-lazy (lambda () (vector 1 (cons '() (cons #\s (cons #\u (cons #\p (cons #\p (cons #\o (cons #\r (cons #\t '()))))))))))))
(define csegen-904(blodwen-lazy (lambda () (cons #\. (csegen-415)))))
(define csegen-918(blodwen-lazy (lambda () (vector 1 (cons '() (cons #\. (cons #\c (cons #\a (cons #\c (cons #\h (cons #\e '())))))))))))
(define csegen-931(blodwen-lazy (lambda () (cons #\H (cons #\E (cons #\A (cons #\D '())))))))
(define u--prim__add_Integer (lambda (arg-0 arg-1) (+ arg-0 arg-1)))
(define u--prim__sub_Integer (lambda (arg-0 arg-1) (- arg-0 arg-1)))
(define u--prim__mul_Integer (lambda (arg-0 arg-1) (* arg-0 arg-1)))
(define MicroPack-microInit (lambda (arg-0 arg-1) (vector arg-1 '() '() '() '() (DataC-45FilePath-u--fromString_FromString_FilePath arg-0) 0 1 0 0 (vector 1 ) 0 '() '() (DataC-45SortedMap-empty (vector (cons (lambda (arg-528) (lambda (arg-531) (PreludeC-45Basics-on (csegen-3) (lambda (eta-0) (let ((eff-0 eta-0)) eff-0)) arg-528 arg-531))) (lambda (arg-538) (lambda (arg-541) (let ((sc0 (PreludeC-45Basics-on (csegen-3) (lambda (eta-0) (let ((eff-0 eta-0)) eff-0)) arg-538 arg-541))) (cond ((equal? sc0 1) 0) (else 1)))))) (lambda (arg-1418) (lambda (arg-1421) (PreludeC-45Basics-on (csegen-15) (lambda (eta-0) (let ((eff-0 eta-0)) eff-0)) arg-1418 arg-1421))) (lambda (arg-1428) (lambda (arg-1431) (PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering (PreludeC-45Basics-on (csegen-15) (lambda (eta-0) (let ((eff-0 eta-0)) eff-0)) arg-1428 arg-1431) 0))) (lambda (arg-1438) (lambda (arg-1441) (PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering (PreludeC-45Basics-on (csegen-15) (lambda (eta-0) (let ((eff-0 eta-0)) eff-0)) arg-1438 arg-1441) 2))) (lambda (arg-1448) (lambda (arg-1451) (PreludeC-45EqOrd-u--C-47C-61_Eq_Ordering (PreludeC-45Basics-on (csegen-15) (lambda (eta-0) (let ((eff-0 eta-0)) eff-0)) arg-1448 arg-1451) 2))) (lambda (arg-1458) (lambda (arg-1461) (PreludeC-45EqOrd-u--C-47C-61_Eq_Ordering (PreludeC-45Basics-on (csegen-15) (lambda (eta-0) (let ((eff-0 eta-0)) eff-0)) arg-1458 arg-1461) 0))) (lambda (arg-1468) (lambda (arg-1471) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering (PreludeC-45Basics-on (csegen-15) (lambda (eta-0) (let ((eff-0 eta-0)) eff-0)) arg-1468 arg-1471) 2))) (cond ((equal? sc0 1) arg-1468) (else arg-1471))))) (lambda (arg-1478) (lambda (arg-1481) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering (PreludeC-45Basics-on (csegen-15) (lambda (eta-0) (let ((eff-0 eta-0)) eff-0)) arg-1478 arg-1481) 0))) (cond ((equal? sc0 1) arg-1478) (else arg-1481))))))) 0 1 (vector 1 ) (cons #\_ (cons #\t (cons #\m (cons #\p (csegen-27))))))))
(define MicroPack-main(blodwen-lazy (lambda () (PackC-45CoreC-45IO-run (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (csegen-44) (PackC-45ConfigC-45Environment-getPackDir (csegen-45)) (lambda (u--dir) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (csegen-44) (PackC-45CoreC-45IO-mkTmpDir (csegen-45) u--dir) (lambda (u--td) (PreludeC-45Interfaces-C-62C-62 (csegen-61) (PackC-45CoreC-45IO-mkDir (csegen-45) (let ((eff-0 u--dir)) eff-0)) (lambda () (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (csegen-44) (PackC-45ConfigC-45Environment-defaultColl (csegen-45) u--td u--dir) (lambda (u--defCol) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (csegen-44) (System-getArgs (csegen-64)) (lambda (u--args) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (csegen-44) (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (lambda (eta-4) (lambda (eta-5) (lambda (eta-6) (lambda (eta-7) (PreludeC-45IO-u--map_Functor_IO eta-6 eta-7))))) eta-2 eta-3))))) (lambda (eta-0) (DataC-45Maybe-fromMaybe (lambda () "scheme") eta-0)) (System-getEnv (csegen-64) "SCHEME")) (lambda (u--scheme) (let ((u--db (if (null? u--args) u--defCol (let ((e-2 (cdr u--args))) (if (null? e-2) u--defCol (let ((e-4 (car e-2))) (let ((e-5 (cdr e-2))) (if (null? e-5) (PreludeC-45Types-either (lambda () (lambda (eta-0) u--defCol)) (lambda () (lambda (eta-0) eta-0)) (PackC-45CoreC-45Types-readDBName e-4)) u--defCol)))))))) (let ((u--conf (MicroPack-microInit u--scheme u--db))) (PreludeC-45Interfaces-C-62C-62 (csegen-61) (PackC-45CoreC-45IO-write (csegen-45) (cons (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 u--dir)) eff-0) (vector 1 (cons '() (cons #\u (cons #\s (cons #\e (cons #\r '()))))))) (PackC-45ConfigC-45Environment-packToml)) (PackC-45ConfigC-45TOML-initToml u--scheme u--db)) (lambda () (PackC-45CoreC-45IO-finally (csegen-44) (PackC-45CoreC-45IO-rmDir (csegen-45) (let ((eff-0 u--td)) eff-0)) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (csegen-44) (PackC-45RunnerC-45Install-idrisEnv (csegen-45) u--dir u--td u--conf 1) (lambda (eta-0) (PackC-45RunnerC-45Install-update (csegen-45) eta-0))))))))))))))))))))))))
(define System-system (lambda (arg-1 arg-2) (let ((e-2 (cdr arg-1))) ((e-2 'erased) (lambda (eta-0) (System-prim__system arg-2 eta-0))))))
(define System-run (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (SystemC-45FileC-45Process-popen arg-1 arg-2 0)) (lambda (_-0) (case (vector-ref _-0 0) ((1) (let ((e-6 (vector-ref _-0 1))) (let ((e-8 (car arg-1))) (let ((e-10 (vector-ref e-8 1))) ((((e-10 'erased) 'erased) (SystemC-45FileC-45ReadWrite-fRead arg-1 e-6)) (lambda (_-1) (case (vector-ref _-1 0) ((1) (let ((e-12 (vector-ref _-1 1))) (let ((e-14 (car arg-1))) (let ((e-16 (vector-ref e-14 1))) ((((e-16 'erased) 'erased) (SystemC-45FileC-45Process-pclose arg-1 e-6)) (lambda (u--exitCode) (let ((e-19 (car arg-1))) (let ((e-22 (vector-ref e-19 0))) (let ((e-24 (vector-ref e-22 1))) ((e-24 'erased) (cons e-12 u--exitCode))))))))))) (else (let ((e-14 (car arg-1))) (let ((e-17 (vector-ref e-14 0))) (let ((e-19 (vector-ref e-17 1))) ((e-19 'erased) (cons "" 1))))))))))))) (else (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) (let ((e-13 (vector-ref e-11 1))) ((e-13 'erased) (cons "" 1)))))))))))))
(define System-getEnv (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (System-prim__getEnv arg-2 eta-0))))) (lambda (u--env) (let ((sc1 (PreludeC-45EqOrd-u--C-47C-61_Eq_Int (PrimIO-prim__nullAnyPtr (PrimIO-prim__forgetPtr u--env)) (blodwen-toSignedInt 0 63)))) (cond ((equal? sc1 1) (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) '()))))) (else (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (box (PreludeC-45IO-prim__getString u--env)))))))))))))))
(define System-getArgs (lambda (arg-1) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (System-prim__getArgCount eta-0))))) (lambda (u--n) (let ((sc1 (PreludeC-45EqOrd-u--C-62_Ord_Int u--n (blodwen-toSignedInt 0 63)))) (cond ((equal? sc1 1) (PreludeC-45Interfaces-for (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) e-10)) (csegen-103) (PreludeC-45Types-u--rangeFromTo_Range_C-36a (cons (vector (csegen-106) (lambda (arg-6164) (lambda (arg-6167) (PreludeC-45Num-u--div_Integral_Int arg-6164 arg-6167))) (lambda (arg-6174) (lambda (arg-6177) (PreludeC-45Num-u--mod_Integral_Int arg-6174 arg-6177)))) (cons (csegen-120) (vector (csegen-106) (lambda (arg-5875) (bs- 0 arg-5875 63)) (lambda (arg-5881) (lambda (arg-5884) (bs- arg-5881 arg-5884 63)))))) 0 (bs- u--n 1 63)) (lambda (eta-0) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-1) (System-prim__getArg eta-0 eta-1))))))) (else (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) '())))))))))))))
(define System-exitWith (lambda (arg-2 arg-3) (if (null? arg-3) (let ((e-2 (cdr arg-2))) ((e-2 'erased) (Builtin-believe_me (lambda (eta-0) (System-prim__exit 0 eta-0))))) (let ((e-0 (car arg-3))) (let ((e-2 (cdr arg-2))) ((e-2 'erased) (Builtin-believe_me (lambda (eta-0) (System-prim__exit e-0 eta-0)))))))))
(define System-exitFailure (lambda (arg-2) (System-exitWith arg-2 (cons 1 (vector 0 )))))
(define System-die (lambda (arg-2 arg-3) (PreludeC-45Interfaces-C-62C-62 (let ((e-1 (car arg-2))) e-1) (PreludeC-45IO-putStrLn arg-2 arg-3) (lambda () (System-exitFailure arg-2)))))
(define PreludeC-45Uninhabited-void (lambda (ext-0) (display "Error: Executed 'void'")))
(define PreludeC-45Uninhabited-absurd (lambda (arg-2 arg-3) (PreludeC-45Uninhabited-void 'erased)))
(define PreludeC-45Basics-uncurry (lambda (arg-3 arg-4) (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) ((arg-3 e-2) e-3)))))
(define PreludeC-45Basics-on (lambda (arg-3 arg-4 ext-0 ext-1) ((arg-3 (arg-4 ext-0)) (arg-4 ext-1))))
(define PreludeC-45Basics-flip (lambda (arg-3 arg-4 arg-5) ((arg-3 arg-5) arg-4)))
(define Builtin-snd (lambda (arg-2) (let ((e-3 (cdr arg-2))) e-3)))
(define Builtin-idris_crash (lambda (ext-0) (blodwen-error-quit (string-append "ERROR: " ext-0))))
(define Builtin-fst (lambda (arg-2) (let ((e-2 (car arg-2))) e-2)))
(define Builtin-believe_me (lambda (arg-2) arg-2))
(define PreludeC-45Types-case--compare-6195 (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (cond ((equal? arg-6 1) (PreludeC-45Types-u--compare_Ord_C-40ListC-32C-36aC-41 arg-1 arg-3 arg-5))(else arg-6))))
(define PreludeC-45Types-n--9361-8543-u--hexChars (lambda (arg-0) (cons #\0 (cons #\1 (cons #\2 (cons #\3 (cons #\4 (cons #\5 (cons #\6 (cons #\7 (cons #\8 (cons #\9 (cons #\A (cons #\B (cons #\C (cons #\D (cons #\E (cons #\F '()))))))))))))))))))
(define PreludeC-45Types-u--traverse_Traversable_Maybe (lambda (arg-3 arg-4 arg-5) (if (null? arg-5) (let ((e-2 (vector-ref arg-3 1))) ((e-2 'erased) '())) (let ((e-2 (unbox arg-5))) (PreludeC-45Interfaces-C-60C-36C-62 (let ((e-1 (vector-ref arg-3 0))) e-1) (lambda (eta-0) (box eta-0)) (arg-4 e-2))))))
(define PreludeC-45Types-u--traverse_Traversable_List (lambda (arg-3 arg-4 arg-5) (if (null? arg-5) (let ((e-2 (vector-ref arg-3 1))) ((e-2 'erased) '())) (let ((e-2 (car arg-5))) (let ((e-3 (cdr arg-5))) (let ((e-4 (vector-ref arg-3 2))) ((((e-4 'erased) 'erased) (let ((e-6 (vector-ref arg-3 2))) ((((e-6 'erased) 'erased) (let ((e-10 (vector-ref arg-3 1))) ((e-10 'erased) (csegen-142)))) (arg-4 e-2)))) (PreludeC-45Types-u--traverse_Traversable_List arg-3 arg-4 e-3))))))))
(define PreludeC-45Types-u--traverse_Traversable_C-40EitherC-32C-36eC-41 (lambda (arg-4 arg-5 arg-6) (case (vector-ref arg-6 0) ((0) (let ((e-2 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-4 1))) ((e-4 'erased) (vector 0 e-2))))) (else (let ((e-5 (vector-ref arg-6 1))) (PreludeC-45Interfaces-C-60C-36C-62 (let ((e-1 (vector-ref arg-4 0))) e-1) (lambda (eta-0) (vector 1 eta-0)) (arg-5 e-5)))))))
(define PreludeC-45Types-u--toList_Foldable_Maybe (lambda (ext-0) (PreludeC-45Types-u--foldr_Foldable_Maybe (csegen-142) '() ext-0)))
(define PreludeC-45Types-u--toList_Foldable_C-40EitherC-32C-36eC-41 (lambda (ext-0) (PreludeC-45Types-u--foldr_Foldable_C-40EitherC-32C-36eC-41 (csegen-142) '() ext-0)))
(define PreludeC-45Types-u--rangeFromTo_Range_C-36a (lambda (arg-1 arg-2 arg-3) (let ((sc0 (let ((sc1 (Builtin-fst (Builtin-snd arg-1)))) (let ((e-2 (vector-ref sc1 1))) ((e-2 arg-2) arg-3))))) (cond ((equal? sc0 0) (PreludeC-45Types-takeUntil (lambda (arg-0) (let ((sc1 (Builtin-fst (Builtin-snd arg-1)))) (let ((e-6 (vector-ref sc1 5))) ((e-6 arg-0) arg-3)))) (PreludeC-45Types-countFrom arg-2 (lambda (arg-0) (let ((sc1 (Builtin-snd (Builtin-snd arg-1)))) (let ((e-1 (vector-ref sc1 0))) (let ((e-6 (vector-ref e-1 0))) ((e-6 arg-0) (let ((sc1 (Builtin-snd (Builtin-snd arg-1)))) (let ((e-9 (vector-ref sc1 0))) (let ((e-10 (vector-ref e-9 2))) (e-10 1)))))))))))) ((equal? sc0 1) (PreludeC-45Types-u--pure_Applicative_List arg-2)) (else (PreludeC-45Types-takeUntil (lambda (arg-0) (let ((sc1 (Builtin-fst (Builtin-snd arg-1)))) (let ((e-5 (vector-ref sc1 4))) ((e-5 arg-0) arg-3)))) (PreludeC-45Types-countFrom arg-2 (lambda (u--x) (let ((sc1 (Builtin-snd (Builtin-snd arg-1)))) (let ((e-3 (vector-ref sc1 2))) ((e-3 u--x) (let ((sc1 (Builtin-snd (Builtin-snd arg-1)))) (let ((e-6 (vector-ref sc1 0))) (let ((e-7 (vector-ref e-6 2))) (e-7 1)))))))))))))))
(define PreludeC-45Types-u--pure_Applicative_List (lambda (arg-1) (cons arg-1 '())))
(define PreludeC-45Types-u--null_Foldable_Maybe (lambda (arg-1) (if (null? arg-1) 1 0)))
(define PreludeC-45Types-u--null_Foldable_List (lambda (arg-1) (if (null? arg-1) 1 0)))
(define PreludeC-45Types-u--null_Foldable_C-40EitherC-32C-36eC-41 (lambda (arg-2) (case (vector-ref arg-2 0) ((0) 1) (else 0))))
(define PreludeC-45Types-u--map_Functor_Maybe (lambda (arg-2 arg-3) (if (null? arg-3) '() (let ((e-1 (unbox arg-3))) (box (arg-2 e-1))))))
(define PreludeC-45Types-u--map_Functor_List (lambda (arg-2 arg-3) (if (null? arg-3) '() (let ((e-2 (car arg-3))) (let ((e-3 (cdr arg-3))) (cons (arg-2 e-2) (((let ((eff-0 (csegen-83))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-2) e-3)))))))
(define PreludeC-45Types-u--join_Monad_List (lambda (arg-1) (PreludeC-45Types-listBind arg-1 (lambda (eta-0) eta-0))))
(define PreludeC-45Types-u--join_Monad_C-40EitherC-32C-36eC-41 (lambda (arg-2) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 arg-2 (lambda (eta-0) eta-0))))
(define PreludeC-45Types-u--foldr_Foldable_Maybe (lambda (arg-2 arg-3 arg-4) (if (null? arg-4) arg-3 (let ((e-2 (unbox arg-4))) ((arg-2 e-2) arg-3)))))
(define PreludeC-45Types-u--foldr_Foldable_List (lambda (arg-2 arg-3 arg-4) (if (null? arg-4) arg-3 (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) ((arg-2 e-2) (PreludeC-45Types-u--foldr_Foldable_List arg-2 arg-3 e-3)))))))
(define PreludeC-45Types-u--foldr_Foldable_C-40EitherC-32C-36eC-41 (lambda (arg-3 arg-4 arg-5) (case (vector-ref arg-5 0) ((0) arg-4) (else (let ((e-5 (vector-ref arg-5 1))) ((arg-3 e-5) arg-4))))))
(define PreludeC-45Types-u--foldl_Foldable_Maybe (lambda (arg-2 arg-3 arg-4) ((PreludeC-45Types-u--foldr_Foldable_Maybe (lambda (eta-0) (lambda (eta-1) (PreludeC-45Basics-flip (csegen-144) (lambda (eta-2) (PreludeC-45Basics-flip arg-2 eta-0 eta-2)) eta-1))) (lambda (eta-0) eta-0) arg-4) arg-3)))
(define PreludeC-45Types-u--foldl_Foldable_List (lambda (arg-2 arg-3 arg-4) (if (null? arg-4) arg-3 (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) (PreludeC-45Types-u--foldl_Foldable_List arg-2 ((arg-2 arg-3) e-2) e-3))))))
(define PreludeC-45Types-u--foldl_Foldable_C-40EitherC-32C-36eC-41 (lambda (arg-3 arg-4 arg-5) ((PreludeC-45Types-u--foldr_Foldable_C-40EitherC-32C-36eC-41 (lambda (eta-0) (lambda (eta-1) (PreludeC-45Basics-flip (csegen-144) (lambda (eta-2) (PreludeC-45Basics-flip arg-3 eta-0 eta-2)) eta-1))) (lambda (eta-0) eta-0) arg-5) arg-4)))
(define PreludeC-45Types-u--foldlM_Foldable_Maybe (lambda (arg-3 arg-4 arg-5 ext-0) (PreludeC-45Types-u--foldl_Foldable_Maybe (lambda (u--ma) (lambda (u--b) (let ((e-2 (vector-ref arg-3 1))) ((((e-2 'erased) 'erased) u--ma) (lambda (eta-0) (PreludeC-45Basics-flip arg-4 u--b eta-0)))))) (let ((e-1 (vector-ref arg-3 0))) (let ((e-5 (vector-ref e-1 1))) ((e-5 'erased) arg-5))) ext-0)))
(define PreludeC-45Types-u--foldlM_Foldable_List (lambda (arg-3 arg-4 arg-5 ext-0) (PreludeC-45Types-u--foldl_Foldable_List (lambda (u--ma) (lambda (u--b) (let ((e-2 (vector-ref arg-3 1))) ((((e-2 'erased) 'erased) u--ma) (lambda (eta-0) (PreludeC-45Basics-flip arg-4 u--b eta-0)))))) (let ((e-1 (vector-ref arg-3 0))) (let ((e-5 (vector-ref e-1 1))) ((e-5 'erased) arg-5))) ext-0)))
(define PreludeC-45Types-u--foldlM_Foldable_C-40EitherC-32C-36eC-41 (lambda (arg-4 arg-5 arg-6 ext-0) (PreludeC-45Types-u--foldl_Foldable_C-40EitherC-32C-36eC-41 (lambda (u--ma) (lambda (u--b) (let ((e-2 (vector-ref arg-4 1))) ((((e-2 'erased) 'erased) u--ma) (lambda (eta-0) (PreludeC-45Basics-flip arg-5 u--b eta-0)))))) (let ((e-1 (vector-ref arg-4 0))) (let ((e-5 (vector-ref e-1 1))) ((e-5 'erased) arg-6))) ext-0)))
(define PreludeC-45Types-u--foldMap_Foldable_Maybe (lambda (arg-2 arg-3 ext-0) (PreludeC-45Types-u--foldr_Foldable_Maybe (lambda (eta-0) ((let ((eff-0 (let ((e-1 (car arg-2))) e-1))) (lambda (arg-0) (lambda (arg-1) ((eff-0 arg-0) arg-1)))) (arg-3 eta-0))) (let ((e-2 (cdr arg-2))) e-2) ext-0)))
(define PreludeC-45Types-u--foldMap_Foldable_List (lambda (arg-2 arg-3 ext-0) (PreludeC-45Types-u--foldl_Foldable_List (lambda (u--acc) (lambda (u--elem) (((let ((eff-0 (let ((e-1 (car arg-2))) e-1))) (lambda (arg-0) (lambda (arg-1) ((eff-0 arg-0) arg-1)))) u--acc) (arg-3 u--elem)))) (let ((e-2 (cdr arg-2))) e-2) ext-0)))
(define PreludeC-45Types-u--foldMap_Foldable_C-40EitherC-32C-36eC-41 (lambda (arg-3 arg-4 ext-0) (PreludeC-45Types-u--foldr_Foldable_C-40EitherC-32C-36eC-41 (lambda (eta-0) ((let ((eff-0 (let ((e-1 (car arg-3))) e-1))) (lambda (arg-0) (lambda (arg-1) ((eff-0 arg-0) arg-1)))) (arg-4 eta-0))) (let ((e-2 (cdr arg-3))) e-2) ext-0)))
(define PreludeC-45Types-u--compare_Ord_C-40ListC-32C-36aC-41 (lambda (arg-1 arg-2 arg-3) (if (null? arg-2) (if (null? arg-3) 1 0) (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (if (null? arg-3) 2 (let ((e-10 (car arg-3))) (let ((e-11 (cdr arg-3))) (PreludeC-45Types-case--compare-6195 arg-1 e-2 e-3 e-10 e-11 (let ((e-12 (vector-ref arg-1 1))) ((e-12 e-2) e-10)))))))))))
(define PreludeC-45Types-u--C-62C-62C-61_Monad_Maybe (lambda (arg-2 arg-3) (if (null? arg-2) '() (let ((e-2 (unbox arg-2))) (arg-3 e-2)))))
(define PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (lambda (arg-3 arg-4) (case (vector-ref arg-3 0) ((0) (let ((e-2 (vector-ref arg-3 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref arg-3 1))) (arg-4 e-5))))))
(define PreludeC-45Types-u--C-61C-61_Eq_C-40MaybeC-32C-36aC-41 (lambda (arg-1 arg-2 arg-3) (if (null? arg-2) (if (null? arg-3) 1 0) (let ((e-2 (unbox arg-2))) (if (null? arg-3) 0 (let ((e-8 (unbox arg-3))) (let ((e-1 (car arg-1))) ((e-1 e-2) e-8))))))))
(define PreludeC-45Types-u--C-61C-61_Eq_C-40ListC-32C-36aC-41 (lambda (arg-1 arg-2 arg-3) (if (null? arg-2) (if (null? arg-3) 1 0) (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (if (null? arg-3) 0 (let ((e-6 (car arg-3))) (let ((e-7 (cdr arg-3))) (let ((sc2 (let ((e-1 (car arg-1))) ((e-1 e-2) e-6)))) (cond ((equal? sc2 1) (PreludeC-45Types-u--C-61C-61_Eq_C-40ListC-32C-36aC-41 arg-1 e-3 e-7)) (else 0)))))))))))
(define PreludeC-45Types-u--C-60C-124C-62_Alternative_Maybe (lambda (arg-1 arg-2) (if (null? arg-1) (arg-2) (let ((e-1 (unbox arg-1))) (box e-1)))))
(define PreludeC-45Types-u--C-60C-42C-62_Applicative_Maybe (lambda (arg-2 arg-3) (if (null? arg-2) '() (let ((e-1 (unbox arg-2))) (if (null? arg-3) '() (let ((e-3 (unbox arg-3))) (box (e-1 e-3))))))))
(define PreludeC-45Types-toUpper (lambda (arg-0) (let ((sc0 (PreludeC-45Types-isLower arg-0))) (cond ((equal? sc0 1) (cast-int-char (bs- (cast-char-boundedInt arg-0 63) 32 63))) (else arg-0)))))
(define PreludeC-45Types-toLower (lambda (arg-0) (let ((sc0 (PreludeC-45Types-isUpper arg-0))) (cond ((equal? sc0 1) (cast-int-char (bs+ (cast-char-boundedInt arg-0 63) 32 63))) (else arg-0)))))
(define PreludeC-45Types-takeUntil (lambda (arg-1 arg-2) (let ((e-1 (car arg-2))) (let ((e-2 (cdr arg-2))) (let ((sc1 (arg-1 e-1))) (cond ((equal? sc1 1) (cons e-1 '())) (else (cons e-1 (PreludeC-45Types-takeUntil arg-1 (e-2))))))))))
(define PreludeC-45TypesC-45List-tailRecAppend (lambda (arg-1 arg-2) (PreludeC-45TypesC-45List-reverseOnto arg-2 (PreludeC-45TypesC-45List-reverse arg-1))))
(define PreludeC-45Types-substr (lambda (arg-0 arg-1 arg-2) (let ((sc0 (PreludeC-45EqOrd-u--C-60_Ord_Integer arg-0 (PreludeC-45TypesC-45String-length arg-2)))) (cond ((equal? sc0 1) (string-substr (blodwen-toSignedInt arg-0 63) (blodwen-toSignedInt arg-1 63) arg-2)) (else "")))))
(define PreludeC-45TypesC-45List-reverseOnto (lambda (arg-1 arg-2) (if (null? arg-2) arg-1 (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (PreludeC-45TypesC-45List-reverseOnto (cons e-2 arg-1) e-3))))))
(define PreludeC-45TypesC-45List-reverse (lambda (ext-0) (PreludeC-45TypesC-45List-reverseOnto '() ext-0)))
(define PreludeC-45Types-prim__integerToNat (lambda (arg-0) (let ((sc0 (let ((sc1 (or (and (<= 0 arg-0) 1) 0))) (cond ((equal? sc1 0) 0)(else 1))))) (cond ((equal? sc0 1) (Builtin-believe_me arg-0)) (else 0)))))
(define PreludeC-45Types-maybe (lambda (arg-2 arg-3 arg-4) (if (null? arg-4) (arg-2) (let ((e-2 (unbox arg-4))) ((arg-3) e-2)))))
(define PreludeC-45TypesC-45List-mapMaybe (lambda (arg-2 arg-3) (if (null? arg-3) '() (let ((e-2 (car arg-3))) (let ((e-3 (cdr arg-3))) (let ((sc1 (arg-2 e-2))) (if (null? sc1) (PreludeC-45TypesC-45List-mapMaybe arg-2 e-3) (let ((e-4 (unbox sc1))) (cons e-4 (PreludeC-45TypesC-45List-mapMaybe arg-2 e-3))))))))))
(define PreludeC-45Types-listBindOnto (lambda (arg-2 arg-3 arg-4) (if (null? arg-4) (PreludeC-45TypesC-45List-reverse arg-3) (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) (PreludeC-45Types-listBindOnto arg-2 (PreludeC-45TypesC-45List-reverseOnto arg-3 (arg-2 e-2)) e-3))))))
(define PreludeC-45Types-listBind (lambda (arg-2 arg-3) (PreludeC-45Types-listBindOnto arg-3 '() arg-2)))
(define PreludeC-45TypesC-45List-lengthTR (lambda (ext-0) (PreludeC-45TypesC-45List-lengthPlus 0 ext-0)))
(define PreludeC-45TypesC-45List-lengthPlus (lambda (arg-1 arg-2) (if (null? arg-2) arg-1 (let ((e-3 (cdr arg-2))) (PreludeC-45TypesC-45List-lengthPlus (+ arg-1 1) e-3)))))
(define PreludeC-45TypesC-45String-length (lambda (arg-0) (PreludeC-45Types-prim__integerToNat (string-length arg-0))))
(define PreludeC-45Types-isUpper (lambda (arg-0) (let ((sc0 (PreludeC-45EqOrd-u--C-62C-61_Ord_Char arg-0 #\A))) (cond ((equal? sc0 1) (PreludeC-45EqOrd-u--C-60C-61_Ord_Char arg-0 #\Z)) (else 0)))))
(define PreludeC-45Types-isSpace (lambda (arg-0) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-0 #\ ))) (cond ((equal? sc0 1) 1) (else (let ((sc1 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-0 (integer->char 9)))) (cond ((equal? sc1 1) 1) (else (let ((sc2 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-0 (integer->char 13)))) (cond ((equal? sc2 1) 1) (else (let ((sc3 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-0 (integer->char 10)))) (cond ((equal? sc3 1) 1) (else (let ((sc4 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-0 (integer->char 12)))) (cond ((equal? sc4 1) 1) (else (let ((sc5 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-0 (integer->char 11)))) (cond ((equal? sc5 1) 1) (else (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-0 (integer->char 160))))))))))))))))))))))
(define PreludeC-45Types-isOctDigit (lambda (arg-0) (let ((sc0 (PreludeC-45EqOrd-u--C-62C-61_Ord_Char arg-0 #\0))) (cond ((equal? sc0 1) (PreludeC-45EqOrd-u--C-60C-61_Ord_Char arg-0 #\7)) (else 0)))))
(define PreludeC-45Types-isLower (lambda (arg-0) (let ((sc0 (PreludeC-45EqOrd-u--C-62C-61_Ord_Char arg-0 #\a))) (cond ((equal? sc0 1) (PreludeC-45EqOrd-u--C-60C-61_Ord_Char arg-0 #\z)) (else 0)))))
(define PreludeC-45Types-isHexDigit (lambda (arg-0) (PreludeC-45Types-elem (csegen-98) (csegen-2) (PreludeC-45Types-toUpper arg-0) (PreludeC-45Types-n--9361-8543-u--hexChars arg-0))))
(define PreludeC-45Types-isDigit (lambda (arg-0) (let ((sc0 (PreludeC-45EqOrd-u--C-62C-61_Ord_Char arg-0 #\0))) (cond ((equal? sc0 1) (PreludeC-45EqOrd-u--C-60C-61_Ord_Char arg-0 #\9)) (else 0)))))
(define PreludeC-45Types-isControl (lambda (arg-0) (let ((sc0 (let ((sc1 (PreludeC-45EqOrd-u--C-62C-61_Ord_Char arg-0 (integer->char 0)))) (cond ((equal? sc1 1) (PreludeC-45EqOrd-u--C-60C-61_Ord_Char arg-0 (integer->char 31))) (else 0))))) (cond ((equal? sc0 1) 1) (else (let ((sc1 (PreludeC-45EqOrd-u--C-62C-61_Ord_Char arg-0 (integer->char 127)))) (cond ((equal? sc1 1) (PreludeC-45EqOrd-u--C-60C-61_Ord_Char arg-0 (integer->char 159))) (else 0))))))))
(define PreludeC-45Types-isAlphaNum (lambda (arg-0) (let ((sc0 (PreludeC-45Types-isDigit arg-0))) (cond ((equal? sc0 1) 1) (else (PreludeC-45Types-isAlpha arg-0))))))
(define PreludeC-45Types-isAlpha (lambda (arg-0) (let ((sc0 (PreludeC-45Types-isUpper arg-0))) (cond ((equal? sc0 1) 1) (else (PreludeC-45Types-isLower arg-0))))))
(define PreludeC-45Types-getAt (lambda (arg-1 arg-2) (cond ((equal? arg-1 0) (if (null? arg-2) '() (let ((e-3 (car arg-2))) (box e-3))))(else (let ((e-1 (- arg-1 1))) (if (null? arg-2) '() (let ((e-7 (cdr arg-2))) (PreludeC-45Types-getAt e-1 e-7))))))))
(define PreludeC-45TypesC-45List-filter (lambda (arg-1 arg-2) (if (null? arg-2) '() (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (let ((sc1 (arg-1 e-2))) (cond ((equal? sc1 1) (cons e-2 (PreludeC-45TypesC-45List-filter arg-1 e-3))) (else (PreludeC-45TypesC-45List-filter arg-1 e-3)))))))))
(define PreludeC-45Types-elemBy (lambda (arg-2 arg-3 arg-4 ext-0) (PreludeC-45Interfaces-any arg-2 (arg-3 arg-4) ext-0)))
(define PreludeC-45Types-elem (lambda (arg-2 arg-3 ext-1 ext-0) (PreludeC-45Types-elemBy arg-2 (lambda (eta-0) (lambda (eta-1) (let ((e-1 (car arg-3))) ((e-1 eta-0) eta-1)))) ext-1 ext-0)))
(define PreludeC-45Types-either (lambda (arg-3 arg-4 arg-5) (case (vector-ref arg-5 0) ((0) (let ((e-2 (vector-ref arg-5 1))) ((arg-3) e-2))) (else (let ((e-5 (vector-ref arg-5 1))) ((arg-4) e-5))))))
(define PreludeC-45Types-countFrom (lambda (arg-1 arg-2) (cons arg-1 (lambda () (PreludeC-45Types-countFrom (arg-2 arg-1) arg-2)))))
(define PreludeC-45TypesC-45SnocList-C-60C-62C-62 (lambda (arg-1 arg-2) (if (null? arg-1) arg-2 (let ((e-2 (car arg-1))) (let ((e-3 (cdr arg-1))) (PreludeC-45TypesC-45SnocList-C-60C-62C-62 e-2 (cons e-3 arg-2)))))))
(define PreludeC-45TypesC-45SnocList-C-60C-62C-60 (lambda (arg-1 arg-2) (if (null? arg-2) arg-1 (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (PreludeC-45TypesC-45SnocList-C-60C-62C-60 (cons arg-1 e-2) e-3))))))
(define PreludeC-45TypesC-45SnocList-C-43C-43 (lambda (arg-1 arg-2) (if (null? arg-2) arg-1 (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (cons (PreludeC-45TypesC-45SnocList-C-43C-43 arg-1 e-2) e-3))))))
(define PreludeC-45Num-u--mod_Integral_Int (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Int arg-1 (blodwen-toSignedInt 0 63)))) (cond ((equal? sc0 0) (blodwen-euclidMod arg-0 arg-1))(else ((Builtin-idris_crash 'erased) "Unhandled input for Prelude.Num.case block in mod at Prelude.Num:131:3--133:40"))))))
(define PreludeC-45Num-u--div_Integral_Int (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Int arg-1 (blodwen-toSignedInt 0 63)))) (cond ((equal? sc0 0) (bs/ arg-0 arg-1 63))(else ((Builtin-idris_crash 'erased) "Unhandled input for Prelude.Num.case block in div at Prelude.Num:128:3--130:40"))))))
(define PreludeC-45EqOrd-u--min_Ord_String (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-60_Ord_String arg-0 arg-1))) (cond ((equal? sc0 1) arg-0) (else arg-1)))))
(define PreludeC-45EqOrd-u--min_Ord_Int (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-60_Ord_Int arg-0 arg-1))) (cond ((equal? sc0 1) arg-0) (else arg-1)))))
(define PreludeC-45EqOrd-u--min_Ord_Char (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-60_Ord_Char arg-0 arg-1))) (cond ((equal? sc0 1) arg-0) (else arg-1)))))
(define PreludeC-45EqOrd-u--min_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (lambda (arg-2 arg-3 arg-4 arg-5) (let ((sc0 (PreludeC-45EqOrd-u--C-60_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 arg-2 arg-3 arg-4 arg-5))) (cond ((equal? sc0 1) arg-4) (else arg-5)))))
(define PreludeC-45EqOrd-u--max_Ord_String (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-62_Ord_String arg-0 arg-1))) (cond ((equal? sc0 1) arg-0) (else arg-1)))))
(define PreludeC-45EqOrd-u--max_Ord_Int (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-62_Ord_Int arg-0 arg-1))) (cond ((equal? sc0 1) arg-0) (else arg-1)))))
(define PreludeC-45EqOrd-u--max_Ord_Char (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-62_Ord_Char arg-0 arg-1))) (cond ((equal? sc0 1) arg-0) (else arg-1)))))
(define PreludeC-45EqOrd-u--max_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (lambda (arg-2 arg-3 arg-4 arg-5) (let ((sc0 (PreludeC-45EqOrd-u--C-62_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 arg-2 arg-3 arg-4 arg-5))) (cond ((equal? sc0 1) arg-4) (else arg-5)))))
(define PreludeC-45EqOrd-u--compare_Ord_String (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-60_Ord_String arg-0 arg-1))) (cond ((equal? sc0 1) 0) (else (let ((sc1 (PreludeC-45EqOrd-u--C-61C-61_Eq_String arg-0 arg-1))) (cond ((equal? sc1 1) 1) (else 2))))))))
(define PreludeC-45EqOrd-u--compare_Ord_Integer (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-60_Ord_Integer arg-0 arg-1))) (cond ((equal? sc0 1) 0) (else (let ((sc1 (PreludeC-45EqOrd-u--C-61C-61_Eq_Integer arg-0 arg-1))) (cond ((equal? sc1 1) 1) (else 2))))))))
(define PreludeC-45EqOrd-u--compare_Ord_Int (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-60_Ord_Int arg-0 arg-1))) (cond ((equal? sc0 1) 0) (else (let ((sc1 (PreludeC-45EqOrd-u--C-61C-61_Eq_Int arg-0 arg-1))) (cond ((equal? sc1 1) 1) (else 2))))))))
(define PreludeC-45EqOrd-u--compare_Ord_Char (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-60_Ord_Char arg-0 arg-1))) (cond ((equal? sc0 1) 0) (else (let ((sc1 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-0 arg-1))) (cond ((equal? sc1 1) 1) (else 2))))))))
(define PreludeC-45EqOrd-u--compare_Ord_Bool (lambda (arg-0 arg-1) (cond ((equal? arg-0 0) (cond ((equal? arg-1 0) 1) (else 0))) (else (cond ((equal? arg-1 0) 2) (else 1))))))
(define PreludeC-45EqOrd-u--compare_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (lambda (arg-2 arg-3 arg-4 arg-5) (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) (let ((e-6 (car arg-5))) (let ((e-7 (cdr arg-5))) (let ((sc2 (let ((e-1 (vector-ref arg-2 0))) (let ((e-13 (cdr e-1))) ((e-13 e-2) e-6))))) (cond ((equal? sc2 1) (let ((e-12 (vector-ref arg-2 1))) ((e-12 e-2) e-6))) (else (let ((e-12 (vector-ref arg-3 1))) ((e-12 e-3) e-7)))))))))))
(define PreludeC-45EqOrd-u--C-62_Ord_String (lambda (arg-0 arg-1) (let ((sc0 (or (and (string>? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-62_Ord_Int (lambda (arg-0 arg-1) (let ((sc0 (or (and (> arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-62_Ord_Char (lambda (arg-0 arg-1) (let ((sc0 (or (and (char>? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-62_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (lambda (arg-2 arg-3 arg-4 arg-5) (PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering (PreludeC-45EqOrd-u--compare_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 arg-2 arg-3 arg-4 arg-5) 2)))
(define PreludeC-45EqOrd-u--C-62C-61_Ord_String (lambda (arg-0 arg-1) (let ((sc0 (or (and (string>=? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-62C-61_Ord_Int (lambda (arg-0 arg-1) (let ((sc0 (or (and (>= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-62C-61_Ord_Char (lambda (arg-0 arg-1) (let ((sc0 (or (and (char>=? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-62C-61_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (lambda (arg-2 arg-3 arg-4 arg-5) (PreludeC-45EqOrd-u--C-47C-61_Eq_Ordering (PreludeC-45EqOrd-u--compare_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 arg-2 arg-3 arg-4 arg-5) 0)))
(define PreludeC-45EqOrd-u--C-61C-61_Eq_String (lambda (arg-0 arg-1) (let ((sc0 (or (and (string=? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering (lambda (arg-0 arg-1) (cond ((equal? arg-0 0) (cond ((equal? arg-1 0) 1)(else 0))) ((equal? arg-0 1) (cond ((equal? arg-1 1) 1)(else 0))) ((equal? arg-0 2) (cond ((equal? arg-1 2) 1)(else 0)))(else 0))))
(define PreludeC-45EqOrd-u--C-61C-61_Eq_Integer (lambda (arg-0 arg-1) (let ((sc0 (or (and (= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-61C-61_Eq_Int (lambda (arg-0 arg-1) (let ((sc0 (or (and (= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-61C-61_Eq_Char (lambda (arg-0 arg-1) (let ((sc0 (or (and (char=? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-61C-61_Eq_Bool (lambda (arg-0 arg-1) (cond ((equal? arg-0 1) (cond ((equal? arg-1 1) 1)(else 0))) ((equal? arg-0 0) (cond ((equal? arg-1 0) 1)(else 0)))(else 0))))
(define PreludeC-45EqOrd-u--C-61C-61_Eq_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (lambda (arg-2 arg-3 arg-4 arg-5) (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) (let ((e-6 (car arg-5))) (let ((e-7 (cdr arg-5))) (let ((sc2 (let ((e-1 (car arg-2))) ((e-1 e-2) e-6)))) (cond ((equal? sc2 1) (let ((e-1 (car arg-3))) ((e-1 e-3) e-7))) (else 0)))))))))
(define PreludeC-45EqOrd-u--C-60_Ord_String (lambda (arg-0 arg-1) (let ((sc0 (or (and (string<? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-60_Ord_Integer (lambda (arg-0 arg-1) (let ((sc0 (or (and (< arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-60_Ord_Int (lambda (arg-0 arg-1) (let ((sc0 (or (and (< arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-60_Ord_Char (lambda (arg-0 arg-1) (let ((sc0 (or (and (char<? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-60_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (lambda (arg-2 arg-3 arg-4 arg-5) (PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering (PreludeC-45EqOrd-u--compare_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 arg-2 arg-3 arg-4 arg-5) 0)))
(define PreludeC-45EqOrd-u--C-60C-61_Ord_String (lambda (arg-0 arg-1) (let ((sc0 (or (and (string<=? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-60C-61_Ord_Int (lambda (arg-0 arg-1) (let ((sc0 (or (and (<= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-60C-61_Ord_Char (lambda (arg-0 arg-1) (let ((sc0 (or (and (char<=? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-60C-61_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (lambda (arg-2 arg-3 arg-4 arg-5) (PreludeC-45EqOrd-u--C-47C-61_Eq_Ordering (PreludeC-45EqOrd-u--compare_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 arg-2 arg-3 arg-4 arg-5) 2)))
(define PreludeC-45EqOrd-u--C-47C-61_Eq_String (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_String arg-0 arg-1))) (cond ((equal? sc0 1) 0) (else 1)))))
(define PreludeC-45EqOrd-u--C-47C-61_Eq_Ordering (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering arg-0 arg-1))) (cond ((equal? sc0 1) 0) (else 1)))))
(define PreludeC-45EqOrd-u--C-47C-61_Eq_Int (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Int arg-0 arg-1))) (cond ((equal? sc0 1) 0) (else 1)))))
(define PreludeC-45EqOrd-u--C-47C-61_Eq_Char (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-0 arg-1))) (cond ((equal? sc0 1) 0) (else 1)))))
(define PreludeC-45EqOrd-u--C-47C-61_Eq_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (lambda (arg-2 arg-3 arg-4 arg-5) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 arg-2 arg-3 arg-4 arg-5))) (cond ((equal? sc0 1) 0) (else 1)))))
(define PreludeC-45InterfacesC-45Applicative-u--pure_Applicative_ComposeC-40C-40C-46C-32C-36fC-41C-32C-36gC-41 (lambda (arg-3 arg-4 ext-0) (let ((e-2 (vector-ref arg-3 1))) ((e-2 'erased) (let ((e-5 (vector-ref arg-4 1))) ((e-5 'erased) ext-0))))))
(define PreludeC-45InterfacesC-45Functor-u--map_Functor_ComposeC-40C-40C-46C-32C-36fC-41C-32C-36gC-41 (lambda (arg-4 arg-5 ext-0) ((let ((eff-0 arg-4)) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) ((let ((eff-0 arg-5)) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) ext-0))))
(define PreludeC-45InterfacesC-45Monad-u--C-62C-62C-61_Monad_ComposeC-40C-40C-46C-32C-36mC-41C-32C-36tC-41 (lambda (arg-4 arg-5 arg-6 arg-7 arg-8) (let ((e-2 (vector-ref arg-4 1))) ((((e-2 'erased) 'erased) arg-7) (lambda (eta-0) (((let ((eff-0 (let ((e-6 (vector-ref arg-4 0))) (let ((e-9 (vector-ref e-6 0))) e-9)))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) (lambda (clam-0) (let ((e-4 (vector-ref arg-5 2))) ((e-4 'erased) clam-0)))) (let ((e-4 (vector-ref arg-6 2))) ((((((e-4 'erased) 'erased) 'erased) (let ((e-9 (vector-ref arg-4 0))) e-9)) arg-8) eta-0))))))))
(define PreludeC-45InterfacesC-45BoolC-45Semigroup-u--C-60C-43C-62_Semigroup_AnyBool (lambda (arg-0 arg-1) (cond ((equal? arg-0 1) 1) (else arg-1))))
(define PreludeC-45InterfacesC-45BoolC-45Semigroup-u--C-60C-43C-62_Semigroup_AllBool (lambda (arg-0 arg-1) (cond ((equal? arg-0 1) arg-1) (else 0))))
(define PreludeC-45InterfacesC-45Applicative-u--C-60C-42C-62_Applicative_ComposeC-40C-40C-46C-32C-36fC-41C-32C-36gC-41 (lambda (arg-4 arg-5 arg-6 arg-7) (let ((e-3 (vector-ref arg-4 2))) ((((e-3 'erased) 'erased) (let ((e-4 (vector-ref arg-4 2))) ((((e-4 'erased) 'erased) (let ((e-8 (vector-ref arg-4 1))) ((e-8 'erased) (lambda (clam-0) (lambda (clam-1) (let ((e-10 (vector-ref arg-5 2))) ((((e-10 'erased) 'erased) clam-0) clam-1))))))) arg-6))) arg-7))))
(define PreludeC-45Interfaces-when (lambda (arg-1 arg-2 arg-3) (cond ((equal? arg-2 1) (arg-3)) (else (let ((e-2 (vector-ref arg-1 1))) ((e-2 'erased) (vector 0 )))))))
(define PreludeC-45Interfaces-traverse_ (lambda (arg-4 arg-5 arg-6 ext-0) (let ((e-1 (vector-ref arg-5 0))) (((((e-1 'erased) 'erased) (lambda (eta-0) (lambda (eta-1) (PreludeC-45Interfaces-C-42C-62 arg-4 (arg-6 eta-0) eta-1)))) (let ((e-8 (vector-ref arg-4 1))) ((e-8 'erased) (vector 0 )))) ext-0))))
(define PreludeC-45Interfaces-sequence (lambda (arg-3 arg-4 ext-0) (let ((e-3 (vector-ref arg-4 2))) ((((((e-3 'erased) 'erased) 'erased) arg-3) (lambda (eta-0) eta-0)) ext-0))))
(define PreludeC-45Interfaces-for_ (lambda (arg-4 arg-5 ext-0 ext-1) (PreludeC-45Basics-flip (lambda (eta-0) (lambda (eta-1) (PreludeC-45Interfaces-traverse_ arg-4 arg-5 eta-0 eta-1))) ext-0 ext-1)))
(define PreludeC-45Interfaces-for (lambda (arg-4 arg-5 ext-0 ext-1) (PreludeC-45Basics-flip (lambda (clam-0) (lambda (clam-1) (let ((e-3 (vector-ref arg-5 2))) ((((((e-3 'erased) 'erased) 'erased) arg-4) clam-0) clam-1)))) ext-0 ext-1)))
(define PreludeC-45Interfaces-concat (lambda (arg-2 arg-3 ext-0) (let ((e-6 (vector-ref arg-3 5))) (((((e-6 'erased) 'erased) arg-2) (lambda (eta-0) eta-0)) ext-0))))
(define PreludeC-45Interfaces-any (lambda (arg-2 ext-1 ext-0) (let ((e-6 (vector-ref arg-2 5))) (((((e-6 'erased) 'erased) (cons (lambda (arg-8326) (lambda (arg-8329) (PreludeC-45InterfacesC-45BoolC-45Semigroup-u--C-60C-43C-62_Semigroup_AnyBool arg-8326 arg-8329))) 0)) ext-1) ext-0))))
(define PreludeC-45Interfaces-all (lambda (arg-2 ext-1 ext-0) (let ((e-6 (vector-ref arg-2 5))) (((((e-6 'erased) 'erased) (cons (lambda (arg-8326) (lambda (arg-8329) (PreludeC-45InterfacesC-45BoolC-45Semigroup-u--C-60C-43C-62_Semigroup_AllBool arg-8326 arg-8329))) 1)) ext-1) ext-0))))
(define PreludeC-45Interfaces-C-62C-62 (lambda (arg-2 arg-3 arg-4) (let ((e-2 (vector-ref arg-2 1))) ((((e-2 'erased) 'erased) arg-3) (lambda (_-10158) (arg-4))))))
(define PreludeC-45Interfaces-C-60C-36C-62 (lambda (arg-3 arg-4 arg-5) (((let ((eff-0 arg-3)) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-4) arg-5)))
(define PreludeC-45Interfaces-C-42C-62 (lambda (arg-3 arg-4 arg-5) (let ((e-3 (vector-ref arg-3 2))) ((((e-3 'erased) 'erased) (((let ((eff-0 (let ((e-6 (vector-ref arg-3 0))) e-6))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) (lambda (eta-0) (lambda (eta-1) eta-1))) arg-4)) arg-5))))
(define PreludeC-45Interfaces-C-36C-62 (lambda (arg-3 arg-4 arg-5) (((let ((eff-0 arg-3)) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) (lambda (eta-0) arg-5)) arg-4)))
(define PreludeC-45Show-n--3172-11556-u--showC-39 (lambda (arg-1 arg-2 arg-3 arg-4) (if (null? arg-4) arg-3 (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) (if (null? e-3) (string-append arg-3 (let ((e-1 (car arg-1))) (e-1 e-2))) (PreludeC-45Show-n--3172-11556-u--showC-39 arg-1 arg-2 (string-append arg-3 (string-append (let ((e-1 (car arg-1))) (e-1 e-2)) ", ")) e-3)))))))
(define PreludeC-45Show-n--2390-10835-u--asciiTab (lambda (arg-0) (cons "NUL" (cons "SOH" (cons "STX" (cons "ETX" (cons "EOT" (cons "ENQ" (cons "ACK" (cons "BEL" (cons "BS" (cons "HT" (cons "LF" (cons "VT" (cons "FF" (cons "CR" (cons "SO" (cons "SI" (cons "DLE" (cons "DC1" (cons "DC2" (cons "DC3" (cons "DC4" (cons "NAK" (cons "SYN" (cons "ETB" (cons "CAN" (cons "EM" (cons "SUB" (cons "ESC" (cons "FS" (cons "GS" (cons "RS" (cons "US" '()))))))))))))))))))))))))))))))))))
(define PreludeC-45Show-u--show_Show_String (lambda (arg-0) (string-cons #\" ((PreludeC-45Show-showLitString (PreludeC-45Types-fastUnpack arg-0)) "\""))))
(define PreludeC-45Show-u--show_Show_Nat (lambda (arg-0) (PreludeC-45Show-u--show_Show_Integer arg-0)))
(define PreludeC-45Show-u--show_Show_Integer (lambda (arg-0) (PreludeC-45Show-u--showPrec_Show_Integer (vector 0 ) arg-0)))
(define PreludeC-45Show-u--show_Show_Int (lambda (arg-0) (PreludeC-45Show-u--showPrec_Show_Int (vector 0 ) arg-0)))
(define PreludeC-45Show-u--show_Show_C-40ListC-32C-36aC-41 (lambda (arg-1 arg-2) (string-append "[" (string-append (PreludeC-45Show-n--3172-11556-u--showC-39 arg-1 arg-2 "" arg-2) "]"))))
(define PreludeC-45Show-u--showPrec_Show_String (lambda (arg-0 arg-1) (PreludeC-45Show-u--show_Show_String arg-1)))
(define PreludeC-45Show-u--showPrec_Show_Integer (lambda (ext-0 ext-1) (PreludeC-45Show-primNumShow (lambda (eta-0) (number->string eta-0)) ext-0 ext-1)))
(define PreludeC-45Show-u--showPrec_Show_Int (lambda (ext-0 ext-1) (PreludeC-45Show-primNumShow (lambda (eta-0) (number->string eta-0)) ext-0 ext-1)))
(define PreludeC-45Show-u--compare_Ord_Prec (lambda (arg-0 arg-1) (case (vector-ref arg-0 0) ((4) (let ((e-0 (vector-ref arg-0 1))) (case (vector-ref arg-1 0) ((4) (let ((e-1 (vector-ref arg-1 1))) (PreludeC-45EqOrd-u--compare_Ord_Integer e-0 e-1)))(else (PreludeC-45EqOrd-u--compare_Ord_Integer (PreludeC-45Show-precCon arg-0) (PreludeC-45Show-precCon arg-1))))))(else (PreludeC-45EqOrd-u--compare_Ord_Integer (PreludeC-45Show-precCon arg-0) (PreludeC-45Show-precCon arg-1))))))
(define PreludeC-45Show-u--C-62C-61_Ord_Prec (lambda (arg-0 arg-1) (PreludeC-45EqOrd-u--C-47C-61_Eq_Ordering (PreludeC-45Show-u--compare_Ord_Prec arg-0 arg-1) 0)))
(define PreludeC-45Show-showParens (lambda (arg-0 arg-1) (cond ((equal? arg-0 0) arg-1) (else (string-append "(" (string-append arg-1 ")"))))))
(define PreludeC-45Show-showLitString (lambda (arg-0) (lambda (clam-0) (if (null? arg-0) clam-0 (let ((e-2 (car arg-0))) (let ((e-3 (cdr arg-0))) (cond ((equal? e-2 #\") (string-append "\\\"" ((PreludeC-45Show-showLitString e-3) clam-0)))(else ((PreludeC-45Show-showLitChar e-2) ((PreludeC-45Show-showLitString e-3) clam-0))))))))))
(define PreludeC-45Show-showLitChar (lambda (arg-0) (cond ((equal? arg-0 (integer->char 7)) (lambda (arg-1) (string-append "\\a" arg-1))) ((equal? arg-0 (integer->char 8)) (lambda (arg-1) (string-append "\\b" arg-1))) ((equal? arg-0 (integer->char 12)) (lambda (arg-1) (string-append "\\f" arg-1))) ((equal? arg-0 (integer->char 10)) (lambda (arg-1) (string-append "\\n" arg-1))) ((equal? arg-0 (integer->char 13)) (lambda (arg-1) (string-append "\\r" arg-1))) ((equal? arg-0 (integer->char 9)) (lambda (arg-1) (string-append "\\t" arg-1))) ((equal? arg-0 (integer->char 11)) (lambda (arg-1) (string-append "\\v" arg-1))) ((equal? arg-0 (integer->char 14)) (lambda (eta-0) (PreludeC-45Show-protectEsc (lambda (arg-1) (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\H)) "\\SO" eta-0))) ((equal? arg-0 (integer->char 127)) (lambda (arg-1) (string-append "\\DEL" arg-1))) ((equal? arg-0 #\\) (lambda (arg-1) (string-append "\\\\" arg-1)))(else (lambda (clam-0) (let ((sc0 (PreludeC-45Types-getAt (PreludeC-45Types-prim__integerToNat (char->integer arg-0)) (PreludeC-45Show-n--2390-10835-u--asciiTab arg-0)))) (if (null? sc0) (let ((sc1 (PreludeC-45EqOrd-u--C-62_Ord_Char arg-0 (integer->char 127)))) (cond ((equal? sc1 1) (string-cons #\\ (PreludeC-45Show-protectEsc (lambda (eta-0) (PreludeC-45Types-isDigit eta-0)) (PreludeC-45Show-u--show_Show_Int (cast-char-boundedInt arg-0 63)) clam-0))) (else (string-cons arg-0 clam-0)))) (let ((e-1 (unbox sc0))) (string-cons #\\ (string-append e-1 clam-0))))))))))
(define PreludeC-45Show-protectEsc (lambda (arg-0 arg-1 arg-2) (string-append arg-1 (string-append (let ((sc0 (PreludeC-45Show-firstCharIs arg-0 arg-2))) (cond ((equal? sc0 1) "\\&") (else ""))) arg-2))))
(define PreludeC-45Show-primNumShow (lambda (arg-1 arg-2 arg-3) (let ((u--str (arg-1 arg-3))) (PreludeC-45Show-showParens (let ((sc0 (PreludeC-45Show-u--C-62C-61_Ord_Prec arg-2 (vector 5 )))) (cond ((equal? sc0 1) (PreludeC-45Show-firstCharIs (lambda (arg-0) (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-0 #\-)) u--str)) (else 0))) u--str))))
(define PreludeC-45Show-precCon (lambda (arg-0) (case (vector-ref arg-0 0) ((0) 0) ((1) 1) ((2) 2) ((3) 3) ((4) 4) ((5) 5) (else 6))))
(define PreludeC-45Show-firstCharIs (lambda (arg-0 arg-1) (cond ((equal? arg-1 "") 0)(else (arg-0 (string-ref arg-1 0))))))
(define PreludeC-45IO-u--map_Functor_IO (lambda (arg-2 arg-3) (PrimIO-io_bind arg-3 (lambda (eta-0) (lambda (eta-1) (arg-2 eta-0))))))
(define PreludeC-45IO-putStrLn (lambda (arg-1 arg-2) (PreludeC-45IO-putStr arg-1 (string-append arg-2 "\xa;"))))
(define PreludeC-45IO-putStr (lambda (arg-1 arg-2) (let ((e-2 (cdr arg-1))) ((e-2 'erased) (lambda (eta-0) (PreludeC-45IO-prim__putStr arg-2 eta-0))))))
(define PreludeC-45IO-getLine (lambda (arg-1) (let ((e-2 (cdr arg-1))) ((e-2 'erased) (lambda (eta-0) (PreludeC-45IO-prim__getStr eta-0))))))
(define PrimIO-case--io_bind-933 (lambda (arg-3 arg-5) (let ((eff-0 arg-5)) (let ((eff-1 (arg-3 eff-0))) (eff-1 'erased)))))
(define PrimIO-unsafePerformIO (lambda (arg-1) (let ((eff-0 arg-1)) (PrimIO-unsafeCreateWorld (lambda (u--w) (let ((eff-1 (eff-0 u--w))) eff-1))))))
(define PrimIO-unsafeCreateWorld (lambda (arg-1) (arg-1 #f)))
(define PrimIO-prim__forgetPtr (lambda (ext-0) (Builtin-believe_me ext-0)))
(define PrimIO-io_bind (lambda (arg-2 arg-3) (let ((eff-0 arg-2)) (lambda (u--w) (PrimIO-case--io_bind-933 arg-3 (eff-0 u--w))))))
(define PreludeC-45Cast-u--cast_Cast_String_Integer (lambda (ext-0) (cast-string-int ext-0)))
(define PreludeC-45Cast-u--cast_Cast_Nat_Int (lambda (ext-0) (blodwen-toSignedInt ext-0 63)))
(define PreludeC-45Cast-u--cast_Cast_Integer_Double (lambda (ext-0) (exact->inexact ext-0)))
(define PreludeC-45Cast-u--cast_Cast_Int_Integer (lambda (ext-0) ext-0))
(define PreludeC-45Cast-u--cast_Cast_Char_String (lambda (ext-0) (string ext-0)))
(define SystemC-45FileC-45Support-ok (lambda (arg-3 arg-4) (let ((e-1 (car arg-3))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) (vector 1 arg-4)))))))
(define SystemC-45FileC-45ReadWrite-n--3468-1511-u--fReadC-39 (lambda (arg-1 arg-2 arg-4 arg-5 arg-6) (let ((e-1 (car arg-4))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (SystemC-45FileC-45ReadWrite-fEOF arg-4 arg-5)) (lambda (bind-0) (cond ((equal? bind-0 1) (let ((e-7 (car arg-4))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (vector 1 (PreludeC-45Types-fastConcat (DataC-45SnocList-u--cast_Cast_C-40SnocListC-32C-36aC-41_C-40ListC-32C-36aC-41 arg-6)))))))) (else (let ((e-7 (car arg-4))) (let ((e-9 (vector-ref e-7 1))) ((((e-9 'erased) 'erased) (SystemC-45FileC-45ReadWrite-fGetLine arg-4 arg-5)) (lambda (_-0) (case (vector-ref _-0 0) ((1) (let ((e-11 (vector-ref _-0 1))) (SystemC-45FileC-45ReadWrite-n--3468-1511-u--fReadC-39 arg-1 arg-2 arg-4 arg-5 (cons arg-6 e-11)))) (else (let ((e-11 (vector-ref _-0 1))) (let ((e-13 (car arg-4))) (let ((e-16 (vector-ref e-13 0))) (let ((e-18 (vector-ref e-16 1))) ((e-18 'erased) (vector 0 e-11))))))))))))))))))))
(define SystemC-45FileC-45ReadWrite-writeFile (lambda (arg-1 arg-2 arg-3) (SystemC-45FileC-45Handle-withFile arg-1 arg-2 1 (lambda (eta-0) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) eta-0))))) (lambda (eta-0) (PreludeC-45Basics-flip (lambda (eta-1) (lambda (eta-2) (SystemC-45FileC-45ReadWrite-fPutStr arg-1 eta-1 eta-2))) arg-3 eta-0)))))
(define SystemC-45FileC-45ReadWrite-readLinesOnto (lambda (arg-1 arg-2 arg-3 arg-4 arg-5) (if (null? arg-4) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) (vector 1 (cons 0 (PreludeC-45TypesC-45List-reverse arg-2))))))) (let ((e-0 (unbox arg-4))) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (SystemC-45FileC-45ReadWrite-fEOF arg-1 arg-5)) (lambda (_-0) (cond ((equal? _-0 0) (cond ((equal? arg-3 0) (PreludeC-45InterfacesC-45Monad-u--C-62C-62C-61_Monad_ComposeC-40C-40C-46C-32C-36mC-41C-32C-36tC-41 (let ((e-7 (car arg-1))) e-7) (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (case (vector-ref arg-8737 0) ((0) (let ((e-6 (vector-ref arg-8737 1))) (vector 0 e-6))) (else (let ((e-6 (vector-ref arg-8737 1))) (vector 1 (u--func e-6))))))))) (lambda (u--a) (lambda (arg-9440) (vector 1 arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (case (vector-ref arg-9446 0) ((0) (let ((e-6 (vector-ref arg-9446 1))) (vector 0 e-6))) (else (let ((e-6 (vector-ref arg-9446 1))) (case (vector-ref arg-9453 0) ((1) (let ((e-8 (vector-ref arg-9453 1))) (vector 1 (e-6 e-8)))) (else (let ((e-11 (vector-ref arg-9453 1))) (vector 0 e-11)))))))))))) (csegen-187) (csegen-188)) (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (case (vector-ref arg-8737 0) ((0) (let ((e-6 (vector-ref arg-8737 1))) (vector 0 e-6))) (else (let ((e-6 (vector-ref arg-8737 1))) (vector 1 (u--func e-6))))))))) (csegen-204) (csegen-208)) (SystemC-45FileC-45ReadWrite-fGetLine arg-1 arg-5) (lambda (u--str) (SystemC-45FileC-45ReadWrite-readLinesOnto arg-1 (cons u--str arg-2) 0 (e-0) arg-5))))(else (let ((e-6 (- arg-3 1))) (PreludeC-45Interfaces-C-42C-62 (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) ((PreludeC-45InterfacesC-45Functor-u--map_Functor_ComposeC-40C-40C-46C-32C-36fC-41C-32C-36gC-41 (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) (let ((e-14 (vector-ref e-11 0))) e-14))) (lambda (b-0) (lambda (a-0) (lambda (func-0) (lambda (arg-8738) (case (vector-ref arg-8738 0) ((0) (let ((e-7 (vector-ref arg-8738 1))) (vector 0 e-7))) (else (let ((e-7 (vector-ref arg-8738 1))) (vector 1 (func-0 e-7))))))))) u--func) arg-8737))))) (lambda (u--a) (lambda (arg-9440) (PreludeC-45InterfacesC-45Applicative-u--pure_Applicative_ComposeC-40C-40C-46C-32C-36fC-41C-32C-36gC-41 (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) e-11)) (vector (lambda (u--b) (lambda (a-0) (lambda (u--func) (lambda (arg-8737) (case (vector-ref arg-8737 0) ((0) (let ((e-7 (vector-ref arg-8737 1))) (vector 0 e-7))) (else (let ((e-7 (vector-ref arg-8737 1))) (vector 1 (u--func e-7))))))))) (lambda (a-0) (lambda (arg-9441) (vector 1 arg-9441))) (lambda (u--b) (lambda (a-0) (lambda (arg-9446) (lambda (arg-9453) (case (vector-ref arg-9446 0) ((0) (let ((e-7 (vector-ref arg-9446 1))) (vector 0 e-7))) (else (let ((e-7 (vector-ref arg-9446 1))) (case (vector-ref arg-9453 0) ((1) (let ((e-8 (vector-ref arg-9453 1))) (vector 1 (e-7 e-8)))) (else (let ((e-11 (vector-ref arg-9453 1))) (vector 0 e-11)))))))))))) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (PreludeC-45InterfacesC-45Applicative-u--C-60C-42C-62_Applicative_ComposeC-40C-40C-46C-32C-36fC-41C-32C-36gC-41 (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) e-11)) (vector (lambda (b-0) (lambda (a-0) (lambda (u--func) (lambda (arg-8737) (case (vector-ref arg-8737 0) ((0) (let ((e-7 (vector-ref arg-8737 1))) (vector 0 e-7))) (else (let ((e-7 (vector-ref arg-8737 1))) (vector 1 (u--func e-7))))))))) (lambda (a-0) (lambda (arg-9440) (vector 1 arg-9440))) (lambda (b-0) (lambda (a-0) (lambda (arg-9447) (lambda (arg-9454) (case (vector-ref arg-9447 0) ((0) (let ((e-7 (vector-ref arg-9447 1))) (vector 0 e-7))) (else (let ((e-7 (vector-ref arg-9447 1))) (case (vector-ref arg-9454 0) ((1) (let ((e-8 (vector-ref arg-9454 1))) (vector 1 (e-7 e-8)))) (else (let ((e-11 (vector-ref arg-9454 1))) (vector 0 e-11)))))))))))) arg-9446 arg-9453)))))) (SystemC-45FileC-45ReadWrite-fSeekLine arg-1 arg-5) (SystemC-45FileC-45ReadWrite-readLinesOnto arg-1 arg-2 e-6 (box e-0) arg-5)))))) (else (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (vector 1 (cons 1 (PreludeC-45TypesC-45List-reverse arg-2)))))))))))))))))
(define SystemC-45FileC-45ReadWrite-readFilePage (lambda (arg-1 arg-2 arg-3 arg-4) (SystemC-45FileC-45Handle-withFile arg-1 arg-4 0 (lambda (eta-0) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) eta-0))))) (lambda (eta-0) (SystemC-45FileC-45ReadWrite-readLinesOnto arg-1 '() arg-2 arg-3 eta-0)))))
(define SystemC-45FileC-45ReadWrite-readFile (lambda (arg-1 ext-0) (((let ((eff-0 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))))) (lambda (arg-0) (lambda (arg-2) ((((eff-0 'erased) 'erased) arg-0) arg-2)))) ((let ((eff-0 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (case (vector-ref eta-3 0) ((0) (let ((e-2 (vector-ref eta-3 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref eta-3 1))) (vector 1 (eta-2 e-5))))))))))) (lambda (arg-0) (lambda (arg-2) ((((eff-0 'erased) 'erased) arg-0) arg-2)))) (lambda (eta-0) (PreludeC-45Types-fastConcat (Builtin-snd eta-0))))) (SystemC-45FileC-45ReadWrite-readFilePage arg-1 0 (DataC-45Fuel-forever) ext-0))))
(define SystemC-45FileC-45ReadWrite-getStringAndFree (lambda (arg-1 arg-2) (let ((sc0 (PreludeC-45EqOrd-u--C-47C-61_Eq_Int (PrimIO-prim__nullAnyPtr (PrimIO-prim__forgetPtr arg-2)) (blodwen-toSignedInt 0 63)))) (cond ((equal? sc0 1) (SystemC-45FileC-45Error-returnError arg-1)) (else (let ((u--s (PreludeC-45IO-prim__getString arg-2))) (PreludeC-45Interfaces-C-62C-62 (let ((e-1 (car arg-1))) e-1) (SystemC-45FFI-free arg-1 (PrimIO-prim__forgetPtr arg-2)) (lambda () (SystemC-45FileC-45Support-ok arg-1 u--s)))))))))
(define SystemC-45FileC-45ReadWrite-fSeekLine (lambda (arg-1 arg-2) (let ((eff-0 arg-2)) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (SystemC-45FileC-45ReadWrite-prim__seekLine eff-0 eta-0))))) (lambda (u--res) (let ((sc1 (PreludeC-45EqOrd-u--C-47C-61_Eq_Int u--res (blodwen-toSignedInt 0 63)))) (cond ((equal? sc1 1) (SystemC-45FileC-45Error-returnError arg-1)) (else (SystemC-45FileC-45Support-ok arg-1 (vector 0 ))))))))))))
(define SystemC-45FileC-45ReadWrite-fRead (lambda (arg-1 arg-2) (SystemC-45FileC-45ReadWrite-n--3468-1511-u--fReadC-39 arg-1 arg-2 arg-1 arg-2 '())))
(define SystemC-45FileC-45ReadWrite-fPutStr (lambda (arg-1 arg-2 arg-3) (let ((eff-0 arg-2)) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (SystemC-45FileC-45ReadWrite-prim__writeLine eff-0 arg-3 eta-0))))) (lambda (u--res) (let ((sc1 (PreludeC-45EqOrd-u--C-61C-61_Eq_Int u--res (blodwen-toSignedInt 0 63)))) (cond ((equal? sc1 1) (SystemC-45FileC-45Error-returnError arg-1)) (else (SystemC-45FileC-45Support-ok arg-1 (vector 0 ))))))))))))
(define SystemC-45FileC-45ReadWrite-fGetLine (lambda (arg-1 arg-2) (let ((eff-0 arg-2)) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (SystemC-45FileC-45ReadWrite-prim__readLine eff-0 eta-0))))) (lambda (u--res) (SystemC-45FileC-45ReadWrite-getStringAndFree arg-1 u--res))))))))
(define SystemC-45FileC-45ReadWrite-fEOF (lambda (arg-1 arg-2) (let ((eff-0 arg-2)) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (SystemC-45FileC-45ReadWrite-prim__eof eff-0 eta-0))))) (lambda (u--res) (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (PreludeC-45EqOrd-u--C-47C-61_Eq_Int u--res (blodwen-toSignedInt 0 63)))))))))))))
(define SystemC-45FFI-free (lambda (arg-1 arg-2) (let ((e-2 (cdr arg-1))) ((e-2 'erased) (lambda (eta-0) (SystemC-45FFI-prim__free arg-2 eta-0))))))
(define SystemC-45FileC-45Error-u--show_Show_FileError (lambda (arg-0) (case (vector-ref arg-0 0) ((0) (let ((e-0 (vector-ref arg-0 1))) (SystemC-45Errno-strerror e-0))) ((1) "File Read Error") ((2) "File Write Error") ((3) "File Not Found") ((4) "Permission Denied") (else "File Exists"))))
(define SystemC-45FileC-45Error-returnError (lambda (arg-2) (let ((e-1 (car arg-2))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-2))) ((e-6 'erased) (lambda (eta-0) (SystemC-45FileC-45Error-prim__fileErrno eta-0))))) (lambda (u--err) (let ((e-7 (car arg-2))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (vector 0 (cond ((equal? u--err 0) (vector 1 )) ((equal? u--err 1) (vector 2 )) ((equal? u--err 2) (vector 3 )) ((equal? u--err 3) (vector 4 )) ((equal? u--err 4) (vector 5 ))(else (vector 0 (bs- u--err 5 63)))))))))))))))
(define SystemC-45Errno-strerror (lambda (arg-0) (PrimIO-unsafePerformIO (lambda (eta-0) (SystemC-45Errno-prim__strerror arg-0 eta-0)))))
(define SystemC-45Errno-getErrno (lambda (arg-1) (let ((e-2 (cdr arg-1))) ((e-2 'erased) (lambda (eta-0) (SystemC-45Errno-prim__getErrno eta-0))))))
(define SystemC-45FileC-45Handle-withFile (lambda (arg-3 arg-4 arg-5 arg-6 arg-7) (let ((e-1 (car arg-3))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (SystemC-45FileC-45Handle-openFile arg-3 arg-4 arg-5)) (lambda (_-0) (case (vector-ref _-0 0) ((1) (let ((e-6 (vector-ref _-0 1))) (let ((e-8 (car arg-3))) (let ((e-10 (vector-ref e-8 1))) ((((e-10 'erased) 'erased) (arg-7 e-6)) (lambda (u--res) (PreludeC-45Interfaces-C-62C-62 (let ((e-13 (car arg-3))) e-13) (SystemC-45FileC-45Handle-closeFile arg-3 e-6) (lambda () (let ((e-13 (car arg-3))) (let ((e-16 (vector-ref e-13 0))) (let ((e-18 (vector-ref e-16 1))) ((e-18 'erased) u--res)))))))))))) (else (let ((e-6 (vector-ref _-0 1))) (PreludeC-45Interfaces-C-60C-36C-62 (let ((e-8 (car arg-3))) (let ((e-11 (vector-ref e-8 0))) (let ((e-14 (vector-ref e-11 0))) e-14))) (lambda (eta-0) (vector 0 eta-0)) (arg-6 e-6)))))))))))
(define SystemC-45FileC-45Handle-openFile (lambda (arg-1 arg-2 arg-3) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (SystemC-45FileC-45Handle-prim__open arg-2 (SystemC-45FileC-45Mode-modeStr arg-3) eta-0))))) (lambda (u--res) (let ((sc1 (PreludeC-45EqOrd-u--C-47C-61_Eq_Int (PrimIO-prim__nullAnyPtr u--res) (blodwen-toSignedInt 0 63)))) (cond ((equal? sc1 1) (SystemC-45FileC-45Error-returnError arg-1)) (else (SystemC-45FileC-45Support-ok arg-1 u--res))))))))))
(define SystemC-45FileC-45Handle-closeFile (lambda (arg-1 arg-2) (let ((eff-0 arg-2)) (let ((e-2 (cdr arg-1))) ((e-2 'erased) (lambda (eta-0) (SystemC-45FileC-45Handle-prim__close eff-0 eta-0)))))))
(define SystemC-45FileC-45Mode-modeStr (lambda (arg-0) (cond ((equal? arg-0 0) (let ((sc1 (SystemC-45Info-isWindows))) (cond ((equal? sc1 1) "rb") (else "r")))) ((equal? arg-0 1) (let ((sc1 (SystemC-45Info-isWindows))) (cond ((equal? sc1 1) "wb") (else "w")))) ((equal? arg-0 2) (let ((sc1 (SystemC-45Info-isWindows))) (cond ((equal? sc1 1) "ab") (else "a")))) ((equal? arg-0 3) (let ((sc1 (SystemC-45Info-isWindows))) (cond ((equal? sc1 1) "rb+") (else "r+")))) ((equal? arg-0 4) (let ((sc1 (SystemC-45Info-isWindows))) (cond ((equal? sc1 1) "wb+") (else "w+")))) (else (let ((sc1 (SystemC-45Info-isWindows))) (cond ((equal? sc1 1) "ab+") (else "a+")))))))
(define SystemC-45Info-os(blodwen-lazy (lambda () (blodwen-os))))
(define SystemC-45Info-isWindows(blodwen-lazy (lambda () (PreludeC-45Types-elem (csegen-98) (csegen-218) (SystemC-45Info-os) (cons "windows" (cons "mingw32" (cons "cygwin32" '())))))))
(define DataC-45SnocList-u--cast_Cast_C-40SnocListC-32C-36aC-41_C-40ListC-32C-36aC-41 (lambda (arg-1) (PreludeC-45TypesC-45SnocList-C-60C-62C-62 arg-1 '())))
(define DataC-45Maybe-isJust (lambda (arg-1) (if (null? arg-1) 0 1)))
(define DataC-45Maybe-fromMaybe (lambda (arg-1 arg-2) (if (null? arg-2) (arg-1) (let ((e-2 (unbox arg-2))) e-2))))
(define DataC-45Maybe-fromJust (lambda (arg-1) (let ((e-1 (unbox arg-1))) e-1)))
(define DataC-45List1-n--2800-2691-u--loop (lambda (arg-1 arg-2 arg-3 arg-4) (if (null? arg-4) '() (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) (cons arg-3 (DataC-45List1-n--2800-2691-u--loop arg-1 arg-2 e-2 e-3)))))))
(define DataC-45List1-n--2770-2664-u--loop (lambda (arg-1 arg-2 arg-3 arg-4) (if (null? arg-4) arg-3 (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) (DataC-45List1-n--2770-2664-u--loop arg-1 arg-2 e-2 e-3))))))
(define DataC-45List1-u--traverse_Traversable_List1 (lambda (arg-3 arg-4 arg-5) (let ((e-1 (car arg-5))) (let ((e-2 (cdr arg-5))) (let ((e-3 (vector-ref arg-3 2))) ((((e-3 'erased) 'erased) (let ((e-6 (vector-ref arg-3 2))) ((((e-6 'erased) 'erased) (let ((e-10 (vector-ref arg-3 1))) ((e-10 'erased) (csegen-222)))) (arg-4 e-1)))) (PreludeC-45Types-u--traverse_Traversable_List arg-3 arg-4 e-2)))))))
(define DataC-45List1-u--map_Functor_List1 (lambda (arg-2 arg-3) (let ((e-1 (car arg-3))) (let ((e-2 (cdr arg-3))) (cons (arg-2 e-1) (((csegen-226) arg-2) e-2))))))
(define DataC-45List1-u--C-61C-61_Eq_C-40List1C-32C-36aC-41 (lambda (arg-1 arg-2 arg-3) (let ((e-1 (car arg-2))) (let ((e-2 (cdr arg-2))) (let ((e-4 (car arg-3))) (let ((e-5 (cdr arg-3))) (let ((sc2 (let ((e-6 (car arg-1))) ((e-6 e-1) e-4)))) (cond ((equal? sc2 1) (PreludeC-45Types-u--C-61C-61_Eq_C-40ListC-32C-36aC-41 arg-1 e-2 e-5)) (else 0)))))))))
(define DataC-45List1-singleton (lambda (arg-1) (cons arg-1 '())))
(define DataC-45List1-reverseOnto (lambda (arg-1 arg-2) (if (null? arg-2) arg-1 (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (DataC-45List1-reverseOnto (cons e-2 (DataC-45List1-forget arg-1)) e-3))))))
(define DataC-45List1-reverse (lambda (arg-1) (let ((e-1 (car arg-1))) (let ((e-2 (cdr arg-1))) (DataC-45List1-reverseOnto (DataC-45List1-singleton e-1) e-2)))))
(define DataC-45List1-last (lambda (arg-1) (let ((e-1 (car arg-1))) (let ((e-2 (cdr arg-1))) (DataC-45List1-n--2770-2664-u--loop e-1 e-2 e-1 e-2)))))
(define DataC-45List1-init (lambda (arg-1) (let ((e-1 (car arg-1))) (let ((e-2 (cdr arg-1))) (DataC-45List1-n--2800-2691-u--loop e-1 e-2 e-1 e-2)))))
(define DataC-45List1-forget (lambda (arg-1) (let ((e-1 (car arg-1))) (let ((e-2 (cdr arg-1))) (cons e-1 e-2)))))
(define DataC-45List1-appendl (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-2 (cdr arg-1))) (cons e-1 (PreludeC-45TypesC-45List-tailRecAppend e-2 arg-2))))))
(define DataC-45List1-C-43C-43 (lambda (arg-1 arg-2) (DataC-45List1-appendl arg-1 (DataC-45List1-forget arg-2))))
(define DataC-45List-split (lambda (arg-1 arg-2) (let ((sc0 (DataC-45List-break arg-1 arg-2))) (let ((e-2 (car sc0))) (let ((e-3 (cdr sc0))) (if (null? e-3) (DataC-45List1-singleton e-2) (let ((e-7 (cdr e-3))) (cons e-2 (DataC-45List1-forget (DataC-45List-split arg-1 e-7))))))))))
(define DataC-45List-span (lambda (arg-1 arg-2) (if (null? arg-2) (cons '() '()) (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (let ((sc1 (arg-1 e-2))) (cond ((equal? sc1 1) (let ((sc2 (DataC-45List-span arg-1 e-3))) (let ((e-5 (car sc2))) (let ((e-4 (cdr sc2))) (cons (cons e-2 e-5) e-4))))) (else (cons '() (cons e-2 e-3))))))))))
(define DataC-45List-replicate (lambda (arg-1 arg-2) (cond ((equal? arg-1 0) '())(else (let ((e-0 (- arg-1 1))) (cons arg-2 (DataC-45List-replicate e-0 arg-2)))))))
(define DataC-45List-partition (lambda (arg-1 arg-2) (if (null? arg-2) (cons '() '()) (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (let ((sc1 (DataC-45List-partition arg-1 e-3))) (let ((e-5 (car sc1))) (let ((e-4 (cdr sc1))) (let ((sc2 (arg-1 e-2))) (cond ((equal? sc2 1) (cons (cons e-2 e-5) e-4)) (else (cons e-5 (cons e-2 e-4)))))))))))))
(define DataC-45List-mergeReplicate (lambda (arg-1 arg-2) (if (null? arg-2) '() (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (cons arg-1 (cons e-2 (DataC-45List-mergeReplicate arg-1 e-3))))))))
(define DataC-45List-intersperse (lambda (arg-1 arg-2) (if (null? arg-2) '() (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (cons e-2 (DataC-45List-mergeReplicate arg-1 e-3)))))))
(define DataC-45List-headC-39 (lambda (arg-1) (if (null? arg-1) '() (let ((e-2 (car arg-1))) (box e-2)))))
(define DataC-45List-break (lambda (arg-1 arg-2) (DataC-45List-span (lambda (eta-0) (let ((sc0 (arg-1 eta-0))) (cond ((equal? sc0 1) 0) (else 1)))) arg-2)))
(define DataC-45Fuel-forever(blodwen-lazy (lambda () (box (lambda () (DataC-45Fuel-forever))))))
(define SystemC-45FileC-45Process-popen (lambda (arg-1 arg-2 arg-3) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (SystemC-45FileC-45Process-prim__popen arg-2 (SystemC-45FileC-45Mode-modeStr arg-3) eta-0))))) (lambda (u--ptr) (let ((sc1 (PreludeC-45EqOrd-u--C-47C-61_Eq_Int (PrimIO-prim__nullAnyPtr u--ptr) (blodwen-toSignedInt 0 63)))) (cond ((equal? sc1 1) (SystemC-45FileC-45Error-returnError arg-1)) (else (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (vector 1 u--ptr))))))))))))))
(define SystemC-45FileC-45Process-pclose (lambda (arg-1 arg-2) (let ((eff-0 arg-2)) (let ((e-2 (cdr arg-1))) ((e-2 'erased) (lambda (eta-0) (SystemC-45FileC-45Process-prim__pclose eff-0 eta-0)))))))
(define SystemC-45FileC-45Meta-exists (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (SystemC-45FileC-45Handle-openFile arg-1 arg-2 0)) (lambda (_-0) (case (vector-ref _-0 0) ((1) (let ((e-6 (vector-ref _-0 1))) (PreludeC-45Interfaces-C-62C-62 (let ((e-8 (car arg-1))) e-8) (SystemC-45FileC-45Handle-closeFile arg-1 e-6) (lambda () (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) (let ((e-13 (vector-ref e-11 1))) ((e-13 'erased) 1)))))))) (else (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) (let ((e-13 (vector-ref e-11 1))) ((e-13 'erased) 0))))))))))))
(define DataC-45String-with--parsePositiveC-44parsePosTrimmed-6830 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (cond ((equal? arg-3 "") (if (null? arg-4) '() (let ((e-0 (car arg-4))) (let ((e-1 (cdr arg-4))) (cond ((equal? e-0 #\+) (((csegen-230) (lambda (eta-0) (let ((e-3 (vector-ref arg-1 2))) (e-3 eta-0)))) (DataC-45String-parseNumWithoutSign (PreludeC-45Types-fastUnpack e-1) 0)))(else (let ((sc3 (let ((sc4 (PreludeC-45EqOrd-u--C-62C-61_Ord_Char e-0 #\0))) (cond ((equal? sc4 1) (PreludeC-45EqOrd-u--C-60C-61_Ord_Char e-0 #\9)) (else 0))))) (cond ((equal? sc3 1) (((csegen-230) (lambda (eta-0) (let ((e-3 (vector-ref arg-1 2))) (e-3 eta-0)))) (DataC-45String-parseNumWithoutSign (PreludeC-45Types-fastUnpack e-1) (PreludeC-45Cast-u--cast_Cast_Int_Integer (bs- (cast-char-boundedInt e-0 63) (cast-char-boundedInt #\0 63) 63))))) (else '())))))))))(else (let ((e-0 (car arg-4))) (let ((e-1 (cdr arg-4))) (cond ((equal? e-0 #\+) (((csegen-230) (lambda (eta-0) (let ((e-3 (vector-ref arg-1 2))) (e-3 eta-0)))) (DataC-45String-parseNumWithoutSign (PreludeC-45Types-fastUnpack e-1) 0)))(else (let ((sc1 (let ((sc2 (PreludeC-45EqOrd-u--C-62C-61_Ord_Char e-0 #\0))) (cond ((equal? sc2 1) (PreludeC-45EqOrd-u--C-60C-61_Ord_Char e-0 #\9)) (else 0))))) (cond ((equal? sc1 1) (((csegen-230) (lambda (eta-0) (let ((e-3 (vector-ref arg-1 2))) (e-3 eta-0)))) (DataC-45String-parseNumWithoutSign (PreludeC-45Types-fastUnpack e-1) (PreludeC-45Cast-u--cast_Cast_Int_Integer (bs- (cast-char-boundedInt e-0 63) (cast-char-boundedInt #\0 63) 63))))) (else '())))))))))))
(define DataC-45String-with--ltrim-6503 (lambda (arg-0 arg-1) (cond ((equal? arg-0 "") (case (vector-ref arg-1 0) ((0) "")(else (let ((e-0 (vector-ref arg-1 1))) (let ((e-1 (vector-ref arg-1 2))) (let ((e-2 (vector-ref arg-1 3))) (let ((u--str (string-cons e-0 e-1))) (let ((sc2 (PreludeC-45Types-isSpace e-0))) (cond ((equal? sc2 1) (DataC-45String-with--ltrim-6503 e-1 (e-2))) (else u--str))))))))))(else (let ((e-0 (vector-ref arg-1 1))) (let ((e-1 (vector-ref arg-1 2))) (let ((e-2 (vector-ref arg-1 3))) (let ((u--str (string-cons e-0 e-1))) (let ((sc1 (PreludeC-45Types-isSpace e-0))) (cond ((equal? sc1 1) (DataC-45String-with--ltrim-6503 e-1 (e-2))) (else u--str)))))))))))
(define DataC-45String-with--asList-6479 (lambda (arg-0 arg-1) (cond ((equal? arg-0 "") (if (null? arg-1) (vector 0 ) (let ((e-0 (car arg-1))) (let ((e-1 (cdr arg-1))) (vector 1 e-0 e-1 (lambda () (DataC-45String-asList e-1)))))))(else (let ((e-0 (car arg-1))) (let ((e-1 (cdr arg-1))) (vector 1 e-0 e-1 (lambda () (DataC-45String-asList e-1)))))))))
(define DataC-45String-n--3619-6211-u--unlinesC-39 (lambda (arg-0) (if (null? arg-0) '() (let ((e-2 (car arg-0))) (let ((e-3 (cdr arg-0))) (cons e-2 (cons "\xa;" (DataC-45String-n--3619-6211-u--unlinesC-39 e-3))))))))
(define DataC-45String-n--4223-6824-u--parsePosTrimmed (lambda (arg-1 arg-2 arg-3) (DataC-45String-with--parsePositiveC-44parsePosTrimmed-6830 'erased arg-1 arg-3 arg-3 (DataC-45String-strM arg-3))))
(define DataC-45String-n--3752-6341-u--linesHelp (lambda (arg-0 arg-1 arg-2) (if (null? arg-1) (if (null? arg-2) '() (if (null? arg-2) (cons (PreludeC-45TypesC-45List-reverse arg-1) '()) (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (cond ((equal? e-2 (integer->char 10)) (cons (PreludeC-45TypesC-45List-reverse arg-1) (DataC-45String-n--3752-6341-u--linesHelp arg-0 '() e-3))) ((equal? e-2 (integer->char 13)) (if (null? e-3) (cons (PreludeC-45TypesC-45List-reverse arg-1) (DataC-45String-n--3752-6341-u--linesHelp arg-0 '() e-3)) (let ((e-5 (car e-3))) (let ((e-6 (cdr e-3))) (cond ((equal? e-5 (integer->char 10)) (cons (PreludeC-45TypesC-45List-reverse arg-1) (DataC-45String-n--3752-6341-u--linesHelp arg-0 '() e-6)))(else (cons (PreludeC-45TypesC-45List-reverse arg-1) (DataC-45String-n--3752-6341-u--linesHelp arg-0 '() e-3))))))))(else (DataC-45String-n--3752-6341-u--linesHelp arg-0 (cons e-2 arg-1) e-3))))))) (if (null? arg-2) (cons (PreludeC-45TypesC-45List-reverse arg-1) '()) (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (cond ((equal? e-2 (integer->char 10)) (cons (PreludeC-45TypesC-45List-reverse arg-1) (DataC-45String-n--3752-6341-u--linesHelp arg-0 '() e-3))) ((equal? e-2 (integer->char 13)) (if (null? e-3) (cons (PreludeC-45TypesC-45List-reverse arg-1) (DataC-45String-n--3752-6341-u--linesHelp arg-0 '() e-3)) (let ((e-5 (car e-3))) (let ((e-6 (cdr e-3))) (cond ((equal? e-5 (integer->char 10)) (cons (PreludeC-45TypesC-45List-reverse arg-1) (DataC-45String-n--3752-6341-u--linesHelp arg-0 '() e-6)))(else (cons (PreludeC-45TypesC-45List-reverse arg-1) (DataC-45String-n--3752-6341-u--linesHelp arg-0 '() e-3))))))))(else (DataC-45String-n--3752-6341-u--linesHelp arg-0 (cons e-2 arg-1) e-3)))))))))
(define DataC-45String-unwords (lambda (ext-0) (DataC-45String-joinBy " " ext-0)))
(define DataC-45String-trim (lambda (ext-0) (DataC-45String-ltrim (string-reverse (DataC-45String-ltrim (string-reverse ext-0))))))
(define DataC-45String-strM (lambda (arg-0) (cond ((equal? arg-0 "") '())(else (Builtin-believe_me (cons (string-ref arg-0 0) (substring arg-0 1 (string-length arg-0))))))))
(define DataC-45String-split (lambda (arg-0 arg-1) (DataC-45List1-u--map_Functor_List1 (lambda (eta-0) (PreludeC-45Types-fastPack eta-0)) (DataC-45List-split arg-0 (PreludeC-45Types-fastUnpack arg-1)))))
(define DataC-45String-span (lambda (arg-0 arg-1) (let ((sc0 (DataC-45List-span arg-0 (PreludeC-45Types-fastUnpack arg-1)))) (let ((e-2 (car sc0))) (let ((e-3 (cdr sc0))) (cons (PreludeC-45Types-fastPack e-2) (PreludeC-45Types-fastPack e-3)))))))
(define DataC-45String-replicate (lambda (arg-0 arg-1) (PreludeC-45Types-fastPack (DataC-45List-replicate arg-0 arg-1))))
(define DataC-45String-parsePositive (lambda (arg-1 arg-2) (DataC-45String-n--4223-6824-u--parsePosTrimmed arg-1 arg-2 (DataC-45String-trim arg-2))))
(define DataC-45String-parseNumWithoutSign (lambda (arg-0 arg-1) (if (null? arg-0) (box arg-1) (let ((e-2 (car arg-0))) (let ((e-3 (cdr arg-0))) (let ((sc1 (let ((sc2 (PreludeC-45EqOrd-u--C-62C-61_Ord_Char e-2 #\0))) (cond ((equal? sc2 1) (PreludeC-45EqOrd-u--C-60C-61_Ord_Char e-2 #\9)) (else 0))))) (cond ((equal? sc1 1) (DataC-45String-parseNumWithoutSign e-3 (+ (* arg-1 10) (PreludeC-45Cast-u--cast_Cast_Int_Integer (bs- (cast-char-boundedInt e-2 63) (cast-char-boundedInt #\0 63) 63))))) (else '()))))))))
(define DataC-45String-ltrim (lambda (arg-0) (DataC-45String-with--ltrim-6503 arg-0 (DataC-45String-asList arg-0))))
(define DataC-45String-linesC-39 (lambda (arg-0) (DataC-45String-n--3752-6341-u--linesHelp arg-0 '() arg-0)))
(define DataC-45String-lines (lambda (arg-0) (((csegen-226) (lambda (eta-0) (PreludeC-45Types-fastPack eta-0))) (DataC-45String-linesC-39 (PreludeC-45Types-fastUnpack arg-0)))))
(define DataC-45String-joinBy (lambda (arg-0 arg-1) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (DataC-45List-intersperse arg-0 arg-1))))
(define DataC-45String-indent (lambda (arg-0 arg-1) (string-append (DataC-45String-replicate arg-0 #\ ) arg-1)))
(define DataC-45String-fastUnlines (lambda (ext-0) (PreludeC-45Types-fastConcat (DataC-45String-n--3619-6211-u--unlinesC-39 ext-0))))
(define DataC-45String-break (lambda (arg-0 ext-0) (DataC-45String-span (lambda (eta-0) (let ((sc0 (arg-0 eta-0))) (cond ((equal? sc0 1) 0) (else 1)))) ext-0)))
(define DataC-45String-asList (lambda (arg-0) (DataC-45String-with--asList-6479 arg-0 (DataC-45String-strM arg-0))))
(define PackC-45RunnerC-45Install-case--docsImpl-13697 (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (if (null? arg-9) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (vector 0 )) (let ((e-1 (unbox arg-9))) (let ((e-4 (vector-ref e-1 1))) (let ((e-5 (vector-ref e-1 2))) (let ((e-6 (vector-ref e-1 3))) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-13 (vector-ref e-10 0))) e-13))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) e-10)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) e-10)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-7 (car arg-1))) e-7) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-7 (car arg-1))) e-7) arg-9934)))) (PackC-45CoreC-45IO-sys arg-1 (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons ((csegen-236) arg-6) (cons ((csegen-237) " html ") (cons ((csegen-236) e-4) (cons (csegen-239) (cons ((csegen-236) e-5) (cons ((csegen-237) " > ") (cons ((csegen-236) e-6) '()))))))))) (lambda () (PackC-45CoreC-45Ipkg-insertSources arg-1 e-1))))))))))
(define PackC-45RunnerC-45Install-case--installApp-13074 (lambda (arg-1 arg-2 arg-3 arg-4 arg-5) (cond ((equal? arg-5 2) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (vector 0 ))) ((equal? arg-5 1) (cond ((equal? arg-4 0) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (vector 0 ))) (else (PackC-45RunnerC-45Install-appLink arg-1 (let ((sc2 (let ((eff-0 arg-2)) eff-0))) (let ((e-0 (vector-ref sc2 0))) e-0)) (let ((e-5 (vector-ref arg-3 4))) e-5) (let ((e-2 (vector-ref arg-3 1))) e-2) (PackC-45DatabaseC-45Types-usePackagePath (let ((e-1 (vector-ref arg-3 0))) e-1))))))(else (PackC-45RunnerC-45Database-withPkgEnv arg-1 (let ((eff-0 arg-2)) eff-0) (let ((e-2 (vector-ref arg-3 1))) e-2) (let ((e-1 (vector-ref arg-3 0))) e-1) (lambda (u--dir) (let ((u--ipkgAbs (PackC-45DatabaseC-45Types-ipkg u--dir (let ((e-1 (vector-ref arg-3 0))) e-1)))) (let ((e-1 (vector-ref arg-3 0))) (case (vector-ref e-1 0) ((2) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-9 (car arg-1))) (let ((e-12 (vector-ref e-9 0))) e-12)) (vector 0 ))) ((0) (let ((e-9 (vector-ref e-1 2))) (let ((e-8 (vector-ref e-1 3))) (let ((e-7 (vector-ref e-1 4))) (let ((u--cache (PackC-45ConfigC-45Environment-ipkgCachePath (let ((sc1 (let ((eff-0 arg-2)) eff-0))) (let ((e-0 (vector-ref sc1 0))) e-0)) (let ((e-15 (vector-ref arg-3 1))) e-15) e-9 e-8))) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-12 (car arg-1))) (let ((e-15 (vector-ref e-12 0))) (let ((e-18 (vector-ref e-15 0))) e-18))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-12 (car arg-1))) (let ((e-15 (vector-ref e-12 0))) e-15)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-12 (car arg-1))) (let ((e-15 (vector-ref e-12 0))) e-15)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-12 (car arg-1))) e-12) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-12 (car arg-1))) e-12) arg-9934)))) (PackC-45CoreC-45IO-copyFile arg-1 u--cache u--ipkgAbs) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-12 (car arg-1))) (let ((e-15 (vector-ref e-12 0))) (let ((e-18 (vector-ref e-15 0))) e-18))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-12 (car arg-1))) (let ((e-15 (vector-ref e-12 0))) e-15)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-12 (car arg-1))) (let ((e-15 (vector-ref e-12 0))) e-15)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-12 (car arg-1))) e-12) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-12 (car arg-1))) e-12) arg-9934)))) (PackC-45RunnerC-45Install-libPkg arg-1 arg-2 '() "--build" (let ((e-14 (vector-ref arg-3 2))) e-14)) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-12 (car arg-1))) (let ((e-15 (vector-ref e-12 0))) (let ((e-18 (vector-ref e-15 0))) e-18))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-12 (car arg-1))) (let ((e-15 (vector-ref e-12 0))) e-15)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-12 (car arg-1))) (let ((e-15 (vector-ref e-12 0))) e-15)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-12 (car arg-1))) e-12) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-12 (car arg-1))) e-12) arg-9934)))) (PackC-45RunnerC-45Install-copyApp arg-1 arg-2 arg-3) (lambda () (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-12 (car arg-1))) (let ((e-15 (vector-ref e-12 0))) (let ((e-18 (vector-ref e-15 0))) e-18))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-12 (car arg-1))) (let ((e-15 (vector-ref e-12 0))) e-15)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-12 (car arg-1))) (let ((e-15 (vector-ref e-12 0))) e-15)) arg-9446 arg-9453)))))) e-7 (lambda () (PackC-45RunnerC-45Install-appLink arg-1 (let ((sc1 (let ((eff-0 arg-2)) eff-0))) (let ((e-0 (vector-ref sc1 0))) e-0)) (let ((e-12 (vector-ref arg-3 4))) e-12) (let ((e-15 (vector-ref arg-3 1))) e-15) (PackC-45DatabaseC-45Types-usePackagePath (let ((e-16 (vector-ref arg-3 0))) e-16)))))))))))))))) (else (let ((e-10 (vector-ref e-1 3))) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-11 (car arg-1))) (let ((e-14 (vector-ref e-11 0))) (let ((e-17 (vector-ref e-14 0))) e-17))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-11 (car arg-1))) (let ((e-14 (vector-ref e-11 0))) e-14)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-11 (car arg-1))) (let ((e-14 (vector-ref e-11 0))) e-14)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-11 (car arg-1))) e-11) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-11 (car arg-1))) e-11) arg-9934)))) (PackC-45RunnerC-45Install-libPkg arg-1 arg-2 '() "--build" (let ((e-13 (vector-ref arg-3 2))) e-13)) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-11 (car arg-1))) (let ((e-14 (vector-ref e-11 0))) (let ((e-17 (vector-ref e-14 0))) e-17))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-11 (car arg-1))) (let ((e-14 (vector-ref e-11 0))) e-14)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-11 (car arg-1))) (let ((e-14 (vector-ref e-11 0))) e-14)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-11 (car arg-1))) e-11) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-11 (car arg-1))) e-11) arg-9934)))) (PackC-45RunnerC-45Install-copyApp arg-1 arg-2 arg-3) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-11 (car arg-1))) (let ((e-14 (vector-ref e-11 0))) (let ((e-17 (vector-ref e-14 0))) e-17))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-11 (car arg-1))) (let ((e-14 (vector-ref e-11 0))) e-14)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-11 (car arg-1))) (let ((e-14 (vector-ref e-11 0))) e-14)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-11 (car arg-1))) e-11) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-11 (car arg-1))) e-11) arg-9934)))) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-11 (car arg-1))) (let ((e-14 (vector-ref e-11 0))) (let ((e-17 (vector-ref e-14 0))) e-17))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-11 (car arg-1))) (let ((e-14 (vector-ref e-11 0))) e-14)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-11 (car arg-1))) (let ((e-14 (vector-ref e-11 0))) e-14)) arg-9446 arg-9453)))))) e-10 (lambda () (PackC-45RunnerC-45Install-appLink arg-1 (let ((sc1 (let ((eff-0 arg-2)) eff-0))) (let ((e-0 (vector-ref sc1 0))) e-0)) (let ((e-11 (vector-ref arg-3 4))) e-11) (let ((e-14 (vector-ref arg-3 1))) e-14) (PackC-45DatabaseC-45Types-usePackagePath (let ((e-15 (vector-ref arg-3 0))) e-15))))) (lambda () (PackC-45CoreC-45IO-write arg-1 (cons (DataC-45FilePath-C-60C-47C-62 (let ((e-15 (vector-ref arg-3 0))) (case (vector-ref e-15 0) ((0) (let ((e-18 (vector-ref e-15 2))) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 (let ((sc2 (let ((eff-0 arg-2)) eff-0))) (let ((e-0 (vector-ref sc2 0))) e-0)))) eff-0) (csegen-248)) ((csegen-250) (let ((sc2 (let ((eff-0 arg-2)) eff-0))) (let ((e-20 (vector-ref sc2 3))) (let ((e-25 (vector-ref e-20 1))) e-25))))) ((csegen-250) (let ((e-24 (vector-ref arg-3 1))) e-24))) ((csegen-250) e-18)))) ((1) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 (let ((sc2 (let ((eff-0 arg-2)) eff-0))) (let ((e-0 (vector-ref sc2 0))) e-0)))) eff-0) (csegen-248)) ((csegen-250) (let ((sc2 (let ((eff-0 arg-2)) eff-0))) (let ((e-19 (vector-ref sc2 3))) (let ((e-24 (vector-ref e-19 1))) e-24))))) (csegen-256)) ((csegen-250) (let ((e-23 (vector-ref arg-3 1))) e-23)))) (else (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 (let ((sc2 (let ((eff-0 arg-2)) eff-0))) (let ((e-0 (vector-ref sc2 0))) e-0)))) eff-0) (csegen-248)) ((csegen-250) (let ((sc2 (let ((eff-0 arg-2)) eff-0))) (let ((e-17 (vector-ref sc2 3))) (let ((e-22 (vector-ref e-17 1))) e-22))))) (csegen-263))))) (csegen-267)) (PreludeC-45Types-fastUnpack ".timestamp")) ""))))))))))))))))))
(define PackC-45RunnerC-45Install-case--caseC-32blockC-32inC-32installLib-12838 (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (case (vector-ref arg-7 0) ((0) (let ((e-2 (vector-ref arg-7 2))) (let ((e-3 (vector-ref arg-7 3))) (let ((u--cache (PackC-45ConfigC-45Environment-ipkgCachePath (let ((sc1 (let ((eff-0 arg-2)) eff-0))) (let ((e-0 (vector-ref sc1 0))) e-0)) (let ((e-8 (vector-ref arg-3 1))) e-8) e-2 e-3))) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-6 (car arg-1))) (let ((e-9 (vector-ref e-6 0))) (let ((e-12 (vector-ref e-9 0))) e-12))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-6 (car arg-1))) (let ((e-9 (vector-ref e-6 0))) e-9)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-6 (car arg-1))) (let ((e-9 (vector-ref e-6 0))) e-9)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-6 (car arg-1))) e-6) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-6 (car arg-1))) e-6) arg-9934)))) (PackC-45CoreC-45IO-copyFile arg-1 u--cache arg-6) (lambda () (PackC-45RunnerC-45Install-installImpl arg-1 arg-2 arg-5 arg-3))))))) ((1) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-11 (vector-ref e-5 0))) e-11))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45RunnerC-45Install-installImpl arg-1 arg-2 arg-5 arg-3) (lambda () (PackC-45CoreC-45IO-write arg-1 (cons (DataC-45FilePath-C-60C-47C-62 (let ((e-1 (vector-ref arg-3 0))) (case (vector-ref e-1 0) ((0) (let ((e-11 (vector-ref e-1 2))) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 (let ((sc2 (let ((eff-0 arg-2)) eff-0))) (let ((e-0 (vector-ref sc2 0))) e-0)))) eff-0) (csegen-248)) ((csegen-250) (let ((sc2 (let ((eff-0 arg-2)) eff-0))) (let ((e-13 (vector-ref sc2 3))) (let ((e-18 (vector-ref e-13 1))) e-18))))) ((csegen-250) (let ((e-16 (vector-ref arg-3 1))) e-16))) ((csegen-250) e-11)))) ((1) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 (let ((sc2 (let ((eff-0 arg-2)) eff-0))) (let ((e-0 (vector-ref sc2 0))) e-0)))) eff-0) (csegen-248)) ((csegen-250) (let ((sc2 (let ((eff-0 arg-2)) eff-0))) (let ((e-12 (vector-ref sc2 3))) (let ((e-17 (vector-ref e-12 1))) e-17))))) (csegen-256)) ((csegen-250) (let ((e-15 (vector-ref arg-3 1))) e-15)))) (else (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 (let ((sc2 (let ((eff-0 arg-2)) eff-0))) (let ((e-0 (vector-ref sc2 0))) e-0)))) eff-0) (csegen-248)) ((csegen-250) (let ((sc2 (let ((eff-0 arg-2)) eff-0))) (let ((e-9 (vector-ref sc2 3))) (let ((e-15 (vector-ref e-9 1))) e-15))))) (csegen-263))))) (vector 1 (cons '() (PackC-45CoreC-45Types-C-60C-45C-62 (lambda (eta-0) eta-0) (lambda (eta-0) (PackC-45CoreC-45Types-u--cast_Cast_PkgVersion_Body eta-0)) (csegen-261) (let ((sc1 (let ((eff-0 arg-2)) eff-0))) (let ((e-3 (vector-ref sc1 3))) (let ((e-5 (vector-ref e-3 2))) e-5))))))) (PreludeC-45Types-fastUnpack ".timestamp")) "")))) (else (let ((e-10 (vector-ref arg-7 1))) (let ((u--cache (PackC-45ConfigC-45Environment-coreCachePath (let ((sc1 (let ((eff-0 arg-2)) eff-0))) (let ((e-0 (vector-ref sc1 0))) e-0)) (let ((sc1 (let ((eff-0 arg-2)) eff-0))) (let ((e-3 (vector-ref sc1 3))) e-3)) e-10))) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45CoreC-45IO-copyFile arg-1 u--cache arg-6) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (cond ((equal? e-10 6) (PackC-45CoreC-45IO-sys arg-1 ((csegen-237) "make src/IdrisPaths.idr")))(else (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (vector 0 )))) (lambda () (PackC-45RunnerC-45Install-installImpl arg-1 arg-2 arg-5 arg-3)))))))))))
(define PackC-45RunnerC-45Install-case--installLib-12781 (lambda (arg-1 arg-2 arg-3 arg-4) (cond ((equal? arg-4 1) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (vector 0 )))(else (PackC-45RunnerC-45Database-withPkgEnv arg-1 (let ((eff-0 arg-2)) eff-0) (let ((e-2 (vector-ref arg-3 1))) e-2) (let ((e-1 (vector-ref arg-3 0))) e-1) (lambda (u--dir) (let ((u--ipkgAbs (PackC-45DatabaseC-45Types-ipkg u--dir (let ((e-1 (vector-ref arg-3 0))) e-1)))) (PackC-45RunnerC-45Install-case--caseC-32blockC-32inC-32installLib-12838 arg-1 arg-2 arg-3 arg-4 u--dir u--ipkgAbs (let ((e-1 (vector-ref arg-3 0))) e-1)))))))))
(define PackC-45RunnerC-45Install-n--8177-13484-u--htmlDir (lambda (arg-1 arg-2 arg-3 arg-4) (DataC-45FilePath-C-60C-47C-62 (PackC-45RunnerC-45Install-n--8177-13483-u--docsDir arg-1 arg-2 arg-3 arg-4) (csegen-273))))
(define PackC-45RunnerC-45Install-n--8177-13483-u--docsDir (lambda (arg-1 arg-2 arg-3 arg-4) (DataC-45FilePath-C-60C-47C-62 (PackC-45CoreC-45Ipkg-buildPath (let ((e-3 (vector-ref arg-3 2))) e-3)) (csegen-273))))
(define PackC-45RunnerC-45Install-withSrcStr (lambda (arg-0) (let ((sc0 (let ((e-9 (vector-ref arg-0 7))) e-9))) (cond ((equal? sc0 1) " (with sources)") (else "")))))
(define PackC-45RunnerC-45Install-update (lambda (arg-1 arg-2) (let ((u--dir (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 (let ((sc0 (let ((eff-0 arg-2)) eff-0))) (let ((e-1 (vector-ref sc0 1))) e-1)))) eff-0) (csegen-275)))) (let ((u--ipkg (cons u--dir (cons #\p (cons #\a (cons #\c (cons #\k (csegen-279)))))))) (PackC-45CoreC-45IO-finally (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-rmDir arg-1 u--dir) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45ConfigC-45Environment-log (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) (let ((sc0 (let ((eff-0 arg-2)) eff-0))) (let ((e-2 (vector-ref sc0 2))) (let ((e-18 (vector-ref e-2 16))) e-18))) 1 (lambda () (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "Updating pack. If this fails, try switching to the latest\xa;package collection." '())))) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45CoreC-45Git-gitClone arg-1 (PackC-45ConfigC-45Environment-packRepo (let ((sc0 (let ((eff-0 arg-2)) eff-0))) (let ((e-2 (vector-ref sc0 2))) e-2))) u--dir) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PreludeC-45Interfaces-traverse_ (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (vector (lambda (u--acc) (lambda (u--elem) (lambda (u--func) (lambda (u--init) (lambda (u--input) (PreludeC-45Types-u--foldr_Foldable_Maybe u--func u--init u--input)))))) (lambda (u--elem) (lambda (u--acc) (lambda (u--func) (lambda (u--init) (lambda (u--input) (PreludeC-45Types-u--foldl_Foldable_Maybe u--func u--init u--input)))))) (lambda (u--elem) (lambda (arg-10420) (PreludeC-45Types-u--null_Foldable_Maybe arg-10420))) (lambda (u--elem) (lambda (u--acc) (lambda (u--m) (lambda (i_con-0) (lambda (u--funcM) (lambda (u--init) (lambda (u--input) (PreludeC-45Types-u--foldlM_Foldable_Maybe i_con-0 u--funcM u--init u--input)))))))) (lambda (u--elem) (lambda (arg-10449) (PreludeC-45Types-u--toList_Foldable_Maybe arg-10449))) (lambda (u--a) (lambda (u--m) (lambda (i_con-0) (lambda (u--f) (lambda (arg-10463) (PreludeC-45Types-u--foldMap_Foldable_Maybe i_con-0 u--f arg-10463))))))) (lambda (u--c) (PackC-45CoreC-45IO-inDir arg-1 u--dir (lambda (_-14410) (PackC-45CoreC-45Git-gitCheckout arg-1 u--c)))) (PackC-45ConfigC-45Environment-packCommit (let ((sc0 (let ((eff-0 arg-2)) eff-0))) (let ((e-2 (vector-ref sc0 2))) e-2)))) (lambda () (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45RunnerC-45Database-parseLibIpkg arg-1 (let ((eff-0 arg-2)) eff-0) u--ipkg u--ipkg) (lambda (u--d) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45RunnerC-45Install-installDeps arg-1 arg-2 u--d) (lambda () (PackC-45CoreC-45IO-inDir arg-1 u--dir (lambda (_-14439) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) eta-2 eta-3))))) (lambda (eta-0) eta-0) (PackC-45CoreC-45IO-sysRun arg-1 "git rev-parse HEAD")) (lambda (u--vers) (let ((u--installDir (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 (let ((sc0 (let ((eff-0 arg-2)) eff-0))) (let ((e-0 (vector-ref sc0 0))) e-0)))) eff-0) (DataC-45FilePathC-45RelPath-fromString "install/pack")) ((csegen-250) u--vers)))) (let ((u--installedExec (DataC-45FilePath-C-60C-47C-62 u--installDir (csegen-275)))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (SystemC-45FileC-45Meta-exists (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 u--installedExec)) (lambda (u--ex) (cond ((equal? u--ex 1) (PackC-45CoreC-45IO-link arg-1 u--installedExec (PackC-45ConfigC-45Environment-packExec (let ((sc1 (let ((eff-0 arg-2)) eff-0))) (let ((e-0 (vector-ref sc1 0))) e-0))))) (else (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45RunnerC-45Install-libPkg arg-1 arg-2 '() "--build" u--d) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45CoreC-45IO-mkDir arg-1 u--installDir) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45CoreC-45IO-sys arg-1 (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons ((csegen-237) "cp -r build/exec/* ") (cons ((csegen-234) u--installDir) '())))) (lambda () (PackC-45CoreC-45IO-link arg-1 u--installedExec (PackC-45ConfigC-45Environment-packExec (let ((sc1 (let ((eff-0 arg-2)) eff-0))) (let ((e-0 (vector-ref sc1 0))) e-0)))))))))))))))))))))))))))))))))))
(define PackC-45RunnerC-45Install-pthStr (lambda (arg-0 arg-1) (cond ((equal? arg-1 0) "") (else (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "export IDRIS2_PACKAGE_PATH=\"$(" (cons ((csegen-234) (let ((sc1 (PackC-45ConfigC-45Environment-packExec arg-0))) (let ((e-1 (car sc1))) (let ((e-2 (cdr sc1))) (DataC-45FilePath-C-60C-47C-62 e-1 (vector 1 (cons '() e-2))))))) (cons " package-path)\"\xa;export IDRIS2_LIBS=\"$(" (cons ((csegen-234) (let ((sc1 (PackC-45ConfigC-45Environment-packExec arg-0))) (let ((e-1 (car sc1))) (let ((e-2 (cdr sc1))) (DataC-45FilePath-C-60C-47C-62 e-1 (vector 1 (cons '() e-2))))))) (cons " libs-path)\"\xa;export IDRIS2_DATA=\"$(" (cons ((csegen-234) (let ((sc1 (PackC-45ConfigC-45Environment-packExec arg-0))) (let ((e-1 (car sc1))) (let ((e-2 (cdr sc1))) (DataC-45FilePath-C-60C-47C-62 e-1 (vector 1 (cons '() e-2))))))) (cons " data-path)\"" '()))))))))))))
(define PackC-45RunnerC-45Install-mkIdris (lambda (arg-1 arg-2) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45ConfigC-45Environment-log (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) (let ((e-2 (vector-ref arg-2 2))) (let ((e-18 (vector-ref e-2 16))) e-18)) 0 (lambda () "Checking Idris installation")) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-missing (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 (let ((e-0 (vector-ref arg-2 0))) e-0))) eff-0) (csegen-248)) ((csegen-250) (let ((e-3 (vector-ref arg-2 3))) (let ((e-6 (vector-ref e-3 1))) e-6)))) (csegen-263)) (vector 1 (cons '() (PackC-45CoreC-45Types-C-60C-45C-62 (lambda (eta-0) eta-0) (lambda (eta-0) (PackC-45CoreC-45Types-u--cast_Cast_PkgVersion_Body eta-0)) (csegen-261) (let ((e-3 (vector-ref arg-2 3))) (let ((e-5 (vector-ref e-3 2))) e-5))))))) (lambda (bind-0) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) bind-0 (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45ConfigC-45Environment-log (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) (let ((e-2 (vector-ref arg-2 2))) (let ((e-18 (vector-ref e-2 16))) e-18)) 0 (lambda () "No Idris compiler found. Installing...")) (lambda () (PackC-45RunnerC-45Database-withCoreGit arg-1 arg-2 (lambda (u--dir) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45CoreC-45IO-sys arg-1 (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "make bootstrap " (cons (PackC-45ConfigC-45Environment-prefixVar (let ((e-0 (vector-ref arg-2 0))) e-0) (let ((e-3 (vector-ref arg-2 3))) e-3)) (cons " " (cons (PackC-45ConfigC-45Environment-schemeVar (let ((e-2 (vector-ref arg-2 2))) e-2)) '())))))) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45CoreC-45IO-sys arg-1 (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "make install-support " (cons (PackC-45ConfigC-45Environment-prefixVar (let ((e-0 (vector-ref arg-2 0))) e-0) (let ((e-3 (vector-ref arg-2 3))) e-3)) '())))) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45CoreC-45IO-sys arg-1 (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "make install-idris2 " (cons (PackC-45ConfigC-45Environment-prefixVar (let ((e-0 (vector-ref arg-2 0))) e-0) (let ((e-3 (vector-ref arg-2 3))) e-3)) '())))) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45CoreC-45IO-sys arg-1 "make clean-libs") (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45CoreC-45IO-sys arg-1 "rm -r build/ttc build/exec") (lambda () (PackC-45RunnerC-45Database-cacheCoreIpkgFiles arg-1 arg-2 u--dir))))))))))))))))))) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45RunnerC-45Install-appLink arg-1 (let ((e-0 (vector-ref arg-2 0))) e-0) (csegen-261) "idris2" 1) (lambda () (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-2)))))))))
(define PackC-45RunnerC-45Install-libPkg (lambda (arg-1 arg-2 arg-3 arg-4 arg-5) (let ((u--exe (PackC-45ConfigC-45Environment-idrisWithCG (let ((eff-0 arg-2)) eff-0)))) (let ((u--s (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons u--exe (cons " " (cons arg-4 (cons " " (cons (let ((eff-0 (let ((e-3 (vector-ref arg-5 2))) (let ((e-4 (cdr e-3))) e-4)))) (PreludeC-45Types-fastPack eff-0)) '())))))))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) eta-2 eta-3))))) (lambda (arg-0) (PreludeC-45TypesC-45List-tailRecAppend arg-3 arg-0)) (PackC-45ConfigC-45Environment-buildEnv (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) (let ((eff-0 arg-2)) eff-0))) (lambda (u--pre) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45ConfigC-45Environment-log (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) (let ((sc0 (let ((eff-0 arg-2)) eff-0))) (let ((e-2 (vector-ref sc0 2))) (let ((e-18 (vector-ref e-2 16))) e-18))) 0 (lambda () (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "About to run: " (cons u--s '()))))) (lambda () (PackC-45CoreC-45IO-inDir arg-1 (let ((e-3 (vector-ref arg-5 2))) (let ((e-5 (car e-3))) e-5)) (lambda (_-12264) (PackC-45CoreC-45IO-sysWithEnv arg-1 u--s u--pre)))))))))))
(define PackC-45RunnerC-45Install-libInfo (lambda (ext-0) (PreludeC-45TypesC-45List-mapMaybe (lambda (lcase-0) (case (vector-ref lcase-0 0) ((0) (let ((e-2 (vector-ref lcase-0 1))) (box (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons ((csegen-302) (let ((e-6 (vector-ref e-2 1))) e-6)) '()))))) (else '()))) ext-0)))
(define PackC-45RunnerC-45Install-katla (lambda (arg-0) (let ((sc0 (let ((sc1 (let ((e-10 (vector-ref arg-0 8))) e-10))) (cond ((equal? sc1 1) (let ((e-11 (vector-ref arg-0 9))) e-11)) (else 0))))) (cond ((equal? sc0 1) (cons (cons (box 0) "katla") '())) (else '())))))
(define PackC-45RunnerC-45Install-installLib (lambda (arg-1 arg-2 arg-3) (PackC-45RunnerC-45Install-case--installLib-12781 arg-1 arg-2 arg-3 (let ((e-4 (vector-ref arg-3 3))) e-4))))
(define PackC-45RunnerC-45Install-installImpl (lambda (arg-1 arg-2 arg-3 arg-4) (let ((u--pre (PackC-45ConfigC-45Environment-libInstallPrefix (let ((sc0 (let ((eff-0 arg-2)) eff-0))) (let ((e-0 (vector-ref sc0 0))) e-0)) (let ((sc0 (let ((eff-0 arg-2)) eff-0))) (let ((e-3 (vector-ref sc0 3))) e-3)) arg-4))) (let ((u--cmd (PackC-45RunnerC-45Install-installCmd (let ((sc0 (let ((eff-0 arg-2)) eff-0))) (let ((e-2 (vector-ref sc0 2))) (let ((e-9 (vector-ref e-2 7))) e-9)))))) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45ConfigC-45Environment-log (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) (let ((sc0 (let ((eff-0 arg-2)) eff-0))) (let ((e-2 (vector-ref sc0 2))) (let ((e-18 (vector-ref e-2 16))) e-18))) 1 (lambda () (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "Installing library" (cons (PackC-45RunnerC-45Install-withSrcStr (let ((sc0 (let ((eff-0 arg-2)) eff-0))) (let ((e-2 (vector-ref sc0 2))) e-2))) (cons ": " (cons (let ((eff-0 (let ((e-2 (vector-ref arg-4 1))) e-2))) eff-0) '()))))))) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45RunnerC-45Install-libPkg arg-1 arg-2 u--pre u--cmd (let ((e-3 (vector-ref arg-4 2))) e-3)) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (let ((sc0 (let ((eff-0 arg-2)) eff-0))) (let ((e-2 (vector-ref sc0 2))) (let ((e-10 (vector-ref e-2 8))) e-10))) (lambda () (PackC-45RunnerC-45Install-libPkg arg-1 arg-2 u--pre "--mkdoc" (let ((e-3 (vector-ref arg-4 2))) e-3)))) (lambda () (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (SystemC-45FileC-45Meta-exists (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 (DataC-45FilePath-C-60C-47C-62 arg-3 (csegen-308)))) (lambda (bind-0) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) bind-0 (lambda () (PackC-45CoreC-45IO-copyDir arg-1 (DataC-45FilePath-C-60C-47C-62 arg-3 (csegen-308)) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((e-1 (vector-ref arg-4 0))) (case (vector-ref e-1 0) ((0) (let ((e-8 (vector-ref e-1 2))) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 (let ((sc1 (let ((eff-0 arg-2)) eff-0))) (let ((e-0 (vector-ref sc1 0))) e-0)))) eff-0) (csegen-248)) ((csegen-250) (let ((sc1 (let ((eff-0 arg-2)) eff-0))) (let ((e-10 (vector-ref sc1 3))) (let ((e-15 (vector-ref e-10 1))) e-15))))) ((csegen-250) (let ((e-13 (vector-ref arg-4 1))) e-13))) ((csegen-250) e-8)))) ((1) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 (let ((sc1 (let ((eff-0 arg-2)) eff-0))) (let ((e-0 (vector-ref sc1 0))) e-0)))) eff-0) (csegen-248)) ((csegen-250) (let ((sc1 (let ((eff-0 arg-2)) eff-0))) (let ((e-9 (vector-ref sc1 3))) (let ((e-14 (vector-ref e-9 1))) e-14))))) (csegen-256)) ((csegen-250) (let ((e-12 (vector-ref arg-4 1))) e-12)))) (else (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 (let ((sc1 (let ((eff-0 arg-2)) eff-0))) (let ((e-0 (vector-ref sc1 0))) e-0)))) eff-0) (csegen-248)) ((csegen-250) (let ((sc1 (let ((eff-0 arg-2)) eff-0))) (let ((e-6 (vector-ref sc1 3))) (let ((e-12 (vector-ref e-6 1))) e-12))))) (csegen-263))))) (vector 1 (cons '() (PackC-45CoreC-45Types-C-60C-45C-62 (lambda (eta-0) eta-0) (lambda (eta-0) (PackC-45CoreC-45Types-u--cast_Cast_PkgVersion_Body eta-0)) (csegen-261) (let ((sc0 (let ((eff-0 arg-2)) eff-0))) (let ((e-3 (vector-ref sc0 3))) (let ((e-5 (vector-ref e-3 2))) e-5))))))) (csegen-308)))))))))))))))))
(define PackC-45RunnerC-45Install-installDocs (lambda (arg-1 arg-2 arg-3 arg-4) (PackC-45RunnerC-45Database-withPkgEnv arg-1 (let ((eff-0 arg-3)) eff-0) (let ((e-2 (vector-ref arg-4 1))) e-2) (let ((e-1 (vector-ref arg-4 0))) e-1) (lambda (u--dir) (PackC-45RunnerC-45Install-docsImpl arg-1 arg-3 arg-2 arg-4)))))
(define PackC-45RunnerC-45Install-installDeps (lambda (arg-1 arg-2 ext-0) (PackC-45RunnerC-45Install-install arg-1 arg-2 ((csegen-309) (PackC-45CoreC-45Types-dependencies ext-0)))))
(define PackC-45RunnerC-45Install-installCmd (lambda (arg-0) (cond ((equal? arg-0 1) "--install-with-src") (else "--install"))))
(define PackC-45RunnerC-45Install-installApp (lambda (arg-1 arg-2 arg-3 arg-4) (PackC-45RunnerC-45Install-case--installApp-13074 arg-1 arg-2 arg-4 arg-3 (let ((e-4 (vector-ref arg-4 3))) e-4))))
(define PackC-45RunnerC-45Install-installAny (lambda (arg-1 arg-2 arg-3) (case (vector-ref arg-3 0) ((0) (let ((e-2 (vector-ref arg-3 1))) (PackC-45RunnerC-45Install-installLib arg-1 arg-2 e-2))) (else (let ((e-5 (vector-ref arg-3 1))) (let ((e-6 (vector-ref arg-3 2))) (PackC-45RunnerC-45Install-installApp arg-1 arg-2 e-5 e-6)))))))
(define PackC-45RunnerC-45Install-install (lambda (arg-1 arg-2 arg-3) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45RunnerC-45Database-emptyCache (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999))))) (lambda (u--c) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45RunnerC-45Database-plan arg-1 u--c (let ((eff-0 arg-2)) eff-0) (((csegen-311) (((csegen-311) (PackC-45RunnerC-45Install-katla (let ((sc0 (let ((eff-0 arg-2)) eff-0))) (let ((e-2 (vector-ref sc0 2))) e-2)))) (PackC-45RunnerC-45Install-autoPairs (let ((sc0 (let ((eff-0 arg-2)) eff-0))) (let ((e-2 (vector-ref sc0 2))) e-2))))) arg-3)) (lambda (u--all) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45ConfigC-45Environment-logMany (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) (let ((sc0 (let ((eff-0 arg-2)) eff-0))) (let ((e-2 (vector-ref sc0 2))) (let ((e-18 (vector-ref e-2 16))) e-18))) 1 (lambda () "Installing libraries:") (lambda () (PackC-45RunnerC-45Install-libInfo u--all))) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45ConfigC-45Environment-logMany (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) (let ((sc0 (let ((eff-0 arg-2)) eff-0))) (let ((e-2 (vector-ref sc0 2))) (let ((e-18 (vector-ref e-2 16))) e-18))) 1 (lambda () "Installing apps:") (lambda () (PackC-45RunnerC-45Install-appInfo u--all))) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PreludeC-45Interfaces-for_ (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (csegen-98) u--all (lambda (eta-0) (PackC-45RunnerC-45Install-installAny arg-1 arg-2 eta-0))) (lambda () (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (let ((sc0 (let ((eff-0 arg-2)) eff-0))) (let ((e-2 (vector-ref sc0 2))) (let ((e-10 (vector-ref e-2 8))) e-10))) (lambda () (PreludeC-45Interfaces-for_ (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (csegen-98) u--all (lambda (lcase-0) (case (vector-ref lcase-0 0) ((0) (let ((e-2 (vector-ref lcase-0 1))) (PackC-45RunnerC-45Install-installDocs arg-1 u--c arg-2 e-2))) (else (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-7 (vector-ref e-1 0))) e-7)) (vector 0 ))))))))))))))))))))
(define PackC-45RunnerC-45Install-idrisEnv (lambda (arg-1 arg-2 arg-3 arg-4 arg-5) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45ConfigC-45Environment-env arg-1 arg-2 arg-3 arg-4 arg-5) (lambda (u--e) (PackC-45RunnerC-45Install-mkIdris arg-1 u--e)))))
(define PackC-45RunnerC-45Install-docsImpl (lambda (arg-1 arg-2 arg-3 arg-4) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (let ((sc0 (let ((eff-0 arg-2)) eff-0))) (let ((e-2 (vector-ref sc0 2))) (let ((e-11 (vector-ref e-2 9))) e-11))) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45ConfigC-45Environment-log (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) (let ((sc0 (let ((eff-0 arg-2)) eff-0))) (let ((e-2 (vector-ref sc0 2))) (let ((e-18 (vector-ref e-2 16))) e-18))) 1 (lambda () (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "Building source docs for: " (cons (let ((eff-0 (let ((e-2 (vector-ref arg-4 1))) e-2))) eff-0) '()))))) (lambda () (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45RunnerC-45Database-resolveApp arg-1 arg-3 (let ((eff-0 arg-2)) eff-0) "katla") (lambda (u--rp) (let ((u--katla (PackC-45ConfigC-45Environment-pkgExec (let ((sc0 (let ((eff-0 arg-2)) eff-0))) (let ((e-0 (vector-ref sc0 0))) e-0)) (let ((sc0 (let ((eff-0 arg-2)) eff-0))) (let ((e-3 (vector-ref sc0 3))) e-3)) (let ((e-2 (vector-ref u--rp 1))) e-2) (let ((e-1 (vector-ref u--rp 0))) e-1) (let ((e-5 (vector-ref u--rp 4))) e-5)))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) eta-2 eta-3))))) ((csegen-226) (lambda (eta-0) (cons (PackC-45RunnerC-45Install-n--8177-13484-u--htmlDir arg-1 arg-3 arg-4 arg-2) eta-0))) (PackC-45CoreC-45IO-htmlFiles arg-1 (PackC-45RunnerC-45Install-n--8177-13484-u--htmlDir arg-1 arg-3 arg-4 arg-2))) (lambda (u--fs) (PreludeC-45Interfaces-for_ (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (csegen-98) u--fs (lambda (u--htmlFile) (PackC-45RunnerC-45Install-case--docsImpl-13697 arg-1 arg-3 arg-4 arg-2 u--rp u--katla u--fs u--htmlFile (PackC-45CoreC-45Ipkg-sourceForDoc (let ((e-3 (vector-ref arg-4 2))) e-3) u--htmlFile))))))))))))) (let ((u--docs (DataC-45FilePath-C-60C-47C-62 (let ((e-1 (vector-ref arg-4 0))) (case (vector-ref e-1 0) ((0) (let ((e-8 (vector-ref e-1 2))) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 (let ((sc1 (let ((eff-0 arg-2)) eff-0))) (let ((e-0 (vector-ref sc1 0))) e-0)))) eff-0) (csegen-248)) ((csegen-250) (let ((sc1 (let ((eff-0 arg-2)) eff-0))) (let ((e-10 (vector-ref sc1 3))) (let ((e-15 (vector-ref e-10 1))) e-15))))) ((csegen-250) (let ((e-13 (vector-ref arg-4 1))) e-13))) ((csegen-250) e-8)))) ((1) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 (let ((sc1 (let ((eff-0 arg-2)) eff-0))) (let ((e-0 (vector-ref sc1 0))) e-0)))) eff-0) (csegen-248)) ((csegen-250) (let ((sc1 (let ((eff-0 arg-2)) eff-0))) (let ((e-9 (vector-ref sc1 3))) (let ((e-14 (vector-ref e-9 1))) e-14))))) (csegen-256)) ((csegen-250) (let ((e-12 (vector-ref arg-4 1))) e-12)))) (else (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 (let ((sc1 (let ((eff-0 arg-2)) eff-0))) (let ((e-0 (vector-ref sc1 0))) e-0)))) eff-0) (csegen-248)) ((csegen-250) (let ((sc1 (let ((eff-0 arg-2)) eff-0))) (let ((e-6 (vector-ref sc1 3))) (let ((e-12 (vector-ref e-6 1))) e-12))))) (csegen-263))))) (csegen-273)))) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (SystemC-45FileC-45Meta-exists (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 u--docs)) (lambda (bind-0) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) bind-0 (lambda () (PackC-45CoreC-45IO-rmDir arg-1 u--docs))))) (lambda () (PackC-45CoreC-45IO-copyDir arg-1 (PackC-45RunnerC-45Install-n--8177-13483-u--docsDir arg-1 arg-3 arg-4 arg-2) u--docs))))))))
(define PackC-45RunnerC-45Install-copyApp (lambda (arg-1 arg-2 arg-3) (let ((u--dir (DataC-45FilePath-C-60C-47C-62 (let ((e-1 (vector-ref arg-3 0))) (case (vector-ref e-1 0) ((0) (let ((e-9 (vector-ref e-1 2))) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 (let ((sc1 (let ((eff-0 arg-2)) eff-0))) (let ((e-0 (vector-ref sc1 0))) e-0)))) eff-0) (csegen-248)) ((csegen-250) (let ((sc1 (let ((eff-0 arg-2)) eff-0))) (let ((e-11 (vector-ref sc1 3))) (let ((e-16 (vector-ref e-11 1))) e-16))))) ((csegen-250) (let ((e-15 (vector-ref arg-3 1))) e-15))) ((csegen-250) e-9)))) ((1) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 (let ((sc1 (let ((eff-0 arg-2)) eff-0))) (let ((e-0 (vector-ref sc1 0))) e-0)))) eff-0) (csegen-248)) ((csegen-250) (let ((sc1 (let ((eff-0 arg-2)) eff-0))) (let ((e-10 (vector-ref sc1 3))) (let ((e-15 (vector-ref e-10 1))) e-15))))) (csegen-256)) ((csegen-250) (let ((e-14 (vector-ref arg-3 1))) e-14)))) (else (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 (let ((sc1 (let ((eff-0 arg-2)) eff-0))) (let ((e-0 (vector-ref sc1 0))) e-0)))) eff-0) (csegen-248)) ((csegen-250) (let ((sc1 (let ((eff-0 arg-2)) eff-0))) (let ((e-7 (vector-ref sc1 3))) (let ((e-13 (vector-ref e-7 1))) e-13))))) (csegen-263))))) (csegen-267)))) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45ConfigC-45Environment-log (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) (let ((sc0 (let ((eff-0 arg-2)) eff-0))) (let ((e-2 (vector-ref sc0 2))) (let ((e-18 (vector-ref e-2 16))) e-18))) 0 (lambda () (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "Copying application to " (cons (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 u--dir) '()))))) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45CoreC-45IO-mkDir arg-1 u--dir) (lambda () (PackC-45CoreC-45IO-sys arg-1 (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "cp -r " (cons (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 (PackC-45CoreC-45Ipkg-buildPath (let ((e-3 (vector-ref arg-3 2))) e-3))) (cons "/exec/* " (cons (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 u--dir) '())))))))))))))
(define PackC-45RunnerC-45Install-autoPairs (lambda (arg-0) (PreludeC-45TypesC-45List-tailRecAppend ((csegen-309) (let ((e-14 (vector-ref arg-0 12))) e-14)) (((csegen-226) (lambda (__infixTupleSection-0) (cons (box 1) __infixTupleSection-0))) (let ((e-15 (vector-ref arg-0 13))) e-15)))))
(define PackC-45RunnerC-45Install-appLink (lambda (arg-1 arg-2 arg-3 arg-4 arg-5) (let ((u--target (cons (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 arg-2)) eff-0) (csegen-267)) arg-3))) (let ((u--content (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "#!/bin/sh\xa;\xa;APPLICATION=\"$(" (cons ((csegen-234) (let ((sc0 (PackC-45ConfigC-45Environment-packExec arg-2))) (let ((e-1 (car sc0))) (let ((e-2 (cdr sc0))) (DataC-45FilePath-C-60C-47C-62 e-1 (vector 1 (cons '() e-2))))))) (cons " app-path " (cons (let ((eff-0 arg-4)) eff-0) (cons ")\"\xa;" (cons (PackC-45RunnerC-45Install-pthStr arg-2 arg-5) (cons "\xa;\xa;$APPLICATION \"$@\"" '())))))))))) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45CoreC-45IO-write arg-1 u--target u--content) (lambda () (PackC-45CoreC-45IO-sys arg-1 (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "chmod +x " (cons ((csegen-234) (let ((e-1 (car u--target))) (let ((e-2 (cdr u--target))) (DataC-45FilePath-C-60C-47C-62 e-1 (vector 1 (cons '() e-2)))))) '()))))))))))
(define PackC-45RunnerC-45Install-appInfo (lambda (ext-0) (PreludeC-45TypesC-45List-mapMaybe (lambda (lcase-0) (case (vector-ref lcase-0 0) ((1) (let ((e-3 (vector-ref lcase-0 2))) (box (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons ((csegen-302) (let ((e-8 (vector-ref e-3 1))) e-8)) '()))))) (else '()))) ext-0)))
(define PackC-45RunnerC-45Database-case--caseC-32blockC-32inC-32resolveApp-11101 (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (if (null? arg-11) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) (vector 0 (vector 10 arg-9)))))) (let ((e-2 (unbox arg-11))) (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) (let ((e-9 (vector-ref e-6 0))) e-9))) eta-2 eta-3))))) (lambda (u--s) (vector arg-5 arg-9 arg-8 u--s e-2 arg-7)) (PackC-45RunnerC-45Database-appStatus arg-1 arg-3 arg-9 arg-5 arg-8 arg-7 e-2))))))
(define PackC-45RunnerC-45Database-case--caseC-32blockC-32inC-32resolveLib-10896 (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (if (null? arg-6) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) (vector 0 (vector 9 arg-3)))))) (let ((e-2 (unbox arg-6))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45RunnerC-45Database-loadIpkg arg-1 arg-2 arg-3 e-2) (lambda (u--d) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PreludeC-45Types-u--traverse_Traversable_List (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) (let ((e-9 (vector-ref e-6 0))) e-9))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) e-6)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) e-6)) arg-9446 arg-9453)))))) (lambda (eta-0) (PackC-45RunnerC-45Database-n--8508-10789-u--resolveDep arg-1 arg-2 arg-3 arg-4 eta-0)) (PackC-45CoreC-45Types-dependencies u--d)) (lambda (u--deps) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45RunnerC-45Database-libStatus arg-1 arg-2 arg-3 e-2 u--d u--deps) (lambda (u--lib) (PackC-45RunnerC-45Database-cache (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) (let ((e-9 (vector-ref e-6 0))) e-9))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) e-6)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) e-6)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) arg-4 arg-3 (vector e-2 arg-3 u--d u--lib u--deps))))))))))))
(define PackC-45RunnerC-45Database-n--8508-10789-u--resolveDep (lambda (arg-1 arg-2 arg-3 arg-4 arg-5) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45RunnerC-45Database-resolveLib arg-1 arg-4 arg-2 arg-5) (lambda (u--rl) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (cons (let ((e-1 (vector-ref u--rl 0))) e-1) (let ((e-4 (vector-ref u--rl 3))) e-4)))))))
(define PackC-45RunnerC-45Database-n--9246-11533-u--go (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (if (null? arg-7) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (PreludeC-45TypesC-45SnocList-C-60C-62C-62 arg-6 '())) (let ((e-2 (car arg-7))) (let ((e-3 (cdr arg-7))) (case (vector-ref e-2 0) ((0) (let ((e-6 (vector-ref e-2 1))) (case (vector-ref e-6 0) ((0) (let ((e-12 (vector-ref e-6 1))) (PackC-45RunnerC-45Database-n--9246-11533-u--go arg-1 arg-2 arg-3 arg-4 (DataC-45SortedMap-insert (cons '() (let ((e-8 (vector-ref e-12 1))) e-8)) (vector 0 ) arg-5) (cons arg-6 (vector 0 e-12)) e-3))) (else (let ((e-15 (vector-ref e-6 1))) (let ((e-16 (vector-ref e-6 2))) (PackC-45RunnerC-45Database-n--9246-11533-u--go arg-1 arg-2 arg-3 arg-4 (DataC-45SortedMap-insert (cons (box e-15) (let ((e-9 (vector-ref e-16 1))) e-9)) (vector 0 ) arg-5) (cons arg-6 (vector 1 e-15 e-16)) e-3))))))) (else (let ((e-9 (vector-ref e-2 1))) (let ((sc2 (DataC-45SortedMap-lookup e-9 arg-5))) (if (null? sc2) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45RunnerC-45Database-resolveAny arg-1 arg-2 arg-3 (Builtin-fst e-9) (Builtin-snd e-9)) (lambda (u--loa) (let ((u--deps (PreludeC-45Interfaces-C-60C-36C-62 (csegen-225) (lambda (u--d) (vector 1 (cons '() u--d))) (PackC-45DatabaseC-45TypesC-45LibOrApp-dependencies u--loa)))) (PackC-45RunnerC-45Database-n--9246-11533-u--go arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 (PreludeC-45TypesC-45List-tailRecAppend u--deps (cons (vector 0 u--loa) e-3)))))) (PackC-45RunnerC-45Database-n--9246-11533-u--go arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 e-3)))))))))))
(define PackC-45RunnerC-45Database-withPkgEnv (lambda (arg-2 arg-3 arg-4 arg-5 arg-6) (case (vector-ref arg-5 0) ((0) (let ((e-1 (vector-ref arg-5 1))) (let ((e-2 (vector-ref arg-5 2))) (PackC-45CoreC-45Git-withGit arg-2 (let ((eff-0 (let ((e-7 (vector-ref arg-3 1))) e-7))) eff-0) arg-4 e-1 e-2 arg-6)))) ((1) (let ((e-6 (vector-ref arg-5 1))) (PackC-45CoreC-45IO-inDir arg-2 e-6 arg-6))) (else (PackC-45RunnerC-45Database-withCoreGit arg-2 arg-3 arg-6)))))
(define PackC-45RunnerC-45Database-withCoreGit (lambda (arg-2 arg-3 ext-0) (PackC-45CoreC-45Git-withGit arg-2 (let ((eff-0 (let ((e-1 (vector-ref arg-3 1))) e-1))) eff-0) (PackC-45CoreC-45Git-compiler) (let ((e-3 (vector-ref arg-3 3))) (let ((e-7 (vector-ref e-3 0))) e-7)) (let ((e-3 (vector-ref arg-3 3))) (let ((e-6 (vector-ref e-3 1))) e-6)) ext-0)))
(define PackC-45RunnerC-45Database-showPlan (lambda (ext-0) (DataC-45String-fastUnlines (((csegen-226) (lambda (lamc-0) (let ((e-2 (car lamc-0))) (let ((e-3 (cdr lamc-0))) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons ((let ((eff-0 (lambda (eta-0) (if (null? eta-0) "library" "app")))) (lambda (arg-0) (eff-0 arg-0))) e-2) (cons (csegen-239) (cons ((csegen-302) e-3) '())))))))) ext-0))))
(define PackC-45RunnerC-45Database-safeLib (lambda (arg-2 arg-3 arg-4) (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) eta-2 eta-3))))) (lambda (eta-0) (let ((e-1 (vector-ref arg-4 0))) (let ((e-2 (vector-ref arg-4 1))) (let ((e-4 (vector-ref arg-4 3))) (let ((e-5 (vector-ref arg-4 4))) (vector e-1 e-2 eta-0 e-4 e-5)))))) (PackC-45RunnerC-45Database-safe arg-2 arg-3 (let ((e-3 (vector-ref arg-4 2))) e-3)))))
(define PackC-45RunnerC-45Database-safeApp (lambda (arg-2 arg-3 arg-4) (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) eta-2 eta-3))))) (lambda (eta-0) (let ((e-1 (vector-ref arg-4 0))) (let ((e-2 (vector-ref arg-4 1))) (let ((e-4 (vector-ref arg-4 3))) (let ((e-5 (vector-ref arg-4 4))) (let ((e-6 (vector-ref arg-4 5))) (vector e-1 e-2 eta-0 e-4 e-5 e-6))))))) (PackC-45RunnerC-45Database-notPack arg-2 arg-3 (let ((e-3 (vector-ref arg-4 2))) e-3)))))
(define PackC-45RunnerC-45Database-safe (lambda (arg-2 arg-3 arg-4) (let ((e-1 (vector-ref arg-4 0))) (let ((e-2 (vector-ref arg-4 1))) (let ((e-3 (vector-ref arg-4 2))) (let ((u--unsafe (DataC-45Maybe-isJust (PreludeC-45Types-u--C-60C-124C-62_Alternative_Maybe (let ((e-19 (vector-ref e-1 19))) e-19) (lambda () (PreludeC-45Types-u--C-60C-124C-62_Alternative_Maybe (let ((e-20 (vector-ref e-1 20))) e-20) (lambda () (PreludeC-45Types-u--C-60C-124C-62_Alternative_Maybe (let ((e-21 (vector-ref e-1 21))) e-21) (lambda () (let ((e-22 (vector-ref e-1 22))) e-22)))))))))) (let ((sc0 (let ((sc1 (let ((e-5 (vector-ref arg-3 2))) (let ((e-8 (vector-ref e-5 6))) e-8)))) (cond ((equal? sc1 1) u--unsafe) (else 0))))) (cond ((equal? sc0 0) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-5 (car arg-2))) (let ((e-8 (vector-ref e-5 0))) e-8)) (vector e-1 e-2 e-3))) (else (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-5 (car arg-2))) (let ((e-8 (vector-ref e-5 0))) (let ((e-11 (vector-ref e-8 0))) e-11))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-5 (car arg-2))) (let ((e-8 (vector-ref e-5 0))) e-8)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-5 (car arg-2))) (let ((e-8 (vector-ref e-5 0))) e-8)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-5 (car arg-2))) e-5) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-5 (car arg-2))) e-5) arg-9934)))) (PackC-45ConfigC-45Environment-log (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-5 (car arg-2))) (let ((e-8 (vector-ref e-5 0))) (let ((e-11 (vector-ref e-8 0))) e-11))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-5 (car arg-2))) (let ((e-8 (vector-ref e-5 0))) e-8)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-5 (car arg-2))) (let ((e-8 (vector-ref e-5 0))) e-8)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-5 (car arg-2))) e-5) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-5 (car arg-2))) e-5) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-2 arg-11999)))) (let ((e-5 (vector-ref arg-3 2))) (let ((e-18 (vector-ref e-5 16))) e-18)) 2 (lambda () (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "Package " (cons (let ((e-0 (vector-ref e-1 0))) e-0) (cons " uses custom build hooks. Continue (yes/*no)?" '())))))) (lambda () (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-5 (car arg-2))) e-5) (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-5 (car arg-2))) (let ((e-8 (vector-ref e-5 0))) (let ((e-11 (vector-ref e-8 0))) e-11))) eta-2 eta-3))))) (lambda (eta-0) (DataC-45String-trim eta-0)) (PreludeC-45IO-getLine (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-5 (car arg-2))) (let ((e-8 (vector-ref e-5 0))) (let ((e-11 (vector-ref e-8 0))) e-11))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-5 (car arg-2))) (let ((e-8 (vector-ref e-5 0))) e-8)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-5 (car arg-2))) (let ((e-8 (vector-ref e-5 0))) e-8)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-5 (car arg-2))) e-5) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-5 (car arg-2))) e-5) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-2 arg-11999)))))) (lambda (_-0) (cond ((equal? _-0 "yes") (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-5 (car arg-2))) (let ((e-8 (vector-ref e-5 0))) e-8)) (vector e-1 e-2 e-3)))(else (let ((e-5 (car arg-2))) (let ((e-8 (vector-ref e-5 0))) (let ((e-10 (vector-ref e-8 1))) ((e-10 'erased) (vector 0 (vector 32 )))))))))))))))))))))
(define PackC-45RunnerC-45Database-resolveLib (lambda (arg-1 arg-2 arg-3 arg-4) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) eta-2 eta-3))))) (lambda (eta-0) (DataC-45SortedMap-lookup arg-4 eta-0)) (let ((eff-0 arg-2)) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 (lambda (eta-0) (unbox eff-0))))) (lambda (_-0) (if (null? _-0) (let ((_-1 '())) (PackC-45RunnerC-45Database-case--caseC-32blockC-32inC-32resolveLib-10896 arg-1 arg-3 arg-4 arg-2 _-1 (DataC-45SortedMap-lookup arg-4 (PackC-45ConfigC-45Types-allPackages (let ((e-2 (vector-ref arg-3 2))) e-2) (let ((e-3 (vector-ref arg-3 3))) e-3))))) (let ((e-2 (unbox _-0))) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) e-6)) e-2)))))))
(define PackC-45RunnerC-45Database-resolveApp (lambda (arg-1 arg-2 arg-3 arg-4) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45RunnerC-45Database-resolveLib arg-1 arg-2 arg-3 arg-4) (lambda (_-0) (let ((e-1 (vector-ref _-0 0))) (let ((e-2 (vector-ref _-0 1))) (let ((e-3 (vector-ref _-0 2))) (let ((e-4 (vector-ref _-0 3))) (let ((e-5 (vector-ref _-0 4))) (let ((_-1 (vector e-1 e-2 e-3 e-4 e-5))) (PackC-45RunnerC-45Database-case--caseC-32blockC-32inC-32resolveApp-11101 arg-1 arg-2 arg-3 arg-4 e-1 e-4 e-5 e-3 e-2 _-1 (PackC-45CoreC-45Ipkg-exec e-3))))))))))))
(define PackC-45RunnerC-45Database-resolveAny (lambda (arg-1 arg-2 arg-3 arg-4 arg-5) (if (null? arg-4) (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) eta-2 eta-3))))) (lambda (eta-0) (vector 0 eta-0)) (PackC-45RunnerC-45Database-resolveLib arg-1 arg-2 arg-3 arg-5)) (let ((e-0 (unbox arg-4))) (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) eta-2 eta-3))))) (lambda (eta-0) (vector 1 e-0 eta-0)) (PackC-45RunnerC-45Database-resolveApp arg-1 arg-2 arg-3 arg-5))))))
(define PackC-45RunnerC-45Database-plan (lambda (arg-1 arg-2 arg-3 arg-4) (let ((u--psC-39 (PreludeC-45Interfaces-C-60C-36C-62 (csegen-225) (lambda (eta-0) (vector 1 eta-0)) (cons (cons '() "prelude") (cons (cons '() "base") arg-4))))) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45ConfigC-45Environment-log (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) (let ((e-2 (vector-ref arg-3 2))) (let ((e-18 (vector-ref e-2 16))) e-18)) 0 (lambda () (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "Building plan for the following libraries: \xa; " (cons (PackC-45RunnerC-45Database-showPlan arg-4) '()))))) (lambda () (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) eta-2 eta-3))))) (lambda (eta-0) (PreludeC-45TypesC-45List-filter (lambda (eta-1) (PackC-45RunnerC-45Database-needsInstalling eta-1)) eta-0)) (PackC-45RunnerC-45Database-n--9246-11533-u--go arg-1 arg-2 arg-3 arg-4 (DataC-45SortedMap-empty (vector (cons (lambda (arg-528) (lambda (arg-531) (PreludeC-45EqOrd-u--C-61C-61_Eq_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (csegen-323) (csegen-327) arg-528 arg-531))) (lambda (arg-538) (lambda (arg-541) (PreludeC-45EqOrd-u--C-47C-61_Eq_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (csegen-323) (csegen-327) arg-538 arg-541)))) (lambda (arg-1418) (lambda (arg-1421) (PreludeC-45EqOrd-u--compare_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (csegen-338) (csegen-347) arg-1418 arg-1421))) (lambda (arg-1428) (lambda (arg-1431) (PreludeC-45EqOrd-u--C-60_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (csegen-338) (csegen-347) arg-1428 arg-1431))) (lambda (arg-1438) (lambda (arg-1441) (PreludeC-45EqOrd-u--C-62_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (csegen-338) (csegen-347) arg-1438 arg-1441))) (lambda (arg-1448) (lambda (arg-1451) (PreludeC-45EqOrd-u--C-60C-61_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (csegen-338) (csegen-347) arg-1448 arg-1451))) (lambda (arg-1458) (lambda (arg-1461) (PreludeC-45EqOrd-u--C-62C-61_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (csegen-338) (csegen-347) arg-1458 arg-1461))) (lambda (arg-1468) (lambda (arg-1471) (PreludeC-45EqOrd-u--max_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (csegen-338) (csegen-347) arg-1468 arg-1471))) (lambda (arg-1478) (lambda (arg-1481) (PreludeC-45EqOrd-u--min_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (csegen-338) (csegen-347) arg-1478 arg-1481))))) '() u--psC-39)) (lambda (u--loas) (PreludeC-45Types-u--traverse_Traversable_List (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (eta-0) (PackC-45RunnerC-45Database-checkLOA arg-1 arg-3 eta-0)) u--loas))))))))
(define PackC-45RunnerC-45Database-pkgNeedsInstalling (lambda (arg-1) (cond ((equal? arg-1 0) 1) ((equal? arg-1 1) 0) (else 1))))
(define PackC-45RunnerC-45Database-parseLibIpkg (lambda (arg-1 arg-2 arg-3 arg-4) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45Ipkg-parseIpkgFile arg-1 arg-3 arg-4) (lambda (eta-0) (PackC-45RunnerC-45Database-safe arg-1 arg-2 eta-0)))))
(define PackC-45RunnerC-45Database-notPack (lambda (arg-2 arg-3 arg-4) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) (PackC-45RunnerC-45Database-safe arg-2 arg-3 arg-4) (lambda (_-0) (let ((e-1 (vector-ref _-0 0))) (let ((e-2 (vector-ref _-0 1))) (let ((e-3 (vector-ref _-0 2))) (let ((e-14 (vector-ref e-1 14))) (if (null? e-14) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-29 (car arg-2))) (let ((e-32 (vector-ref e-29 0))) e-32)) (vector e-1 e-2 e-3)) (let ((e-28 (unbox e-14))) (cond ((equal? e-28 "pack") (let ((e-30 (car arg-2))) (let ((e-33 (vector-ref e-30 0))) (let ((e-35 (vector-ref e-33 1))) ((e-35 'erased) (vector 0 (vector 31 )))))))(else (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-30 (car arg-2))) (let ((e-33 (vector-ref e-30 0))) e-33)) (vector e-1 e-2 e-3))))))))))))))
(define PackC-45RunnerC-45Database-needsInstalling (lambda (arg-2) (case (vector-ref arg-2 0) ((0) (let ((e-2 (vector-ref arg-2 1))) (PackC-45RunnerC-45Database-pkgNeedsInstalling (let ((e-4 (vector-ref e-2 3))) e-4)))) (else (let ((e-5 (vector-ref arg-2 1))) (let ((e-6 (vector-ref arg-2 2))) (PackC-45RunnerC-45Database-appNeedsInstalling e-5 (let ((e-4 (vector-ref e-6 3))) e-4))))))))
(define PackC-45RunnerC-45Database-loadIpkg (lambda (arg-1 arg-2 arg-3 arg-4) (case (vector-ref arg-4 0) ((0) (let ((e-1 (vector-ref arg-4 1))) (let ((e-2 (vector-ref arg-4 2))) (let ((e-3 (vector-ref arg-4 3))) (let ((u--cache (PackC-45ConfigC-45Environment-ipkgCachePath (let ((e-0 (vector-ref arg-2 0))) e-0) arg-3 e-2 e-3))) (let ((u--tmpLoc (let ((e-6 (car e-3))) (let ((e-5 (cdr e-3))) (cons (DataC-45FilePath-C-60C-47C-62 (PackC-45CoreC-45Git-gitDir (let ((eff-0 (let ((e-9 (vector-ref arg-2 1))) e-9))) eff-0) arg-3 e-2) e-6) e-5))))) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-6 (car arg-1))) (let ((e-9 (vector-ref e-6 0))) (let ((e-12 (vector-ref e-9 0))) e-12))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-6 (car arg-1))) (let ((e-9 (vector-ref e-6 0))) e-9)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-6 (car arg-1))) (let ((e-9 (vector-ref e-6 0))) e-9)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-6 (car arg-1))) e-6) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-6 (car arg-1))) e-6) arg-9934)))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-6 (car arg-1))) e-6) (PackC-45CoreC-45IO-fileMissing (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-6 (car arg-1))) (let ((e-9 (vector-ref e-6 0))) (let ((e-12 (vector-ref e-9 0))) e-12))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-6 (car arg-1))) (let ((e-9 (vector-ref e-6 0))) e-9)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-6 (car arg-1))) (let ((e-9 (vector-ref e-6 0))) e-9)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-6 (car arg-1))) e-6) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-6 (car arg-1))) e-6) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) u--cache) (lambda (bind-0) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-6 (car arg-1))) (let ((e-9 (vector-ref e-6 0))) (let ((e-12 (vector-ref e-9 0))) e-12))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-6 (car arg-1))) (let ((e-9 (vector-ref e-6 0))) e-9)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-6 (car arg-1))) (let ((e-9 (vector-ref e-6 0))) e-9)) arg-9446 arg-9453)))))) bind-0 (lambda () (PackC-45CoreC-45Git-withGit arg-1 (let ((eff-0 (let ((e-7 (vector-ref arg-2 1))) e-7))) eff-0) arg-3 e-1 e-2 (lambda (u--dir) (let ((u--pf (PackC-45ConfigC-45Environment-patchFile (let ((e-0 (vector-ref arg-2 0))) e-0) (let ((e-6 (vector-ref arg-2 2))) e-6) arg-3 e-3))) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-6 (car arg-1))) (let ((e-9 (vector-ref e-6 0))) (let ((e-12 (vector-ref e-9 0))) e-12))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-6 (car arg-1))) (let ((e-9 (vector-ref e-6 0))) e-9)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-6 (car arg-1))) (let ((e-9 (vector-ref e-6 0))) e-9)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-6 (car arg-1))) e-6) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-6 (car arg-1))) e-6) arg-9934)))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-6 (car arg-1))) e-6) (SystemC-45FileC-45Meta-exists (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-6 (car arg-1))) (let ((e-9 (vector-ref e-6 0))) (let ((e-12 (vector-ref e-9 0))) e-12))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-6 (car arg-1))) (let ((e-9 (vector-ref e-6 0))) e-9)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-6 (car arg-1))) (let ((e-9 (vector-ref e-6 0))) e-9)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-6 (car arg-1))) e-6) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-6 (car arg-1))) e-6) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) ((csegen-234) (let ((e-6 (car u--pf))) (let ((e-5 (cdr u--pf))) (DataC-45FilePath-C-60C-47C-62 e-6 (vector 1 (cons '() e-5))))))) (lambda (bind-1) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-6 (car arg-1))) (let ((e-9 (vector-ref e-6 0))) (let ((e-12 (vector-ref e-9 0))) e-12))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-6 (car arg-1))) (let ((e-9 (vector-ref e-6 0))) e-9)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-6 (car arg-1))) (let ((e-9 (vector-ref e-6 0))) e-9)) arg-9446 arg-9453)))))) bind-1 (lambda () (PackC-45CoreC-45IO-patch arg-1 u--tmpLoc u--pf))))) (lambda () (PackC-45CoreC-45IO-copyFile arg-1 u--tmpLoc u--cache)))))))))) (lambda () (PackC-45CoreC-45Ipkg-parseIpkgFile arg-1 u--cache u--tmpLoc))))))))) ((1) (let ((e-6 (vector-ref arg-4 1))) (let ((e-7 (vector-ref arg-4 2))) (PackC-45CoreC-45Ipkg-parseIpkgFile arg-1 (let ((e-1 (car e-7))) (let ((e-2 (cdr e-7))) (cons (DataC-45FilePath-C-60C-47C-62 e-6 e-1) e-2))) (let ((e-1 (car e-7))) (let ((e-2 (cdr e-7))) (cons (DataC-45FilePath-C-60C-47C-62 e-6 e-1) e-2))))))) (else (let ((e-10 (vector-ref arg-4 1))) (let ((u--cache (PackC-45ConfigC-45Environment-coreCachePath (let ((e-0 (vector-ref arg-2 0))) e-0) (let ((e-3 (vector-ref arg-2 3))) e-3) e-10))) (let ((u--tmpLoc (let ((sc1 (PackC-45DatabaseC-45Types-coreIpkgPath e-10))) (let ((e-1 (car sc1))) (let ((e-2 (cdr sc1))) (cons (DataC-45FilePath-C-60C-47C-62 (PackC-45CoreC-45Git-gitDir (let ((eff-0 (let ((e-5 (vector-ref arg-2 1))) e-5))) eff-0) (PackC-45CoreC-45Git-compiler) (let ((e-3 (vector-ref arg-2 3))) (let ((e-8 (vector-ref e-3 1))) e-8))) e-1) e-2)))))) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-fileMissing (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) u--cache) (lambda (bind-0) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) bind-0 (lambda () (PackC-45RunnerC-45Database-withCoreGit arg-1 arg-2 (lambda (eta-0) (PackC-45RunnerC-45Database-cacheCoreIpkgFiles arg-1 arg-2 eta-0))))))) (lambda () (PackC-45CoreC-45Ipkg-parseIpkgFile arg-1 u--cache u--tmpLoc))))))))))
(define PackC-45RunnerC-45Database-libStatus (lambda (arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) (SystemC-45FileC-45Meta-exists (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-2 arg-11999)))) (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 (PackC-45ConfigC-45Environment-pkgInstallDir (let ((e-0 (vector-ref arg-3 0))) e-0) (let ((e-3 (vector-ref arg-3 3))) e-3) arg-4 arg-5 arg-6))) (lambda (_-0) (cond ((equal? _-0 1) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) (SystemC-45FileC-45Meta-exists (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-2 arg-11999)))) (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 (DataC-45FilePath-C-60C-47C-62 (case (vector-ref arg-5 0) ((0) (let ((e-2 (vector-ref arg-5 2))) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 (let ((e-0 (vector-ref arg-3 0))) e-0))) eff-0) (csegen-248)) ((csegen-250) (let ((e-5 (vector-ref arg-3 3))) (let ((e-10 (vector-ref e-5 1))) e-10)))) ((csegen-250) arg-4)) ((csegen-250) e-2)))) ((1) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 (let ((e-0 (vector-ref arg-3 0))) e-0))) eff-0) (csegen-248)) ((csegen-250) (let ((e-3 (vector-ref arg-3 3))) (let ((e-9 (vector-ref e-3 1))) e-9)))) (csegen-256)) ((csegen-250) arg-4))) (else (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 (let ((e-0 (vector-ref arg-3 0))) e-0))) eff-0) (csegen-248)) ((csegen-250) (let ((e-3 (vector-ref arg-3 3))) (let ((e-6 (vector-ref e-3 1))) e-6)))) (csegen-263)))) (csegen-273)))) (lambda (u--b) (let ((sc1 (PackC-45DatabaseC-45Types-isLocal arg-5))) (case (vector-ref sc1 0) ((1) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-2))) (let ((e-6 (vector-ref e-3 0))) e-6)) 1)) (else (let ((u--ts (cons (DataC-45FilePath-C-60C-47C-62 (case (vector-ref arg-5 0) ((0) (let ((e-2 (vector-ref arg-5 2))) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 (let ((e-0 (vector-ref arg-3 0))) e-0))) eff-0) (csegen-248)) ((csegen-250) (let ((e-6 (vector-ref arg-3 3))) (let ((e-11 (vector-ref e-6 1))) e-11)))) ((csegen-250) arg-4)) ((csegen-250) e-2)))) ((1) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 (let ((e-0 (vector-ref arg-3 0))) e-0))) eff-0) (csegen-248)) ((csegen-250) (let ((e-4 (vector-ref arg-3 3))) (let ((e-10 (vector-ref e-4 1))) e-10)))) (csegen-256)) ((csegen-250) arg-4))) (else (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 (let ((e-0 (vector-ref arg-3 0))) e-0))) eff-0) (csegen-248)) ((csegen-250) (let ((e-4 (vector-ref arg-3 3))) (let ((e-7 (vector-ref e-4 1))) e-7)))) (csegen-263)))) (vector 1 (cons '() (PackC-45CoreC-45Types-C-60C-45C-62 (lambda (eta-0) eta-0) (lambda (eta-0) (PackC-45CoreC-45Types-u--cast_Cast_PkgVersion_Body eta-0)) (csegen-261) (let ((e-4 (vector-ref arg-3 3))) (let ((e-6 (vector-ref e-4 2))) e-6)))))) (PreludeC-45Types-fastUnpack ".timestamp")))) (let ((u--dir (PackC-45CoreC-45Ipkg-sourcePath arg-6))) (PackC-45RunnerC-45Database-checkOutdated arg-2 u--ts u--dir arg-7 2 1))))))))) (else (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) 0)))))))
(define PackC-45RunnerC-45Database-isOutdated (lambda (arg-0) (if (null? arg-0) 0 (let ((e-3 (cdr arg-0))) (cond ((equal? e-3 2) 1)(else 0))))))
(define PackC-45RunnerC-45Database-emptyCache (lambda (arg-1) (DataC-45IORef-newIORef arg-1 (csegen-357))))
(define PackC-45RunnerC-45Database-checkOutdated (lambda (arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 (PreludeC-45Interfaces-any (csegen-98) (lambda (eta-0) (PackC-45RunnerC-45Database-isOutdated eta-0)) arg-5))) (cond ((equal? sc0 1) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-6)) (else (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) (SystemC-45FileC-45Meta-exists (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-2 arg-11999)))) ((csegen-234) (let ((e-1 (car arg-3))) (let ((e-2 (cdr arg-3))) (DataC-45FilePath-C-60C-47C-62 e-1 (vector 1 (cons '() e-2))))))) (lambda (_-0) (cond ((equal? _-0 1) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) eta-2 eta-3))))) (lambda (eta-0) (DataC-45String-trim eta-0)) (PackC-45CoreC-45IO-sysRun arg-2 (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons ((csegen-237) "find ") (cons ((csegen-234) arg-4) (cons ((csegen-237) " -newer ") (cons ((csegen-236) arg-3) '()))))))) (lambda (_-1) (cond ((equal? _-1 "") (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-7))(else (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-6)))))) (else (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-6))))))))))
(define PackC-45RunnerC-45Database-checkLOA (lambda (arg-1 arg-2 arg-3) (case (vector-ref arg-3 0) ((0) (let ((e-2 (vector-ref arg-3 1))) (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) (let ((e-9 (vector-ref e-6 0))) e-9))) eta-2 eta-3))))) (lambda (eta-0) (vector 0 eta-0)) (PackC-45RunnerC-45Database-safeLib arg-1 arg-2 e-2)))) (else (let ((e-5 (vector-ref arg-3 1))) (let ((e-6 (vector-ref arg-3 2))) (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-7 (vector-ref e-1 0))) (let ((e-10 (vector-ref e-7 0))) e-10))) eta-2 eta-3))))) (lambda (eta-0) (vector 1 e-5 eta-0)) (PackC-45RunnerC-45Database-safeApp arg-1 arg-2 e-6))))))))
(define PackC-45RunnerC-45Database-cacheCoreIpkgFiles (lambda (arg-1 arg-2 arg-3) (PreludeC-45Interfaces-for_ (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (csegen-98) (PackC-45DatabaseC-45Types-corePkgs) (lambda (u--c) (PackC-45CoreC-45IO-copyFile arg-1 (let ((sc0 (PackC-45DatabaseC-45Types-coreIpkgPath u--c))) (let ((e-1 (car sc0))) (let ((e-2 (cdr sc0))) (cons (DataC-45FilePath-C-60C-47C-62 arg-3 e-1) e-2)))) (PackC-45ConfigC-45Environment-coreCachePath (let ((e-0 (vector-ref arg-2 0))) e-0) (let ((e-3 (vector-ref arg-2 3))) e-3) u--c))))))
(define PackC-45RunnerC-45Database-cache (lambda (arg-1 arg-2 arg-3 arg-4) (PreludeC-45Interfaces-C-36C-62 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) (DataC-45IORef-modifyIORef arg-1 arg-2 (lambda (eta-0) (DataC-45SortedMap-insert arg-3 arg-4 eta-0))) arg-4)))
(define PackC-45RunnerC-45Database-appStatus (lambda (arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) (SystemC-45FileC-45Meta-exists (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-2 arg-11999)))) ((csegen-234) (let ((sc0 (PackC-45ConfigC-45Environment-pkgExec (let ((e-0 (vector-ref arg-3 0))) e-0) (let ((e-3 (vector-ref arg-3 3))) e-3) arg-4 arg-5 arg-8))) (let ((e-1 (car sc0))) (let ((e-2 (cdr sc0))) (DataC-45FilePath-C-60C-47C-62 e-1 (vector 1 (cons '() e-2)))))))) (lambda (_-0) (cond ((equal? _-0 1) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) (SystemC-45FileC-45Meta-exists (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-2 arg-11999)))) ((csegen-234) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 (let ((e-0 (vector-ref arg-3 0))) e-0))) eff-0) (csegen-267)) (vector 1 (cons '() arg-8))))) (lambda (_-1) (cond ((equal? _-1 1) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) 2)) (else (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) 1))))) (lambda (u--installed) (let ((sc1 (PackC-45DatabaseC-45Types-isLocal arg-5))) (case (vector-ref sc1 0) ((1) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-2))) (let ((e-6 (vector-ref e-3 0))) e-6)) u--installed)) (else (let ((u--ts (cons (DataC-45FilePath-C-60C-47C-62 (case (vector-ref arg-5 0) ((0) (let ((e-2 (vector-ref arg-5 2))) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 (let ((e-0 (vector-ref arg-3 0))) e-0))) eff-0) (csegen-248)) ((csegen-250) (let ((e-6 (vector-ref arg-3 3))) (let ((e-11 (vector-ref e-6 1))) e-11)))) ((csegen-250) arg-4)) ((csegen-250) e-2)))) ((1) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 (let ((e-0 (vector-ref arg-3 0))) e-0))) eff-0) (csegen-248)) ((csegen-250) (let ((e-4 (vector-ref arg-3 3))) (let ((e-10 (vector-ref e-4 1))) e-10)))) (csegen-256)) ((csegen-250) arg-4))) (else (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 (let ((e-0 (vector-ref arg-3 0))) e-0))) eff-0) (csegen-248)) ((csegen-250) (let ((e-4 (vector-ref arg-3 3))) (let ((e-7 (vector-ref e-4 1))) e-7)))) (csegen-263)))) (csegen-267)) (PreludeC-45Types-fastUnpack ".timestamp")))) (let ((u--src (PackC-45CoreC-45Ipkg-sourcePath arg-6))) (PackC-45RunnerC-45Database-checkOutdated arg-2 u--ts u--src arg-7 3 u--installed))))))))) (else (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) 0)))))))
(define PackC-45RunnerC-45Database-appNeedsInstalling (lambda (arg-1 arg-2) (cond ((equal? arg-2 0) 1) ((equal? arg-2 1) arg-1) ((equal? arg-2 3) 1) (else 0))))
(define PackC-45DatabaseC-45Types-u--uninhabited_Uninhabited_C-40IsLocalC-32C-40GitHubC-32C-91_C-32C-61C-32_C-93C-41C-41 (lambda (arg-0) (blodwen-error-quit "No clauses")))
(define PackC-45DatabaseC-45Types-u--uninhabited_Uninhabited_C-40IsLocalC-32C-40CoreC-32C-91_C-32C-61C-32_C-93C-41C-41 (lambda (arg-0) (blodwen-error-quit "No clauses")))
(define PackC-45DatabaseC-45Types-u--interpolate_Interpolation_CorePkg (lambda (arg-0) (cond ((equal? arg-0 0) "prelude") ((equal? arg-0 1) "base") ((equal? arg-0 2) "contrib") ((equal? arg-0 3) "linear") ((equal? arg-0 4) "network") ((equal? arg-0 5) "test") (else "idris2"))))
(define PackC-45DatabaseC-45Types-u--cast_Cast_CorePkg_Body (lambda (arg-0) (cond ((equal? arg-0 0) (cons #\p (cons #\r (cons #\e (cons #\l (cons #\u (cons #\d (cons #\e '())))))))) ((equal? arg-0 1) (cons #\b (cons #\a (cons #\s (cons #\e '()))))) ((equal? arg-0 2) (cons #\c (cons #\o (cons #\n (cons #\t (cons #\r (csegen-305))))))) ((equal? arg-0 3) (cons #\l (cons #\i (cons #\n (cons #\e (cons #\a (cons #\r '()))))))) ((equal? arg-0 4) (cons #\n (cons #\e (cons #\t (cons #\w (cons #\o (cons #\r (cons #\k '())))))))) ((equal? arg-0 5) (cons #\t (cons #\e (cons #\s (cons #\t '()))))) (else (csegen-261)))))
(define PackC-45DatabaseC-45Types-usePackagePath (lambda (arg-1) (case (vector-ref arg-1 0) ((0) (let ((e-4 (vector-ref arg-1 4))) e-4)) ((1) (let ((e-8 (vector-ref arg-1 3))) e-8)) (else 0))))
(define PackC-45DatabaseC-45Types-traverse (lambda (arg-3 arg-4 arg-5) (case (vector-ref arg-5 0) ((0) (let ((e-1 (vector-ref arg-5 1))) (let ((e-2 (vector-ref arg-5 2))) (let ((e-3 (vector-ref arg-5 3))) (let ((e-4 (vector-ref arg-5 4))) (PreludeC-45Interfaces-C-60C-36C-62 (let ((e-7 (vector-ref arg-3 0))) e-7) (lambda (u--cC-39) (vector 0 e-1 u--cC-39 e-3 e-4)) ((arg-4 e-1) e-2))))))) ((1) (let ((e-6 (vector-ref arg-5 1))) (let ((e-7 (vector-ref arg-5 2))) (let ((e-8 (vector-ref arg-5 3))) (let ((e-2 (vector-ref arg-3 1))) ((e-2 'erased) (vector 1 e-6 e-7 e-8))))))) (else (let ((e-10 (vector-ref arg-5 1))) (let ((e-2 (vector-ref arg-3 1))) ((e-2 'erased) (vector 2 e-10))))))))
(define PackC-45DatabaseC-45Types-readCorePkg (lambda (arg-0) (cond ((equal? arg-0 "prelude") (box 0)) ((equal? arg-0 "base") (box 1)) ((equal? arg-0 "contrib") (box 2)) ((equal? arg-0 "linear") (box 3)) ((equal? arg-0 "network") (box 4)) ((equal? arg-0 "test") (box 5)) ((equal? arg-0 "idris2") (box 6))(else '()))))
(define PackC-45DatabaseC-45Types-isLocal (lambda (arg-0) (case (vector-ref arg-0 0) ((2) (vector 1 (lambda (eta-0) (PreludeC-45Uninhabited-absurd (lambda (arg-528) (PackC-45DatabaseC-45Types-u--uninhabited_Uninhabited_C-40IsLocalC-32C-40CoreC-32C-91_C-32C-61C-32_C-93C-41C-41 arg-528)) eta-0)))) ((0) (vector 1 (lambda (eta-0) (PreludeC-45Uninhabited-absurd (lambda (arg-528) (PackC-45DatabaseC-45Types-u--uninhabited_Uninhabited_C-40IsLocalC-32C-40GitHubC-32C-91_C-32C-61C-32_C-93C-41C-41 arg-528)) eta-0)))) (else (vector 0 (vector 0 ))))))
(define PackC-45DatabaseC-45Types-isCorePkg (lambda (ext-0) (DataC-45Maybe-isJust (PackC-45DatabaseC-45Types-readCorePkg ext-0))))
(define PackC-45DatabaseC-45Types-ipkg (lambda (arg-0 arg-1) (case (vector-ref arg-1 0) ((0) (let ((e-3 (vector-ref arg-1 3))) (let ((e-6 (car e-3))) (let ((e-5 (cdr e-3))) (cons (DataC-45FilePath-C-60C-47C-62 arg-0 e-6) e-5))))) ((1) (let ((e-7 (vector-ref arg-1 2))) (let ((e-1 (car e-7))) (let ((e-2 (cdr e-7))) (cons (DataC-45FilePath-C-60C-47C-62 arg-0 e-1) e-2))))) (else (let ((e-10 (vector-ref arg-1 1))) (let ((sc1 (PackC-45DatabaseC-45Types-coreIpkgPath e-10))) (let ((e-1 (car sc1))) (let ((e-2 (cdr sc1))) (cons (DataC-45FilePath-C-60C-47C-62 arg-0 e-1) e-2)))))))))
(define PackC-45DatabaseC-45TypesC-45ResolveLib-dependencies (lambda (arg-1) (PackC-45CoreC-45Types-dependencies (let ((e-3 (vector-ref arg-1 2))) e-3))))
(define PackC-45DatabaseC-45TypesC-45ResolveApp-dependencies (lambda (arg-1) (PackC-45CoreC-45Types-dependencies (let ((e-3 (vector-ref arg-1 2))) e-3))))
(define PackC-45DatabaseC-45TypesC-45LibOrApp-dependencies (lambda (arg-2) (case (vector-ref arg-2 0) ((0) (let ((e-2 (vector-ref arg-2 1))) (PackC-45DatabaseC-45TypesC-45ResolveLib-dependencies e-2))) (else (let ((e-6 (vector-ref arg-2 2))) (PackC-45DatabaseC-45TypesC-45ResolveApp-dependencies e-6))))))
(define PackC-45DatabaseC-45Types-corePkgs(blodwen-lazy (lambda () (cons 0 (cons 1 (cons 2 (cons 3 (cons 4 (cons 5 (cons 6 '()))))))))))
(define PackC-45DatabaseC-45Types-corePkgName (lambda (ext-0) (PackC-45DatabaseC-45Types-u--interpolate_Interpolation_CorePkg ext-0)))
(define PackC-45DatabaseC-45Types-coreIpkgPath (lambda (arg-0) (cond ((equal? arg-0 6) (cons (DataC-45FilePath-u--neutral_Monoid_C-40PathC-32RelC-41) (PreludeC-45Types-fastUnpack "idris2api.ipkg")))(else (cons (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-u--neutral_Monoid_C-40PathC-32RelC-41) (vector 1 (cons '() (cons #\l (cons #\i (cons #\b (cons #\s '()))))))) (vector 1 (cons '() ((let ((eff-0 (lambda (u--orig) (PackC-45DatabaseC-45Types-u--cast_Cast_CorePkg_Body u--orig)))) (lambda (arg-1) (eff-0 arg-1))) arg-0)))) (PackC-45DatabaseC-45Types-coreIpkgFile arg-0))))))
(define PackC-45DatabaseC-45Types-coreIpkgFile (lambda (arg-0) (cond ((equal? arg-0 6) (PreludeC-45Types-fastUnpack "idris2api.ipkg"))(else (let ((eff-0 (PackC-45DatabaseC-45Types-u--cast_Cast_CorePkg_Body arg-0))) (let ((eff-1 (csegen-279))) (PreludeC-45TypesC-45List-tailRecAppend eff-0 eff-1)))))))
(define PackC-45CoreC-45Types-u--min_Ord_InstallType (lambda (arg-0 arg-1) (let ((sc0 (PackC-45CoreC-45Types-u--C-60_Ord_InstallType arg-0 arg-1))) (cond ((equal? sc0 1) arg-0) (else arg-1)))))
(define PackC-45CoreC-45Types-u--max_Ord_InstallType (lambda (arg-0 arg-1) (let ((sc0 (PackC-45CoreC-45Types-u--C-62_Ord_InstallType arg-0 arg-1))) (cond ((equal? sc0 1) arg-0) (else arg-1)))))
(define PackC-45CoreC-45Types-u--interpolate_Interpolation_PkgVersion (lambda (ext-0) (IdrisC-45PackageC-45Types-u--show_Show_PkgVersion ext-0)))
(define PackC-45CoreC-45Types-u--interpolate_Interpolation_LogLevel (lambda (arg-0) (cond ((equal? arg-0 0) "debug") ((equal? arg-0 1) "info") ((equal? arg-0 2) "warning") (else ""))))
(define PackC-45CoreC-45Types-u--interpolate_Interpolation_FileError (lambda (ext-0) (SystemC-45FileC-45Error-u--show_Show_FileError ext-0)))
(define PackC-45CoreC-45Types-u--compare_Ord_LogLevel (lambda (ext-0 ext-1) (PreludeC-45Basics-on (lambda (eta-0) (lambda (eta-1) (PreludeC-45EqOrd-u--compare_Ord_Integer eta-0 eta-1))) (lambda (eta-0) (PackC-45CoreC-45Types-llToNat eta-0)) ext-0 ext-1)))
(define PackC-45CoreC-45Types-u--compare_Ord_InstallType (lambda (arg-0 arg-1) (if (null? arg-0) (if (null? arg-1) 1 0) (let ((e-0 (unbox arg-0))) (if (null? arg-1) 2 (let ((e-2 (unbox arg-1))) (PreludeC-45EqOrd-u--compare_Ord_Bool e-0 e-2)))))))
(define PackC-45CoreC-45Types-u--cast_Cast_PkgVersion_Body (lambda (ext-0) (DataC-45Maybe-fromMaybe (lambda () (PreludeC-45Types-fastUnpack "0")) (DataC-45FilePathC-45Body-fromChars (PreludeC-45Types-fastUnpack (IdrisC-45PackageC-45Types-u--show_Show_PkgVersion ext-0))))))
(define PackC-45CoreC-45Types-u--cast_Cast_C-40MaybeC-32PkgVersionC-41_Body (lambda (arg-0) (if (null? arg-0) (cons #\0 '()) (let ((e-2 (unbox arg-0))) (PackC-45CoreC-45Types-u--cast_Cast_PkgVersion_Body e-2)))))
(define PackC-45CoreC-45Types-u--C-62_Ord_InstallType (lambda (arg-0 arg-1) (PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering (PackC-45CoreC-45Types-u--compare_Ord_InstallType arg-0 arg-1) 2)))
(define PackC-45CoreC-45Types-u--C-62C-61_Ord_LogLevel (lambda (arg-0 arg-1) (PreludeC-45EqOrd-u--C-47C-61_Eq_Ordering (PackC-45CoreC-45Types-u--compare_Ord_LogLevel arg-0 arg-1) 0)))
(define PackC-45CoreC-45Types-u--C-62C-61_Ord_InstallType (lambda (arg-0 arg-1) (PreludeC-45EqOrd-u--C-47C-61_Eq_Ordering (PackC-45CoreC-45Types-u--compare_Ord_InstallType arg-0 arg-1) 0)))
(define PackC-45CoreC-45Types-u--C-61C-61_Eq_InstallType (lambda (arg-0 arg-1) (if (null? arg-0) (if (null? arg-1) 1 0) (let ((e-0 (unbox arg-0))) (if (null? arg-1) 0 (let ((e-1 (unbox arg-1))) (PreludeC-45EqOrd-u--C-61C-61_Eq_Bool e-0 e-1)))))))
(define PackC-45CoreC-45Types-u--C-60_Ord_InstallType (lambda (arg-0 arg-1) (PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering (PackC-45CoreC-45Types-u--compare_Ord_InstallType arg-0 arg-1) 0)))
(define PackC-45CoreC-45Types-u--C-60C-61_Ord_InstallType (lambda (arg-0 arg-1) (PreludeC-45EqOrd-u--C-47C-61_Eq_Ordering (PackC-45CoreC-45Types-u--compare_Ord_InstallType arg-0 arg-1) 2)))
(define PackC-45CoreC-45Types-u--C-47C-61_Eq_InstallType (lambda (arg-0 arg-1) (let ((sc0 (PackC-45CoreC-45Types-u--C-61C-61_Eq_InstallType arg-0 arg-1))) (cond ((equal? sc0 1) 0) (else 1)))))
(define PackC-45CoreC-45Types-tomlPath (lambda (ext-0) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (DataC-45List-intersperse "." ext-0))))
(define PackC-45CoreC-45Types-toRelPath (lambda (arg-0) (let ((eff-0 (DataC-45FilePath-u--fromString_FromString_FilePath arg-0))) (case (vector-ref eff-0 0) ((0) (let ((e-2 (vector-ref eff-0 1))) (vector 1 e-2))) (else (let ((e-3 (vector-ref eff-0 1))) (vector 1 e-3)))))))
(define PackC-45CoreC-45Types-toAbsPath (lambda (arg-0 arg-1) (let ((eff-0 arg-1)) (case (vector-ref eff-0 0) ((0) (let ((e-2 (vector-ref eff-0 1))) (vector 0 e-2))) (else (let ((e-3 (vector-ref eff-0 1))) (DataC-45FilePath-C-60C-47C-62 arg-0 (vector 1 e-3))))))))
(define PackC-45CoreC-45Types-readDBName (lambda (arg-0) (let ((sc0 (DataC-45FilePathC-45Body-fromChars (PreludeC-45Types-fastUnpack arg-0)))) (if (null? sc0) (vector 0 (vector 15 arg-0)) (let ((e-1 (unbox sc0))) (vector 1 e-1))))))
(define PackC-45CoreC-45Types-quote (lambda (arg-1 arg-2) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "\"" (cons ((let ((eff-0 arg-1)) (lambda (arg-0) (eff-0 arg-0))) arg-2) (cons "\"" '()))))))
(define PackC-45CoreC-45Types-printTOMLErr (lambda (arg-0) (case (vector-ref arg-0 0) ((0) (let ((e-0 (vector-ref arg-0 1))) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "Missing toml key: " (cons (PackC-45CoreC-45Types-tomlPath e-0) (cons "." '())))))) (else (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "Wrong type at " (cons (PackC-45CoreC-45Types-tomlPath e-1) (cons ". Expect " (cons e-2 (cons "." '()))))))))))))
(define PackC-45CoreC-45Types-printErr (lambda (arg-0) (case (vector-ref arg-0 0) ((0) "Failed to get current directory.") ((1) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "Failed to figure out package directory.\xa;This means, that neither environment variable \"PACK_DIR\"\xa;nor environment varaible \"HOME\" was set." '()))) ((2) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "Failed to create temporary directory.\xa;Please check directory `PACK_DIR` and make sure to remove\xa;all `.tmpXY` directories you no longer need." '()))) ((3) (let ((e-0 (vector-ref arg-0 1))) (let ((e-1 (vector-ref arg-0 2))) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "Error when creating directory " (cons (PackC-45CoreC-45Types-quote (lambda (eta-0) (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 eta-0)) e-0) (cons ": " (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_FileError e-1) (cons "." '()))))))))) ((4) (let ((e-2 (vector-ref arg-0 1))) (let ((e-3 (vector-ref arg-0 2))) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "Error when reading file " (cons (PackC-45CoreC-45Types-quote (csegen-235) e-2) (cons ": " (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_FileError e-3) (cons "." '()))))))))) ((5) (let ((e-4 (vector-ref arg-0 1))) (let ((e-5 (vector-ref arg-0 2))) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "Error when writing to file " (cons (PackC-45CoreC-45Types-quote (csegen-235) e-4) (cons ": " (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_FileError e-5) (cons "." '()))))))))) ((6) (let ((e-6 (vector-ref arg-0 1))) (let ((e-7 (vector-ref arg-0 2))) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "Error when reading directory " (cons (PackC-45CoreC-45Types-quote (lambda (eta-0) (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 eta-0)) e-6) (cons ": " (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_FileError e-7) (cons "." '()))))))))) ((7) (let ((e-8 (vector-ref arg-0 1))) (let ((e-9 (vector-ref arg-0 2))) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "Error when executing system command.\xa;Command: " (cons e-8 (cons "\xa;Error code: " (cons (PreludeC-45Show-u--show_Show_Int e-9) '())))))))) ((8) (let ((e-10 (vector-ref arg-0 1))) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "Failed to change to directory " (cons (PackC-45CoreC-45Types-quote (lambda (eta-0) (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 eta-0)) e-10) (cons "." '())))))) ((12) (let ((e-11 (vector-ref arg-0 1))) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "Invalid package description: " (cons (PackC-45CoreC-45Types-quote (lambda (eta-0) eta-0) e-11) (cons ".\xa;This should be of the format \"name,url,commit hash,ipkg file\"." '())))))) ((14) (let ((e-12 (vector-ref arg-0 1))) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "Invalid data base header: " (cons (PackC-45CoreC-45Types-quote (lambda (eta-0) eta-0) e-12) (cons ".\xa;This should be of the format \"idris2 commit hash,idris2 version\"." '())))))) ((15) (let ((e-13 (vector-ref arg-0 1))) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "Invalid data collection name: " (cons (PackC-45CoreC-45Types-quote (lambda (eta-0) eta-0) e-13) (cons ".\xa;This should be a non-empty string without path separators." '())))))) ((19) (let ((e-14 (vector-ref arg-0 1))) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "Invalid file path body: " (cons (PackC-45CoreC-45Types-quote (lambda (eta-0) eta-0) e-14) (cons "." '())))))) ((16) (let ((e-15 (vector-ref arg-0 1))) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "Invalid package type: " (cons (PackC-45CoreC-45Types-quote (lambda (eta-0) eta-0) e-15) (cons ".\xa;Valid types are `lib` and `bin`." '())))))) ((17) (let ((e-16 (vector-ref arg-0 1))) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "Invalid package version: " (cons (PackC-45CoreC-45Types-quote (lambda (eta-0) eta-0) e-16) (cons "." '())))))) ((9) (let ((e-17 (vector-ref arg-0 1))) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "Unknown package: " (cons (let ((eff-0 e-17)) eff-0) '()))))) ((10) (let ((e-18 (vector-ref arg-0 1))) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "Package " (cons (let ((eff-0 e-18)) eff-0) (cons " is not an application" '())))))) ((11) (let ((e-19 (vector-ref arg-0 1))) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "Package " (cons ((csegen-234) (let ((e-1 (car e-19))) (let ((e-2 (cdr e-19))) (DataC-45FilePath-C-60C-47C-62 e-1 (vector 1 (cons '() e-2)))))) (cons " is not an application" '())))))) ((13) "Empty package data base") ((18) (let ((e-20 (vector-ref arg-0 1))) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "Failed to parse .ipkg file: " (cons ((csegen-234) (let ((e-1 (car e-20))) (let ((e-2 (cdr e-20))) (DataC-45FilePath-C-60C-47C-62 e-1 (vector 1 (cons '() e-2)))))) '()))))) ((21) (let ((e-21 (vector-ref arg-0 1))) (let ((e-22 (vector-ref arg-0 2))) (let ((e-23 (vector-ref arg-0 3))) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "Core package " (cons (PackC-45CoreC-45Types-quote (lambda (arg-11) (let ((eff-0 arg-11)) eff-0)) e-21) (cons " missing for Idris2 version " (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_PkgVersion e-22) (cons " (commit: " (cons (let ((eff-0 e-23)) eff-0) (cons ")" '())))))))))))) ((22) (let ((e-24 (vector-ref arg-0 1))) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "Unknown command line arg: " (cons e-24 '()))))) ((23) (let ((e-25 (vector-ref arg-0 1))) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "Invalid command line args: " (cons (DataC-45String-unwords e-25) '()))))) ((24) (let ((e-26 (vector-ref arg-0 1))) e-26)) ((26) (let ((e-27 (vector-ref arg-0 1))) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "Unknown command: " (cons (DataC-45String-unwords e-27) '()))))) ((25) "Can only build or typecheck a single Idris2 package given as an `.ipkg` file.") ((20) (let ((e-28 (vector-ref arg-0 1))) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "Not a file path : " (cons e-28 '()))))) ((27) (let ((e-29 (vector-ref arg-0 1))) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "Failed to clone GitHub repository into " (cons (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 e-29) (cons ".\xa;Directory already exists." '())))))) ((28) (let ((e-30 (vector-ref arg-0 1))) (let ((e-31 (vector-ref arg-0 2))) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "Error in file " (cons ((csegen-234) (let ((e-1 (car e-30))) (let ((e-2 (cdr e-30))) (DataC-45FilePath-C-60C-47C-62 e-1 (vector 1 (cons '() e-2)))))) (cons ": " (cons (PackC-45CoreC-45Types-printTOMLErr e-31) (cons "." '()))))))))) ((29) (let ((e-32 (vector-ref arg-0 1))) (let ((e-33 (vector-ref arg-0 2))) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "Error in file " (cons ((csegen-234) (let ((e-1 (car e-32))) (let ((e-2 (cdr e-32))) (DataC-45FilePath-C-60C-47C-62 e-1 (vector 1 (cons '() e-2)))))) (cons ": " (cons e-33 (cons "." '()))))))))) ((30) (let ((e-34 (vector-ref arg-0 1))) (cond ((equal? e-34 0) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons (PreludeC-45Show-u--show_Show_Nat e-34) (cons " packages failed to build." '()))))(else (let ((e-35 (- e-34 1))) (cond ((equal? e-35 0) "1 package failed to build.")(else (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons (PreludeC-45Show-u--show_Show_Nat e-34) (cons " packages failed to build." '())))))))))) ((31) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "You are not supposed to manually install or remove the pack\xa;application. In order to update pack to the latest version on\xa;GitHub, run `pack update`.\xa;\xa;Note: If you didn't run `pack install-app pack` or a similar\xa;operation, \"pack\" might be listed as an auto-install application\xa;in one of your pack.toml files. Please remove it from there." '()))) (else "Installation aborted."))))
(define PackC-45CoreC-45Types-prefixKey (lambda (arg-1 ext-0) (case (vector-ref ext-0 0) ((0) (let ((e-2 (vector-ref ext-0 1))) (vector 0 (case (vector-ref e-2 0) ((0) (let ((e-0 (vector-ref e-2 1))) (vector 0 (cons arg-1 e-0)))) (else (let ((e-1 (vector-ref e-2 1))) (let ((e-3 (vector-ref e-2 2))) (vector 1 (cons arg-1 e-1) e-3)))))))) (else (let ((e-5 (vector-ref ext-0 1))) (vector 1 e-5))))))
(define PackC-45CoreC-45Types-llToNat (lambda (arg-0) (cond ((equal? arg-0 0) 0) ((equal? arg-0 1) 1) ((equal? arg-0 2) 2) (else 3))))
(define PackC-45CoreC-45Types-isTomlBody (lambda (ext-0) (PreludeC-45Types-u--C-61C-61_Eq_C-40MaybeC-32C-36aC-41 (csegen-412) (box (csegen-415)) ((csegen-417) (DataC-45FilePathC-45Body-split ext-0)))))
(define PackC-45CoreC-45Types-isHtmlBody (lambda (ext-0) (PreludeC-45Types-u--C-61C-61_Eq_C-40MaybeC-32C-36aC-41 (csegen-412) (box (csegen-419)) ((csegen-417) (DataC-45FilePathC-45Body-split ext-0)))))
(define PackC-45CoreC-45Types-dependencies (lambda (arg-1) (PackC-45CoreC-45TypesC-45PkgDesc-dependencies (let ((e-1 (vector-ref arg-1 0))) e-1))))
(define PackC-45CoreC-45TypesC-45PkgDesc-dependencies (lambda (arg-0) (((csegen-226) (lambda (eta-0) (let ((e-0 (car eta-0))) e-0))) (let ((e-11 (vector-ref arg-0 11))) e-11))))
(define PackC-45CoreC-45Types-C-60C-45C-62 (lambda (arg-2 arg-3 arg-4 arg-5) (let ((eff-0 (let ((eff-0 ((let ((eff-0 arg-2)) (lambda (arg-0) (eff-0 arg-0))) arg-4))) (let ((eff-1 (cons #\- '()))) (PreludeC-45TypesC-45List-tailRecAppend eff-0 eff-1))))) (let ((eff-1 ((let ((eff-1 arg-3)) (lambda (arg-0) (eff-1 arg-0))) arg-5))) (PreludeC-45TypesC-45List-tailRecAppend eff-0 eff-1)))))
(define IdrisC-45PackageC-45Types-u--show_Show_PkgVersion (lambda (arg-0) (let ((eff-0 arg-0)) (CoreC-45NameC-45Namespace-showSep "." (((csegen-226) (lambda (eta-0) (PreludeC-45Show-u--show_Show_Nat eta-0))) (DataC-45List1-forget eff-0))))))
(define IdrisC-45PackageC-45Types-initPkgDesc (lambda (arg-0) (vector arg-0 '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '())))
(define IdrisC-45PackageC-45Types-anyBounds(blodwen-lazy (lambda () (vector '() 1 '() 1))))
(define LibrariesC-45DataC-45StringC-45Extra-join (lambda (arg-1 arg-2 arg-3) (LibrariesC-45DataC-45StringC-45Extra-drop (PreludeC-45TypesC-45String-length arg-1) (let ((e-2 (vector-ref arg-2 1))) (((((e-2 'erased) 'erased) (lambda (u--acc) (lambda (u--x) (string-append u--acc (string-append arg-1 u--x))))) "") arg-3)))))
(define LibrariesC-45DataC-45StringC-45Extra-drop (lambda (arg-0 arg-1) (PreludeC-45Types-substr arg-0 (PreludeC-45TypesC-45String-length arg-1) arg-1)))
(define LibrariesC-45TextC-45Lexer-surround (lambda (arg-0 arg-1 arg-2) (vector 5 arg-0 (lambda () (LibrariesC-45TextC-45Lexer-manyThen arg-1 arg-2)))))
(define LibrariesC-45TextC-45Lexer-stringLit(blodwen-lazy (lambda () (LibrariesC-45TextC-45Lexer-quote (LibrariesC-45TextC-45Lexer-is #\") (LibrariesC-45TextC-45LexerC-45Core-C-60C-124C-62 (LibrariesC-45TextC-45Lexer-escape (LibrariesC-45TextC-45Lexer-is #\\) (LibrariesC-45TextC-45Lexer-any)) (LibrariesC-45TextC-45Lexer-any))))))
(define LibrariesC-45TextC-45Lexer-space(blodwen-lazy (lambda () (LibrariesC-45TextC-45LexerC-45Core-pred (lambda (eta-0) (PreludeC-45Types-isSpace eta-0))))))
(define LibrariesC-45TextC-45Lexer-some (lambda (arg-0) (vector 5 arg-0 (lambda () (LibrariesC-45TextC-45Lexer-many arg-0)))))
(define LibrariesC-45TextC-45Lexer-quote (lambda (arg-0 arg-1) (LibrariesC-45TextC-45Lexer-surround arg-0 arg-0 arg-1)))
(define LibrariesC-45TextC-45Lexer-opt (lambda (arg-0) (LibrariesC-45TextC-45LexerC-45Core-C-60C-124C-62 arg-0 (LibrariesC-45TextC-45LexerC-45Core-empty))))
(define LibrariesC-45TextC-45Lexer-oneOf (lambda (arg-0) (LibrariesC-45TextC-45LexerC-45Core-pred (lambda (u--x) (PreludeC-45Types-elem (csegen-98) (csegen-2) u--x (PreludeC-45Types-fastUnpack arg-0))))))
(define LibrariesC-45TextC-45Lexer-newline(blodwen-lazy (lambda () (LibrariesC-45TextC-45LexerC-45Core-C-60C-124C-62 (LibrariesC-45TextC-45Lexer-exact "\xd;\xa;") (LibrariesC-45TextC-45Lexer-oneOf "\xd;\xa;")))))
(define LibrariesC-45TextC-45Lexer-manyUntil (lambda (arg-1 arg-2) (LibrariesC-45TextC-45Lexer-many (vector 6 (LibrariesC-45TextC-45LexerC-45Core-reject arg-1) arg-2))))
(define LibrariesC-45TextC-45Lexer-manyThen (lambda (arg-1 arg-2) (vector 6 (LibrariesC-45TextC-45Lexer-manyUntil arg-1 arg-2) arg-1)))
(define LibrariesC-45TextC-45Lexer-many (lambda (arg-0) (LibrariesC-45TextC-45Lexer-opt (LibrariesC-45TextC-45Lexer-some arg-0))))
(define LibrariesC-45TextC-45Lexer-isNot (lambda (arg-0) (LibrariesC-45TextC-45LexerC-45Core-pred (lambda (arg-1) (PreludeC-45EqOrd-u--C-47C-61_Eq_Char arg-1 arg-0)))))
(define LibrariesC-45TextC-45Lexer-is (lambda (arg-0) (LibrariesC-45TextC-45LexerC-45Core-pred (lambda (arg-1) (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 arg-0)))))
(define LibrariesC-45TextC-45Lexer-intLit(blodwen-lazy (lambda () (vector 6 (LibrariesC-45TextC-45Lexer-opt (LibrariesC-45TextC-45Lexer-is #\-)) (LibrariesC-45TextC-45Lexer-digits)))))
(define LibrariesC-45TextC-45Lexer-exact (lambda (arg-0) (let ((sc0 (PreludeC-45Types-fastUnpack arg-0))) (if (null? sc0) (LibrariesC-45TextC-45LexerC-45Core-fail) (let ((e-2 (car sc0))) (let ((e-3 (cdr sc0))) (LibrariesC-45TextC-45LexerC-45Core-concatMap (lambda (eta-0) (LibrariesC-45TextC-45Lexer-is eta-0)) (cons e-2 e-3))))))))
(define LibrariesC-45TextC-45Lexer-escape (lambda (arg-0 arg-1) (vector 5 arg-0 (lambda () arg-1))))
(define LibrariesC-45TextC-45Lexer-digits(blodwen-lazy (lambda () (LibrariesC-45TextC-45Lexer-some (LibrariesC-45TextC-45Lexer-digit)))))
(define LibrariesC-45TextC-45Lexer-digit(blodwen-lazy (lambda () (LibrariesC-45TextC-45LexerC-45Core-pred (lambda (eta-0) (PreludeC-45Types-isDigit eta-0))))))
(define LibrariesC-45TextC-45Lexer-any(blodwen-lazy (lambda () (LibrariesC-45TextC-45LexerC-45Core-pred (lambda (eta-0) 1)))))
(define LibrariesC-45TextC-45LexerC-45Core-case--tokenise-2749 (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (if (null? arg-7) (cons (PreludeC-45TypesC-45List-reverse arg-3) (cons arg-5 (cons arg-4 arg-1))) (let ((e-1 (unbox arg-7))) (let ((e-5 (car e-1))) (let ((e-6 (cdr e-1))) (let ((e-9 (car e-6))) (let ((e-10 (cdr e-6))) (let ((e-13 (car e-10))) (let ((e-14 (cdr e-10))) (let ((sc4 (arg-6 (let ((e-4 (vector-ref e-5 0))) e-4)))) (cond ((equal? sc4 1) (cons (PreludeC-45TypesC-45List-reverse arg-3) (cons arg-5 (cons arg-4 '())))) (else (LibrariesC-45TextC-45LexerC-45Core-tokenise arg-6 e-9 e-13 (cons e-5 arg-3) arg-2 e-14))))))))))))))
(define LibrariesC-45TextC-45LexerC-45Core-case--tokeniseC-44getFirstToken-2659 (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (if (null? arg-11) (LibrariesC-45TextC-45LexerC-45Core-n--3688-2524-u--getFirstToken arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-9 arg-10) (let ((e-1 (unbox arg-11))) (let ((e-5 (car e-1))) (let ((e-6 (cdr e-1))) (let ((u--lineC-39 (bs+ arg-5 (PreludeC-45Cast-u--cast_Cast_Nat_Int (LibrariesC-45TextC-45LexerC-45Core-n--3688-2522-u--countNLs arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 e-5)) 63))) (let ((u--colC-39 (LibrariesC-45TextC-45LexerC-45Core-n--3688-2523-u--getCols arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 e-5 arg-4))) (box (cons (vector (arg-8 (PreludeC-45Types-fastPack (PreludeC-45TypesC-45List-reverse e-5))) 0 (vector arg-5 arg-4 u--lineC-39 u--colC-39)) (cons u--lineC-39 (cons u--colC-39 e-6))))))))))))
(define LibrariesC-45TextC-45LexerC-45Core-n--3688-2524-u--getFirstToken (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (if (null? arg-7) '() (let ((e-2 (car arg-7))) (let ((e-3 (cdr arg-7))) (let ((e-6 (car e-2))) (let ((e-7 (cdr e-2))) (LibrariesC-45TextC-45LexerC-45Core-case--tokeniseC-44getFirstToken-2659 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 e-6 e-7 e-3 arg-8 (LibrariesC-45TextC-45LexerC-45Core-scan e-6 '() arg-8)))))))))
(define LibrariesC-45TextC-45LexerC-45Core-n--3688-2523-u--getCols (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 (DataC-45List-span (csegen-433) (PreludeC-45TypesC-45List-reverse arg-7)))) (let ((e-2 (car sc0))) (let ((e-3 (cdr sc0))) (if (null? e-3) (bs+ arg-8 (PreludeC-45Cast-u--cast_Cast_Nat_Int (PreludeC-45TypesC-45List-lengthTR e-2)) 63) (PreludeC-45Cast-u--cast_Cast_Nat_Int (PreludeC-45TypesC-45List-lengthTR e-2))))))))
(define LibrariesC-45TextC-45LexerC-45Core-n--3688-2522-u--countNLs (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (PreludeC-45TypesC-45List-lengthTR (PreludeC-45TypesC-45List-filter (csegen-434) arg-7))))
(define LibrariesC-45TextC-45LexerC-45Core-tokenise (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (LibrariesC-45TextC-45LexerC-45Core-case--tokenise-2749 arg-6 arg-5 arg-4 arg-3 arg-2 arg-1 (LibrariesC-45TextC-45LexerC-45Core-n--3688-2524-u--getFirstToken arg-6 arg-5 arg-4 arg-3 arg-2 arg-1 arg-5 arg-6))))
(define LibrariesC-45TextC-45LexerC-45Core-scan (lambda (arg-1 arg-2 arg-3) (case (vector-ref arg-1 0) ((0) (box (cons arg-2 arg-3))) ((1) '()) ((2) (if (null? arg-3) (box (cons arg-2 '())) '())) ((3) (let ((e-2 (vector-ref arg-1 1))) (let ((e-3 (vector-ref arg-1 2))) (let ((sc1 (PreludeC-45EqOrd-u--C-61C-61_Eq_Bool (DataC-45Maybe-isJust (LibrariesC-45TextC-45LexerC-45Core-scan e-3 arg-2 arg-3)) e-2))) (cond ((equal? sc1 1) (box (cons arg-2 arg-3))) (else '())))))) ((4) (let ((e-4 (vector-ref arg-1 1))) (if (null? arg-3) '() (let ((e-25 (car arg-3))) (let ((e-26 (cdr arg-3))) (let ((sc2 (e-4 e-25))) (cond ((equal? sc2 1) (box (cons (cons e-25 arg-2) e-26))) (else '())))))))) ((5) (let ((e-6 (vector-ref arg-1 1))) (let ((e-7 (vector-ref arg-1 2))) (PreludeC-45Types-u--C-62C-62C-61_Monad_Maybe (LibrariesC-45TextC-45LexerC-45Core-scan e-6 arg-2 arg-3) (lambda (_-0) (let ((e-2 (car _-0))) (let ((e-3 (cdr _-0))) (LibrariesC-45TextC-45LexerC-45Core-scan (e-7) e-2 e-3)))))))) ((6) (let ((e-10 (vector-ref arg-1 1))) (let ((e-11 (vector-ref arg-1 2))) (PreludeC-45Types-u--C-62C-62C-61_Monad_Maybe (LibrariesC-45TextC-45LexerC-45Core-scan e-10 arg-2 arg-3) (lambda (_-0) (let ((e-2 (car _-0))) (let ((e-3 (cdr _-0))) (LibrariesC-45TextC-45LexerC-45Core-scan e-11 e-2 e-3)))))))) ((7) (let ((e-13 (vector-ref arg-1 1))) (let ((e-14 (vector-ref arg-1 2))) (PreludeC-45Types-u--C-62C-62C-61_Monad_Maybe (LibrariesC-45TextC-45LexerC-45Core-scan e-13 arg-2 arg-3) (lambda (_-0) (let ((e-2 (car _-0))) (let ((e-3 (cdr _-0))) (LibrariesC-45TextC-45LexerC-45Core-scan e-14 e-2 e-3)))))))) (else (let ((e-17 (vector-ref arg-1 1))) (let ((e-18 (vector-ref arg-1 2))) (PreludeC-45Types-maybe (lambda () (LibrariesC-45TextC-45LexerC-45Core-scan e-18 arg-2 arg-3)) (lambda () (lambda (eta-0) (box eta-0))) (LibrariesC-45TextC-45LexerC-45Core-scan e-17 arg-2 arg-3))))))))
(define LibrariesC-45TextC-45LexerC-45Core-reject (lambda (ext-0) (vector 3 0 ext-0)))
(define LibrariesC-45TextC-45LexerC-45Core-pred (lambda (ext-0) (vector 4 ext-0)))
(define LibrariesC-45TextC-45LexerC-45Core-lexTo (lambda (arg-1 arg-2 arg-3) (let ((sc0 (LibrariesC-45TextC-45LexerC-45Core-tokenise arg-1 0 0 '() arg-2 (PreludeC-45Types-fastUnpack arg-3)))) (let ((e-2 (car sc0))) (let ((e-3 (cdr sc0))) (let ((e-6 (car e-3))) (let ((e-7 (cdr e-3))) (let ((e-10 (car e-7))) (let ((e-11 (cdr e-7))) (cons e-2 (cons e-6 (cons e-10 (PreludeC-45Types-fastPack e-11)))))))))))))
(define LibrariesC-45TextC-45LexerC-45Core-fail(blodwen-lazy (lambda () (vector 1 ))))
(define LibrariesC-45TextC-45LexerC-45Core-expect (lambda (ext-0) (vector 3 1 ext-0)))
(define LibrariesC-45TextC-45LexerC-45Core-empty(blodwen-lazy (lambda () (vector 0 ))))
(define LibrariesC-45TextC-45LexerC-45Core-concatMap (lambda (arg-2 arg-3) (if (null? arg-3) (vector 0 ) (let ((e-2 (car arg-3))) (let ((e-3 (cdr arg-3))) (if (null? e-3) (arg-2 e-2) (vector 7 (arg-2 e-2) (LibrariesC-45TextC-45LexerC-45Core-concatMap arg-2 e-3))))))))
(define LibrariesC-45TextC-45LexerC-45Core-C-60C-124C-62 (lambda (ext-0 ext-1) (vector 8 ext-0 ext-1)))
(define LibrariesC-45TextC-45Bounded-u--map_Functor_WithBounds (lambda (arg-2 arg-3) (let ((e-1 (vector-ref arg-3 0))) (let ((e-2 (vector-ref arg-3 1))) (let ((e-3 (vector-ref arg-3 2))) (vector (arg-2 e-1) e-2 e-3))))))
(define LibrariesC-45TextC-45Bounded-startBounds (lambda (arg-0) (cons (let ((e-0 (vector-ref arg-0 0))) e-0) (let ((e-1 (vector-ref arg-0 1))) e-1))))
(define LibrariesC-45TextC-45Bounded-start (lambda (ext-0) (LibrariesC-45TextC-45Bounded-startBounds (let ((e-3 (vector-ref ext-0 2))) e-3))))
(define LibrariesC-45TextC-45Bounded-removeIrrelevance (lambda (arg-1) (let ((e-1 (vector-ref arg-1 0))) (let ((e-3 (vector-ref arg-1 2))) (vector e-1 1 e-3)))))
(define LibrariesC-45TextC-45Bounded-mergeBounds (lambda (arg-2 arg-3) (let ((e-6 (vector-ref arg-2 1))) (cond ((equal? e-6 1) (let ((e-9 (vector-ref arg-3 0))) (let ((e-10 (vector-ref arg-3 1))) (cond ((equal? e-10 1) (LibrariesC-45TextC-45Bounded-irrelevantBounds e-9))(else arg-3)))))(else (let ((e-1 (vector-ref arg-3 0))) (let ((e-2 (vector-ref arg-3 1))) (cond ((equal? e-2 1) (PreludeC-45Interfaces-C-60C-36C-62 (csegen-437) (lambda (eta-0) e-1) arg-2))(else (let ((sc0 (PreludeC-45EqOrd-u--min_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (csegen-120) (csegen-120) (LibrariesC-45TextC-45Bounded-start arg-2) (LibrariesC-45TextC-45Bounded-start arg-3)))) (let ((e-8 (car sc0))) (let ((e-4 (cdr sc0))) (let ((sc1 (PreludeC-45EqOrd-u--max_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (csegen-120) (csegen-120) (LibrariesC-45TextC-45Bounded-end arg-2) (LibrariesC-45TextC-45Bounded-end arg-3)))) (let ((e-10 (car sc1))) (let ((e-9 (cdr sc1))) (vector (let ((e-13 (vector-ref arg-3 0))) e-13) 0 (vector e-8 e-4 e-10 e-9)))))))))))))))))
(define LibrariesC-45TextC-45Bounded-irrelevantBounds (lambda (arg-1) (vector arg-1 1 (vector -1 -1 -1 -1))))
(define LibrariesC-45TextC-45Bounded-endBounds (lambda (arg-0) (cons (let ((e-2 (vector-ref arg-0 2))) e-2) (let ((e-3 (vector-ref arg-0 3))) e-3))))
(define LibrariesC-45TextC-45Bounded-end (lambda (ext-0) (LibrariesC-45TextC-45Bounded-endBounds (let ((e-3 (vector-ref ext-0 2))) e-3))))
(define LibrariesC-45TextC-45Parser-some (lambda (arg-3) (vector 9 0 arg-3 (lambda () (lambda (bind-0) (vector 10 0 0 (LibrariesC-45TextC-45Parser-many arg-3) (lambda (bind-1) (vector 0 (cons bind-0 bind-1)))))))))
(define LibrariesC-45TextC-45Parser-sepBy1 (lambda (arg-4 arg-5 arg-6) (vector 10 arg-4 0 (vector 10 0 arg-4 (vector 0 (csegen-222)) (lambda (u--f) (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 arg-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) u--f) arg-6))) (lambda (u--f) (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 0 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) u--f) (LibrariesC-45TextC-45Parser-many (vector 10 1 arg-4 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) (lambda (eta-0) (lambda (eta-1) eta-1))) arg-5) (lambda (f-0) (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 arg-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) f-0) arg-6)))))))))
(define LibrariesC-45TextC-45Parser-sepBy (lambda (arg-4 arg-5 arg-6) (LibrariesC-45TextC-45Parser-option arg-4 '() (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 arg-4 eta-2 eta-3))))) (lambda (eta-0) (DataC-45List1-forget eta-0)) (LibrariesC-45TextC-45Parser-sepBy1 arg-4 arg-5 arg-6)))))
(define LibrariesC-45TextC-45Parser-option (lambda (arg-3 arg-4 arg-5) (cond ((equal? arg-3 0) (vector 13 0 0 arg-5 (lambda () (vector 0 arg-4)))) (else (vector 13 1 0 arg-5 (lambda () (vector 0 arg-4)))))))
(define LibrariesC-45TextC-45Parser-many (lambda (arg-3) (LibrariesC-45TextC-45Parser-option 1 '() (PreludeC-45Interfaces-C-60C-36C-62 (csegen-451) (lambda (eta-0) (DataC-45List1-forget eta-0)) (LibrariesC-45TextC-45Parser-some arg-3)))))
(define LibrariesC-45TextC-45Parser-location(blodwen-lazy (lambda () (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 0 eta-2 eta-3))))) (lambda (eta-0) (LibrariesC-45TextC-45Bounded-startBounds eta-0)) (vector 15 )))))
(define LibrariesC-45TextC-45ParserC-45Core-case--doParse-5277 (lambda (arg-3 arg-5 arg-6 arg-7 arg-8 arg-9 arg-11) (case (vector-ref arg-11 0) ((0) (let ((e-3 (vector-ref arg-11 1))) (let ((e-4 (vector-ref arg-11 2))) (let ((e-5 (vector-ref arg-11 3))) (vector 0 e-3 e-4 e-5))))) (else (let ((e-9 (vector-ref arg-11 1))) (let ((e-10 (vector-ref arg-11 2))) (let ((e-11 (vector-ref arg-11 3))) (let ((e-12 (vector-ref arg-11 4))) (let ((e-13 (vector-ref arg-11 5))) (vector 1 e-9 e-10 e-11 (PreludeC-45Interfaces-C-60C-36C-62 (csegen-458) (lambda (eta-0) e-12) e-12) e-13))))))))))
(define LibrariesC-45TextC-45ParserC-45Core-case--doParse-4952 (lambda (arg-3 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-13) (case (vector-ref arg-13 0) ((0) (let ((e-3 (vector-ref arg-13 1))) (let ((e-4 (vector-ref arg-13 2))) (let ((e-5 (vector-ref arg-13 3))) (vector 0 e-3 e-4 e-5))))) (else (let ((e-9 (vector-ref arg-13 1))) (let ((e-10 (vector-ref arg-13 2))) (let ((e-11 (vector-ref arg-13 3))) (let ((e-12 (vector-ref arg-13 4))) (let ((e-13 (vector-ref arg-13 5))) (LibrariesC-45TextC-45ParserC-45Core-mergeWith e-12 (LibrariesC-45TextC-45ParserC-45Core-doParse arg-3 e-9 e-10 e-11 ((arg-7) (let ((e-1 (vector-ref e-12 0))) e-1)) e-13)))))))))))
(define LibrariesC-45TextC-45ParserC-45Core-case--doParse-4834 (lambda (arg-3 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-14) (case (vector-ref arg-14 0) ((0) (let ((e-3 (vector-ref arg-14 1))) (let ((e-4 (vector-ref arg-14 2))) (let ((e-5 (vector-ref arg-14 3))) (vector 0 e-3 e-4 e-5))))) (else (let ((e-9 (vector-ref arg-14 1))) (let ((e-10 (vector-ref arg-14 2))) (let ((e-11 (vector-ref arg-14 3))) (let ((e-12 (vector-ref arg-14 4))) (let ((e-13 (vector-ref arg-14 5))) (LibrariesC-45TextC-45ParserC-45Core-mergeWith e-12 (LibrariesC-45TextC-45ParserC-45Core-doParse arg-3 e-9 e-10 e-11 (arg-8 (let ((e-1 (vector-ref e-12 0))) e-1)) e-13)))))))))))
(define LibrariesC-45TextC-45ParserC-45Core-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32doParse-4586 (lambda (arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-12 arg-13 arg-14 arg-15 arg-16) (case (vector-ref arg-16 0) ((0) (let ((e-3 (vector-ref arg-16 1))) (let ((e-4 (vector-ref arg-16 2))) (let ((e-5 (vector-ref arg-16 3))) (let ((sc1 (cond ((equal? e-3 1) 1) (else e-4)))) (cond ((equal? sc1 1) (vector 0 e-3 e-4 e-5)) (else (vector 0 0 0 (DataC-45List1-C-43C-43 arg-12 e-5))))))))) (else (let ((e-9 (vector-ref arg-16 1))) (let ((e-10 (vector-ref arg-16 2))) (let ((e-12 (vector-ref arg-16 4))) (let ((e-13 (vector-ref arg-16 5))) (vector 1 e-9 e-10 arg-9 e-12 e-13)))))))))
(define LibrariesC-45TextC-45ParserC-45Core-case--doParse-4464 (lambda (arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-13) (case (vector-ref arg-13 0) ((0) (let ((e-3 (vector-ref arg-13 1))) (let ((e-4 (vector-ref arg-13 2))) (let ((e-5 (vector-ref arg-13 3))) (let ((sc1 (cond ((equal? e-3 1) 1) (else e-4)))) (cond ((equal? sc1 1) (vector 0 arg-10 e-4 e-5)) (else (LibrariesC-45TextC-45ParserC-45Core-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32doParse-4586 arg-3 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 e-5 e-4 e-3 arg-4 (LibrariesC-45TextC-45ParserC-45Core-doParse arg-3 arg-4 arg-11 0 (arg-6) arg-9))))))))) (else (let ((e-9 (vector-ref arg-13 1))) (let ((e-10 (vector-ref arg-13 2))) (let ((e-12 (vector-ref arg-13 4))) (let ((e-13 (vector-ref arg-13 5))) (vector 1 e-9 e-10 arg-10 e-12 e-13)))))))))
(define LibrariesC-45TextC-45ParserC-45Core-case--doParse-4087 (lambda (arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (case (vector-ref arg-10 0) ((0) (let ((e-3 (vector-ref arg-10 1))) (let ((e-5 (vector-ref arg-10 3))) (vector 0 e-3 1 e-5))))(else arg-10))))
(define LibrariesC-45TextC-45ParserC-45Core-case--doParse-3986 (lambda (arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (case (vector-ref arg-10 0) ((0) (let ((e-3 (vector-ref arg-10 1))) (let ((e-5 (vector-ref arg-10 3))) (vector 0 e-3 0 e-5))))(else arg-10))))
(define LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 (lambda (arg-4 arg-5 arg-6) (cond ((equal? arg-4 0) (case (vector-ref arg-6 0) ((0) (let ((e-65 (vector-ref arg-6 1))) (vector 0 (arg-5 e-65))))(else (case (vector-ref arg-6 0) ((4) (let ((e-49 (vector-ref arg-6 1))) (let ((e-50 (vector-ref arg-6 2))) (let ((e-51 (vector-ref arg-6 3))) (vector 4 e-49 e-50 e-51))))) ((6) (let ((e-56 (vector-ref arg-6 1))) (vector 6 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 arg-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-56)))) ((8) (let ((e-61 (vector-ref arg-6 1))) (vector 8 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 arg-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-61))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((1) (let ((e-43 (vector-ref arg-6 1))) (let ((e-44 (vector-ref arg-6 2))) (vector 1 e-43 (lambda (eta-0) (((csegen-230) arg-5) (e-44 eta-0)))))))(else (case (vector-ref arg-6 0) ((13) (let ((e-36 (vector-ref arg-6 1))) (let ((e-37 (vector-ref arg-6 2))) (let ((e-38 (vector-ref arg-6 3))) (let ((e-39 (vector-ref arg-6 4))) (vector 13 e-36 e-37 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-36 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-38) (lambda () (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-37 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) (e-39)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((9) (let ((e-30 (vector-ref arg-6 1))) (let ((e-31 (vector-ref arg-6 2))) (let ((e-32 (vector-ref arg-6 3))) (vector 9 e-30 e-31 (lambda () (lambda (u--val) (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-30 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) ((e-32) u--val)))))))))(else (case (vector-ref arg-6 0) ((10) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 10 e-22 e-23 e-24 (lambda (u--val) (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((11) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 11 e-15 e-16 (lambda () (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) (e-17))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))))))(else (case (vector-ref arg-6 0) ((10) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 10 e-22 e-23 e-24 (lambda (u--val) (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((11) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 11 e-15 e-16 (lambda () (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) (e-17))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))))))))))(else (case (vector-ref arg-6 0) ((13) (let ((e-36 (vector-ref arg-6 1))) (let ((e-37 (vector-ref arg-6 2))) (let ((e-38 (vector-ref arg-6 3))) (let ((e-39 (vector-ref arg-6 4))) (vector 13 e-36 e-37 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-36 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-38) (lambda () (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-37 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) (e-39)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((9) (let ((e-30 (vector-ref arg-6 1))) (let ((e-31 (vector-ref arg-6 2))) (let ((e-32 (vector-ref arg-6 3))) (vector 9 e-30 e-31 (lambda () (lambda (u--val) (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-30 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) ((e-32) u--val)))))))))(else (case (vector-ref arg-6 0) ((10) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 10 e-22 e-23 e-24 (lambda (u--val) (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((11) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 11 e-15 e-16 (lambda () (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) (e-17))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))))))(else (case (vector-ref arg-6 0) ((10) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 10 e-22 e-23 e-24 (lambda (u--val) (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((11) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 11 e-15 e-16 (lambda () (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) (e-17))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))))))))))))))(else (case (vector-ref arg-6 0) ((4) (let ((e-49 (vector-ref arg-6 1))) (let ((e-50 (vector-ref arg-6 2))) (let ((e-51 (vector-ref arg-6 3))) (vector 4 e-49 e-50 e-51))))) ((6) (let ((e-56 (vector-ref arg-6 1))) (vector 6 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 arg-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-56)))) ((8) (let ((e-61 (vector-ref arg-6 1))) (vector 8 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 arg-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-61))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((1) (let ((e-43 (vector-ref arg-6 1))) (let ((e-44 (vector-ref arg-6 2))) (vector 1 e-43 (lambda (eta-0) (((csegen-230) arg-5) (e-44 eta-0)))))))(else (case (vector-ref arg-6 0) ((13) (let ((e-36 (vector-ref arg-6 1))) (let ((e-37 (vector-ref arg-6 2))) (let ((e-38 (vector-ref arg-6 3))) (let ((e-39 (vector-ref arg-6 4))) (vector 13 e-36 e-37 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-36 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-38) (lambda () (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-37 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) (e-39)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((9) (let ((e-30 (vector-ref arg-6 1))) (let ((e-31 (vector-ref arg-6 2))) (let ((e-32 (vector-ref arg-6 3))) (vector 9 e-30 e-31 (lambda () (lambda (u--val) (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-30 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) ((e-32) u--val)))))))))(else (case (vector-ref arg-6 0) ((10) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 10 e-22 e-23 e-24 (lambda (u--val) (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((11) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 11 e-15 e-16 (lambda () (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) (e-17))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))))))(else (case (vector-ref arg-6 0) ((10) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 10 e-22 e-23 e-24 (lambda (u--val) (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((11) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 11 e-15 e-16 (lambda () (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) (e-17))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))))))))))(else (case (vector-ref arg-6 0) ((13) (let ((e-36 (vector-ref arg-6 1))) (let ((e-37 (vector-ref arg-6 2))) (let ((e-38 (vector-ref arg-6 3))) (let ((e-39 (vector-ref arg-6 4))) (vector 13 e-36 e-37 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-36 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-38) (lambda () (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-37 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) (e-39)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((9) (let ((e-30 (vector-ref arg-6 1))) (let ((e-31 (vector-ref arg-6 2))) (let ((e-32 (vector-ref arg-6 3))) (vector 9 e-30 e-31 (lambda () (lambda (u--val) (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-30 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) ((e-32) u--val)))))))))(else (case (vector-ref arg-6 0) ((10) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 10 e-22 e-23 e-24 (lambda (u--val) (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((11) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 11 e-15 e-16 (lambda () (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) (e-17))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))))))(else (case (vector-ref arg-6 0) ((10) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 10 e-22 e-23 e-24 (lambda (u--val) (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((11) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 11 e-15 e-16 (lambda () (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) (e-17))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0))))))))))))))))))))))))
(define LibrariesC-45TextC-45ParserC-45Core-parse (lambda (arg-2 arg-3 arg-4) (let ((sc0 (LibrariesC-45TextC-45ParserC-45Core-doParse (lambda (eta-0) (lambda (eta-1) (vector 0 ))) (vector 0 ) '() 0 arg-3 arg-4))) (case (vector-ref sc0 0) ((0) (let ((e-5 (vector-ref sc0 3))) (vector 0 e-5))) (else (let ((e-10 (vector-ref sc0 2))) (let ((e-12 (vector-ref sc0 4))) (let ((e-13 (vector-ref sc0 5))) (vector 1 (cons e-10 (cons (let ((e-1 (vector-ref e-12 0))) e-1) e-13)))))))))))
(define LibrariesC-45TextC-45ParserC-45Core-mergeWith (lambda (arg-4 arg-5) (case (vector-ref arg-5 0) ((1) (let ((e-3 (vector-ref arg-5 1))) (let ((e-4 (vector-ref arg-5 2))) (let ((e-5 (vector-ref arg-5 3))) (let ((e-6 (vector-ref arg-5 4))) (let ((e-7 (vector-ref arg-5 5))) (vector 1 e-3 e-4 e-5 (LibrariesC-45TextC-45Bounded-mergeBounds arg-4 e-6) e-7)))))))(else arg-5))))
(define LibrariesC-45TextC-45ParserC-45Core-doParse (lambda (arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (case (vector-ref arg-8 0) ((0) (let ((e-3 (vector-ref arg-8 1))) (vector 1 arg-5 arg-6 arg-7 (LibrariesC-45TextC-45Bounded-irrelevantBounds e-3) arg-9))) ((5) (let ((e-6 (vector-ref arg-8 1))) (let ((e-7 (vector-ref arg-8 2))) (vector 1 arg-5 (cons (cons e-6 e-7) arg-6) arg-7 (LibrariesC-45TextC-45Bounded-irrelevantBounds (vector 0 )) arg-9)))) ((4) (let ((e-12 (vector-ref arg-8 1))) (let ((e-13 (vector-ref arg-8 2))) (let ((e-14 (vector-ref arg-8 3))) (vector 0 arg-7 e-13 (cons (cons e-14 (PreludeC-45Types-u--C-60C-124C-62_Alternative_Maybe e-12 (lambda () (PreludeC-45Interfaces-C-60C-36C-62 (csegen-229) (lambda (eta-0) (let ((e-3 (vector-ref eta-0 2))) e-3)) (DataC-45List-headC-39 arg-9))))) '())))))) ((6) (let ((e-19 (vector-ref arg-8 1))) (LibrariesC-45TextC-45ParserC-45Core-case--doParse-3986 arg-4 arg-5 e-19 arg-9 arg-7 arg-6 (LibrariesC-45TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 arg-7 e-19 arg-9)))) ((7) (vector 1 arg-5 arg-6 1 (LibrariesC-45TextC-45Bounded-irrelevantBounds (vector 0 )) arg-9)) ((8) (let ((e-26 (vector-ref arg-8 1))) (LibrariesC-45TextC-45ParserC-45Core-case--doParse-4087 arg-4 arg-5 e-26 arg-9 arg-7 arg-6 (LibrariesC-45TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 arg-7 e-26 arg-9)))) ((1) (let ((e-30 (vector-ref arg-8 1))) (let ((e-31 (vector-ref arg-8 2))) (if (null? arg-9) (vector 0 arg-7 0 (csegen-462)) (let ((e-85 (car arg-9))) (let ((e-86 (cdr arg-9))) (let ((sc2 (e-31 (let ((e-1 (vector-ref e-85 0))) e-1)))) (if (null? sc2) (vector 0 arg-7 0 (cons (cons e-30 (box (let ((e-3 (vector-ref e-85 2))) e-3))) '())) (let ((e-2 (unbox sc2))) (vector 1 arg-5 arg-6 arg-7 (PreludeC-45Interfaces-C-60C-36C-62 (csegen-458) (lambda (eta-0) e-2) e-85) e-86)))))))))) ((3) (if (null? arg-9) (vector 1 arg-5 arg-6 arg-7 (LibrariesC-45TextC-45Bounded-irrelevantBounds (vector 0 )) '()) (let ((e-89 (car arg-9))) (vector 0 arg-7 0 (cons (cons (csegen-463) (box (let ((e-3 (vector-ref e-89 2))) e-3))) '()))))) ((2) (let ((e-36 (vector-ref arg-8 1))) (let ((e-37 (vector-ref arg-8 2))) (if (null? arg-9) (vector 0 arg-7 0 (csegen-462)) (let ((e-93 (car arg-9))) (let ((e-94 (cdr arg-9))) (let ((sc2 (e-37 (let ((e-1 (vector-ref e-93 0))) e-1)))) (cond ((equal? sc2 1) (vector 1 arg-5 arg-6 arg-7 (LibrariesC-45TextC-45Bounded-removeIrrelevance e-93) (cons e-93 e-94))) (else (vector 0 arg-7 0 (cons (cons e-36 (box (let ((e-3 (vector-ref e-93 2))) e-3))) '()))))))))))) ((13) (let ((e-41 (vector-ref arg-8 1))) (let ((e-42 (vector-ref arg-8 2))) (let ((e-43 (vector-ref arg-8 3))) (let ((e-44 (vector-ref arg-8 4))) (LibrariesC-45TextC-45ParserC-45Core-case--doParse-4464 arg-4 arg-5 e-42 e-44 e-41 e-43 arg-9 arg-7 arg-6 (LibrariesC-45TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 0 e-43 arg-9))))))) ((10) (let ((e-49 (vector-ref arg-8 1))) (let ((e-50 (vector-ref arg-8 2))) (let ((e-51 (vector-ref arg-8 3))) (let ((e-52 (vector-ref arg-8 4))) (LibrariesC-45TextC-45ParserC-45Core-case--doParse-4834 arg-4 e-49 e-50 arg-5 e-52 e-51 arg-9 arg-7 arg-6 (LibrariesC-45TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 arg-7 e-51 arg-9))))))) ((9) (let ((e-57 (vector-ref arg-8 1))) (let ((e-58 (vector-ref arg-8 2))) (let ((e-59 (vector-ref arg-8 3))) (LibrariesC-45TextC-45ParserC-45Core-case--doParse-4952 arg-4 e-57 arg-5 e-59 e-58 arg-9 arg-7 arg-6 (LibrariesC-45TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 arg-7 e-58 arg-9)))))) ((12) (let ((e-65 (vector-ref arg-8 3))) (let ((e-66 (vector-ref arg-8 4))) (let ((sc1 (LibrariesC-45TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 arg-7 e-65 arg-9))) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (let ((e-4 (vector-ref sc1 2))) (let ((e-5 (vector-ref sc1 3))) (vector 0 e-3 e-4 e-5))))) (else (let ((e-9 (vector-ref sc1 1))) (let ((e-10 (vector-ref sc1 2))) (let ((e-11 (vector-ref sc1 3))) (let ((e-12 (vector-ref sc1 4))) (let ((e-13 (vector-ref sc1 5))) (LibrariesC-45TextC-45ParserC-45Core-mergeWith e-12 (LibrariesC-45TextC-45ParserC-45Core-doParse arg-4 e-9 e-10 e-11 e-66 e-13))))))))))))) ((11) (let ((e-71 (vector-ref arg-8 2))) (let ((e-72 (vector-ref arg-8 3))) (let ((sc1 (LibrariesC-45TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 arg-7 e-71 arg-9))) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (let ((e-4 (vector-ref sc1 2))) (let ((e-5 (vector-ref sc1 3))) (vector 0 e-3 e-4 e-5))))) (else (let ((e-9 (vector-ref sc1 1))) (let ((e-10 (vector-ref sc1 2))) (let ((e-11 (vector-ref sc1 3))) (let ((e-12 (vector-ref sc1 4))) (let ((e-13 (vector-ref sc1 5))) (LibrariesC-45TextC-45ParserC-45Core-mergeWith e-12 (LibrariesC-45TextC-45ParserC-45Core-doParse arg-4 e-9 e-10 e-11 (e-72) e-13))))))))))))) ((14) (let ((e-77 (vector-ref arg-8 1))) (LibrariesC-45TextC-45ParserC-45Core-case--doParse-5277 arg-4 arg-5 e-77 arg-9 arg-7 arg-6 (LibrariesC-45TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 arg-7 e-77 arg-9)))) ((15) (if (null? arg-9) (vector 0 arg-7 0 (csegen-462)) (let ((e-97 (car arg-9))) (let ((e-98 (cdr arg-9))) (vector 1 arg-5 arg-6 arg-7 (LibrariesC-45TextC-45Bounded-irrelevantBounds (let ((e-3 (vector-ref e-97 2))) e-3)) (cons e-97 e-98)))))) (else (let ((e-82 (vector-ref arg-8 1))) (vector 1 (((let ((eff-0 arg-4)) (lambda (arg-0) (lambda (arg-1) ((eff-0 arg-0) arg-1)))) arg-5) e-82) arg-6 arg-7 (LibrariesC-45TextC-45Bounded-irrelevantBounds (vector 0 )) arg-9))))))
(define CoreC-45NameC-45Namespace-showSep (lambda (arg-0 ext-0) (LibrariesC-45DataC-45StringC-45Extra-join arg-0 (csegen-98) ext-0)))
(define CoreC-45NameC-45Namespace-nsAsModuleIdent (lambda (arg-0) (let ((eff-0 arg-0)) eff-0)))
(define CoreC-45NameC-45Namespace-mkNestedNamespace (lambda (arg-0 arg-1) (if (null? arg-0) (cons arg-1 '()) (let ((e-2 (unbox arg-0))) (let ((eff-0 e-2)) (cons arg-1 eff-0))))))
(define CoreC-45NameC-45Namespace-mkNamespacedIdent (lambda (arg-0) (let ((u--nns (DataC-45List1-reverse (DataC-45String-split (lambda (arg-1) (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\.)) arg-0)))) (let ((u--name (let ((e-1 (car u--nns))) e-1))) (let ((u--ns (let ((e-2 (cdr u--nns))) e-2))) (if (null? u--ns) (cons '() u--name) (cons (box u--ns) u--name)))))))
(define DataC-45FilePathC-45File-stemAndExt (lambda (ext-0) (((csegen-230) (lambda (lamc-0) (let ((e-2 (car lamc-0))) (let ((e-3 (cdr lamc-0))) (let ((e-6 (cdr e-2))) (cons e-6 e-3)))))) (DataC-45FilePathC-45File-splitFileName ext-0))))
(define DataC-45FilePathC-45File-splitFileName (lambda (arg-1) (let ((e-1 (car arg-1))) (let ((e-2 (cdr arg-1))) (PreludeC-45Types-u--C-62C-62C-61_Monad_Maybe (DataC-45FilePathC-45Body-split e-2) (lambda (_-0) (let ((e-4 (car _-0))) (let ((e-3 (cdr _-0))) (box (cons (cons e-1 e-4) e-3))))))))))
(define DataC-45FilePathC-45FileC-45RelFile-parse (lambda (arg-0) (let ((sc0 (DataC-45FilePathC-45RelPath-parse arg-0))) (if (null? sc0) '() (let ((e-1 (unbox sc0))) (case (vector-ref e-1 0) ((1) (let ((e-2 (vector-ref e-1 1))) (if (null? e-2) '() (let ((e-4 (car e-2))) (let ((e-5 (cdr e-2))) (box (cons (vector 1 e-4) e-5)))))))(else '())))))))
(define DataC-45FilePath-case--caseC-32blockC-32inC-32fromString-10383 (lambda (arg-0 arg-1 arg-2) (let ((e-1 (car arg-2))) (let ((e-2 (cdr arg-2))) (cond ((equal? e-1 "") (vector 0 (PreludeC-45TypesC-45SnocList-C-60C-62C-60 '() (PreludeC-45TypesC-45List-mapMaybe (csegen-465) e-2))))(else (vector 1 (PreludeC-45TypesC-45SnocList-C-60C-62C-60 '() (PreludeC-45TypesC-45List-mapMaybe (csegen-465) (cons e-1 e-2))))))))))
(define DataC-45FilePath-case--fromString-10354 (lambda (arg-0 arg-1) (cond ((equal? arg-1 "") (vector 1 '()))(else (DataC-45FilePath-case--caseC-32blockC-32inC-32fromString-10383 arg-0 arg-1 (DataC-45List1-u--map_Functor_List1 (lambda (eta-0) (DataC-45String-trim eta-0)) (DataC-45String-split (csegen-466) arg-1)))))))
(define DataC-45FilePath-u--neutral_Monoid_C-40PathC-32RelC-41(blodwen-lazy (lambda () (vector 1 '()))))
(define DataC-45FilePath-u--interpolate_Interpolation_FilePath (lambda (arg-0) (let ((eff-0 arg-0)) (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 eff-0))))
(define DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 (lambda (arg-1) (case (vector-ref arg-1 0) ((0) (let ((e-0 (vector-ref arg-1 1))) (PreludeC-45Types-fastConcat (cons "/" (DataC-45List-intersperse "/" (DataC-45FilePath-mapToList (csegen-468) (DataC-45FilePath-normAbs e-0) '())))))) (else (let ((e-1 (vector-ref arg-1 1))) (PreludeC-45Types-fastConcat (DataC-45List-intersperse "/" (DataC-45FilePath-mapToList (csegen-468) (DataC-45FilePath-normRel e-1) '()))))))))
(define DataC-45FilePath-u--fromString_FromString_FilePath (lambda (arg-0) (DataC-45FilePath-case--fromString-10354 arg-0 (DataC-45String-trim arg-0))))
(define DataC-45FilePath-split (lambda (arg-1) (case (vector-ref arg-1 0) ((0) (let ((e-0 (vector-ref arg-1 1))) (if (null? e-0) '() (let ((e-3 (car e-0))) (let ((e-4 (cdr e-0))) (box (cons (vector 0 e-3) e-4))))))) (else (let ((e-1 (vector-ref arg-1 1))) (if (null? e-1) '() (let ((e-7 (car e-1))) (let ((e-8 (cdr e-1))) (box (cons (vector 1 e-7) e-8))))))))))
(define DataC-45FilePathC-45RelPath-parse (lambda (arg-0) (let ((u--ps (DataC-45List-split (csegen-466) (PreludeC-45Types-fastUnpack arg-0)))) (PreludeC-45Interfaces-C-60C-36C-62 (csegen-229) (lambda (eta-0) (vector 1 (PreludeC-45TypesC-45SnocList-C-60C-62C-60 '() eta-0))) (PreludeC-45Types-u--traverse_Traversable_List (csegen-476) (lambda (eta-0) (DataC-45FilePathC-45Body-fromChars eta-0)) (DataC-45List1-forget u--ps))))))
(define DataC-45FilePathC-45AbsPath-parse (lambda (arg-0) (let ((sc0 (PreludeC-45Types-fastUnpack arg-0))) (if (null? sc0) '() (let ((e-1 (car sc0))) (let ((e-2 (cdr sc0))) (cond ((equal? e-1 #\/) (let ((u--ps (DataC-45List-split (csegen-466) e-2))) (PreludeC-45Interfaces-C-60C-36C-62 (csegen-229) (lambda (eta-0) (vector 0 (PreludeC-45TypesC-45SnocList-C-60C-62C-60 '() eta-0))) (PreludeC-45Types-u--traverse_Traversable_List (csegen-476) (lambda (eta-0) (DataC-45FilePathC-45Body-fromChars eta-0)) (DataC-45List1-forget u--ps)))))(else '()))))))))
(define DataC-45FilePath-normRel (lambda (arg-0) (if (null? arg-0) '() (let ((e-2 (car arg-0))) (let ((e-3 (cdr arg-0))) (let ((eff-0 e-3)) (if (null? eff-0) (cons (DataC-45FilePath-normRel e-2) e-3) (let ((e-7 (car eff-0))) (let ((e-8 (cdr eff-0))) (cond ((equal? e-7 #\.) (if (null? e-8) (cons (DataC-45FilePath-normRel e-2) e-3) (let ((e-10 (car e-8))) (let ((e-11 (cdr e-8))) (cond ((equal? e-10 #\.) (if (null? e-11) (let ((sc6 (DataC-45FilePath-normRel e-2))) (if (null? sc6) (cons '() (csegen-478)) (let ((e-5 (car sc6))) (let ((e-4 (cdr sc6))) (let ((eff-1 e-4)) (if (null? eff-1) e-5 (let ((e-12 (car eff-1))) (let ((e-9 (cdr eff-1))) (cond ((equal? e-12 #\.) (if (null? e-9) e-5 (let ((e-14 (car e-9))) (let ((e-13 (cdr e-9))) (cond ((equal? e-14 #\.) (if (null? e-13) (cons (cons e-5 (csegen-478)) (csegen-478)) e-5))(else e-5))))))(else e-5)))))))))) (cons (DataC-45FilePath-normRel e-2) e-3)))(else (cons (DataC-45FilePath-normRel e-2) e-3)))))))(else (cons (DataC-45FilePath-normRel e-2) e-3))))))))))))
(define DataC-45FilePath-normAbs (lambda (arg-0) (if (null? arg-0) '() (let ((e-2 (car arg-0))) (let ((e-3 (cdr arg-0))) (let ((eff-0 e-3)) (if (null? eff-0) (cons (DataC-45FilePath-normAbs e-2) e-3) (let ((e-7 (car eff-0))) (let ((e-8 (cdr eff-0))) (cond ((equal? e-7 #\.) (if (null? e-8) (cons (DataC-45FilePath-normAbs e-2) e-3) (let ((e-10 (car e-8))) (let ((e-11 (cdr e-8))) (cond ((equal? e-10 #\.) (if (null? e-11) (let ((sc6 (DataC-45FilePath-normAbs e-2))) (if (null? sc6) '() (let ((e-5 (car sc6))) e-5))) (cons (DataC-45FilePath-normAbs e-2) e-3)))(else (cons (DataC-45FilePath-normAbs e-2) e-3)))))))(else (cons (DataC-45FilePath-normAbs e-2) e-3))))))))))))
(define DataC-45FilePath-mapToList (lambda (arg-2 arg-3 arg-4) (if (null? arg-3) arg-4 (let ((e-2 (car arg-3))) (let ((e-3 (cdr arg-3))) (DataC-45FilePath-mapToList arg-2 e-2 (cons (arg-2 e-3) arg-4)))))))
(define DataC-45FilePathC-45RelPath-fromString (lambda (arg-0) (DataC-45Maybe-fromJust (DataC-45FilePathC-45RelPath-parse arg-0))))
(define DataC-45FilePath-C-60C-47C-62 (lambda (arg-1 arg-2) (case (vector-ref arg-1 0) ((0) (let ((e-0 (vector-ref arg-1 1))) (let ((e-2 (vector-ref arg-2 1))) (vector 0 (PreludeC-45TypesC-45SnocList-C-43C-43 e-0 e-2))))) (else (let ((e-1 (vector-ref arg-1 1))) (let ((e-3 (vector-ref arg-2 1))) (vector 1 (PreludeC-45TypesC-45SnocList-C-43C-43 e-1 e-3))))))))
(define DataC-45FilePathC-45Body-split (lambda (arg-0) (let ((eff-0 arg-0)) (let ((u--ss (DataC-45List-split (csegen-480) eff-0))) (PreludeC-45Types-u--C-60C-42C-62_Applicative_Maybe (PreludeC-45Types-u--C-60C-42C-62_Applicative_Maybe (box (lambda (eta-0) (lambda (eta-1) (cons eta-0 eta-1)))) (DataC-45FilePathC-45Body-fromChars (PreludeC-45Types-u--join_Monad_List (DataC-45List-intersperse (cons #\. '()) (DataC-45List1-init u--ss))))) (DataC-45FilePathC-45Body-fromChars (DataC-45List1-last u--ss)))))))
(define DataC-45FilePathC-45Body-preDot (lambda (arg-0) (let ((eff-0 arg-0)) (cons #\. eff-0))))
(define DataC-45FilePathC-45Body-isSingleChar (lambda (arg-0) (let ((sc0 (DataC-45FilePathC-45Body-isEndChar arg-0))) (cond ((equal? sc0 1) (PreludeC-45EqOrd-u--C-47C-61_Eq_Char arg-0 #\.)) (else 0)))))
(define DataC-45FilePathC-45Body-isEndChar (lambda (arg-0) (let ((sc0 (DataC-45FilePathC-45Body-isBodyChar arg-0))) (cond ((equal? sc0 1) (PreludeC-45EqOrd-u--C-47C-61_Eq_Char arg-0 #\ )) (else 0)))))
(define DataC-45FilePathC-45Body-isBodyInner (lambda (arg-0) (if (null? arg-0) 0 (let ((e-2 (car arg-0))) (let ((e-3 (cdr arg-0))) (if (null? e-3) (DataC-45FilePathC-45Body-isEndChar e-2) (let ((sc2 (DataC-45FilePathC-45Body-isBodyChar e-2))) (cond ((equal? sc2 1) (DataC-45FilePathC-45Body-isBodyInner e-3)) (else 0)))))))))
(define DataC-45FilePathC-45Body-isBodyChars (lambda (arg-0) (if (null? arg-0) 0 (let ((e-2 (car arg-0))) (let ((e-3 (cdr arg-0))) (if (null? e-3) (DataC-45FilePathC-45Body-isSingleChar e-2) (let ((sc2 (DataC-45FilePathC-45Body-isEndChar e-2))) (cond ((equal? sc2 1) (DataC-45FilePathC-45Body-isBodyInner e-3)) (else 0)))))))))
(define DataC-45FilePathC-45Body-isBodyChar (lambda (arg-0) (cond ((equal? arg-0 #\/) 0)(else (let ((sc0 (PreludeC-45Types-isControl arg-0))) (cond ((equal? sc0 1) 0) (else 1)))))))
(define DataC-45FilePathC-45Body-fromChars (lambda (arg-0) (let ((sc0 (DataC-45FilePathC-45Body-check (DataC-45FilePathC-45Body-isBodyChars arg-0)))) (if (null? sc0) '() (box arg-0)))))
(define DataC-45FilePathC-45Body-check (lambda (arg-0) (cond ((equal? arg-0 0) '()) (else (box (vector 0 ))))))
(define DataC-45FilePathC-45Body-C-60C-46C-62 (lambda (arg-0 arg-1) (let ((eff-0 arg-0)) (let ((eff-1 (DataC-45FilePathC-45Body-preDot arg-1))) (PreludeC-45TypesC-45List-tailRecAppend eff-0 eff-1)))))
(define PackC-45CoreC-45Ipkg-n--7085-5004-u--strField (lambda (arg-0 arg-1 arg-2) (vector 10 0 1 (LibrariesC-45TextC-45Parser-location) (lambda (u--start) (vector 11 1 ((csegen-484) (ParserC-45RuleC-45Package-exactProperty arg-2)) (lambda () (vector 11 1 (ParserC-45RuleC-45Package-equals) (lambda () (vector 9 0 (ParserC-45RuleC-45Package-stringLit) (lambda () (lambda (u--str) (vector 10 0 0 (LibrariesC-45TextC-45Parser-location) (lambda (u--end) (vector 0 ((arg-1 (vector 0 (vector 1 arg-0) u--start u--end)) u--str)))))))))))))))
(define PackC-45CoreC-45Ipkg-n--7085-5001-u--mkBound (lambda (arg-0 arg-1 arg-2) (if (null? arg-1) (vector 0 arg-2) (let ((e-1 (car arg-1))) (let ((e-2 (cdr arg-1))) (case (vector-ref e-1 0) ((0) (let ((e-5 (vector-ref e-1 2))) (let ((e-6 (vector-ref e-1 3))) (PreludeC-45Types-maybe (lambda () (PackC-45CoreC-45Ipkg-n--7085-5001-u--mkBound arg-0 e-2 (let ((e-0 (vector-ref arg-2 0))) (let ((e-8 (vector-ref arg-2 1))) (vector e-0 e-8 (box e-5) e-6))))) (lambda () (lambda (_-5298) (vector 4 '() 0 "Dependency already has an upper bound"))) (let ((e-7 (vector-ref arg-2 2))) e-7))))) (else (let ((e-8 (vector-ref e-1 2))) (let ((e-9 (vector-ref e-1 3))) (PreludeC-45Types-maybe (lambda () (PackC-45CoreC-45Ipkg-n--7085-5001-u--mkBound arg-0 e-2 (let ((e-4 (vector-ref arg-2 2))) (let ((e-3 (vector-ref arg-2 3))) (vector (box e-8) e-9 e-4 e-3))))) (lambda () (lambda (_-5339) (vector 4 '() 0 "Dependency already has a lower bound"))) (let ((e-0 (vector-ref arg-2 0))) e-0)))))))))))
(define PackC-45CoreC-45Ipkg-n--7085-5002-u--langversions (lambda (arg-0) (vector 10 0 0 (LibrariesC-45TextC-45Parser-sepBy 1 (ParserC-45RuleC-45Package-andop) (PackC-45CoreC-45Ipkg-n--7085-5000-u--bound arg-0)) (lambda (u--bs) (PackC-45CoreC-45Ipkg-n--7085-5001-u--mkBound arg-0 (PreludeC-45Interfaces-concat (csegen-488) (csegen-98) u--bs) (IdrisC-45PackageC-45Types-anyBounds))))))
(define PackC-45CoreC-45Ipkg-n--9911-7819-u--insertSrc (lambda (arg-1 arg-2 arg-3) (if (null? arg-3) '() (let ((e-2 (car arg-3))) (let ((e-3 (cdr arg-3))) (cond ((equal? e-2 #\<) (if (null? e-3) (cons e-2 (PackC-45CoreC-45Ipkg-n--9911-7819-u--insertSrc arg-1 arg-2 e-3)) (let ((e-5 (car e-3))) (let ((e-6 (cdr e-3))) (cond ((equal? e-5 #\h) (if (null? e-6) (cons e-2 (PackC-45CoreC-45Ipkg-n--9911-7819-u--insertSrc arg-1 arg-2 e-3)) (let ((e-8 (car e-6))) (let ((e-9 (cdr e-6))) (cond ((equal? e-8 #\1) (if (null? e-9) (cons e-2 (PackC-45CoreC-45Ipkg-n--9911-7819-u--insertSrc arg-1 arg-2 e-3)) (let ((e-11 (car e-9))) (let ((e-12 (cdr e-9))) (cond ((equal? e-11 #\>) (PreludeC-45TypesC-45List-tailRecAppend (PreludeC-45Types-fastUnpack "<h1>") (PackC-45CoreC-45Ipkg-n--9911-7818-u--beforeH1 arg-1 arg-2 e-12)))(else (cons e-2 (PackC-45CoreC-45Ipkg-n--9911-7819-u--insertSrc arg-1 arg-2 e-3))))))))(else (cons e-2 (PackC-45CoreC-45Ipkg-n--9911-7819-u--insertSrc arg-1 arg-2 e-3))))))))(else (cons e-2 (PackC-45CoreC-45Ipkg-n--9911-7819-u--insertSrc arg-1 arg-2 e-3))))))))(else (cons e-2 (PackC-45CoreC-45Ipkg-n--9911-7819-u--insertSrc arg-1 arg-2 e-3)))))))))
(define PackC-45CoreC-45Ipkg-n--7085-5003-u--depends (lambda (arg-0) (vector 9 0 (ParserC-45RuleC-45Package-packageName) (lambda () (lambda (u--name) (vector 10 0 0 (LibrariesC-45TextC-45Parser-sepBy 1 (ParserC-45RuleC-45Package-andop) (PackC-45CoreC-45Ipkg-n--7085-5000-u--bound arg-0)) (lambda (u--bs) (vector 10 0 0 (PackC-45CoreC-45Ipkg-n--7085-5001-u--mkBound arg-0 (PreludeC-45Interfaces-concat (csegen-488) (csegen-98) u--bs) (IdrisC-45PackageC-45Types-anyBounds)) (lambda (bind-0) (vector 0 (cons u--name bind-0)))))))))))
(define PackC-45CoreC-45Ipkg-n--7085-5000-u--bound (lambda (arg-0) (vector 13 1 1 (vector 11 1 (ParserC-45RuleC-45Package-lte) (lambda () (vector 9 0 (csegen-489) (lambda () (lambda (u--vs) (vector 0 (cons (vector 0 arg-0 (PreludeC-45Interfaces-C-60C-36C-62 (csegen-492) (lambda (eta-0) (PreludeC-45Types-prim__integerToNat eta-0)) u--vs) 1) '()))))))) (lambda () (vector 13 1 1 (vector 11 1 (ParserC-45RuleC-45Package-gte) (lambda () (vector 9 0 (csegen-489) (lambda () (lambda (u--vs) (vector 0 (cons (vector 1 arg-0 (PreludeC-45Interfaces-C-60C-36C-62 (csegen-492) (lambda (eta-0) (PreludeC-45Types-prim__integerToNat eta-0)) u--vs) 1) '()))))))) (lambda () (vector 13 1 1 (vector 11 1 (ParserC-45RuleC-45Package-lt) (lambda () (vector 9 0 (csegen-489) (lambda () (lambda (u--vs) (vector 0 (cons (vector 0 arg-0 (PreludeC-45Interfaces-C-60C-36C-62 (csegen-492) (lambda (eta-0) (PreludeC-45Types-prim__integerToNat eta-0)) u--vs) 0) '()))))))) (lambda () (vector 13 1 1 (vector 11 1 (ParserC-45RuleC-45Package-gt) (lambda () (vector 9 0 (csegen-489) (lambda () (lambda (u--vs) (vector 0 (cons (vector 1 arg-0 (PreludeC-45Interfaces-C-60C-36C-62 (csegen-492) (lambda (eta-0) (PreludeC-45Types-prim__integerToNat eta-0)) u--vs) 0) '()))))))) (lambda () (vector 11 1 (ParserC-45RuleC-45Package-eqop) (lambda () (vector 9 0 (csegen-489) (lambda () (lambda (u--vs) (vector 0 (cons (vector 0 arg-0 (PreludeC-45Interfaces-C-60C-36C-62 (csegen-492) (lambda (eta-0) (PreludeC-45Types-prim__integerToNat eta-0)) u--vs) 1) (cons (vector 1 arg-0 (PreludeC-45Interfaces-C-60C-36C-62 (csegen-492) (lambda (eta-0) (PreludeC-45Types-prim__integerToNat eta-0)) u--vs) 1) '()))))))))))))))))))
(define PackC-45CoreC-45Ipkg-n--9911-7818-u--beforeH1 (lambda (arg-1 arg-2 arg-3) (if (null? arg-3) '() (let ((e-2 (car arg-3))) (let ((e-3 (cdr arg-3))) (cond ((equal? e-2 #\<) (if (null? e-3) (cons e-2 (PackC-45CoreC-45Ipkg-n--9911-7818-u--beforeH1 arg-1 arg-2 e-3)) (let ((e-5 (car e-3))) (let ((e-6 (cdr e-3))) (cond ((equal? e-5 #\/) (if (null? e-6) (cons e-2 (PackC-45CoreC-45Ipkg-n--9911-7818-u--beforeH1 arg-1 arg-2 e-3)) (let ((e-8 (car e-6))) (let ((e-9 (cdr e-6))) (cond ((equal? e-8 #\h) (if (null? e-9) (cons e-2 (PackC-45CoreC-45Ipkg-n--9911-7818-u--beforeH1 arg-1 arg-2 e-3)) (let ((e-11 (car e-9))) (let ((e-12 (cdr e-9))) (cond ((equal? e-11 #\1) (if (null? e-12) (cons e-2 (PackC-45CoreC-45Ipkg-n--9911-7818-u--beforeH1 arg-1 arg-2 e-3)) (let ((e-14 (car e-12))) (let ((e-15 (cdr e-12))) (cond ((equal? e-14 #\>) (PreludeC-45TypesC-45List-tailRecAppend (PreludeC-45Types-fastUnpack "</h1><span style=\"float:right\">") (PreludeC-45TypesC-45List-tailRecAppend (PreludeC-45Types-fastUnpack (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "(<a href=\"" (cons (let ((eff-0 (let ((e-4 (vector-ref arg-2 3))) (let ((e-10 (cdr e-4))) e-10)))) (PreludeC-45Types-fastPack eff-0)) (cons "\">source</a>)</span>" '()))))) e-15)))(else (cons e-2 (PackC-45CoreC-45Ipkg-n--9911-7818-u--beforeH1 arg-1 arg-2 e-3))))))))(else (cons e-2 (PackC-45CoreC-45Ipkg-n--9911-7818-u--beforeH1 arg-1 arg-2 e-3))))))))(else (cons e-2 (PackC-45CoreC-45Ipkg-n--9911-7818-u--beforeH1 arg-1 arg-2 e-3))))))))(else (cons e-2 (PackC-45CoreC-45Ipkg-n--9911-7818-u--beforeH1 arg-1 arg-2 e-3))))))))(else (cons e-2 (PackC-45CoreC-45Ipkg-n--9911-7818-u--beforeH1 arg-1 arg-2 e-3)))))))))
(define PackC-45CoreC-45Ipkg-sourcePath (lambda (arg-1) (PreludeC-45Types-maybe (lambda () (let ((e-3 (vector-ref arg-1 2))) (let ((e-5 (car e-3))) e-5))) (lambda () (lambda (eta-0) (PackC-45CoreC-45Types-toAbsPath (let ((e-3 (vector-ref arg-1 2))) (let ((e-5 (car e-3))) e-5)) (DataC-45FilePath-u--fromString_FromString_FilePath eta-0)))) (let ((e-1 (vector-ref arg-1 0))) (let ((e-16 (vector-ref e-1 16))) e-16)))))
(define PackC-45CoreC-45Ipkg-sourceForDoc (lambda (arg-1 arg-2) (PreludeC-45Types-u--C-62C-62C-61_Monad_Maybe ((csegen-493) (DataC-45FilePathC-45File-stemAndExt arg-2)) (lambda (_-0) (let ((eff-0 _-0)) (PreludeC-45Types-u--C-62C-62C-61_Monad_Maybe (DataC-45FilePathC-45FileC-45RelFile-parse (PreludeC-45Types-fastPack (((csegen-226) (lambda (eta-0) (PackC-45CoreC-45Ipkg-replaceDot eta-0))) eff-0))) (lambda (u--rf) (box (vector arg-2 (let ((e-1 (car u--rf))) (let ((e-2 (cdr u--rf))) (cons (DataC-45FilePath-C-60C-47C-62 (PackC-45CoreC-45Ipkg-sourcePath arg-1) e-1) (DataC-45FilePathC-45Body-C-60C-46C-62 e-2 (cons #\i (cons #\d (cons #\r '()))))))) (let ((e-1 (car u--rf))) (let ((e-2 (cdr u--rf))) (cons (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (PackC-45CoreC-45Ipkg-buildPath arg-1) (vector 1 (cons '() (cons #\t (cons #\t (cons #\c '())))))) e-1) (DataC-45FilePathC-45Body-C-60C-46C-62 e-2 (cons #\t (cons #\t (cons #\m '()))))))) (cons (let ((e-1 (car arg-2))) e-1) (DataC-45FilePathC-45Body-C-60C-46C-62 eff-0 (cons #\s (cons #\r (cons #\c (cons #\. (csegen-419))))))))))))))))
(define PackC-45CoreC-45Ipkg-replaceDot (lambda (arg-0) (cond ((equal? arg-0 #\.) #\/)(else arg-0))))
(define PackC-45CoreC-45Ipkg-pkgDesc (lambda (arg-0) (vector 11 1 ((csegen-484) (ParserC-45RuleC-45Package-exactProperty "package")) (lambda () (vector 9 0 (ParserC-45RuleC-45Package-packageName) (lambda () (lambda (u--name) (vector 10 0 0 (LibrariesC-45TextC-45Parser-many (PackC-45CoreC-45Ipkg-field arg-0)) (lambda (u--fields) (vector 0 (cons u--name u--fields)))))))))))
(define PackC-45CoreC-45Ipkg-parseIpkgFile (lambda (arg-1 arg-2 arg-3) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-read arg-1 arg-2) (lambda (u--str) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (ControlC-45MonadC-45ErrorC-45Interface-liftEither (vector (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-2204) (ControlC-45MonadC-45ErrorC-45Interface-u--throwError_MonadError_C-36e_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-2204))) (lambda (u--a) (lambda (arg-2210) (lambda (arg-2213) (ControlC-45MonadC-45ErrorC-45Either-catchE (let ((e-1 (car arg-1))) e-1) arg-2210 arg-2213))))) (PackC-45CoreC-45Ipkg-parseIpkg arg-2 u--str)) (lambda (u--desc) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (vector u--desc u--str arg-3))))))))
(define PackC-45CoreC-45Ipkg-parseIpkg (lambda (arg-0 arg-1) (let ((u--err (vector 18 arg-0))) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (let ((sc0 (ParserC-45LexerC-45Package-lex arg-1))) (case (vector-ref sc0 0) ((0) (vector 0 u--err)) (else (let ((e-5 (vector-ref sc0 1))) (vector 1 e-5))))) (lambda (u--toks) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (let ((sc0 (LibrariesC-45TextC-45ParserC-45Core-parse 1 (PackC-45CoreC-45Ipkg-pkgDesc (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons ((csegen-234) (let ((e-1 (car arg-0))) (let ((e-2 (cdr arg-0))) (DataC-45FilePath-C-60C-47C-62 e-1 (vector 1 (cons '() e-2)))))) '()))) u--toks))) (case (vector-ref sc0 0) ((0) (vector 0 u--err)) (else (let ((e-5 (vector-ref sc0 1))) (vector 1 e-5))))) (lambda (_-0) (let ((e-3 (cdr _-0))) (let ((e-6 (car e-3))) (let ((e-10 (car e-6))) (let ((e-11 (cdr e-6))) (vector 1 (PackC-45CoreC-45Ipkg-addFields e-10 e-11)))))))))))))
(define PackC-45CoreC-45Ipkg-insertSources (lambda (arg-1 arg-2) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-read arg-1 (let ((e-0 (vector-ref arg-2 0))) e-0)) (lambda (u--str) (PackC-45CoreC-45IO-write arg-1 (let ((e-0 (vector-ref arg-2 0))) e-0) (DataC-45String-fastUnlines (((csegen-226) (lambda (eta-0) (PreludeC-45Types-fastPack (PackC-45CoreC-45Ipkg-n--9911-7819-u--insertSrc arg-1 arg-2 (PreludeC-45Types-fastUnpack eta-0))))) (DataC-45String-lines u--str))))))))
(define PackC-45CoreC-45Ipkg-field (lambda (arg-0) (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--7085-5004-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 3 eta-0 eta-1))) "authors") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--7085-5004-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 4 eta-0 eta-1))) "maintainers") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--7085-5004-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 5 eta-0 eta-1))) "license") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--7085-5004-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 6 eta-0 eta-1))) "brief") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--7085-5004-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 7 eta-0 eta-1))) "readme") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--7085-5004-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 8 eta-0 eta-1))) "homepage") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--7085-5004-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 9 eta-0 eta-1))) "sourceloc") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--7085-5004-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 10 eta-0 eta-1))) "bugtracker") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--7085-5004-u--strField arg-0 (csegen-517) "options") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--7085-5004-u--strField arg-0 (csegen-517) "opts") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--7085-5004-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 16 eta-0 eta-1))) "sourcedir") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--7085-5004-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 17 eta-0 eta-1))) "builddir") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--7085-5004-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 18 eta-0 eta-1))) "outputdir") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--7085-5004-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 19 eta-0 eta-1))) "prebuild") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--7085-5004-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 20 eta-0 eta-1))) "postbuild") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--7085-5004-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 21 eta-0 eta-1))) "preinstall") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--7085-5004-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 22 eta-0 eta-1))) "postinstall") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--7085-5004-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 23 eta-0 eta-1))) "preclean") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--7085-5004-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 24 eta-0 eta-1))) "postclean") (lambda () (vector 13 1 1 (vector 10 0 1 (LibrariesC-45TextC-45Parser-location) (lambda (u--start) (vector 11 1 (csegen-527) (lambda () (vector 11 1 (ParserC-45RuleC-45Package-equals) (lambda () (vector 9 0 (csegen-489) (lambda () (lambda (u--vs) (vector 10 0 0 (LibrariesC-45TextC-45Parser-location) (lambda (u--end) (vector 0 (vector 0 (vector 0 (vector 1 arg-0) u--start u--end) (PreludeC-45Interfaces-C-60C-36C-62 (csegen-492) (lambda (eta-0) (PreludeC-45Types-prim__integerToNat eta-0)) u--vs)))))))))))))) (lambda () (vector 13 1 1 (vector 10 0 1 (LibrariesC-45TextC-45Parser-location) (lambda (u--start) (vector 11 0 ((csegen-484) (ParserC-45RuleC-45Package-exactProperty "langversion")) (lambda () (vector 10 0 0 (PackC-45CoreC-45Ipkg-n--7085-5002-u--langversions arg-0) (lambda (u--lvs) (vector 10 0 0 (LibrariesC-45TextC-45Parser-location) (lambda (u--end) (vector 0 (vector 1 (vector 0 (vector 1 arg-0) u--start u--end) u--lvs)))))))))) (lambda () (vector 13 1 1 (vector 10 0 1 (LibrariesC-45TextC-45Parser-location) (lambda (u--start) (vector 11 1 (csegen-527) (lambda () (vector 11 1 (ParserC-45RuleC-45Package-equals) (lambda () (vector 9 0 (ParserC-45RuleC-45Package-stringLit) (lambda () (lambda (u--v) (vector 10 0 0 (LibrariesC-45TextC-45Parser-location) (lambda (u--end) (vector 0 (vector 2 (vector 0 (vector 1 arg-0) u--start u--end) u--v))))))))))))) (lambda () (vector 13 1 1 (vector 11 1 ((csegen-484) (ParserC-45RuleC-45Package-exactProperty "depends")) (lambda () (vector 11 1 (ParserC-45RuleC-45Package-equals) (lambda () (vector 9 0 (ParserC-45RuleC-45Package-sep (PackC-45CoreC-45Ipkg-n--7085-5003-u--depends arg-0)) (lambda () (lambda (u--ds) (vector 0 (vector 11 u--ds))))))))) (lambda () (vector 13 1 1 (vector 11 1 ((csegen-484) (ParserC-45RuleC-45Package-exactProperty "modules")) (lambda () (vector 11 1 (ParserC-45RuleC-45Package-equals) (lambda () (vector 9 0 (ParserC-45RuleC-45Package-sep (vector 10 0 1 (LibrariesC-45TextC-45Parser-location) (lambda (u--start) (vector 9 0 (ParserC-45RuleC-45Package-moduleIdent) (lambda () (lambda (u--m) (vector 10 0 0 (LibrariesC-45TextC-45Parser-location) (lambda (u--end) (vector 0 (cons (vector 0 (vector 1 arg-0) u--start u--end) u--m)))))))))) (lambda () (lambda (u--ms) (vector 0 (vector 12 u--ms))))))))) (lambda () (vector 13 1 1 (vector 11 1 ((csegen-484) (ParserC-45RuleC-45Package-exactProperty "main")) (lambda () (vector 11 1 (ParserC-45RuleC-45Package-equals) (lambda () (vector 10 0 1 (LibrariesC-45TextC-45Parser-location) (lambda (u--start) (vector 9 0 (ParserC-45RuleC-45Package-moduleIdent) (lambda () (lambda (u--m) (vector 10 0 0 (LibrariesC-45TextC-45Parser-location) (lambda (u--end) (vector 0 (vector 13 (vector 0 (vector 1 arg-0) u--start u--end) u--m))))))))))))) (lambda () (vector 11 1 ((csegen-484) (ParserC-45RuleC-45Package-exactProperty "executable")) (lambda () (vector 11 1 (ParserC-45RuleC-45Package-equals) (lambda () (vector 9 0 (vector 13 1 1 (ParserC-45RuleC-45Package-stringLit) (lambda () (ParserC-45RuleC-45Package-packageName))) (lambda () (lambda (u--e) (vector 0 (vector 14 u--e)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(define PackC-45CoreC-45Ipkg-exec (lambda (arg-1) (PreludeC-45Types-u--C-62C-62C-61_Monad_Maybe (let ((e-1 (vector-ref arg-1 0))) (let ((e-14 (vector-ref e-1 14))) e-14)) (csegen-465))))
(define PackC-45CoreC-45Ipkg-buildPath (lambda (arg-1) (PreludeC-45Types-maybe (lambda () (DataC-45FilePath-C-60C-47C-62 (let ((e-3 (vector-ref arg-1 2))) (let ((e-5 (car e-3))) e-5)) (vector 1 (cons '() (cons #\b (cons #\u (cons #\i (cons #\l (cons #\d '()))))))))) (lambda () (lambda (eta-0) (PackC-45CoreC-45Types-toAbsPath (let ((e-3 (vector-ref arg-1 2))) (let ((e-5 (car e-3))) e-5)) (DataC-45FilePath-u--fromString_FromString_FilePath eta-0)))) (let ((e-1 (vector-ref arg-1 0))) (let ((e-17 (vector-ref e-1 17))) e-17)))))
(define PackC-45CoreC-45Ipkg-addFields (lambda (ext-0 ext-1) (PreludeC-45Types-u--foldl_Foldable_List (lambda (eta-0) (lambda (eta-1) (PackC-45CoreC-45Ipkg-addField eta-0 eta-1))) (IdrisC-45PackageC-45Types-initPkgDesc ext-0) ext-1)))
(define PackC-45CoreC-45Ipkg-addField (lambda (arg-0 arg-1) (case (vector-ref arg-1 0) ((0) (let ((e-1 (vector-ref arg-1 2))) (let ((e-26 (vector-ref arg-0 0))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-26 (box e-1) e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 e-13 e-14 e-15 e-16 e-17 e-18 e-19 e-20 e-21 e-22 e-23 e-24))))))))))))))))))))))))))) ((1) (let ((e-3 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-25 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 (box e-3) e-25 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 e-13 e-14 e-15 e-16 e-17 e-18 e-19 e-20 e-21 e-22 e-23 e-24))))))))))))))))))))))))))) ((2) arg-0) ((3) (let ((e-7 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-26 (vector-ref arg-0 6))) (let ((e-25 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 (box e-7) e-4 e-5 e-26 e-25 e-8 e-9 e-10 e-11 e-12 e-13 e-14 e-15 e-16 e-17 e-18 e-19 e-20 e-21 e-22 e-23 e-24))))))))))))))))))))))))))) ((4) (let ((e-9 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-26 (vector-ref arg-0 8))) (let ((e-25 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 (box e-9) e-5 e-6 e-7 e-26 e-25 e-10 e-11 e-12 e-13 e-14 e-15 e-16 e-17 e-18 e-19 e-20 e-21 e-22 e-23 e-24))))))))))))))))))))))))))) ((5) (let ((e-11 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-26 (vector-ref arg-0 10))) (let ((e-25 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 (box e-11) e-6 e-7 e-8 e-9 e-26 e-25 e-12 e-13 e-14 e-15 e-16 e-17 e-18 e-19 e-20 e-21 e-22 e-23 e-24))))))))))))))))))))))))))) ((6) (let ((e-13 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-26 (vector-ref arg-0 12))) (let ((e-25 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 (box e-13) e-7 e-8 e-9 e-10 e-11 e-26 e-25 e-14 e-15 e-16 e-17 e-18 e-19 e-20 e-21 e-22 e-23 e-24))))))))))))))))))))))))))) ((7) (let ((e-15 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-26 (vector-ref arg-0 14))) (let ((e-25 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 (box e-15) e-8 e-9 e-10 e-11 e-12 e-13 e-26 e-25 e-16 e-17 e-18 e-19 e-20 e-21 e-22 e-23 e-24))))))))))))))))))))))))))) ((8) (let ((e-17 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-26 (vector-ref arg-0 16))) (let ((e-25 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 (box e-17) e-9 e-10 e-11 e-12 e-13 e-14 e-15 e-26 e-25 e-18 e-19 e-20 e-21 e-22 e-23 e-24))))))))))))))))))))))))))) ((9) (let ((e-19 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-26 (vector-ref arg-0 18))) (let ((e-25 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 (box e-19) e-10 e-11 e-12 e-13 e-14 e-15 e-16 e-17 e-26 e-25 e-20 e-21 e-22 e-23 e-24))))))))))))))))))))))))))) ((10) (let ((e-21 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-26 (vector-ref arg-0 20))) (let ((e-25 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 (box e-21) e-11 e-12 e-13 e-14 e-15 e-16 e-17 e-18 e-19 e-26 e-25 e-22 e-23 e-24))))))))))))))))))))))))))) ((11) (let ((e-22 (vector-ref arg-1 1))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-25 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-22 e-12 e-13 e-14 e-15 e-16 e-17 e-18 e-19 e-20 e-21 e-25 e-23 e-24))))))))))))))))))))))))))) ((12) (let ((e-23 (vector-ref arg-1 1))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-25 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 (((csegen-226) (lambda (lamc-0) (let ((e-26 (cdr lamc-0))) (cons e-26 "")))) e-23) e-13 e-14 e-15 e-16 e-17 e-18 e-19 e-20 e-21 e-22 e-25 e-24))))))))))))))))))))))))))) ((13) (let ((e-25 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-26 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 (box (cons e-25 "")) e-14 e-15 e-16 e-17 e-18 e-19 e-20 e-21 e-22 e-23 e-26))))))))))))))))))))))))))) ((14) (let ((e-26 (vector-ref arg-1 1))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 e-13 (box e-26) e-15 e-16 e-17 e-18 e-19 e-20 e-21 e-22 e-23 e-24))))))))))))))))))))))))))) ((15) (let ((e-27 (vector-ref arg-1 1))) (let ((e-28 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 e-13 e-14 (box (cons e-27 e-28)) e-16 e-17 e-18 e-19 e-20 e-21 e-22 e-23 e-24)))))))))))))))))))))))))))) ((16) (let ((e-30 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 e-13 e-14 e-15 (box e-30) e-17 e-18 e-19 e-20 e-21 e-22 e-23 e-24))))))))))))))))))))))))))) ((17) (let ((e-32 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 e-13 e-14 e-15 e-16 (box e-32) e-18 e-19 e-20 e-21 e-22 e-23 e-24))))))))))))))))))))))))))) ((18) (let ((e-34 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 e-13 e-14 e-15 e-16 e-17 (box e-34) e-19 e-20 e-21 e-22 e-23 e-24))))))))))))))))))))))))))) ((19) (let ((e-35 (vector-ref arg-1 1))) (let ((e-36 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 e-13 e-14 e-15 e-16 e-17 e-18 (box (cons e-35 e-36)) e-20 e-21 e-22 e-23 e-24)))))))))))))))))))))))))))) ((20) (let ((e-37 (vector-ref arg-1 1))) (let ((e-38 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 e-13 e-14 e-15 e-16 e-17 e-18 e-19 (box (cons e-37 e-38)) e-21 e-22 e-23 e-24)))))))))))))))))))))))))))) ((21) (let ((e-39 (vector-ref arg-1 1))) (let ((e-40 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 e-13 e-14 e-15 e-16 e-17 e-18 e-19 e-20 (box (cons e-39 e-40)) e-22 e-23 e-24)))))))))))))))))))))))))))) ((22) (let ((e-41 (vector-ref arg-1 1))) (let ((e-42 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 e-13 e-14 e-15 e-16 e-17 e-18 e-19 e-20 e-21 (box (cons e-41 e-42)) e-23 e-24)))))))))))))))))))))))))))) ((23) (let ((e-43 (vector-ref arg-1 1))) (let ((e-44 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 e-13 e-14 e-15 e-16 e-17 e-18 e-19 e-20 e-21 e-22 (box (cons e-43 e-44)) e-24)))))))))))))))))))))))))))) (else (let ((e-45 (vector-ref arg-1 1))) (let ((e-46 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 e-13 e-14 e-15 e-16 e-17 e-18 e-19 e-20 e-21 e-22 e-23 (box (cons e-45 e-46)))))))))))))))))))))))))))))))))
(define DataC-45IORef-newIORef (lambda (arg-2 arg-3) (let ((e-1 (car arg-2))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-2))) ((e-6 'erased) (lambda (eta-0) (box arg-3))))) (lambda (u--m) (let ((e-7 (car arg-2))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) u--m))))))))))
(define DataC-45IORef-modifyIORef (lambda (arg-2 arg-3 arg-4) (let ((e-1 (car arg-2))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((eff-0 arg-3)) (let ((e-6 (cdr arg-2))) ((e-6 'erased) (lambda (eta-0) (unbox eff-0)))))) (lambda (u--val) (let ((eff-0 arg-3)) (let ((e-6 (cdr arg-2))) ((e-6 'erased) (lambda (eta-0) (set-box! eff-0 (arg-4 u--val))))))))))))
(define LibrariesC-45UtilsC-45String-stripSurrounds (lambda (arg-0 arg-1 arg-2) (PreludeC-45Types-substr arg-0 (PreludeC-45Types-prim__integerToNat (- (PreludeC-45TypesC-45String-length arg-2) (+ arg-0 arg-1))) arg-2)))
(define LibrariesC-45UtilsC-45String-stripQuotes (lambda (ext-0) (LibrariesC-45UtilsC-45String-stripSurrounds 1 1 ext-0)))
(define ParserC-45RuleC-45Package-stringLit(blodwen-lazy (lambda () (vector 1 "Expected string" (lambda (lcase-0) (case (vector-ref lcase-0 0) ((13) (let ((e-0 (vector-ref lcase-0 1))) (box e-0)))(else '())))))))
(define ParserC-45RuleC-45Package-sepC-39(blodwen-lazy (lambda () (vector 1 "Expected separator" (lambda (lcase-0) (case (vector-ref lcase-0 0) ((4) (box (vector 0 )))(else '())))))))
(define ParserC-45RuleC-45Package-sep (lambda (arg-1) (PreludeC-45Interfaces-C-60C-36C-62 (csegen-451) (lambda (eta-0) (DataC-45List1-forget eta-0)) (LibrariesC-45TextC-45Parser-sepBy1 1 (ParserC-45RuleC-45Package-sepC-39) arg-1))))
(define ParserC-45RuleC-45Package-packageName(blodwen-lazy (lambda () (vector 1 "Expected package name" (lambda (lcase-0) (case (vector-ref lcase-0 0) ((3) (let ((e-0 (vector-ref lcase-0 1))) (let ((e-1 (vector-ref lcase-0 2))) (if (null? e-0) (let ((sc2 (let ((sc3 (PreludeC-45Types-fastUnpack e-1))) (if (null? sc3) 0 (let ((e-2 (car sc3))) (let ((e-3 (cdr sc3))) (let ((sc4 (ParserC-45LexerC-45Common-isIdentStart 0 e-2))) (cond ((equal? sc4 1) (PreludeC-45Interfaces-all (csegen-98) (csegen-550) e-3)) (else 0))))))))) (cond ((equal? sc2 1) (box e-1)) (else '()))) '()))))(else '())))))))
(define ParserC-45RuleC-45Package-moduleIdent(blodwen-lazy (lambda () (vector 1 "Expected module identifier" (lambda (lcase-0) (case (vector-ref lcase-0 0) ((3) (let ((e-0 (vector-ref lcase-0 1))) (let ((e-1 (vector-ref lcase-0 2))) (box (CoreC-45NameC-45Namespace-nsAsModuleIdent (CoreC-45NameC-45Namespace-mkNestedNamespace e-0 e-1))))))(else '())))))))
(define ParserC-45RuleC-45Package-lte(blodwen-lazy (lambda () (vector 1 "Expected <=" (lambda (lcase-0) (case (vector-ref lcase-0 0) ((6) (box (vector 0 )))(else '())))))))
(define ParserC-45RuleC-45Package-lt(blodwen-lazy (lambda () (vector 1 "Expected <=" (lambda (lcase-0) (case (vector-ref lcase-0 0) ((8) (box (vector 0 )))(else '())))))))
(define ParserC-45RuleC-45Package-integerLit(blodwen-lazy (lambda () (vector 1 "Expected integer" (lambda (lcase-0) (case (vector-ref lcase-0 0) ((14) (let ((e-0 (vector-ref lcase-0 1))) (box e-0)))(else '())))))))
(define ParserC-45RuleC-45Package-gte(blodwen-lazy (lambda () (vector 1 "Expected >=" (lambda (lcase-0) (case (vector-ref lcase-0 0) ((7) (box (vector 0 )))(else '())))))))
(define ParserC-45RuleC-45Package-gt(blodwen-lazy (lambda () (vector 1 "Expected >=" (lambda (lcase-0) (case (vector-ref lcase-0 0) ((9) (box (vector 0 )))(else '())))))))
(define ParserC-45RuleC-45Package-exactProperty (lambda (arg-0) (vector 1 (string-append "Expected property " arg-0) (lambda (lcase-0) (case (vector-ref lcase-0 0) ((3) (let ((e-0 (vector-ref lcase-0 1))) (let ((e-1 (vector-ref lcase-0 2))) (if (null? e-0) (let ((sc2 (PreludeC-45EqOrd-u--C-61C-61_Eq_String arg-0 e-1))) (cond ((equal? sc2 1) (box arg-0)) (else '()))) '()))))(else '()))))))
(define ParserC-45RuleC-45Package-equals(blodwen-lazy (lambda () (vector 1 "Expected equals" (lambda (lcase-0) (case (vector-ref lcase-0 0) ((2) (box (vector 0 )))(else '())))))))
(define ParserC-45RuleC-45Package-eqop(blodwen-lazy (lambda () (vector 1 "Expected ==" (lambda (lcase-0) (case (vector-ref lcase-0 0) ((10) (box (vector 0 )))(else '())))))))
(define ParserC-45RuleC-45Package-dotC-39(blodwen-lazy (lambda () (vector 1 "Expected dot" (lambda (lcase-0) (case (vector-ref lcase-0 0) ((5) (box (vector 0 )))(else '())))))))
(define ParserC-45RuleC-45Package-andop(blodwen-lazy (lambda () (vector 1 "Expected &&" (lambda (lcase-0) (case (vector-ref lcase-0 0) ((11) (box (vector 0 )))(else '())))))))
(define ParserC-45LexerC-45Package-case--lex-8842 (lambda (arg-0 arg-1) (let ((e-2 (car arg-1))) (let ((e-3 (cdr arg-1))) (if (null? e-3) (vector 0 e-3) (let ((e-6 (car e-3))) (let ((e-7 (cdr e-3))) (if (null? e-7) (vector 0 e-3) (let ((e-10 (car e-7))) (let ((e-11 (cdr e-7))) (cond ((equal? e-11 "") (vector 1 (PreludeC-45TypesC-45List-tailRecAppend (PreludeC-45TypesC-45List-filter (lambda (eta-0) (ParserC-45LexerC-45Package-n--5117-8823-u--useful arg-0 (let ((e-1 (vector-ref eta-0 0))) e-1))) e-2) (cons (vector (vector 1 ) 0 (vector e-6 e-10 e-6 e-10)) '()))))(else (vector 0 e-3)))))))))))))
(define ParserC-45LexerC-45Package-n--5117-8823-u--useful (lambda (arg-0 arg-1) (case (vector-ref arg-1 0) ((0) 0) ((12) 0)(else 1))))
(define ParserC-45LexerC-45Package-separator(blodwen-lazy (lambda () (LibrariesC-45TextC-45Lexer-is #\,))))
(define ParserC-45LexerC-45Package-rawTokens(blodwen-lazy (lambda () (cons (cons (ParserC-45LexerC-45Common-comment) (lambda (eta-0) (vector 0 (LibrariesC-45DataC-45StringC-45Extra-drop 2 eta-0)))) (cons (cons (ParserC-45LexerC-45Common-namespacedIdent) (lambda (eta-0) (PreludeC-45Basics-uncurry (lambda (eta-1) (lambda (eta-2) (vector 3 eta-1 eta-2))) (CoreC-45NameC-45Namespace-mkNamespacedIdent eta-0)))) (cons (cons (ParserC-45LexerC-45Common-identAllowDashes) (lambda (eta-0) (vector 3 '() eta-0))) (cons (cons (ParserC-45LexerC-45Package-separator) (lambda (eta-0) (vector 4 ))) (cons (cons (ParserC-45LexerC-45Package-dot) (lambda (eta-0) (vector 5 ))) (cons (cons (ParserC-45LexerC-45Package-lte) (lambda (eta-0) (vector 6 ))) (cons (cons (ParserC-45LexerC-45Package-gte) (lambda (eta-0) (vector 7 ))) (cons (cons (ParserC-45LexerC-45Package-lt) (lambda (eta-0) (vector 8 ))) (cons (cons (ParserC-45LexerC-45Package-gt) (lambda (eta-0) (vector 9 ))) (cons (cons (ParserC-45LexerC-45Package-eqop) (lambda (eta-0) (vector 10 ))) (cons (cons (ParserC-45LexerC-45Package-andop) (lambda (eta-0) (vector 11 ))) (cons (cons (ParserC-45LexerC-45Package-equals) (lambda (eta-0) (vector 2 ))) (cons (cons (ParserC-45LexerC-45Common-spacesOrNewlines) (lambda (eta-0) (vector 12 ))) (cons (cons (LibrariesC-45TextC-45Lexer-stringLit) (lambda (u--s) (vector 13 (LibrariesC-45UtilsC-45String-stripQuotes u--s)))) (cons (cons (LibrariesC-45TextC-45Lexer-intLit) (lambda (u--i) (vector 14 (PreludeC-45Cast-u--cast_Cast_String_Integer u--i)))) '()))))))))))))))))))
(define ParserC-45LexerC-45Package-lte(blodwen-lazy (lambda () (vector 5 (LibrariesC-45TextC-45Lexer-is #\<) (lambda () (LibrariesC-45TextC-45Lexer-is #\=))))))
(define ParserC-45LexerC-45Package-lt(blodwen-lazy (lambda () (LibrariesC-45TextC-45Lexer-is #\<))))
(define ParserC-45LexerC-45Package-lex (lambda (arg-0) (ParserC-45LexerC-45Package-case--lex-8842 arg-0 (LibrariesC-45TextC-45LexerC-45Core-lexTo (lambda (eta-0) 0) (ParserC-45LexerC-45Package-rawTokens) arg-0))))
(define ParserC-45LexerC-45Package-gte(blodwen-lazy (lambda () (vector 5 (LibrariesC-45TextC-45Lexer-is #\>) (lambda () (LibrariesC-45TextC-45Lexer-is #\=))))))
(define ParserC-45LexerC-45Package-gt(blodwen-lazy (lambda () (LibrariesC-45TextC-45Lexer-is #\>))))
(define ParserC-45LexerC-45Package-equals(blodwen-lazy (lambda () (LibrariesC-45TextC-45Lexer-is #\=))))
(define ParserC-45LexerC-45Package-eqop(blodwen-lazy (lambda () (vector 5 (LibrariesC-45TextC-45Lexer-is #\=) (lambda () (LibrariesC-45TextC-45Lexer-is #\=))))))
(define ParserC-45LexerC-45Package-dot(blodwen-lazy (lambda () (LibrariesC-45TextC-45Lexer-is #\.))))
(define ParserC-45LexerC-45Package-andop(blodwen-lazy (lambda () (vector 5 (LibrariesC-45TextC-45Lexer-is #\&) (lambda () (LibrariesC-45TextC-45Lexer-is #\&))))))
(define ParserC-45LexerC-45Common-spacesOrNewlines(blodwen-lazy (lambda () (LibrariesC-45TextC-45Lexer-some (LibrariesC-45TextC-45LexerC-45Core-C-60C-124C-62 (LibrariesC-45TextC-45Lexer-space) (LibrariesC-45TextC-45Lexer-newline))))))
(define ParserC-45LexerC-45Common-namespacedIdent(blodwen-lazy (lambda () (vector 5 (ParserC-45LexerC-45Common-namespaceIdent) (lambda () (LibrariesC-45TextC-45Lexer-opt (vector 5 (LibrariesC-45TextC-45Lexer-is #\.) (lambda () (ParserC-45LexerC-45Common-identNormal)))))))))
(define ParserC-45LexerC-45Common-namespaceIdent(blodwen-lazy (lambda () (vector 5 (csegen-620) (lambda () (LibrariesC-45TextC-45Lexer-many (vector 5 (vector 5 (LibrariesC-45TextC-45Lexer-is #\.) (lambda () (csegen-620))) (lambda () (LibrariesC-45TextC-45LexerC-45Core-expect (LibrariesC-45TextC-45Lexer-is #\.))))))))))
(define ParserC-45LexerC-45Common-isIdentTrailing (lambda (arg-0 arg-1) (cond ((equal? arg-0 0) (cond ((equal? arg-1 #\-) 1)(else (cond ((equal? arg-1 #\') 1) ((equal? arg-1 #\_) 1)(else (let ((sc1 (PreludeC-45Types-isAlphaNum arg-1))) (cond ((equal? sc1 1) 1) (else (PreludeC-45EqOrd-u--C-62_Ord_Char arg-1 (cast-int-char (blodwen-toSignedInt 160 63)))))))))))(else (cond ((equal? arg-1 #\') 1) ((equal? arg-1 #\_) 1)(else (let ((sc0 (PreludeC-45Types-isAlphaNum arg-1))) (cond ((equal? sc0 1) 1) (else (PreludeC-45EqOrd-u--C-62_Ord_Char arg-1 (cast-int-char (blodwen-toSignedInt 160 63))))))))))))
(define ParserC-45LexerC-45Common-isIdentStart (lambda (arg-0 arg-1) (cond ((equal? arg-1 #\_) 1)(else (cond ((equal? arg-0 1) (let ((sc1 (PreludeC-45Types-isUpper arg-1))) (cond ((equal? sc1 1) 1) (else (PreludeC-45EqOrd-u--C-62_Ord_Char arg-1 (cast-int-char (blodwen-toSignedInt 160 63)))))))(else (let ((sc0 (PreludeC-45Types-isAlpha arg-1))) (cond ((equal? sc0 1) 1) (else (PreludeC-45EqOrd-u--C-62_Ord_Char arg-1 (cast-int-char (blodwen-toSignedInt 160 63))))))))))))
(define ParserC-45LexerC-45Common-identNormal(blodwen-lazy (lambda () (vector 5 (LibrariesC-45TextC-45LexerC-45Core-pred (lambda (eta-0) (ParserC-45LexerC-45Common-isIdentStart 2 eta-0))) (lambda () (LibrariesC-45TextC-45Lexer-many (LibrariesC-45TextC-45LexerC-45Core-pred (lambda (eta-0) (ParserC-45LexerC-45Common-isIdentTrailing 2 eta-0)))))))))
(define ParserC-45LexerC-45Common-identAllowDashes(blodwen-lazy (lambda () (vector 5 (LibrariesC-45TextC-45LexerC-45Core-pred (lambda (eta-0) (ParserC-45LexerC-45Common-isIdentStart 0 eta-0))) (lambda () (LibrariesC-45TextC-45Lexer-many (LibrariesC-45TextC-45LexerC-45Core-pred (csegen-550))))))))
(define ParserC-45LexerC-45Common-comment(blodwen-lazy (lambda () (vector 5 (vector 5 (vector 5 (vector 5 (LibrariesC-45TextC-45Lexer-is #\-) (lambda () (LibrariesC-45TextC-45Lexer-is #\-))) (lambda () (LibrariesC-45TextC-45Lexer-many (LibrariesC-45TextC-45Lexer-is #\-)))) (lambda () (LibrariesC-45TextC-45LexerC-45Core-reject (LibrariesC-45TextC-45Lexer-is #\})))) (lambda () (LibrariesC-45TextC-45Lexer-many (LibrariesC-45TextC-45Lexer-isNot (integer->char 10))))))))
(define PackC-45CoreC-45IO-case--mkTmpDirC-44go-6580 (lambda (arg-1 arg-2 arg-3 arg-4 arg-5) (if (null? arg-5) (PackC-45CoreC-45IO-n--6818-6532-u--go arg-1 arg-2 arg-3 (+ arg-4 1)) (let ((e-1 (unbox arg-5))) (let ((u--dir (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 arg-2)) eff-0) (vector 1 (cons '() e-1))))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) (SystemC-45FileC-45Meta-exists (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) (let ((e-9 (vector-ref e-6 0))) e-9))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) e-6)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) e-6)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 u--dir)) (lambda (_-0) (cond ((equal? _-0 0) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) (let ((e-9 (vector-ref e-6 0))) e-9))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) e-6)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) e-6)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) arg-9934)))) (PackC-45CoreC-45IO-mkDir arg-1 u--dir) (lambda () (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) e-6)) u--dir)))) (else (PackC-45CoreC-45IO-n--6818-6532-u--go arg-1 arg-2 arg-3 (+ arg-4 1)))))))))))
(define PackC-45CoreC-45IO-n--6818-6532-u--go (lambda (arg-1 arg-2 arg-3 arg-4) (cond ((equal? arg-3 0) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) (vector 0 (vector 2 )))))))(else (let ((e-0 (- arg-3 1))) (PackC-45CoreC-45IO-case--mkTmpDirC-44go-6580 arg-1 arg-2 e-0 arg-4 (DataC-45FilePathC-45Body-fromChars (PreludeC-45Types-fastUnpack (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons ".tmp" (cons (PreludeC-45Show-u--show_Show_Nat arg-4) '())))))))))))
(define PackC-45CoreC-45IO-write (lambda (arg-1 arg-2 arg-3) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45CoreC-45IO-mkDir arg-1 (let ((e-1 (car arg-2))) e-1)) (lambda () (PackC-45CoreC-45IO-eitherIO arg-1 (lambda (eta-0) (vector 5 arg-2 eta-0)) (SystemC-45FileC-45ReadWrite-writeFile arg-1 (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons ((csegen-234) (let ((e-1 (car arg-2))) (let ((e-2 (cdr arg-2))) (DataC-45FilePath-C-60C-47C-62 e-1 (vector 1 (cons '() e-2)))))) '())) arg-3))))))
(define PackC-45CoreC-45IO-tomlFiles (lambda (arg-1 arg-2) (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) eta-2 eta-3))))) (lambda (eta-0) (PreludeC-45TypesC-45List-filter (lambda (eta-1) (PackC-45CoreC-45Types-isTomlBody eta-1)) eta-0)) (PackC-45CoreC-45IO-entries arg-1 arg-2))))
(define PackC-45CoreC-45IO-sysWithEnv (lambda (arg-1 arg-2 arg-3) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (System-system (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) (PackC-45CoreC-45IO-cmdWithEnv arg-2 arg-3)) (lambda (_-0) (cond ((equal? _-0 0) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (vector 0 )))(else (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) (vector 0 (vector 7 arg-2 _-0))))))))))))
(define PackC-45CoreC-45IO-sysRun (lambda (arg-1 arg-2) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (System-run (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) arg-2) (lambda (_-0) (let ((e-2 (car _-0))) (let ((e-3 (cdr _-0))) (cond ((equal? e-3 0) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-7 (vector-ref e-1 0))) e-7)) e-2))(else (let ((e-1 (car arg-1))) (let ((e-7 (vector-ref e-1 0))) (let ((e-9 (vector-ref e-7 1))) ((e-9 'erased) (vector 0 (vector 7 arg-2 e-3))))))))))))))
(define PackC-45CoreC-45IO-sys (lambda (arg-1 arg-2) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (System-system (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) arg-2) (lambda (_-0) (cond ((equal? _-0 0) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (vector 0 )))(else (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) (vector 0 (vector 7 arg-2 _-0))))))))))))
(define PackC-45CoreC-45IO-run (lambda (arg-0) (let ((eff-0 arg-0)) (PrimIO-io_bind eff-0 (lambda (_-0) (case (vector-ref _-0 0) ((0) (let ((e-2 (vector-ref _-0 1))) (System-die (csegen-45) (PackC-45CoreC-45Types-printErr e-2)))) (else (lambda (eta-0) (vector 0 )))))))))
(define PackC-45CoreC-45IO-rmFile (lambda (arg-1 arg-2) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (SystemC-45FileC-45Meta-exists (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) ((csegen-234) (let ((e-1 (car arg-2))) (let ((e-2 (cdr arg-2))) (DataC-45FilePath-C-60C-47C-62 e-1 (vector 1 (cons '() e-2))))))) (lambda (bind-0) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) bind-0 (lambda () (PackC-45CoreC-45IO-sys arg-1 (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "rm " (cons ((csegen-234) (let ((e-1 (car arg-2))) (let ((e-2 (cdr arg-2))) (DataC-45FilePath-C-60C-47C-62 e-1 (vector 1 (cons '() e-2)))))) '()))))))))))
(define PackC-45CoreC-45IO-rmDir (lambda (arg-1 arg-2) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (SystemC-45FileC-45Meta-exists (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 arg-2)) (lambda (bind-0) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) bind-0 (lambda () (PackC-45CoreC-45IO-sys arg-1 (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "rm -rf " (cons (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 arg-2) '()))))))))))
(define PackC-45CoreC-45IO-read (lambda (arg-1 arg-2) (PackC-45CoreC-45IO-eitherIO arg-1 (lambda (eta-0) (vector 4 arg-2 eta-0)) (SystemC-45FileC-45ReadWrite-readFile arg-1 (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons ((csegen-234) (let ((e-1 (car arg-2))) (let ((e-2 (cdr arg-2))) (DataC-45FilePath-C-60C-47C-62 e-1 (vector 1 (cons '() e-2)))))) '()))))))
(define PackC-45CoreC-45IO-patch (lambda (arg-1 arg-2 arg-3) (PackC-45CoreC-45IO-sys arg-1 (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "patch " (cons ((csegen-234) (let ((e-1 (car arg-2))) (let ((e-2 (cdr arg-2))) (DataC-45FilePath-C-60C-47C-62 e-1 (vector 1 (cons '() e-2)))))) (cons " " (cons ((csegen-234) (let ((e-1 (car arg-3))) (let ((e-2 (cdr arg-3))) (DataC-45FilePath-C-60C-47C-62 e-1 (vector 1 (cons '() e-2)))))) '()))))))))
(define PackC-45CoreC-45IO-mkTmpDir (lambda (arg-1 arg-2) (PackC-45CoreC-45IO-n--6818-6532-u--go arg-1 arg-2 (PreludeC-45Types-prim__integerToNat 100) 0)))
(define PackC-45CoreC-45IO-mkParentDir (lambda (arg-1 arg-2) (let ((sc0 ((csegen-493) (DataC-45FilePath-split arg-2)))) (if (null? sc0) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (vector 0 )) (let ((e-1 (unbox sc0))) (PackC-45CoreC-45IO-mkDir arg-1 e-1))))))
(define PackC-45CoreC-45IO-mkDir (lambda (arg-1 arg-2) (case (vector-ref arg-2 0) ((0) (let ((e-0 (vector-ref arg-2 1))) (if (null? e-0) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (vector 0 )) (PackC-45CoreC-45IO-sys arg-1 (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "mkdir -p " (cons (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 arg-2) '())))))))(else (PackC-45CoreC-45IO-sys arg-1 (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "mkdir -p " (cons (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 arg-2) '()))))))))
(define PackC-45CoreC-45IO-missing (lambda (arg-1 ext-0) (((let ((eff-0 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))))) (lambda (arg-0) (lambda (arg-2) ((((eff-0 'erased) 'erased) arg-0) arg-2)))) (csegen-646)) (SystemC-45FileC-45Meta-exists arg-1 (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 ext-0)))))
(define PackC-45CoreC-45IO-link (lambda (arg-1 arg-2 arg-3) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45CoreC-45IO-rmFile arg-1 arg-3) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45CoreC-45IO-mkDir arg-1 (let ((e-1 (car arg-3))) e-1)) (lambda () (PackC-45CoreC-45IO-sys arg-1 (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "ln -s " (cons (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 arg-2) (cons " " (cons ((csegen-234) (let ((e-1 (car arg-3))) (let ((e-2 (cdr arg-3))) (DataC-45FilePath-C-60C-47C-62 e-1 (vector 1 (cons '() e-2)))))) '()))))))))))))
(define PackC-45CoreC-45IO-inDir (lambda (arg-2 arg-3 arg-4) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) (PackC-45CoreC-45IO-curDir arg-2) (lambda (u--cur) (PackC-45CoreC-45IO-finally (let ((e-1 (car arg-2))) e-1) (PackC-45CoreC-45IO-chgDir arg-2 u--cur) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9934)))) (PackC-45CoreC-45IO-chgDir arg-2 arg-3) (lambda () (arg-4 arg-3))))))))
(define PackC-45CoreC-45IO-htmlFiles (lambda (arg-1 arg-2) (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) eta-2 eta-3))))) (lambda (eta-0) (PreludeC-45TypesC-45List-filter (lambda (eta-1) (PackC-45CoreC-45Types-isHtmlBody eta-1)) eta-0)) (PackC-45CoreC-45IO-entries arg-1 arg-2))))
(define PackC-45CoreC-45IO-finally (lambda (arg-3 arg-4 arg-5) (let ((e-2 (vector-ref arg-3 1))) ((((e-2 'erased) 'erased) (let ((eff-0 arg-5)) eff-0)) (lambda (u--res) (PreludeC-45Interfaces-C-62C-62 arg-3 (((let ((eff-0 (let ((e-6 (vector-ref arg-3 0))) (let ((e-9 (vector-ref e-6 0))) e-9)))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) (lambda (eta-0) (vector 0 ))) (let ((eff-0 arg-4)) eff-0)) (lambda () (let ((e-6 (vector-ref arg-3 0))) (let ((e-8 (vector-ref e-6 1))) ((e-8 'erased) u--res))))))))))
(define PackC-45CoreC-45IO-filterM (lambda (arg-2 arg-3 arg-4) (if (null? arg-4) (let ((e-1 (vector-ref arg-2 0))) (let ((e-5 (vector-ref e-1 1))) ((e-5 'erased) '()))) (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) (let ((e-5 (vector-ref arg-2 1))) ((((e-5 'erased) 'erased) (arg-3 e-2)) (lambda (_-0) (cond ((equal? _-0 1) (PreludeC-45Interfaces-C-60C-36C-62 (let ((e-8 (vector-ref arg-2 0))) (let ((e-11 (vector-ref e-8 0))) e-11)) (lambda (arg-0) (cons e-2 arg-0)) (PackC-45CoreC-45IO-filterM arg-2 arg-3 e-3))) (else (PackC-45CoreC-45IO-filterM arg-2 arg-3 e-3)))))))))))
(define PackC-45CoreC-45IO-fileMissing (lambda (arg-1 ext-0) (((let ((eff-0 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))))) (lambda (arg-0) (lambda (arg-2) ((((eff-0 'erased) 'erased) arg-0) arg-2)))) (csegen-646)) (SystemC-45FileC-45Meta-exists arg-1 ((csegen-234) (let ((e-1 (car ext-0))) (let ((e-2 (cdr ext-0))) (DataC-45FilePath-C-60C-47C-62 e-1 (vector 1 (cons '() e-2))))))))))
(define PackC-45CoreC-45IO-entries (lambda (arg-1 arg-2) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-eitherIO arg-1 (lambda (eta-0) (vector 6 arg-2 eta-0)) (SystemC-45Directory-listDir arg-1 (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 arg-2) '())))) (lambda (u--ss) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (PreludeC-45TypesC-45List-mapMaybe (csegen-465) u--ss))))))
(define PackC-45CoreC-45IO-eitherIO (lambda (arg-3 arg-4 ext-0) (((let ((eff-0 (let ((e-1 (car arg-3))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) (lambda (eta-0) (case (vector-ref eta-0 0) ((0) (let ((e-2 (vector-ref eta-0 1))) (vector 0 (arg-4 e-2)))) (else (let ((e-5 (vector-ref eta-0 1))) (vector 1 e-5)))))) ext-0)))
(define PackC-45CoreC-45IO-dispEnv (lambda (ext-0) (DataC-45String-unwords (((csegen-226) (lambda (lamc-0) (let ((e-2 (car lamc-0))) (let ((e-3 (cdr lamc-0))) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons ((csegen-237) e-2) (cons ((csegen-237) "=") (cons ((csegen-237) (PackC-45CoreC-45Types-quote (lambda (eta-0) eta-0) e-3)) '())))))))) ext-0))))
(define PackC-45CoreC-45IO-curDir (lambda (arg-1) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (SystemC-45Directory-currentDir (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999))))) (lambda (_-0) (if (null? _-0) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) (vector 0 (vector 0 )))))) (let ((e-1 (unbox _-0))) (let ((eff-0 ((let ((eff-0 (lambda (eta-0) (DataC-45FilePath-u--fromString_FromString_FilePath eta-0)))) (lambda (arg-0) (eff-0 arg-0))) e-1))) (case (vector-ref eff-0 0) ((0) (let ((e-2 (vector-ref eff-0 1))) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-4 (car arg-1))) (let ((e-7 (vector-ref e-4 0))) e-7)) (vector 0 e-2)))) (else (let ((e-4 (car arg-1))) (let ((e-7 (vector-ref e-4 0))) (let ((e-9 (vector-ref e-7 1))) ((e-9 'erased) (vector 0 (vector 0 )))))))))))))))
(define PackC-45CoreC-45IO-copyFile (lambda (arg-1 arg-2 arg-3) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45CoreC-45IO-mkDir arg-1 (let ((e-1 (car arg-3))) e-1)) (lambda () (PackC-45CoreC-45IO-sys arg-1 (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "cp " (cons ((csegen-234) (let ((e-1 (car arg-2))) (let ((e-2 (cdr arg-2))) (DataC-45FilePath-C-60C-47C-62 e-1 (vector 1 (cons '() e-2)))))) (cons " " (cons ((csegen-234) (let ((e-1 (car arg-3))) (let ((e-2 (cdr arg-3))) (DataC-45FilePath-C-60C-47C-62 e-1 (vector 1 (cons '() e-2)))))) '()))))))))))
(define PackC-45CoreC-45IO-copyDir (lambda (arg-1 arg-2 arg-3) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45CoreC-45IO-mkParentDir arg-1 arg-3) (lambda () (PackC-45CoreC-45IO-sys arg-1 (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "cp -r " (cons (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 arg-2) (cons " " (cons (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 arg-3) '()))))))))))
(define PackC-45CoreC-45IO-cmdWithEnv (lambda (arg-0 arg-1) (if (null? arg-1) arg-0 (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons (PackC-45CoreC-45IO-dispEnv arg-1) (cons " " (cons arg-0 '())))))))
(define PackC-45CoreC-45IO-chgDir (lambda (arg-1 arg-2) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (SystemC-45Directory-changeDir (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 arg-2) '()))) (lambda (_-0) (cond ((equal? _-0 1) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (vector 0 ))) (else (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) (vector 0 (vector 8 arg-2))))))))))))
(define SystemC-45Directory-n--3384-1655-u--C-62C-62C-61 (lambda (arg-1 arg-2 ext-0 ext-1) (PreludeC-45InterfacesC-45Monad-u--C-62C-62C-61_Monad_ComposeC-40C-40C-46C-32C-36mC-41C-32C-36tC-41 (csegen-44) (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (case (vector-ref arg-8737 0) ((0) (let ((e-2 (vector-ref arg-8737 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref arg-8737 1))) (vector 1 (u--func e-5))))))))) (lambda (u--a) (lambda (arg-9440) (vector 1 arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (case (vector-ref arg-9446 0) ((0) (let ((e-2 (vector-ref arg-9446 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref arg-9446 1))) (case (vector-ref arg-9453 0) ((1) (let ((e-8 (vector-ref arg-9453 1))) (vector 1 (e-5 e-8)))) (else (let ((e-11 (vector-ref arg-9453 1))) (vector 0 e-11)))))))))))) (csegen-187) (csegen-188)) (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (case (vector-ref arg-8737 0) ((0) (let ((e-2 (vector-ref arg-8737 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref arg-8737 1))) (vector 1 (u--func e-5))))))))) (csegen-204) (csegen-208)) ext-0 ext-1)))
(define SystemC-45Directory-openDir (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (SystemC-45Directory-prim__openDir arg-2 eta-0))))) (lambda (u--res) (let ((sc1 (PreludeC-45EqOrd-u--C-47C-61_Eq_Int (PrimIO-prim__nullAnyPtr u--res) (blodwen-toSignedInt 0 63)))) (cond ((equal? sc1 1) (SystemC-45FileC-45Error-returnError arg-1)) (else (SystemC-45Directory-ok arg-1 u--res))))))))))
(define SystemC-45Directory-ok (lambda (arg-2 arg-3) (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) (vector 1 arg-3)))))))
(define SystemC-45Directory-nextDirEntry (lambda (arg-1 arg-2) (let ((eff-0 arg-2)) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (SystemC-45Directory-prim__dirEntry eff-0 eta-0))))) (lambda (u--res) (let ((sc1 (PreludeC-45EqOrd-u--C-47C-61_Eq_Int (PrimIO-prim__nullAnyPtr (PrimIO-prim__forgetPtr u--res)) (blodwen-toSignedInt 0 63)))) (cond ((equal? sc1 1) (let ((e-7 (car arg-1))) (let ((e-9 (vector-ref e-7 1))) ((((e-9 'erased) 'erased) (SystemC-45Errno-getErrno arg-1)) (lambda (bind-0) (let ((sc3 (PreludeC-45EqOrd-u--C-47C-61_Eq_Int bind-0 (blodwen-toSignedInt 0 63)))) (cond ((equal? sc3 1) (SystemC-45FileC-45Error-returnError arg-1)) (else (let ((e-12 (car arg-1))) (let ((e-15 (vector-ref e-12 0))) (let ((e-17 (vector-ref e-15 1))) ((e-17 'erased) (vector 1 '()))))))))))))) (else (let ((u--n (PreludeC-45IO-prim__getString u--res))) (let ((sc2 (let ((sc3 (PreludeC-45EqOrd-u--C-61C-61_Eq_String u--n "."))) (cond ((equal? sc3 1) 1) (else (PreludeC-45EqOrd-u--C-61C-61_Eq_String u--n "..")))))) (cond ((equal? sc2 1) (SystemC-45Directory-nextDirEntry arg-1 eff-0)) (else (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (vector 1 (box u--n))))))))))))))))))))
(define SystemC-45Directory-listDir (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (SystemC-45Directory-openDir arg-1 arg-2)) (lambda (_-0) (case (vector-ref _-0 0) ((1) (let ((e-6 (vector-ref _-0 1))) (let ((e-8 (car arg-1))) (let ((e-10 (vector-ref e-8 1))) ((((e-10 'erased) 'erased) (SystemC-45Directory-collectDir arg-1 e-6)) (lambda (u--ns) (let ((e-13 (car arg-1))) (let ((e-15 (vector-ref e-13 1))) ((((e-15 'erased) 'erased) (SystemC-45Directory-closeDir arg-1 e-6)) (lambda (u--ignore) (let ((e-18 (car arg-1))) (let ((e-21 (vector-ref e-18 0))) (let ((e-23 (vector-ref e-21 1))) ((e-23 'erased) u--ns)))))))))))))) (else (let ((e-6 (vector-ref _-0 1))) (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) (let ((e-13 (vector-ref e-11 1))) ((e-13 'erased) (vector 0 e-6))))))))))))))
(define SystemC-45Directory-currentDir (lambda (arg-1) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (SystemC-45Directory-prim__currentDir eta-0))))) (lambda (u--res) (let ((sc1 (PreludeC-45EqOrd-u--C-47C-61_Eq_Int (PrimIO-prim__nullAnyPtr (PrimIO-prim__forgetPtr u--res)) (blodwen-toSignedInt 0 63)))) (cond ((equal? sc1 1) (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) '()))))) (else (let ((u--s (PreludeC-45IO-prim__getString u--res))) (PreludeC-45Interfaces-C-62C-62 (let ((e-7 (car arg-1))) e-7) (SystemC-45FFI-free arg-1 (PrimIO-prim__forgetPtr u--res)) (lambda () (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (box u--s)))))))))))))))))
(define SystemC-45Directory-collectDir (lambda (arg-1 arg-2) (let ((e-2 (cdr arg-1))) ((e-2 'erased) (SystemC-45Directory-n--3384-1655-u--C-62C-62C-61 arg-1 arg-2 (SystemC-45Directory-nextDirEntry (csegen-45) arg-2) (lambda (_-0) (if (null? _-0) (lambda (eta-0) (vector 1 '())) (let ((e-3 (unbox _-0))) (SystemC-45Directory-n--3384-1655-u--C-62C-62C-61 arg-1 arg-2 (SystemC-45Directory-collectDir (csegen-45) arg-2) (lambda (u--ns) (lambda (eta-0) (vector 1 (cons e-3 u--ns)))))))))))))
(define SystemC-45Directory-closeDir (lambda (arg-1 arg-2) (let ((eff-0 arg-2)) (let ((e-2 (cdr arg-1))) ((e-2 'erased) (lambda (eta-0) (SystemC-45Directory-prim__closeDir eff-0 eta-0)))))))
(define SystemC-45Directory-changeDir (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (SystemC-45Directory-prim__changeDir arg-2 eta-0))))) (lambda (u--ok) (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (PreludeC-45EqOrd-u--C-61C-61_Eq_Int u--ok (blodwen-toSignedInt 0 63))))))))))))
(define ControlC-45MonadC-45ErrorC-45Interface-u--throwError_MonadError_C-36e_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (lambda (arg-3 ext-0) (let ((e-1 (vector-ref arg-3 0))) (let ((e-5 (vector-ref e-1 1))) ((e-5 'erased) (vector 0 ext-0))))))
(define ControlC-45MonadC-45ErrorC-45Interface-liftEither (lambda (arg-3 ext-0) (PreludeC-45Types-either (lambda () (lambda (clam-0) (let ((e-3 (vector-ref arg-3 1))) ((e-3 'erased) clam-0)))) (lambda () (lambda (eta-0) (let ((e-2 (vector-ref arg-3 0))) (let ((e-1 (vector-ref e-2 0))) (let ((e-8 (vector-ref e-1 1))) ((e-8 'erased) eta-0)))))) ext-0)))
(define ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (lambda (arg-3 ext-0) (let ((e-2 (vector-ref arg-3 1))) ((e-2 'erased) (vector 1 ext-0)))))
(define ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (lambda (arg-4 arg-5 arg-6) (PreludeC-45Interfaces-C-60C-36C-62 arg-4 ((let ((eff-0 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (case (vector-ref eta-3 0) ((0) (let ((e-2 (vector-ref eta-3 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref eta-3 1))) (vector 1 (eta-2 e-5))))))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) (let ((eff-0 arg-6)) eff-0))))
(define ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (lambda (arg-3 arg-4) (let ((e-2 (cdr arg-3))) ((e-2 'erased) (PrimIO-io_bind arg-4 (lambda (eta-0) (lambda (eta-1) (vector 1 eta-0))))))))
(define ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (lambda (arg-3 arg-4) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-3 arg-4 (lambda (eta-0) eta-0))))
(define ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (lambda (arg-4 arg-5 arg-6) (let ((e-2 (vector-ref arg-4 1))) ((((e-2 'erased) 'erased) (let ((eff-0 arg-5)) eff-0)) (lambda (eta-0) (PreludeC-45Types-either (lambda () (lambda (eta-1) (let ((e-6 (vector-ref arg-4 0))) (let ((e-8 (vector-ref e-6 1))) ((e-8 'erased) (vector 0 eta-1)))))) (lambda () (lambda (eta-1) (let ((eff-0 (arg-6 eta-1))) eff-0))) eta-0))))))
(define ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (lambda (arg-4 arg-5 arg-6) (let ((e-3 (vector-ref arg-4 2))) ((((e-3 'erased) 'erased) (let ((e-4 (vector-ref arg-4 2))) ((((e-4 'erased) 'erased) (let ((e-8 (vector-ref arg-4 1))) ((e-8 'erased) (lambda (eta-0) (lambda (eta-1) (case (vector-ref eta-0 0) ((0) (let ((e-10 (vector-ref eta-0 1))) (vector 0 e-10))) (else (let ((e-10 (vector-ref eta-0 1))) (case (vector-ref eta-1 0) ((1) (let ((e-11 (vector-ref eta-1 1))) (vector 1 (e-10 e-11)))) (else (let ((e-11 (vector-ref eta-1 1))) (vector 0 e-11)))))))))))) (let ((eff-0 arg-5)) eff-0)))) (let ((eff-0 arg-6)) eff-0)))))
(define ControlC-45MonadC-45ErrorC-45Either-catchE (lambda (arg-4 arg-5 arg-6) (let ((e-2 (vector-ref arg-4 1))) ((((e-2 'erased) 'erased) (let ((eff-0 arg-5)) eff-0)) (lambda (eta-0) (PreludeC-45Types-either (lambda () (lambda (eta-1) (let ((eff-0 (arg-6 eta-1))) eff-0))) (lambda () (lambda (eta-1) (let ((e-6 (vector-ref arg-4 0))) (let ((e-8 (vector-ref e-6 1))) ((e-8 'erased) (vector 1 eta-1)))))) eta-0))))))
(define DataC-45SortedMap-n--3677-10932-u--inserted (lambda (arg-2 arg-3 arg-4) (PreludeC-45Types-listBind (DataC-45SortedMap-toList arg-2) (lambda (_-0) (let ((e-2 (car _-0))) (let ((e-3 (cdr _-0))) (let ((u--vC-39 ((PreludeC-45Types-maybe (lambda () (lambda (eta-0) eta-0)) (lambda () arg-4) (DataC-45SortedMap-lookup e-2 arg-3)) e-3))) (PreludeC-45Types-u--pure_Applicative_List (cons e-2 u--vC-39)))))))))
(define DataC-45SortedMap-u--traverse_Traversable_C-40SortedMapC-32C-36kC-41 (lambda (arg-4 arg-5 ext-0) (((let ((eff-0 (let ((e-1 (vector-ref arg-4 0))) e-1))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) (lambda (eta-0) eta-0)) (DataC-45SortedMapC-45Dependent-traverse arg-4 (lambda (x-10868) arg-5) (let ((eff-0 ext-0)) eff-0)))))
(define DataC-45SortedMap-unDPair (lambda (arg-2) (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (cons e-2 e-3)))))
(define DataC-45SortedMap-toList (lambda (ext-0) (((csegen-226) (lambda (eta-0) (DataC-45SortedMap-unDPair eta-0))) (DataC-45SortedMapC-45Dependent-toList (let ((eff-0 ext-0)) eff-0)))))
(define DataC-45SortedMap-mergeWith (lambda (arg-2 arg-3 arg-4) (DataC-45SortedMap-insertFrom (csegen-98) (DataC-45SortedMap-n--3677-10932-u--inserted arg-4 arg-3 arg-2) arg-3)))
(define DataC-45SortedMap-mergeLeft (lambda (ext-0 ext-1) (DataC-45SortedMap-mergeWith (lambda (eta-0) (lambda (eta-1) eta-0)) ext-0 ext-1)))
(define DataC-45SortedMap-lookup (lambda (arg-2 ext-0) (((csegen-230) (lambda (eta-0) (let ((e-3 (cdr eta-0))) e-3))) (DataC-45SortedMapC-45Dependent-lookup arg-2 (let ((eff-0 ext-0)) eff-0)))))
(define DataC-45SortedMap-insertFrom (lambda (arg-3 ext-0 ext-1) (PreludeC-45Basics-flip (lambda (eta-0) (lambda (clam-0) (let ((e-2 (vector-ref arg-3 1))) (((((e-2 'erased) 'erased) (lambda (eta-1) (lambda (eta-2) (PreludeC-45Basics-flip (lambda (eta-3) (PreludeC-45Basics-uncurry (lambda (eta-4) (lambda (eta-5) (lambda (eta-6) (DataC-45SortedMap-insert eta-4 eta-5 eta-6)))) eta-3)) eta-1 eta-2)))) eta-0) clam-0)))) ext-0 ext-1)))
(define DataC-45SortedMap-insert (lambda (arg-2 arg-3 ext-0) (DataC-45SortedMapC-45Dependent-insert arg-2 arg-3 (let ((eff-0 ext-0)) eff-0))))
(define DataC-45SortedMap-fromList (lambda (arg-2 ext-0) (PreludeC-45Basics-flip (lambda (eta-0) (lambda (eta-1) (DataC-45SortedMap-insertFrom (csegen-98) eta-0 eta-1))) (DataC-45SortedMap-empty arg-2) ext-0)))
(define DataC-45SortedMap-empty (lambda (arg-2) (DataC-45SortedMapC-45Dependent-empty arg-2)))
(define DataC-45SortedMapC-45Dependent-n--6691-6807-u--treeToListC-39 (lambda (arg-5 arg-6) (case (vector-ref arg-6 0) ((0) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (arg-5 (cons e-3 e-4))))) ((1) (let ((e-9 (vector-ref arg-6 1))) (let ((e-11 (vector-ref arg-6 3))) (DataC-45SortedMapC-45Dependent-n--6691-6807-u--treeToListC-39 (lambda (arg-0) (cons arg-0 (DataC-45SortedMapC-45Dependent-n--6691-6807-u--treeToListC-39 arg-5 e-11))) e-9)))) (else (let ((e-16 (vector-ref arg-6 1))) (let ((e-18 (vector-ref arg-6 3))) (let ((e-20 (vector-ref arg-6 5))) (DataC-45SortedMapC-45Dependent-n--6691-6807-u--treeToListC-39 (lambda (arg-0) (cons arg-0 (DataC-45SortedMapC-45Dependent-n--6691-6807-u--treeToListC-39 (lambda (arg-1) (cons arg-1 (DataC-45SortedMapC-45Dependent-n--6691-6807-u--treeToListC-39 arg-5 e-20))) e-18))) e-16))))))))
(define DataC-45SortedMapC-45Dependent-treeTraverse (lambda (arg-6 arg-7 arg-8) (case (vector-ref arg-8 0) ((0) (let ((e-3 (vector-ref arg-8 1))) (let ((e-4 (vector-ref arg-8 2))) (PreludeC-45Interfaces-C-60C-36C-62 (let ((e-1 (vector-ref arg-6 0))) e-1) (lambda (eta-0) (vector 0 e-3 eta-0)) ((arg-7 e-3) e-4))))) ((1) (let ((e-9 (vector-ref arg-8 1))) (let ((e-10 (vector-ref arg-8 2))) (let ((e-11 (vector-ref arg-8 3))) (let ((e-3 (vector-ref arg-6 2))) ((((e-3 'erased) 'erased) (let ((e-4 (vector-ref arg-6 2))) ((((e-4 'erased) 'erased) (PreludeC-45Interfaces-C-60C-36C-62 (let ((e-12 (vector-ref arg-6 0))) e-12) (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (vector 1 eta-0 eta-1 eta-2)))) (DataC-45SortedMapC-45Dependent-treeTraverse arg-6 (lambda (x-7890) (arg-7 x-7890)) e-9))) (let ((e-8 (vector-ref arg-6 1))) ((e-8 'erased) e-10))))) (DataC-45SortedMapC-45Dependent-treeTraverse arg-6 (lambda (x-7910) (arg-7 x-7910)) e-11))))))) (else (let ((e-16 (vector-ref arg-8 1))) (let ((e-17 (vector-ref arg-8 2))) (let ((e-18 (vector-ref arg-8 3))) (let ((e-19 (vector-ref arg-8 4))) (let ((e-20 (vector-ref arg-8 5))) (let ((e-3 (vector-ref arg-6 2))) ((((e-3 'erased) 'erased) (let ((e-4 (vector-ref arg-6 2))) ((((e-4 'erased) 'erased) (let ((e-7 (vector-ref arg-6 2))) ((((e-7 'erased) 'erased) (let ((e-10 (vector-ref arg-6 2))) ((((e-10 'erased) 'erased) (PreludeC-45Interfaces-C-60C-36C-62 (let ((e-15 (vector-ref arg-6 0))) e-15) (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (lambda (eta-4) (vector 2 eta-0 eta-1 eta-2 eta-3 eta-4)))))) (DataC-45SortedMapC-45Dependent-treeTraverse arg-6 (lambda (x-7974) (arg-7 x-7974)) e-16))) (let ((e-14 (vector-ref arg-6 1))) ((e-14 'erased) e-17))))) (DataC-45SortedMapC-45Dependent-treeTraverse arg-6 (lambda (x-7994) (arg-7 x-7994)) e-18)))) (let ((e-8 (vector-ref arg-6 1))) ((e-8 'erased) e-19))))) (DataC-45SortedMapC-45Dependent-treeTraverse arg-6 (lambda (x-8013) (arg-7 x-8013)) e-20))))))))))))
(define DataC-45SortedMapC-45Dependent-treeToList (lambda (ext-0) (DataC-45SortedMapC-45Dependent-n--6691-6807-u--treeToListC-39 (lambda (arg-0) (cons arg-0 '())) ext-0)))
(define DataC-45SortedMapC-45Dependent-treeLookup (lambda (arg-4 arg-5 arg-6) (case (vector-ref arg-6 0) ((0) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((sc1 (let ((e-1 (vector-ref arg-4 0))) (let ((e-12 (car e-1))) ((e-12 arg-5) e-3))))) (cond ((equal? sc1 1) (box (cons e-3 e-4))) (else '())))))) ((1) (let ((e-9 (vector-ref arg-6 1))) (let ((e-10 (vector-ref arg-6 2))) (let ((e-11 (vector-ref arg-6 3))) (let ((sc1 (let ((e-5 (vector-ref arg-4 4))) ((e-5 arg-5) e-10)))) (cond ((equal? sc1 1) (DataC-45SortedMapC-45Dependent-treeLookup arg-4 arg-5 e-9)) (else (DataC-45SortedMapC-45Dependent-treeLookup arg-4 arg-5 e-11)))))))) (else (let ((e-16 (vector-ref arg-6 1))) (let ((e-17 (vector-ref arg-6 2))) (let ((e-18 (vector-ref arg-6 3))) (let ((e-19 (vector-ref arg-6 4))) (let ((e-20 (vector-ref arg-6 5))) (let ((sc1 (let ((e-5 (vector-ref arg-4 4))) ((e-5 arg-5) e-17)))) (cond ((equal? sc1 1) (DataC-45SortedMapC-45Dependent-treeLookup arg-4 arg-5 e-16)) (else (let ((sc2 (let ((e-5 (vector-ref arg-4 4))) ((e-5 arg-5) e-19)))) (cond ((equal? sc2 1) (DataC-45SortedMapC-45Dependent-treeLookup arg-4 arg-5 e-18)) (else (DataC-45SortedMapC-45Dependent-treeLookup arg-4 arg-5 e-20))))))))))))))))
(define DataC-45SortedMapC-45Dependent-treeInsertC-39 (lambda (arg-4 arg-5 arg-6 arg-7) (case (vector-ref arg-7 0) ((0) (let ((e-3 (vector-ref arg-7 1))) (let ((e-4 (vector-ref arg-7 2))) (let ((sc1 (let ((e-2 (vector-ref arg-4 1))) ((e-2 arg-5) e-3)))) (cond ((equal? sc1 0) (vector 1 (cons (vector 0 arg-5 arg-6) (cons arg-5 (vector 0 e-3 e-4))))) ((equal? sc1 1) (vector 0 (vector 0 arg-5 arg-6))) (else (vector 1 (cons (vector 0 e-3 e-4) (cons e-3 (vector 0 arg-5 arg-6)))))))))) ((1) (let ((e-9 (vector-ref arg-7 1))) (let ((e-10 (vector-ref arg-7 2))) (let ((e-11 (vector-ref arg-7 3))) (let ((sc1 (let ((e-5 (vector-ref arg-4 4))) ((e-5 arg-5) e-10)))) (cond ((equal? sc1 1) (let ((sc2 (DataC-45SortedMapC-45Dependent-treeInsertC-39 arg-4 arg-5 arg-6 e-9))) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 (vector 1 e-2 e-10 e-11)))) (else (let ((e-5 (vector-ref sc2 1))) (let ((e-8 (car e-5))) (let ((e-12 (cdr e-5))) (let ((e-14 (car e-12))) (let ((e-13 (cdr e-12))) (vector 0 (vector 2 e-8 e-14 e-13 e-10 e-11))))))))))) (else (let ((sc2 (DataC-45SortedMapC-45Dependent-treeInsertC-39 arg-4 arg-5 arg-6 e-11))) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 (vector 1 e-9 e-10 e-2)))) (else (let ((e-5 (vector-ref sc2 1))) (let ((e-8 (car e-5))) (let ((e-12 (cdr e-5))) (let ((e-14 (car e-12))) (let ((e-13 (cdr e-12))) (vector 0 (vector 2 e-9 e-10 e-8 e-14 e-13))))))))))))))))) (else (let ((e-16 (vector-ref arg-7 1))) (let ((e-17 (vector-ref arg-7 2))) (let ((e-18 (vector-ref arg-7 3))) (let ((e-19 (vector-ref arg-7 4))) (let ((e-20 (vector-ref arg-7 5))) (let ((sc1 (let ((e-5 (vector-ref arg-4 4))) ((e-5 arg-5) e-17)))) (cond ((equal? sc1 1) (let ((sc2 (DataC-45SortedMapC-45Dependent-treeInsertC-39 arg-4 arg-5 arg-6 e-16))) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 (vector 2 e-2 e-17 e-18 e-19 e-20)))) (else (let ((e-5 (vector-ref sc2 1))) (let ((e-8 (car e-5))) (let ((e-9 (cdr e-5))) (let ((e-12 (car e-9))) (let ((e-13 (cdr e-9))) (vector 1 (cons (vector 1 e-8 e-12 e-13) (cons e-17 (vector 1 e-18 e-19 e-20))))))))))))) (else (let ((sc2 (let ((e-5 (vector-ref arg-4 4))) ((e-5 arg-5) e-19)))) (cond ((equal? sc2 1) (let ((sc3 (DataC-45SortedMapC-45Dependent-treeInsertC-39 arg-4 arg-5 arg-6 e-18))) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 (vector 2 e-16 e-17 e-2 e-19 e-20)))) (else (let ((e-5 (vector-ref sc3 1))) (let ((e-8 (car e-5))) (let ((e-9 (cdr e-5))) (let ((e-12 (car e-9))) (let ((e-13 (cdr e-9))) (vector 1 (cons (vector 1 e-16 e-17 e-8) (cons e-12 (vector 1 e-13 e-19 e-20))))))))))))) (else (let ((sc3 (DataC-45SortedMapC-45Dependent-treeInsertC-39 arg-4 arg-5 arg-6 e-20))) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 (vector 2 e-16 e-17 e-18 e-19 e-2)))) (else (let ((e-5 (vector-ref sc3 1))) (let ((e-8 (car e-5))) (let ((e-9 (cdr e-5))) (let ((e-12 (car e-9))) (let ((e-13 (cdr e-9))) (vector 1 (cons (vector 1 e-16 e-17 e-18) (cons e-19 (vector 1 e-8 e-12 e-13)))))))))))))))))))))))))))
(define DataC-45SortedMapC-45Dependent-treeInsert (lambda (arg-4 arg-5 arg-6 arg-7) (let ((sc0 (DataC-45SortedMapC-45Dependent-treeInsertC-39 arg-4 arg-5 arg-6 arg-7))) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((e-8 (car e-5))) (let ((e-9 (cdr e-5))) (let ((e-12 (car e-9))) (let ((e-13 (cdr e-9))) (vector 1 (vector 1 e-8 e-12 e-13))))))))))))
(define DataC-45SortedMapC-45Dependent-traverse (lambda (arg-4 arg-5 arg-6) (case (vector-ref arg-6 0) ((0) (let ((e-2 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-4 1))) ((e-4 'erased) (vector 0 e-2))))) (else (let ((e-5 (vector-ref arg-6 1))) (let ((e-6 (vector-ref arg-6 2))) (let ((e-7 (vector-ref arg-6 3))) (PreludeC-45Interfaces-C-60C-36C-62 (let ((e-1 (vector-ref arg-4 0))) e-1) (lambda (eta-0) (vector 1 e-5 e-6 eta-0)) (DataC-45SortedMapC-45Dependent-treeTraverse arg-4 (lambda (x-8463) (arg-5 x-8463)) e-7)))))))))
(define DataC-45SortedMapC-45Dependent-toList (lambda (arg-2) (case (vector-ref arg-2 0) ((0) '()) (else (let ((e-7 (vector-ref arg-2 3))) (DataC-45SortedMapC-45Dependent-treeToList e-7))))))
(define DataC-45SortedMapC-45Dependent-lookup (lambda (arg-2 arg-3) (case (vector-ref arg-3 0) ((0) '()) (else (let ((e-5 (vector-ref arg-3 1))) (let ((e-7 (vector-ref arg-3 3))) (DataC-45SortedMapC-45Dependent-treeLookup e-5 arg-2 e-7)))))))
(define DataC-45SortedMapC-45Dependent-insert (lambda (arg-2 arg-3 arg-4) (case (vector-ref arg-4 0) ((0) (let ((e-2 (vector-ref arg-4 1))) (vector 1 e-2 0 (vector 0 arg-2 arg-3)))) (else (let ((e-5 (vector-ref arg-4 1))) (let ((e-6 (vector-ref arg-4 2))) (let ((e-7 (vector-ref arg-4 3))) (let ((sc1 (DataC-45SortedMapC-45Dependent-treeInsert e-5 arg-2 arg-3 e-7))) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 1 e-5 e-6 e-2))) (else (let ((e-8 (vector-ref sc1 1))) (vector 1 e-5 (+ e-6 1) e-8))))))))))))
(define DataC-45SortedMapC-45Dependent-empty (lambda (arg-2) (vector 0 arg-2)))
(define PackC-45DatabaseC-45TOML-u--fromTOML_FromTOML_DB (lambda (arg-0 arg-1) (let ((sc0 (let ((sc1 (let ((sc2 (PackC-45CoreC-45TOML-valAtC-39 ((csegen-662) arg-0) "idris2.url" (box (PackC-45DatabaseC-45TOML-idrisRepo)) arg-1))) (case (vector-ref sc2 0) ((1) (let ((e-8 (vector-ref sc2 1))) (let ((sc3 (PackC-45CoreC-45TOML-valAtC-39 ((let ((eff-0 (csegen-663))) (lambda (arg-2) (lambda (arg-3) ((eff-0 arg-2) arg-3)))) arg-0) "idris2.commit" '() arg-1))) (case (vector-ref sc3 0) ((1) (let ((e-9 (vector-ref sc3 1))) (vector 1 (lambda (eta-2) (lambda (eta-3) (vector e-8 e-9 eta-2 eta-3)))))) (else (let ((e-11 (vector-ref sc3 1))) (vector 0 e-11))))))) (else (let ((e-11 (vector-ref sc2 1))) (vector 0 e-11))))))) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 (PackC-45CoreC-45TOML-valAtC-39 ((let ((eff-0 (lambda (eta-0) (lambda (eta-1) (PackC-45CoreC-45TOML-u--fromTOML_FromTOML_PkgVersion eta-0 eta-1))))) (lambda (arg-2) (lambda (arg-3) ((eff-0 arg-2) arg-3)))) arg-0) "idris2.version" '() arg-1))) (case (vector-ref sc2 0) ((1) (let ((e-8 (vector-ref sc2 1))) (vector 1 (e-5 e-8)))) (else (let ((e-11 (vector-ref sc2 1))) (vector 0 e-11))))))))))) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 (PackC-45CoreC-45TOML-valAtC-39 ((let ((eff-0 (lambda (eta-0) (lambda (eta-1) (PackC-45CoreC-45TOML-u--fromTOML_FromTOML_C-40C-40SortedMapC-32C-36kC-41C-32C-36vC-41 (cons (csegen-347) (lambda (u--k) (PackC-45CoreC-45TOML-u--fromKey_TOMLKey_PkgName u--k))) (lambda (arg-6250) (lambda (u--val) (PackC-45DatabaseC-45TOML-package (csegen-663) arg-6250 u--val))) eta-0 eta-1))))) (lambda (arg-2) (lambda (arg-3) ((eff-0 arg-2) arg-3)))) arg-0) "db" (box (csegen-357)) arg-1))) (case (vector-ref sc1 0) ((1) (let ((e-8 (vector-ref sc1 1))) (vector 1 (e-5 e-8)))) (else (let ((e-11 (vector-ref sc1 1))) (vector 0 e-11)))))))))))
(define PackC-45DatabaseC-45TOML-package (lambda (arg-1 arg-2 arg-3) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (PackC-45CoreC-45TOML-valAtC-39 ((let ((eff-0 (lambda (eta-0) (lambda (eta-1) (PackC-45CoreC-45TOML-u--fromTOML_FromTOML_String eta-0 eta-1))))) (lambda (arg-0) (lambda (arg-4) ((eff-0 arg-0) arg-4)))) arg-2) "type" '() arg-3) (lambda (lcase-0) (cond ((equal? lcase-0 "github") (PackC-45DatabaseC-45TOML-github arg-1 arg-2 arg-3)) ((equal? lcase-0 "local") (PackC-45DatabaseC-45TOML-local arg-2 arg-3))(else (vector 0 (vector 1 (cons "type" '()) "Package Type"))))))))
(define PackC-45DatabaseC-45TOML-local (lambda (arg-1 arg-2) (let ((sc0 (let ((sc1 (PackC-45CoreC-45TOML-valAtC-39 ((let ((eff-0 (lambda (eta-0) (lambda (eta-1) (PackC-45CoreC-45TOML-u--fromTOML_FromTOML_C-40PathC-32AbsC-41 eta-0 eta-1))))) (lambda (arg-0) (lambda (arg-3) ((eff-0 arg-0) arg-3)))) arg-1) "path" '() arg-2))) (case (vector-ref sc1 0) ((1) (let ((e-8 (vector-ref sc1 1))) (let ((sc2 (PackC-45CoreC-45TOML-valAtC-39 ((csegen-680) arg-1) "ipkg" '() arg-2))) (case (vector-ref sc2 0) ((1) (let ((e-9 (vector-ref sc2 1))) (vector 1 (lambda (eta-2) (vector 1 e-8 e-9 eta-2))))) (else (let ((e-11 (vector-ref sc2 1))) (vector 0 e-11))))))) (else (let ((e-11 (vector-ref sc1 1))) (vector 0 e-11))))))) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 (PackC-45CoreC-45TOML-valAtC-39 ((csegen-682) arg-1) "packagePath" (box 0) arg-2))) (case (vector-ref sc1 0) ((1) (let ((e-8 (vector-ref sc1 1))) (vector 1 (e-5 e-8)))) (else (let ((e-11 (vector-ref sc1 1))) (vector 0 e-11)))))))))))
(define PackC-45DatabaseC-45TOML-idrisRepo(blodwen-lazy (lambda () "https://github.com/idris-lang/Idris2.git")))
(define PackC-45DatabaseC-45TOML-github (lambda (arg-1 arg-2 arg-3) (let ((sc0 (let ((sc1 (let ((sc2 (PackC-45CoreC-45TOML-valAtC-39 ((csegen-662) arg-2) "url" '() arg-3))) (case (vector-ref sc2 0) ((1) (let ((e-8 (vector-ref sc2 1))) (let ((sc3 (PackC-45CoreC-45TOML-valAtC-39 ((let ((eff-0 arg-1)) (lambda (arg-0) (lambda (arg-4) ((eff-0 arg-0) arg-4)))) arg-2) "commit" '() arg-3))) (case (vector-ref sc3 0) ((1) (let ((e-9 (vector-ref sc3 1))) (vector 1 (lambda (eta-2) (lambda (eta-3) (vector 0 e-8 e-9 eta-2 eta-3)))))) (else (let ((e-11 (vector-ref sc3 1))) (vector 0 e-11))))))) (else (let ((e-11 (vector-ref sc2 1))) (vector 0 e-11))))))) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 (PackC-45CoreC-45TOML-valAtC-39 ((csegen-680) arg-2) "ipkg" '() arg-3))) (case (vector-ref sc2 0) ((1) (let ((e-8 (vector-ref sc2 1))) (vector 1 (e-5 e-8)))) (else (let ((e-11 (vector-ref sc2 1))) (vector 0 e-11))))))))))) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 (PackC-45CoreC-45TOML-valAtC-39 ((csegen-682) arg-2) "packagePath" (box 0) arg-3))) (case (vector-ref sc1 0) ((1) (let ((e-8 (vector-ref sc1 1))) (vector 1 (e-5 e-8)))) (else (let ((e-11 (vector-ref sc1 1))) (vector 0 e-11)))))))))))
(define PackC-45CoreC-45TOML-n--5572-6390-u--go (lambda (arg-1 arg-2 arg-3 arg-4 arg-5) (if (null? arg-4) (arg-3 arg-5) (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) (case (vector-ref arg-5 0) ((5) (let ((e-4 (vector-ref arg-5 1))) (let ((sc2 (DataC-45SortedMap-lookup e-2 e-4))) (if (null? sc2) (if (null? arg-1) (vector 0 (vector 0 (cons e-2 '()))) (let ((e-5 (unbox arg-1))) (vector 1 e-5))) (let ((e-5 (unbox sc2))) (PackC-45CoreC-45Types-prefixKey e-2 (PackC-45CoreC-45TOML-n--5572-6390-u--go arg-1 arg-2 arg-3 e-3 e-5)))))))(else (vector 0 (vector 1 '() "Table")))))))))
(define PackC-45CoreC-45TOML-u--fromTOML_FromTOML_URL (lambda (ext-1 ext-0) (PackC-45CoreC-45TOML-tmap (csegen-683) (lambda (eta-0) eta-0) ext-1 ext-0)))
(define PackC-45CoreC-45TOML-u--fromTOML_FromTOML_String (lambda (arg-0 arg-1) (case (vector-ref arg-1 0) ((0) (let ((e-0 (vector-ref arg-1 1))) (vector 1 e-0)))(else (vector 0 (vector 1 '() "String"))))))
(define PackC-45CoreC-45TOML-u--fromTOML_FromTOML_PkgVersion (lambda (ext-0 ext-1) (PackC-45CoreC-45TOML-trefine (csegen-683) (lambda (eta-0) (PackC-45CoreC-45TOML-readVersion eta-0)) ext-0 ext-1)))
(define PackC-45CoreC-45TOML-u--fromTOML_FromTOML_FilePath (lambda (ext-1 ext-0) (PackC-45CoreC-45TOML-tmap (csegen-683) (lambda (eta-0) (DataC-45FilePath-u--fromString_FromString_FilePath eta-0)) ext-1 ext-0)))
(define PackC-45CoreC-45TOML-u--fromTOML_FromTOML_Commit (lambda (ext-1 ext-0) (PackC-45CoreC-45TOML-tmap (csegen-683) (lambda (eta-0) eta-0) ext-1 ext-0)))
(define PackC-45CoreC-45TOML-u--fromTOML_FromTOML_Bool (lambda (arg-0 arg-1) (case (vector-ref arg-1 0) ((3) (let ((e-0 (vector-ref arg-1 1))) (vector 1 e-0)))(else (vector 0 (vector 1 '() "Bool"))))))
(define PackC-45CoreC-45TOML-u--fromTOML_FromTOML_C-40PathC-32AbsC-41 (lambda (arg-0 arg-1) (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (case (vector-ref eta-3 0) ((0) (let ((e-2 (vector-ref eta-3 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref eta-3 1))) (vector 1 (eta-2 e-5))))))))) (lambda (eta-0) (PackC-45CoreC-45Types-toAbsPath (let ((e-1 (car arg-0))) e-1) eta-0)) (PackC-45CoreC-45TOML-u--fromTOML_FromTOML_FilePath arg-0 arg-1))))
(define PackC-45CoreC-45TOML-u--fromTOML_FromTOML_C-40C-40SortedMapC-32C-36kC-41C-32C-36vC-41 (lambda (arg-2 arg-3 arg-4 arg-5) (case (vector-ref arg-5 0) ((5) (let ((e-0 (vector-ref arg-5 1))) (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (case (vector-ref eta-3 0) ((0) (let ((e-2 (vector-ref eta-3 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref eta-3 1))) (vector 1 (eta-2 e-5))))))))) (lambda (eta-0) (DataC-45SortedMap-fromList (let ((e-1 (car arg-2))) e-1) eta-0)) (PreludeC-45Types-u--traverse_Traversable_List (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (case (vector-ref arg-8737 0) ((0) (let ((e-2 (vector-ref arg-8737 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref arg-8737 1))) (vector 1 (u--func e-5))))))))) (lambda (u--a) (lambda (arg-9440) (vector 1 arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (case (vector-ref arg-9446 0) ((0) (let ((e-2 (vector-ref arg-9446 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref arg-9446 1))) (case (vector-ref arg-9453 0) ((1) (let ((e-8 (vector-ref arg-9453 1))) (vector 1 (e-5 e-8)))) (else (let ((e-11 (vector-ref arg-9453 1))) (vector 0 e-11)))))))))))) (lambda (eta-0) (PackC-45CoreC-45TOML-keyVal arg-2 ((let ((eff-0 arg-3)) (lambda (arg-0) (lambda (arg-1) ((eff-0 arg-0) arg-1)))) arg-4) eta-0)) (DataC-45SortedMap-toList e-0)))))(else (vector 0 (vector 1 '() "Table"))))))
(define PackC-45CoreC-45TOML-u--fromKey_TOMLKey_PkgName (lambda (ext-0) (vector 1 ext-0)))
(define PackC-45CoreC-45TOML-valAtC-39 (lambda (arg-1 arg-2 arg-3 ext-0) (PackC-45CoreC-45TOML-n--5572-6390-u--go arg-3 arg-2 arg-1 (DataC-45List1-forget (DataC-45String-split (csegen-480) arg-2)) ext-0)))
(define PackC-45CoreC-45TOML-trefine (lambda (arg-2 arg-3 arg-4 arg-5) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (((let ((eff-0 arg-2)) (lambda (arg-0) (lambda (arg-1) ((eff-0 arg-0) arg-1)))) arg-4) arg-5) arg-3)))
(define PackC-45CoreC-45TOML-toRelFile (lambda (arg-0) (let ((eff-0 arg-0)) (case (vector-ref eff-0 0) ((1) (let ((e-2 (vector-ref eff-0 1))) (if (null? e-2) (vector 0 (vector 1 '() "relative file path")) (let ((e-4 (car e-2))) (let ((e-5 (cdr e-2))) (vector 1 (cons (vector 1 e-4) e-5)))))))(else (vector 0 (vector 1 '() "relative file path")))))))
(define PackC-45CoreC-45TOML-tmap (lambda (arg-2 arg-3 arg-4 ext-0) (((let ((eff-0 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (case (vector-ref eta-3 0) ((0) (let ((e-2 (vector-ref eta-3 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref eta-3 1))) (vector 1 (eta-2 e-5))))))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-3) (((let ((eff-0 arg-2)) (lambda (arg-0) (lambda (arg-1) ((eff-0 arg-0) arg-1)))) arg-4) ext-0))))
(define PackC-45CoreC-45TOML-readVersion (lambda (arg-0) (let ((sc0 (DataC-45List1-u--traverse_Traversable_List1 (csegen-476) (lambda (eta-0) (DataC-45String-parsePositive (vector (lambda (arg-5756) (lambda (arg-5759) (+ arg-5756 arg-5759))) (lambda (arg-5766) (lambda (arg-5769) (* arg-5766 arg-5769))) (lambda (arg-5776) (PreludeC-45Types-prim__integerToNat arg-5776))) eta-0)) (DataC-45String-split (csegen-480) arg-0)))) (if (null? sc0) (vector 0 (vector 1 '() "Package Version")) (let ((e-1 (unbox sc0))) (vector 1 e-1))))))
(define PackC-45CoreC-45TOML-readTOML (lambda (arg-1 arg-2) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-read arg-1 arg-2) (lambda (u--str) (let ((sc0 (LanguageC-45TOML-parseTOML u--str))) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 1))) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) e-6)) (vector 5 e-2)))) (else (let ((e-5 (vector-ref sc0 1))) (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-6 1))) ((e-8 'erased) (vector 0 (vector 29 arg-2 (LanguageC-45TOML-u--show_Show_Error e-5)))))))))))))))
(define PackC-45CoreC-45TOML-readFromTOML (lambda (arg-1 arg-3 arg-4) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45TOML-readTOML arg-1 arg-4) (lambda (u--v) (ControlC-45MonadC-45ErrorC-45Interface-liftEither (vector (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-2204) (ControlC-45MonadC-45ErrorC-45Interface-u--throwError_MonadError_C-36e_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-2204))) (lambda (u--a) (lambda (arg-2210) (lambda (arg-2213) (ControlC-45MonadC-45ErrorC-45Either-catchE (let ((e-1 (car arg-1))) e-1) arg-2210 arg-2213))))) (let ((sc0 (((let ((eff-0 arg-3)) (lambda (arg-0) (lambda (arg-2) ((eff-0 arg-0) arg-2)))) arg-4) u--v))) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 (vector 28 arg-4 e-2)))) (else (let ((e-5 (vector-ref sc0 1))) (vector 1 e-5))))))))))
(define PackC-45CoreC-45TOML-keyVal (lambda (arg-2 arg-3 arg-4) (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) (PackC-45CoreC-45Types-prefixKey e-2 (let ((e-4 (cdr arg-2))) (let ((sc2 (e-4 e-2))) (case (vector-ref sc2 0) ((1) (let ((e-8 (vector-ref sc2 1))) (let ((sc3 (arg-3 e-3))) (case (vector-ref sc3 0) ((1) (let ((e-9 (vector-ref sc3 1))) (vector 1 (cons e-8 e-9)))) (else (let ((e-11 (vector-ref sc3 1))) (vector 0 e-11))))))) (else (let ((e-11 (vector-ref sc2 1))) (vector 0 e-11)))))))))))
(define LanguageC-45TOML-case--tableSetWithParts-5794 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (if (null? arg-5) (vector 1 (csegen-696)) (let ((e-2 (unbox arg-5))) (case (vector-ref e-2 0) ((5) (let ((e-3 (vector-ref e-2 1))) (vector 1 e-3)))(else (vector 0 (vector 0 arg-0 e-2))))))))
(define LanguageC-45TOML-n--4186-5907-u--loop (lambda (arg-0 arg-1 arg-2) (if (null? arg-2) (vector 1 arg-1) (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (let ((e-6 (car e-2))) (let ((e-7 (cdr e-2))) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (LanguageC-45TOML-cvalToVal e-7) (lambda (u--vC-39) (let ((u--parts (LanguageC-45TOML-keyParts e-6))) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (LanguageC-45TOML-tableSetWithParts arg-1 u--parts u--vC-39) (lambda (u--tC-39) (LanguageC-45TOML-n--4186-5907-u--loop arg-0 u--tC-39 e-3)))))))))))))
(define LanguageC-45TOML-n--3806-5515-u--loop (lambda (arg-0 arg-1 arg-2) (if (null? arg-2) '() (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (case (vector-ref e-2 0) ((1) (let ((e-4 (vector-ref e-2 1))) (LanguageC-45TOML-n--3806-5515-u--loop arg-0 (vector 1 e-4) e-3))) ((2) (let ((e-5 (vector-ref e-2 1))) (LanguageC-45TOML-n--3806-5515-u--loop arg-0 (vector 2 e-5) e-3)))(else (let ((sc1 (LanguageC-45TOML-takeWhileJust (lambda (eta-0) (LanguageC-45TOML-toPair eta-0)) arg-2))) (let ((e-5 (car sc1))) (let ((e-4 (cdr sc1))) (cons (cons arg-1 e-5) (LanguageC-45TOML-n--3806-5515-u--loop arg-0 arg-1 e-4))))))))))))
(define LanguageC-45TOML-u--show_Show_Error (lambda (arg-0) (case (vector-ref arg-0 0) ((0) (let ((e-0 (vector-ref arg-0 1))) (string-append "Dotted key part `" (string-append (PreludeC-45Show-u--show_Show_String e-0) "`is not a table")))) ((1) "Lexer error") ((2) (let ((e-2 (vector-ref arg-0 1))) (string-append "Parse error: " (PreludeC-45Show-u--show_Show_C-40ListC-32C-36aC-41 (cons (lambda (u--x) (PreludeC-45Show-u--show_Show_String u--x)) (lambda (u--d) (lambda (u--x) (PreludeC-45Show-u--showPrec_Show_String u--d u--x)))) e-2)))) (else "Unimplemented feature"))))
(define LanguageC-45TOML-u--C-61C-61_Eq_CKey (lambda (arg-0 arg-1) (DataC-45List1-u--C-61C-61_Eq_C-40List1C-32C-36aC-41 (csegen-218) (LanguageC-45TOML-keyParts arg-0) (LanguageC-45TOML-keyParts arg-1))))
(define LanguageC-45TOML-toPair (lambda (arg-0) (case (vector-ref arg-0 0) ((0) (let ((e-0 (vector-ref arg-0 1))) (let ((e-1 (vector-ref arg-0 2))) (box (cons e-0 e-1))))) ((1) '()) (else '()))))
(define LanguageC-45TOML-takeWhileJust (lambda (arg-2 arg-3) (if (null? arg-3) (cons '() '()) (let ((e-2 (car arg-3))) (let ((e-3 (cdr arg-3))) (let ((sc1 (arg-2 e-2))) (if (null? sc1) (cons '() (cons e-2 e-3)) (let ((e-4 (unbox sc1))) (let ((sc2 (LanguageC-45TOML-takeWhileJust arg-2 e-3))) (let ((e-6 (car sc2))) (let ((e-5 (cdr sc2))) (cons (cons e-4 e-6) e-5))))))))))))
(define LanguageC-45TOML-tableSetWithParts (lambda (arg-0 arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-2 (cdr arg-1))) (if (null? e-2) (vector 1 (DataC-45SortedMap-insert e-1 arg-2 arg-0)) (let ((e-5 (car e-2))) (let ((e-6 (cdr e-2))) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (LanguageC-45TOML-case--tableSetWithParts-5794 e-1 e-5 e-6 arg-2 arg-0 (DataC-45SortedMap-lookup e-1 arg-0)) (lambda (u--inner) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (LanguageC-45TOML-tableSetWithParts u--inner (cons e-5 e-6) arg-2) (lambda (u--innerC-39) (vector 1 (DataC-45SortedMap-insert e-1 (vector 5 u--innerC-39) arg-0)))))))))))))
(define LanguageC-45TOML-tableFromKVs (lambda (arg-0) (LanguageC-45TOML-n--4186-5907-u--loop arg-0 (csegen-696) arg-0)))
(define LanguageC-45TOML-sections (lambda (arg-0) (LanguageC-45TOML-n--3806-5515-u--loop arg-0 (vector 0 ) arg-0)))
(define LanguageC-45TOML-parseTOML (lambda (arg-0) (let ((sc0 (LanguageC-45TOMLC-45Lexer-lexTOML arg-0))) (if (null? sc0) (vector 0 (vector 1 )) (let ((e-1 (unbox sc0))) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (let ((sc1 (LanguageC-45TOMLC-45Parser-parseItems e-1))) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 (vector 2 e-2)))) (else (let ((e-5 (vector-ref sc1 1))) (vector 1 e-5))))) (lambda (u--items) (let ((u--sects (LanguageC-45TOML-sections u--items))) (LanguageC-45TOML-extendFile (csegen-696) u--sects)))))))))
(define LanguageC-45TOML-keyParts (lambda (arg-0) (case (vector-ref arg-0 0) ((0) (let ((e-0 (vector-ref arg-0 1))) (cons (LanguageC-45TOML-keyAtomStr e-0) '()))) (else (let ((e-1 (vector-ref arg-0 1))) (DataC-45List1-u--map_Functor_List1 (lambda (eta-0) (LanguageC-45TOML-keyAtomStr eta-0)) e-1))))))
(define LanguageC-45TOML-keyAtomStr (lambda (arg-0) (case (vector-ref arg-0 0) ((0) (let ((e-0 (vector-ref arg-0 1))) e-0)) (else (let ((e-1 (vector-ref arg-0 1))) e-1)))))
(define LanguageC-45TOML-extendFile (lambda (arg-0 arg-1) (if (null? arg-1) (vector 1 arg-0) (let ((e-2 (car arg-1))) (let ((e-3 (cdr arg-1))) (let ((e-6 (car e-2))) (let ((e-7 (cdr e-2))) (case (vector-ref e-6 0) ((0) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (LanguageC-45TOML-tableFromKVs e-7) (lambda (u--tab) (LanguageC-45TOML-extendFile (DataC-45SortedMap-mergeLeft u--tab arg-0) e-3)))) ((1) (let ((e-8 (vector-ref e-6 1))) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (LanguageC-45TOML-tableFromKVs e-7) (lambda (u--tab) (let ((u--kParts (LanguageC-45TOML-keyParts e-8))) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (LanguageC-45TOML-tableSetWithParts arg-0 u--kParts (vector 5 u--tab)) (lambda (u--fileC-39) (LanguageC-45TOML-extendFile u--fileC-39 e-3)))))))) (else (let ((e-9 (vector-ref e-6 1))) (let ((u--rest (cons (cons (vector 2 e-9) e-7) e-3))) (let ((sc3 (DataC-45List-partition (lambda (lamc-0) (let ((e-5 (car lamc-0))) (case (vector-ref e-5 0) ((2) (let ((e-0 (vector-ref e-5 1))) (LanguageC-45TOML-u--C-61C-61_Eq_CKey e-9 e-0)))(else 0)))) u--rest))) (let ((e-5 (car sc3))) (let ((e-4 (cdr sc3))) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (PreludeC-45Types-u--traverse_Traversable_List (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (case (vector-ref arg-8737 0) ((0) (let ((e-8 (vector-ref arg-8737 1))) (vector 0 e-8))) (else (let ((e-8 (vector-ref arg-8737 1))) (vector 1 (u--func e-8))))))))) (lambda (u--a) (lambda (arg-9440) (vector 1 arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (case (vector-ref arg-9446 0) ((0) (let ((e-8 (vector-ref arg-9446 1))) (vector 0 e-8))) (else (let ((e-8 (vector-ref arg-9446 1))) (case (vector-ref arg-9453 0) ((1) (let ((e-10 (vector-ref arg-9453 1))) (vector 1 (e-8 e-10)))) (else (let ((e-11 (vector-ref arg-9453 1))) (vector 0 e-11)))))))))))) (lambda (eta-0) (((let ((eff-0 (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (lambda (eta-4) (case (vector-ref eta-4 0) ((0) (let ((e-8 (vector-ref eta-4 1))) (vector 0 e-8))) (else (let ((e-8 (vector-ref eta-4 1))) (vector 1 (eta-3 e-8))))))))))) (lambda (arg-2) (lambda (arg-3) ((((eff-0 'erased) 'erased) arg-2) arg-3)))) (lambda (eta-1) (vector 5 eta-1))) (LanguageC-45TOML-tableFromKVs eta-0))) (((csegen-226) (lambda (eta-0) (Builtin-snd eta-0))) e-5)) (lambda (u--arrayC-39) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (LanguageC-45TOML-tableSetWithParts arg-0 (LanguageC-45TOML-keyParts e-9) (vector 4 u--arrayC-39)) (lambda (u--fileC-39) (LanguageC-45TOML-extendFile u--fileC-39 e-4)))))))))))))))))))
(define LanguageC-45TOML-cvalToVal (lambda (arg-0) (case (vector-ref arg-0 0) ((0) (let ((e-0 (vector-ref arg-0 1))) (vector 1 (vector 0 e-0)))) ((1) (let ((e-1 (vector-ref arg-0 1))) (vector 1 (vector 1 e-1)))) ((2) (let ((e-2 (vector-ref arg-0 1))) (vector 1 (vector 2 e-2)))) ((3) (let ((e-3 (vector-ref arg-0 1))) (vector 1 (vector 3 e-3)))) ((4) (let ((e-4 (vector-ref arg-0 1))) (((let ((eff-0 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (case (vector-ref eta-3 0) ((0) (let ((e-2 (vector-ref eta-3 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref eta-3 1))) (vector 1 (eta-2 e-5))))))))))) (lambda (arg-1) (lambda (arg-2) ((((eff-0 'erased) 'erased) arg-1) arg-2)))) (lambda (eta-0) (vector 4 eta-0))) (PreludeC-45Interfaces-for (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (case (vector-ref arg-8737 0) ((0) (let ((e-2 (vector-ref arg-8737 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref arg-8737 1))) (vector 1 (u--func e-5))))))))) (lambda (u--a) (lambda (arg-9440) (vector 1 arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (case (vector-ref arg-9446 0) ((0) (let ((e-2 (vector-ref arg-9446 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref arg-9446 1))) (case (vector-ref arg-9453 0) ((1) (let ((e-8 (vector-ref arg-9453 1))) (vector 1 (e-5 e-8)))) (else (let ((e-11 (vector-ref arg-9453 1))) (vector 0 e-11)))))))))))) (csegen-103) e-4 (lambda (eta-0) (LanguageC-45TOML-cvalToVal eta-0)))))) (else (let ((e-5 (vector-ref arg-0 1))) (((let ((eff-0 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (case (vector-ref eta-3 0) ((0) (let ((e-2 (vector-ref eta-3 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref eta-3 1))) (vector 1 (eta-2 e-6))))))))))) (lambda (arg-1) (lambda (arg-2) ((((eff-0 'erased) 'erased) arg-1) arg-2)))) (lambda (eta-0) (vector 5 eta-0))) (LanguageC-45TOML-tableFromKVs e-5)))))))
(define LanguageC-45TOMLC-45Parser-case--parseItems-9834 (lambda (arg-0 arg-1) (case (vector-ref arg-1 0) ((1) (let ((e-2 (vector-ref arg-1 1))) (if (null? e-2) (vector 0 (cons "unconsumed input" '())) (let ((e-8 (car e-2))) (let ((e-9 (cdr e-2))) (if (null? e-9) (vector 1 e-8) (vector 0 (cons "unconsumed input" '())))))))) (else (let ((e-5 (vector-ref arg-1 1))) (vector 0 (PreludeC-45Basics-flip (csegen-226) (DataC-45List1-forget e-5) (lambda (lamc-0) (let ((e-1 (car lamc-0))) (let ((e-2 (cdr lamc-0))) (if (null? e-2) e-1 (let ((e-3 (unbox e-2))) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons ((csegen-237) (PreludeC-45Show-u--show_Show_Int (let ((e-0 (vector-ref e-3 0))) e-0))) (cons (csegen-702) (cons ((csegen-237) (PreludeC-45Show-u--show_Show_Int (let ((e-7 (vector-ref e-3 1))) e-7))) (cons ((csegen-237) "--") (cons ((csegen-237) (PreludeC-45Show-u--show_Show_Int (let ((e-6 (vector-ref e-3 2))) e-6))) (cons (csegen-702) (cons ((csegen-237) (PreludeC-45Show-u--show_Show_Int (let ((e-4 (vector-ref e-3 3))) e-4))) (cons ((csegen-237) ": ") (cons ((csegen-237) e-1) '()))))))))))))))))))))))
(define LanguageC-45TOMLC-45Parser-n--3929-9311-u--keyAtom(blodwen-lazy (lambda () (vector 12 1 1 (((csegen-708) (lambda (eta-0) (vector 0 eta-0))) (LanguageC-45TOMLC-45Parser-bare)) (lambda () (((csegen-708) (lambda (eta-0) (vector 1 eta-0))) (LanguageC-45TOMLC-45Parser-fromEither 1 (vector 1 "string key" (lambda (eta-0) (LanguageC-45TOMLC-45Tokens-getKeyString eta-0))))))))))
(define LanguageC-45TOMLC-45Parser-value(blodwen-lazy (lambda () (vector 12 1 1 (LanguageC-45TOMLC-45Parser-string) (lambda () (vector 12 1 1 (LanguageC-45TOMLC-45Parser-boolean) (lambda () (vector 12 1 1 (LanguageC-45TOMLC-45Parser-integer) (lambda () (vector 12 1 1 (LanguageC-45TOMLC-45Parser-float) (lambda () (vector 12 1 1 (LanguageC-45TOMLC-45Parser-array) (lambda () (LanguageC-45TOMLC-45Parser-inlineTable))))))))))))))
(define LanguageC-45TOMLC-45Parser-tableHeader(blodwen-lazy (lambda () (vector 10 1 (LanguageC-45TOMLC-45Parser-punct (vector 4 0)) (lambda () (vector 8 1 (LanguageC-45TOMLC-45Parser-key) (lambda () (lambda (u--k) (vector 11 0 1 (vector 6 ) (vector 10 0 (LanguageC-45TOMLC-45Parser-punct (vector 4 1)) (lambda () (vector 11 0 0 (LanguageC-45TOMLC-45Parser-newlines) (vector 0 (vector 1 u--k))))))))))))))
(define LanguageC-45TOMLC-45Parser-tableArrayHeader(blodwen-lazy (lambda () (vector 10 1 (LanguageC-45TOMLC-45Parser-punct (vector 4 0)) (lambda () (vector 10 1 (LanguageC-45TOMLC-45Parser-punct (vector 4 0)) (lambda () (vector 11 0 1 (vector 6 ) (vector 8 1 (LanguageC-45TOMLC-45Parser-key) (lambda () (lambda (u--k) (vector 10 1 (LanguageC-45TOMLC-45Parser-punct (vector 4 1)) (lambda () (vector 10 0 (LanguageC-45TOMLC-45Parser-punct (vector 4 1)) (lambda () (vector 11 0 0 (LanguageC-45TOMLC-45Parser-newlines) (vector 0 (vector 2 u--k))))))))))))))))))
(define LanguageC-45TOMLC-45Parser-string(blodwen-lazy (lambda () (PreludeC-45Interfaces-C-60C-36C-62 (csegen-707) (lambda (eta-0) (vector 0 eta-0)) (LanguageC-45TOMLC-45Parser-fromEither 1 (vector 1 "string" (lambda (eta-0) (LanguageC-45TOMLC-45Tokens-getString eta-0))))))))
(define LanguageC-45TOMLC-45Parser-punct (lambda (arg-1) (TextC-45Parser-match (csegen-733) (csegen-736) (vector 4 arg-1))))
(define LanguageC-45TOMLC-45Parser-parseItems (lambda (arg-0) (LanguageC-45TOMLC-45Parser-case--parseItems-9834 arg-0 (TextC-45ParserC-45Core-parse 0 (LanguageC-45TOMLC-45Parser-items) (PreludeC-45TypesC-45List-filter (lambda (eta-0) (let ((sc0 (LanguageC-45TOMLC-45Tokens-ignored eta-0))) (cond ((equal? sc0 1) 0) (else 1)))) arg-0)))))
(define LanguageC-45TOMLC-45Parser-newlines(blodwen-lazy (lambda () (vector 12 1 0 (vector 8 0 (TextC-45Parser-some (LanguageC-45TOMLC-45Parser-punct (vector 3 ))) (lambda () (lambda (_-9192) (vector 0 (vector 0 ))))) (lambda () (vector 3 ))))))
(define LanguageC-45TOMLC-45Parser-maybeNewlines(blodwen-lazy (lambda () (vector 9 0 0 (TextC-45Parser-many (LanguageC-45TOMLC-45Parser-punct (vector 3 ))) (lambda (u--_) (vector 0 (vector 0 )))))))
(define LanguageC-45TOMLC-45Parser-keyValue(blodwen-lazy (lambda () (vector 8 1 (LanguageC-45TOMLC-45Parser-key) (lambda () (lambda (u--k) (vector 10 1 (LanguageC-45TOMLC-45Parser-punct (vector 2 )) (lambda () (vector 8 0 (LanguageC-45TOMLC-45Parser-value) (lambda () (lambda (u--v) (vector 11 0 0 (LanguageC-45TOMLC-45Parser-newlines) (vector 0 (vector 0 u--k u--v))))))))))))))
(define LanguageC-45TOMLC-45Parser-key(blodwen-lazy (lambda () (vector 8 0 (LanguageC-45TOMLC-45Parser-n--3929-9311-u--keyAtom) (lambda () (lambda (u--first) (vector 9 0 0 (TextC-45Parser-many (vector 9 1 1 ((csegen-749) (LanguageC-45TOMLC-45Parser-punct (vector 1 ))) (lambda (u--f) (((csegen-748) u--f) (LanguageC-45TOMLC-45Parser-n--3929-9311-u--keyAtom))))) (lambda (u--rest) (if (null? u--rest) (vector 0 (vector 0 u--first)) (vector 0 (vector 1 (cons u--first u--rest))))))))))))
(define LanguageC-45TOMLC-45Parser-items(blodwen-lazy (lambda () (vector 11 0 0 (LanguageC-45TOMLC-45Parser-maybeNewlines) (vector 9 0 0 (TextC-45Parser-many (LanguageC-45TOMLC-45Parser-item)) (lambda (u--is) (vector 11 0 0 (LanguageC-45TOMLC-45Parser-maybeNewlines) (vector 11 0 0 (vector 3 ) (vector 0 u--is)))))))))
(define LanguageC-45TOMLC-45Parser-item(blodwen-lazy (lambda () (vector 12 1 1 (LanguageC-45TOMLC-45Parser-keyValue) (lambda () (vector 12 1 1 (LanguageC-45TOMLC-45Parser-tableHeader) (lambda () (LanguageC-45TOMLC-45Parser-tableArrayHeader))))))))
(define LanguageC-45TOMLC-45Parser-integer(blodwen-lazy (lambda () (((csegen-708) (lambda (eta-0) (vector 1 eta-0))) (TextC-45Parser-match (csegen-733) (csegen-736) (vector 1 ))))))
(define LanguageC-45TOMLC-45Parser-inlineTable(blodwen-lazy (lambda () (vector 10 1 (LanguageC-45TOMLC-45Parser-punct (vector 5 0)) (lambda () (vector 11 0 1 (vector 6 ) (vector 9 0 1 (TextC-45Parser-sepBy 1 (LanguageC-45TOMLC-45Parser-punct (vector 0 )) (vector 8 1 (LanguageC-45TOMLC-45Parser-key) (lambda () (lambda (u--k) (vector 10 1 (LanguageC-45TOMLC-45Parser-punct (vector 2 )) (lambda () (vector 8 0 (LanguageC-45TOMLC-45Parser-value) (lambda () (lambda (u--v) (vector 0 (cons u--k u--v))))))))))) (lambda (u--vals) (vector 10 0 (LanguageC-45TOMLC-45Parser-punct (vector 5 1)) (lambda () (vector 0 (vector 5 u--vals))))))))))))
(define LanguageC-45TOMLC-45Parser-fromEither (lambda (arg-3 arg-4) (cond ((equal? arg-3 0) (vector 9 0 0 (vector 13 arg-4) (lambda (u--xb) (let ((e-1 (vector-ref u--xb 0))) (case (vector-ref e-1 0) ((1) (let ((e-4 (vector-ref e-1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref e-1 1))) (vector 4 (box (let ((e-4 (vector-ref u--xb 2))) e-4)) 0 e-5)))))))) (else (vector 8 0 (vector 13 arg-4) (lambda () (lambda (u--xb) (let ((e-1 (vector-ref u--xb 0))) (case (vector-ref e-1 0) ((1) (let ((e-4 (vector-ref e-1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref e-1 1))) (vector 4 (box (let ((e-4 (vector-ref u--xb 2))) e-4)) 0 e-5))))))))))))
(define LanguageC-45TOMLC-45Parser-float(blodwen-lazy (lambda () (((csegen-708) (lambda (eta-0) (vector 2 eta-0))) (TextC-45Parser-match (csegen-733) (csegen-736) (vector 2 ))))))
(define LanguageC-45TOMLC-45Parser-boolean(blodwen-lazy (lambda () (((csegen-708) (lambda (eta-0) (vector 3 eta-0))) (TextC-45Parser-match (csegen-733) (csegen-736) (vector 0 ))))))
(define LanguageC-45TOMLC-45Parser-bare(blodwen-lazy (lambda () (TextC-45Parser-match (csegen-733) (csegen-736) (vector 5 )))))
(define LanguageC-45TOMLC-45Parser-array(blodwen-lazy (lambda () (vector 10 1 (LanguageC-45TOMLC-45Parser-punct (vector 4 0)) (lambda () (vector 11 0 1 (vector 6 ) (vector 9 0 1 (TextC-45Parser-sepBy 1 (LanguageC-45TOMLC-45Parser-allowNewlines (LanguageC-45TOMLC-45Parser-punct (vector 0 ))) (LanguageC-45TOMLC-45Parser-allowNewlines (LanguageC-45TOMLC-45Parser-value))) (lambda (u--vals) (vector 10 0 (LanguageC-45TOMLC-45Parser-punct (vector 4 1)) (lambda () (vector 0 (vector 4 u--vals))))))))))))
(define LanguageC-45TOMLC-45Parser-allowNewlines (lambda (arg-2) (vector 9 1 0 (((csegen-748) (lambda (eta-0) (lambda (eta-1) eta-0))) (vector 9 0 1 (((csegen-786) (lambda (eta-0) (lambda (eta-1) eta-1))) (LanguageC-45TOMLC-45Parser-maybeNewlines)) (lambda (u--f) (((csegen-748) u--f) arg-2)))) (lambda (u--f) (((csegen-786) u--f) (LanguageC-45TOMLC-45Parser-maybeNewlines))))))
(define TextC-45Token-value (lambda (arg-1 arg-2) (let ((e-1 (car arg-2))) (let ((e-2 (cdr arg-2))) (let ((e-3 (cdr arg-1))) ((e-3 e-1) e-2))))))
(define TextC-45Parser-some (lambda (arg-3) (vector 8 0 arg-3 (lambda () (lambda (bind-0) (vector 9 0 0 (TextC-45Parser-many arg-3) (lambda (bind-1) (vector 0 (cons bind-0 bind-1)))))))))
(define TextC-45Parser-sepBy1 (lambda (arg-4 arg-5 arg-6) (vector 9 arg-4 0 (vector 9 0 arg-4 (vector 0 (csegen-222)) (lambda (u--f) (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 arg-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) u--f) arg-6))) (lambda (u--f) (((csegen-786) u--f) (TextC-45Parser-many (vector 9 1 arg-4 ((csegen-749) arg-5) (lambda (f-0) (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 arg-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) f-0) arg-6)))))))))
(define TextC-45Parser-sepBy (lambda (arg-4 arg-5 arg-6) (TextC-45Parser-option arg-4 '() (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 arg-4 eta-2 eta-3))))) (lambda (eta-0) (DataC-45List1-forget eta-0)) (TextC-45Parser-sepBy1 arg-4 arg-5 arg-6)))))
(define TextC-45Parser-option (lambda (arg-3 arg-4 arg-5) (cond ((equal? arg-3 0) (vector 12 0 0 arg-5 (lambda () (vector 0 arg-4)))) (else (vector 12 1 0 arg-5 (lambda () (vector 0 arg-4)))))))
(define TextC-45Parser-match (lambda (arg-2 arg-3 arg-4) (vector 1 "Unrecognised input" (lambda (u--t) (let ((sc0 (let ((e-1 (car arg-3))) ((e-1 (let ((e-4 (car u--t))) e-4)) arg-4)))) (cond ((equal? sc0 1) (box (let ((e-2 (cdr arg-2))) ((e-2 arg-4) (let ((e-3 (cdr u--t))) e-3))))) (else '())))))))
(define TextC-45Parser-many (lambda (arg-3) (TextC-45Parser-option 1 '() (PreludeC-45Interfaces-C-60C-36C-62 (csegen-707) (lambda (eta-0) (DataC-45List1-forget eta-0)) (TextC-45Parser-some arg-3)))))
(define TextC-45ParserC-45Core-case--doParse-5194 (lambda (arg-3 arg-5 arg-6 arg-7 arg-8 arg-10) (case (vector-ref arg-10 0) ((0) (let ((e-3 (vector-ref arg-10 1))) (let ((e-4 (vector-ref arg-10 2))) (let ((e-5 (vector-ref arg-10 3))) (vector 0 e-3 e-4 e-5))))) (else (let ((e-9 (vector-ref arg-10 1))) (let ((e-10 (vector-ref arg-10 2))) (let ((e-11 (vector-ref arg-10 3))) (let ((e-12 (vector-ref arg-10 4))) (vector 1 e-9 e-10 (PreludeC-45Interfaces-C-60C-36C-62 (csegen-793) (lambda (eta-0) e-11) e-11) e-12)))))))))
(define TextC-45ParserC-45Core-case--doParse-4881 (lambda (arg-3 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-12) (case (vector-ref arg-12 0) ((0) (let ((e-3 (vector-ref arg-12 1))) (let ((e-4 (vector-ref arg-12 2))) (let ((e-5 (vector-ref arg-12 3))) (vector 0 e-3 e-4 e-5))))) (else (let ((e-9 (vector-ref arg-12 1))) (let ((e-10 (vector-ref arg-12 2))) (let ((e-11 (vector-ref arg-12 3))) (let ((e-12 (vector-ref arg-12 4))) (TextC-45ParserC-45Core-mergeWith e-11 (TextC-45ParserC-45Core-doParse arg-3 e-9 e-10 ((arg-7) (let ((e-1 (vector-ref e-11 0))) e-1)) e-12))))))))))
(define TextC-45ParserC-45Core-case--doParse-4767 (lambda (arg-3 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-13) (case (vector-ref arg-13 0) ((0) (let ((e-3 (vector-ref arg-13 1))) (let ((e-4 (vector-ref arg-13 2))) (let ((e-5 (vector-ref arg-13 3))) (vector 0 e-3 e-4 e-5))))) (else (let ((e-9 (vector-ref arg-13 1))) (let ((e-10 (vector-ref arg-13 2))) (let ((e-11 (vector-ref arg-13 3))) (let ((e-12 (vector-ref arg-13 4))) (TextC-45ParserC-45Core-mergeWith e-11 (TextC-45ParserC-45Core-doParse arg-3 e-9 e-10 (arg-8 (let ((e-1 (vector-ref e-11 0))) e-1)) e-12))))))))))
(define TextC-45ParserC-45Core-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32doParse-4529 (lambda (arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-11 arg-12 arg-13 arg-14 arg-15) (case (vector-ref arg-15 0) ((0) (let ((e-3 (vector-ref arg-15 1))) (let ((e-4 (vector-ref arg-15 2))) (let ((e-5 (vector-ref arg-15 3))) (let ((sc1 (cond ((equal? e-3 1) 1) (else e-4)))) (cond ((equal? sc1 1) (vector 0 e-3 e-4 e-5)) (else (vector 0 0 0 (DataC-45List1-C-43C-43 arg-11 e-5))))))))) (else (let ((e-9 (vector-ref arg-15 1))) (let ((e-11 (vector-ref arg-15 3))) (let ((e-12 (vector-ref arg-15 4))) (vector 1 e-9 arg-9 e-11 e-12))))))))
(define TextC-45ParserC-45Core-case--doParse-4413 (lambda (arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-12) (case (vector-ref arg-12 0) ((0) (let ((e-3 (vector-ref arg-12 1))) (let ((e-4 (vector-ref arg-12 2))) (let ((e-5 (vector-ref arg-12 3))) (let ((sc1 (cond ((equal? e-3 1) 1) (else e-4)))) (cond ((equal? sc1 1) (vector 0 arg-10 e-4 e-5)) (else (TextC-45ParserC-45Core-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32doParse-4529 arg-3 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 e-5 e-4 e-3 arg-4 (TextC-45ParserC-45Core-doParse arg-3 arg-4 0 (arg-6) arg-9))))))))) (else (let ((e-9 (vector-ref arg-12 1))) (let ((e-11 (vector-ref arg-12 3))) (let ((e-12 (vector-ref arg-12 4))) (vector 1 e-9 arg-10 e-11 e-12))))))))
(define TextC-45ParserC-45Core-case--doParse-4048 (lambda (arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (case (vector-ref arg-9 0) ((0) (let ((e-3 (vector-ref arg-9 1))) (let ((e-5 (vector-ref arg-9 3))) (vector 0 e-3 1 e-5))))(else arg-9))))
(define TextC-45ParserC-45Core-case--doParse-3951 (lambda (arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (case (vector-ref arg-9 0) ((0) (let ((e-3 (vector-ref arg-9 1))) (let ((e-5 (vector-ref arg-9 3))) (vector 0 e-3 0 e-5))))(else arg-9))))
(define TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 (lambda (arg-4 arg-5 arg-6) (cond ((equal? arg-4 0) (case (vector-ref arg-6 0) ((0) (let ((e-65 (vector-ref arg-6 1))) (vector 0 (arg-5 e-65))))(else (case (vector-ref arg-6 0) ((4) (let ((e-49 (vector-ref arg-6 1))) (let ((e-50 (vector-ref arg-6 2))) (let ((e-51 (vector-ref arg-6 3))) (vector 4 e-49 e-50 e-51))))) ((5) (let ((e-56 (vector-ref arg-6 1))) (vector 5 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 arg-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-56)))) ((7) (let ((e-61 (vector-ref arg-6 1))) (vector 7 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 arg-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-61))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((1) (let ((e-43 (vector-ref arg-6 1))) (let ((e-44 (vector-ref arg-6 2))) (vector 1 e-43 (lambda (eta-0) (((csegen-230) arg-5) (e-44 eta-0)))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-36 (vector-ref arg-6 1))) (let ((e-37 (vector-ref arg-6 2))) (let ((e-38 (vector-ref arg-6 3))) (let ((e-39 (vector-ref arg-6 4))) (vector 12 e-36 e-37 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-36 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-38) (lambda () (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-37 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) (e-39)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((8) (let ((e-30 (vector-ref arg-6 1))) (let ((e-31 (vector-ref arg-6 2))) (let ((e-32 (vector-ref arg-6 3))) (vector 8 e-30 e-31 (lambda () (lambda (u--val) (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-30 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) ((e-32) u--val)))))))))(else (case (vector-ref arg-6 0) ((9) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 9 e-22 e-23 e-24 (lambda (u--val) (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((10) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 10 e-15 e-16 (lambda () (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) (e-17))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))))))(else (case (vector-ref arg-6 0) ((9) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 9 e-22 e-23 e-24 (lambda (u--val) (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((10) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 10 e-15 e-16 (lambda () (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) (e-17))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-36 (vector-ref arg-6 1))) (let ((e-37 (vector-ref arg-6 2))) (let ((e-38 (vector-ref arg-6 3))) (let ((e-39 (vector-ref arg-6 4))) (vector 12 e-36 e-37 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-36 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-38) (lambda () (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-37 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) (e-39)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((8) (let ((e-30 (vector-ref arg-6 1))) (let ((e-31 (vector-ref arg-6 2))) (let ((e-32 (vector-ref arg-6 3))) (vector 8 e-30 e-31 (lambda () (lambda (u--val) (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-30 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) ((e-32) u--val)))))))))(else (case (vector-ref arg-6 0) ((9) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 9 e-22 e-23 e-24 (lambda (u--val) (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((10) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 10 e-15 e-16 (lambda () (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) (e-17))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))))))(else (case (vector-ref arg-6 0) ((9) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 9 e-22 e-23 e-24 (lambda (u--val) (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((10) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 10 e-15 e-16 (lambda () (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) (e-17))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))))))))))))))(else (case (vector-ref arg-6 0) ((4) (let ((e-49 (vector-ref arg-6 1))) (let ((e-50 (vector-ref arg-6 2))) (let ((e-51 (vector-ref arg-6 3))) (vector 4 e-49 e-50 e-51))))) ((5) (let ((e-56 (vector-ref arg-6 1))) (vector 5 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 arg-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-56)))) ((7) (let ((e-61 (vector-ref arg-6 1))) (vector 7 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 arg-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-61))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((1) (let ((e-43 (vector-ref arg-6 1))) (let ((e-44 (vector-ref arg-6 2))) (vector 1 e-43 (lambda (eta-0) (((csegen-230) arg-5) (e-44 eta-0)))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-36 (vector-ref arg-6 1))) (let ((e-37 (vector-ref arg-6 2))) (let ((e-38 (vector-ref arg-6 3))) (let ((e-39 (vector-ref arg-6 4))) (vector 12 e-36 e-37 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-36 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-38) (lambda () (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-37 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) (e-39)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((8) (let ((e-30 (vector-ref arg-6 1))) (let ((e-31 (vector-ref arg-6 2))) (let ((e-32 (vector-ref arg-6 3))) (vector 8 e-30 e-31 (lambda () (lambda (u--val) (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-30 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) ((e-32) u--val)))))))))(else (case (vector-ref arg-6 0) ((9) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 9 e-22 e-23 e-24 (lambda (u--val) (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((10) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 10 e-15 e-16 (lambda () (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) (e-17))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))))))(else (case (vector-ref arg-6 0) ((9) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 9 e-22 e-23 e-24 (lambda (u--val) (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((10) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 10 e-15 e-16 (lambda () (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) (e-17))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-36 (vector-ref arg-6 1))) (let ((e-37 (vector-ref arg-6 2))) (let ((e-38 (vector-ref arg-6 3))) (let ((e-39 (vector-ref arg-6 4))) (vector 12 e-36 e-37 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-36 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-38) (lambda () (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-37 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) (e-39)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((8) (let ((e-30 (vector-ref arg-6 1))) (let ((e-31 (vector-ref arg-6 2))) (let ((e-32 (vector-ref arg-6 3))) (vector 8 e-30 e-31 (lambda () (lambda (u--val) (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-30 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) ((e-32) u--val)))))))))(else (case (vector-ref arg-6 0) ((9) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 9 e-22 e-23 e-24 (lambda (u--val) (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((10) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 10 e-15 e-16 (lambda () (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) (e-17))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))))))(else (case (vector-ref arg-6 0) ((9) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 9 e-22 e-23 e-24 (lambda (u--val) (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((10) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 10 e-15 e-16 (lambda () (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) (e-17))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (((let ((eff-0 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 u--func arg-8737))))))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) arg-5) e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0))))))))))))))))))))))))
(define TextC-45ParserC-45Core-parse (lambda (arg-2 arg-3 arg-4) (let ((sc0 (TextC-45ParserC-45Core-doParse (lambda (eta-0) (lambda (eta-1) (vector 0 ))) (vector 0 ) 0 arg-3 arg-4))) (case (vector-ref sc0 0) ((0) (let ((e-5 (vector-ref sc0 3))) (vector 0 e-5))) (else (let ((e-11 (vector-ref sc0 3))) (let ((e-12 (vector-ref sc0 4))) (vector 1 (cons (let ((e-1 (vector-ref e-11 0))) e-1) e-12)))))))))
(define TextC-45ParserC-45Core-mergeWith (lambda (arg-4 arg-5) (case (vector-ref arg-5 0) ((1) (let ((e-3 (vector-ref arg-5 1))) (let ((e-4 (vector-ref arg-5 2))) (let ((e-5 (vector-ref arg-5 3))) (let ((e-6 (vector-ref arg-5 4))) (vector 1 e-3 e-4 (TextC-45Bounded-mergeBounds arg-4 e-5) e-6))))))(else arg-5))))
(define TextC-45ParserC-45Core-doParse (lambda (arg-4 arg-5 arg-6 arg-7 arg-8) (case (vector-ref arg-7 0) ((0) (let ((e-3 (vector-ref arg-7 1))) (vector 1 arg-5 arg-6 (TextC-45Bounded-irrelevantBounds e-3) arg-8))) ((4) (let ((e-8 (vector-ref arg-7 1))) (let ((e-9 (vector-ref arg-7 2))) (let ((e-10 (vector-ref arg-7 3))) (vector 0 arg-6 e-9 (cons (cons e-10 (PreludeC-45Types-u--C-60C-124C-62_Alternative_Maybe e-8 (lambda () (PreludeC-45Interfaces-C-60C-36C-62 (csegen-229) (lambda (eta-0) (let ((e-3 (vector-ref eta-0 2))) e-3)) (DataC-45List-headC-39 arg-8))))) '())))))) ((5) (let ((e-15 (vector-ref arg-7 1))) (TextC-45ParserC-45Core-case--doParse-3951 arg-4 arg-5 e-15 arg-8 arg-6 (TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 e-15 arg-8)))) ((6) (vector 1 arg-5 1 (TextC-45Bounded-irrelevantBounds (vector 0 )) arg-8)) ((7) (let ((e-22 (vector-ref arg-7 1))) (TextC-45ParserC-45Core-case--doParse-4048 arg-4 arg-5 e-22 arg-8 arg-6 (TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 e-22 arg-8)))) ((1) (let ((e-26 (vector-ref arg-7 1))) (let ((e-27 (vector-ref arg-7 2))) (if (null? arg-8) (vector 0 arg-6 0 (csegen-796)) (let ((e-81 (car arg-8))) (let ((e-82 (cdr arg-8))) (let ((sc2 (e-27 (let ((e-1 (vector-ref e-81 0))) e-1)))) (if (null? sc2) (vector 0 arg-6 0 (cons (cons e-26 (box (let ((e-3 (vector-ref e-81 2))) e-3))) '())) (let ((e-2 (unbox sc2))) (vector 1 arg-5 arg-6 (PreludeC-45Interfaces-C-60C-36C-62 (csegen-793) (lambda (eta-0) e-2) e-81) e-82)))))))))) ((3) (if (null? arg-8) (vector 1 arg-5 arg-6 (TextC-45Bounded-irrelevantBounds (vector 0 )) '()) (let ((e-85 (car arg-8))) (vector 0 arg-6 0 (cons (cons (csegen-463) (box (let ((e-3 (vector-ref e-85 2))) e-3))) '()))))) ((2) (let ((e-32 (vector-ref arg-7 1))) (let ((e-33 (vector-ref arg-7 2))) (if (null? arg-8) (vector 0 arg-6 0 (csegen-796)) (let ((e-89 (car arg-8))) (let ((e-90 (cdr arg-8))) (let ((sc2 (e-33 (let ((e-1 (vector-ref e-89 0))) e-1)))) (cond ((equal? sc2 1) (vector 1 arg-5 arg-6 (TextC-45Bounded-removeIrrelevance e-89) (cons e-89 e-90))) (else (vector 0 arg-6 0 (cons (cons e-32 (box (let ((e-3 (vector-ref e-89 2))) e-3))) '()))))))))))) ((12) (let ((e-37 (vector-ref arg-7 1))) (let ((e-38 (vector-ref arg-7 2))) (let ((e-39 (vector-ref arg-7 3))) (let ((e-40 (vector-ref arg-7 4))) (TextC-45ParserC-45Core-case--doParse-4413 arg-4 arg-5 e-38 e-40 e-37 e-39 arg-8 arg-6 (TextC-45ParserC-45Core-doParse arg-4 arg-5 0 e-39 arg-8))))))) ((9) (let ((e-45 (vector-ref arg-7 1))) (let ((e-46 (vector-ref arg-7 2))) (let ((e-47 (vector-ref arg-7 3))) (let ((e-48 (vector-ref arg-7 4))) (TextC-45ParserC-45Core-case--doParse-4767 arg-4 e-45 e-46 arg-5 e-48 e-47 arg-8 arg-6 (TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 e-47 arg-8))))))) ((8) (let ((e-53 (vector-ref arg-7 1))) (let ((e-54 (vector-ref arg-7 2))) (let ((e-55 (vector-ref arg-7 3))) (TextC-45ParserC-45Core-case--doParse-4881 arg-4 e-53 arg-5 e-55 e-54 arg-8 arg-6 (TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 e-54 arg-8)))))) ((11) (let ((e-61 (vector-ref arg-7 3))) (let ((e-62 (vector-ref arg-7 4))) (let ((sc1 (TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 e-61 arg-8))) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (let ((e-4 (vector-ref sc1 2))) (let ((e-5 (vector-ref sc1 3))) (vector 0 e-3 e-4 e-5))))) (else (let ((e-9 (vector-ref sc1 1))) (let ((e-10 (vector-ref sc1 2))) (let ((e-11 (vector-ref sc1 3))) (let ((e-12 (vector-ref sc1 4))) (TextC-45ParserC-45Core-mergeWith e-11 (TextC-45ParserC-45Core-doParse arg-4 e-9 e-10 e-62 e-12)))))))))))) ((10) (let ((e-67 (vector-ref arg-7 2))) (let ((e-68 (vector-ref arg-7 3))) (let ((sc1 (TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 e-67 arg-8))) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (let ((e-4 (vector-ref sc1 2))) (let ((e-5 (vector-ref sc1 3))) (vector 0 e-3 e-4 e-5))))) (else (let ((e-9 (vector-ref sc1 1))) (let ((e-10 (vector-ref sc1 2))) (let ((e-11 (vector-ref sc1 3))) (let ((e-12 (vector-ref sc1 4))) (TextC-45ParserC-45Core-mergeWith e-11 (TextC-45ParserC-45Core-doParse arg-4 e-9 e-10 (e-68) e-12)))))))))))) ((13) (let ((e-73 (vector-ref arg-7 1))) (TextC-45ParserC-45Core-case--doParse-5194 arg-4 arg-5 e-73 arg-8 arg-6 (TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 e-73 arg-8)))) ((14) (if (null? arg-8) (vector 0 arg-6 0 (csegen-796)) (let ((e-93 (car arg-8))) (let ((e-94 (cdr arg-8))) (vector 1 arg-5 arg-6 (TextC-45Bounded-irrelevantBounds (let ((e-3 (vector-ref e-93 2))) e-3)) (cons e-93 e-94)))))) (else (let ((e-78 (vector-ref arg-7 1))) (vector 1 (((let ((eff-0 arg-4)) (lambda (arg-0) (lambda (arg-1) ((eff-0 arg-0) arg-1)))) arg-5) e-78) arg-6 (TextC-45Bounded-irrelevantBounds (vector 0 )) arg-8))))))
(define TextC-45Bounded-u--map_Functor_WithBounds (lambda (arg-2 arg-3) (let ((e-1 (vector-ref arg-3 0))) (let ((e-2 (vector-ref arg-3 1))) (let ((e-3 (vector-ref arg-3 2))) (vector (arg-2 e-1) e-2 e-3))))))
(define TextC-45Bounded-startBounds (lambda (arg-0) (cons (let ((e-0 (vector-ref arg-0 0))) e-0) (let ((e-1 (vector-ref arg-0 1))) e-1))))
(define TextC-45Bounded-start (lambda (ext-0) (TextC-45Bounded-startBounds (let ((e-3 (vector-ref ext-0 2))) e-3))))
(define TextC-45Bounded-removeIrrelevance (lambda (arg-1) (let ((e-1 (vector-ref arg-1 0))) (let ((e-3 (vector-ref arg-1 2))) (vector e-1 1 e-3)))))
(define TextC-45Bounded-mergeBounds (lambda (arg-2 arg-3) (let ((e-6 (vector-ref arg-2 1))) (cond ((equal? e-6 1) (let ((e-9 (vector-ref arg-3 0))) (let ((e-10 (vector-ref arg-3 1))) (cond ((equal? e-10 1) (TextC-45Bounded-irrelevantBounds e-9))(else arg-3)))))(else (let ((e-1 (vector-ref arg-3 0))) (let ((e-2 (vector-ref arg-3 1))) (cond ((equal? e-2 1) (PreludeC-45Interfaces-C-60C-36C-62 (csegen-799) (lambda (eta-0) e-1) arg-2))(else (let ((sc0 (PreludeC-45EqOrd-u--min_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (csegen-120) (csegen-120) (TextC-45Bounded-start arg-2) (TextC-45Bounded-start arg-3)))) (let ((e-8 (car sc0))) (let ((e-4 (cdr sc0))) (let ((sc1 (PreludeC-45EqOrd-u--max_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (csegen-120) (csegen-120) (TextC-45Bounded-end arg-2) (TextC-45Bounded-end arg-3)))) (let ((e-10 (car sc1))) (let ((e-9 (cdr sc1))) (vector (let ((e-13 (vector-ref arg-3 0))) e-13) 0 (vector e-8 e-4 e-10 e-9)))))))))))))))))
(define TextC-45Bounded-irrelevantBounds (lambda (arg-1) (vector arg-1 1 (vector -1 -1 -1 -1))))
(define TextC-45Bounded-endBounds (lambda (arg-0) (cons (let ((e-2 (vector-ref arg-0 2))) e-2) (let ((e-3 (vector-ref arg-0 3))) e-3))))
(define TextC-45Bounded-end (lambda (ext-0) (TextC-45Bounded-endBounds (let ((e-3 (vector-ref ext-0 2))) e-3))))
(define LanguageC-45TOMLC-45Tokens-n--3502-1835-u--unicodeEscape (lambda (arg-0 arg-1 arg-2) (if (null? arg-1) (vector 1 (cast-int-char arg-2)) (let ((e-2 (car arg-1))) (let ((e-3 (cdr arg-1))) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (LanguageC-45TOMLC-45Tokens-n--3502-1834-u--hexToInt arg-0 e-2) (lambda (u--x) (LanguageC-45TOMLC-45Tokens-n--3502-1835-u--unicodeEscape arg-0 e-3 (bs+ (bs* arg-2 16 63) u--x 63)))))))))
(define LanguageC-45TOMLC-45Tokens-n--3502-1836-u--loop (lambda (arg-0 arg-1) (if (null? arg-1) (vector 0 "unexpected end of input") (let ((e-2 (car arg-1))) (let ((e-3 (cdr arg-1))) (cond ((equal? e-2 #\") (vector 1 '())) ((equal? e-2 #\\) (if (null? e-3) (vector 0 "invalid escape code") (let ((e-5 (car e-3))) (let ((e-6 (cdr e-3))) (cond ((equal? e-5 #\b) (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (case (vector-ref eta-3 0) ((0) (let ((e-4 (vector-ref eta-3 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref eta-3 1))) (vector 1 (eta-2 e-7))))))))) (lambda (arg-2) (cons (integer->char 8) arg-2)) (LanguageC-45TOMLC-45Tokens-n--3502-1836-u--loop arg-0 e-6))) ((equal? e-5 #\t) (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (case (vector-ref eta-3 0) ((0) (let ((e-4 (vector-ref eta-3 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref eta-3 1))) (vector 1 (eta-2 e-7))))))))) (lambda (arg-2) (cons (integer->char 9) arg-2)) (LanguageC-45TOMLC-45Tokens-n--3502-1836-u--loop arg-0 e-6))) ((equal? e-5 #\n) (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (case (vector-ref eta-3 0) ((0) (let ((e-4 (vector-ref eta-3 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref eta-3 1))) (vector 1 (eta-2 e-7))))))))) (lambda (arg-2) (cons (integer->char 10) arg-2)) (LanguageC-45TOMLC-45Tokens-n--3502-1836-u--loop arg-0 e-6))) ((equal? e-5 #\f) (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (case (vector-ref eta-3 0) ((0) (let ((e-4 (vector-ref eta-3 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref eta-3 1))) (vector 1 (eta-2 e-7))))))))) (lambda (arg-2) (cons (integer->char 12) arg-2)) (LanguageC-45TOMLC-45Tokens-n--3502-1836-u--loop arg-0 e-6))) ((equal? e-5 #\r) (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (case (vector-ref eta-3 0) ((0) (let ((e-4 (vector-ref eta-3 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref eta-3 1))) (vector 1 (eta-2 e-7))))))))) (lambda (arg-2) (cons (integer->char 13) arg-2)) (LanguageC-45TOMLC-45Tokens-n--3502-1836-u--loop arg-0 e-6))) ((equal? e-5 #\") (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (case (vector-ref eta-3 0) ((0) (let ((e-4 (vector-ref eta-3 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref eta-3 1))) (vector 1 (eta-2 e-7))))))))) (lambda (arg-2) (cons #\" arg-2)) (LanguageC-45TOMLC-45Tokens-n--3502-1836-u--loop arg-0 e-6))) ((equal? e-5 #\\) (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (case (vector-ref eta-3 0) ((0) (let ((e-4 (vector-ref eta-3 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref eta-3 1))) (vector 1 (eta-2 e-7))))))))) (lambda (arg-2) (cons #\\ arg-2)) (LanguageC-45TOMLC-45Tokens-n--3502-1836-u--loop arg-0 e-6))) ((equal? e-5 #\u) (if (null? e-6) (vector 0 "invalid escape code") (let ((e-8 (car e-6))) (let ((e-9 (cdr e-6))) (if (null? e-9) (vector 0 "invalid escape code") (let ((e-11 (car e-9))) (let ((e-12 (cdr e-9))) (if (null? e-12) (vector 0 "invalid escape code") (let ((e-14 (car e-12))) (let ((e-15 (cdr e-12))) (if (null? e-15) (vector 0 "invalid escape code") (let ((e-17 (car e-15))) (let ((e-18 (cdr e-15))) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (LanguageC-45TOMLC-45Tokens-n--3502-1835-u--unicodeEscape arg-0 (cons e-8 (cons e-11 (cons e-14 (cons e-17 '())))) 0) (lambda (u--c) (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (case (vector-ref eta-3 0) ((0) (let ((e-4 (vector-ref eta-3 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref eta-3 1))) (vector 1 (eta-2 e-7))))))))) (lambda (arg-2) (cons u--c arg-2)) (LanguageC-45TOMLC-45Tokens-n--3502-1836-u--loop arg-0 e-18))))))))))))))))) ((equal? e-5 #\U) (if (null? e-6) (vector 0 "invalid escape code") (let ((e-20 (car e-6))) (let ((e-21 (cdr e-6))) (if (null? e-21) (vector 0 "invalid escape code") (let ((e-23 (car e-21))) (let ((e-24 (cdr e-21))) (if (null? e-24) (vector 0 "invalid escape code") (let ((e-26 (car e-24))) (let ((e-27 (cdr e-24))) (if (null? e-27) (vector 0 "invalid escape code") (let ((e-29 (car e-27))) (let ((e-30 (cdr e-27))) (if (null? e-30) (vector 0 "invalid escape code") (let ((e-32 (car e-30))) (let ((e-33 (cdr e-30))) (if (null? e-33) (vector 0 "invalid escape code") (let ((e-35 (car e-33))) (let ((e-36 (cdr e-33))) (if (null? e-36) (vector 0 "invalid escape code") (let ((e-38 (car e-36))) (let ((e-39 (cdr e-36))) (if (null? e-39) (vector 0 "invalid escape code") (let ((e-41 (car e-39))) (let ((e-42 (cdr e-39))) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (LanguageC-45TOMLC-45Tokens-n--3502-1835-u--unicodeEscape arg-0 (cons e-20 (cons e-23 (cons e-26 (cons e-29 (cons e-32 (cons e-35 (cons e-38 (cons e-41 '())))))))) 0) (lambda (u--c) (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (case (vector-ref eta-3 0) ((0) (let ((e-4 (vector-ref eta-3 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref eta-3 1))) (vector 1 (eta-2 e-7))))))))) (lambda (arg-2) (cons u--c arg-2)) (LanguageC-45TOMLC-45Tokens-n--3502-1836-u--loop arg-0 e-42)))))))))))))))))))))))))))))(else (vector 0 "invalid escape code")))))))(else (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (case (vector-ref eta-3 0) ((0) (let ((e-4 (vector-ref eta-3 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref eta-3 1))) (vector 1 (eta-2 e-5))))))))) (lambda (arg-2) (cons e-2 arg-2)) (LanguageC-45TOMLC-45Tokens-n--3502-1836-u--loop arg-0 e-3)))))))))
(define LanguageC-45TOMLC-45Tokens-n--3502-1834-u--hexToInt (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45Types-isHexDigit arg-1))) (cond ((equal? sc0 1) (vector 1 (let ((sc1 (let ((sc2 (PreludeC-45EqOrd-u--C-60C-61_Ord_Char #\0 arg-1))) (cond ((equal? sc2 1) (PreludeC-45EqOrd-u--C-60C-61_Ord_Char arg-1 #\9)) (else 0))))) (cond ((equal? sc1 1) (bs- (cast-char-boundedInt arg-1 63) (cast-char-boundedInt #\0 63) 63)) (else (bs- (cast-char-boundedInt (PreludeC-45Types-toLower arg-1) 63) (cast-char-boundedInt #\a 63) 63)))))) (else (vector 0 (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "invalid hex character: '" (cons (PreludeC-45Cast-u--cast_Cast_Char_String arg-1) (cons "'" '()))))))))))
(define LanguageC-45TOMLC-45Tokens-u--tokValue_TokenKind_TOMLTokenKind (lambda (arg-0 arg-1) (case (vector-ref arg-0 0) ((0) (PreludeC-45EqOrd-u--C-61C-61_Eq_String arg-1 "true")) ((1) (LanguageC-45TOMLC-45Tokens-parseInt (PreludeC-45Types-fastUnpack arg-1))) ((2) (LanguageC-45TOMLC-45TokensC-45Float-parseFloat arg-1)) ((3) (let ((e-0 (vector-ref arg-0 1))) (cond ((equal? e-0 0) (((let ((eff-0 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (case (vector-ref eta-3 0) ((0) (let ((e-2 (vector-ref eta-3 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref eta-3 1))) (vector 1 (eta-2 e-5))))))))))) (lambda (arg-2) (lambda (arg-3) ((((eff-0 'erased) 'erased) arg-2) arg-3)))) (lambda (eta-0) (PreludeC-45Types-fastPack eta-0))) (LanguageC-45TOMLC-45Tokens-unescapeBasic (PreludeC-45Types-fastUnpack arg-1)))) ((equal? e-0 1) (vector 0 "unimplemted string type: literal")) ((equal? e-0 2) (vector 0 "unimplemted string type: basic multiline")) (else (vector 0 "unimplemted string type: literal multiline"))))) ((4) (vector 0 )) ((5) arg-1) (else (vector 0 )))))
(define LanguageC-45TOMLC-45Tokens-u--TokType_TokenKind_TOMLTokenKind (lambda (arg-0) (case (vector-ref arg-0 0) ((0) (vector "Prelude.Basics.Bool" )) ((1) (vector "Integer" )) ((2) (vector "Double" )) ((3) (vector "Prelude.Types.Either" (vector "String" ) (vector "String" ))) ((4) (vector "Builtin.Unit" )) ((5) (vector "String" )) (else (vector "Builtin.Unit" )))))
(define LanguageC-45TOMLC-45Tokens-u--C-61C-61_Eq_TOMLTokenKind (lambda (arg-0 arg-1) (case (vector-ref arg-0 0) ((0) (case (vector-ref arg-1 0) ((0) 1)(else 0))) ((1) (case (vector-ref arg-1 0) ((1) 1)(else 0))) ((2) (case (vector-ref arg-1 0) ((2) 1)(else 0))) ((3) (let ((e-0 (vector-ref arg-0 1))) (case (vector-ref arg-1 0) ((3) (let ((e-2 (vector-ref arg-1 1))) (LanguageC-45TOMLC-45Tokens-u--C-61C-61_Eq_StringType e-0 e-2)))(else 0)))) ((4) (let ((e-1 (vector-ref arg-0 1))) (case (vector-ref arg-1 0) ((4) (let ((e-3 (vector-ref arg-1 1))) (LanguageC-45TOMLC-45Tokens-u--C-61C-61_Eq_Punctuation e-1 e-3)))(else 0)))) ((5) (case (vector-ref arg-1 0) ((5) 1)(else 0))) ((6) (case (vector-ref arg-1 0) ((6) 1)(else 0)))(else 0))))
(define LanguageC-45TOMLC-45Tokens-u--C-61C-61_Eq_StringType (lambda (arg-0 arg-1) (cond ((equal? arg-0 0) (cond ((equal? arg-1 0) 1)(else 0))) ((equal? arg-0 1) (cond ((equal? arg-1 1) 1)(else 0))) ((equal? arg-0 2) (cond ((equal? arg-1 2) 1)(else 0))) ((equal? arg-0 3) (cond ((equal? arg-1 3) 1)(else 0)))(else 0))))
(define LanguageC-45TOMLC-45Tokens-u--C-61C-61_Eq_Punctuation (lambda (arg-0 arg-1) (case (vector-ref arg-0 0) ((0) (case (vector-ref arg-1 0) ((0) 1)(else 0))) ((1) (case (vector-ref arg-1 0) ((1) 1)(else 0))) ((2) (case (vector-ref arg-1 0) ((2) 1)(else 0))) ((3) (case (vector-ref arg-1 0) ((3) 1)(else 0))) ((4) (let ((e-0 (vector-ref arg-0 1))) (case (vector-ref arg-1 0) ((4) (let ((e-2 (vector-ref arg-1 1))) (LanguageC-45TOMLC-45Tokens-u--C-61C-61_Eq_Bracket e-0 e-2)))(else 0)))) ((5) (let ((e-1 (vector-ref arg-0 1))) (case (vector-ref arg-1 0) ((5) (let ((e-3 (vector-ref arg-1 1))) (LanguageC-45TOMLC-45Tokens-u--C-61C-61_Eq_Bracket e-1 e-3)))(else 0))))(else 0))))
(define LanguageC-45TOMLC-45Tokens-u--C-61C-61_Eq_Bracket (lambda (arg-0 arg-1) (cond ((equal? arg-0 0) (cond ((equal? arg-1 0) 1)(else 0))) ((equal? arg-0 1) (cond ((equal? arg-1 1) 1)(else 0)))(else 0))))
(define LanguageC-45TOMLC-45Tokens-u--C-47C-61_Eq_TOMLTokenKind (lambda (arg-0 arg-1) (let ((sc0 (LanguageC-45TOMLC-45Tokens-u--C-61C-61_Eq_TOMLTokenKind arg-0 arg-1))) (cond ((equal? sc0 1) 0) (else 1)))))
(define LanguageC-45TOMLC-45Tokens-unescapeBasic (lambda (arg-0) (if (null? arg-0) (vector 0 "expected quote") (let ((e-1 (car arg-0))) (let ((e-2 (cdr arg-0))) (cond ((equal? e-1 #\") (LanguageC-45TOMLC-45Tokens-n--3502-1836-u--loop e-2 e-2))(else (vector 0 "expected quote"))))))))
(define LanguageC-45TOMLC-45Tokens-parseWithSign (lambda (arg-0 arg-1) (if (null? arg-0) 0 (let ((e-2 (car arg-0))) (let ((e-3 (cdr arg-0))) (cond ((equal? e-2 #\0) (if (null? e-3) (LanguageC-45TOMLC-45Tokens-parseIntLoop arg-1 10 arg-0 0) (let ((e-5 (car e-3))) (let ((e-6 (cdr e-3))) (cond ((equal? e-5 #\b) (LanguageC-45TOMLC-45Tokens-parseIntLoop arg-1 2 e-6 0)) ((equal? e-5 #\o) (LanguageC-45TOMLC-45Tokens-parseIntLoop arg-1 8 e-6 0)) ((equal? e-5 #\x) (LanguageC-45TOMLC-45Tokens-parseIntLoop arg-1 16 e-6 0))(else (LanguageC-45TOMLC-45Tokens-parseIntLoop arg-1 10 arg-0 0)))))))(else (LanguageC-45TOMLC-45Tokens-parseIntLoop arg-1 10 arg-0 0))))))))
(define LanguageC-45TOMLC-45TokensC-45Float-parseWhole (lambda (arg-0 arg-1 arg-2) (if (null? arg-2) 0.0 (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (cond ((equal? e-2 #\.) (LanguageC-45TOMLC-45TokensC-45Float-parseDecimal arg-0 arg-1 0.0 0.1 e-3)) ((equal? e-2 #\e) (LanguageC-45TOMLC-45TokensC-45Float-parseExponent arg-0 (PreludeC-45Cast-u--cast_Cast_Integer_Double arg-1) 0 e-3)) ((equal? e-2 #\E) (LanguageC-45TOMLC-45TokensC-45Float-parseExponent arg-0 (PreludeC-45Cast-u--cast_Cast_Integer_Double arg-1) 0 e-3)) ((equal? e-2 #\_) (LanguageC-45TOMLC-45TokensC-45Float-parseWhole arg-0 arg-1 e-3))(else (LanguageC-45TOMLC-45TokensC-45Float-parseWhole arg-0 (+ (* arg-1 10) (LanguageC-45TOMLC-45Tokens-charToInt e-2)) e-3))))))))
(define LanguageC-45TOMLC-45TokensC-45Float-parseSign (lambda (arg-0) (if (null? arg-0) (LanguageC-45TOMLC-45TokensC-45Float-parseWhole 1.0 0 arg-0) (let ((e-1 (car arg-0))) (let ((e-2 (cdr arg-0))) (cond ((equal? e-1 #\+) (LanguageC-45TOMLC-45TokensC-45Float-parseWhole 1.0 0 e-2)) ((equal? e-1 #\-) (LanguageC-45TOMLC-45TokensC-45Float-parseWhole (- 1.0) 0 e-2))(else (LanguageC-45TOMLC-45TokensC-45Float-parseWhole 1.0 0 arg-0))))))))
(define LanguageC-45TOMLC-45Tokens-parseIntLoop (lambda (arg-0 arg-1 arg-2 arg-3) (if (null? arg-2) arg-3 (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (cond ((equal? e-2 #\_) (LanguageC-45TOMLC-45Tokens-parseIntLoop arg-0 arg-1 e-3 arg-3))(else (LanguageC-45TOMLC-45Tokens-parseIntLoop arg-0 arg-1 e-3 (+ (* arg-3 arg-1) (* (LanguageC-45TOMLC-45Tokens-charToInt e-2) arg-0))))))))))
(define LanguageC-45TOMLC-45Tokens-parseInt (lambda (arg-0) (if (null? arg-0) 0 (let ((e-2 (car arg-0))) (let ((e-3 (cdr arg-0))) (cond ((equal? e-2 #\+) (LanguageC-45TOMLC-45Tokens-parseWithSign e-3 1)) ((equal? e-2 #\-) (LanguageC-45TOMLC-45Tokens-parseWithSign e-3 -1))(else (LanguageC-45TOMLC-45Tokens-parseWithSign arg-0 1))))))))
(define LanguageC-45TOMLC-45TokensC-45Float-parseFloat (lambda (arg-0) (cond ((equal? arg-0 "nan") (LanguageC-45TOMLC-45Tokens-nan)) ((equal? arg-0 "+nan") (LanguageC-45TOMLC-45Tokens-nan)) ((equal? arg-0 "-nan") (- (LanguageC-45TOMLC-45Tokens-nan))) ((equal? arg-0 "inf") (LanguageC-45TOMLC-45Tokens-inf)) ((equal? arg-0 "+inf") (LanguageC-45TOMLC-45Tokens-inf)) ((equal? arg-0 "-inf") (- (LanguageC-45TOMLC-45Tokens-inf)))(else (LanguageC-45TOMLC-45TokensC-45Float-parseSign (PreludeC-45Types-fastUnpack arg-0))))))
(define LanguageC-45TOMLC-45TokensC-45Float-parseExponent (lambda (arg-0 arg-1 arg-2 arg-3) (if (null? arg-3) (* (* arg-0 arg-1) (flexpt 10.0 (PreludeC-45Cast-u--cast_Cast_Integer_Double arg-2))) (let ((e-2 (car arg-3))) (let ((e-3 (cdr arg-3))) (cond ((equal? e-2 #\_) (LanguageC-45TOMLC-45TokensC-45Float-parseExponent arg-0 arg-1 arg-2 e-3))(else (LanguageC-45TOMLC-45TokensC-45Float-parseExponent arg-0 arg-1 (+ (* arg-2 10) (LanguageC-45TOMLC-45Tokens-charToInt e-2)) e-3))))))))
(define LanguageC-45TOMLC-45TokensC-45Float-parseDecimal (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (if (null? arg-4) (* arg-0 (+ (PreludeC-45Cast-u--cast_Cast_Integer_Double arg-1) arg-2)) (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) (cond ((equal? e-2 #\e) (LanguageC-45TOMLC-45TokensC-45Float-parseExponent arg-0 (+ (PreludeC-45Cast-u--cast_Cast_Integer_Double arg-1) arg-2) 0 e-3)) ((equal? e-2 #\E) (LanguageC-45TOMLC-45TokensC-45Float-parseExponent arg-0 (+ (PreludeC-45Cast-u--cast_Cast_Integer_Double arg-1) arg-2) 0 e-3)) ((equal? e-2 #\_) (LanguageC-45TOMLC-45TokensC-45Float-parseDecimal arg-0 arg-1 arg-2 arg-3 e-3))(else (LanguageC-45TOMLC-45TokensC-45Float-parseDecimal arg-0 arg-1 (+ arg-2 (* (PreludeC-45Cast-u--cast_Cast_Integer_Double (LanguageC-45TOMLC-45Tokens-charToInt e-2)) arg-3)) (* arg-3 0.1) e-3))))))))
(define LanguageC-45TOMLC-45Tokens-nan(blodwen-lazy (lambda () (flsqrt -1.0))))
(define LanguageC-45TOMLC-45Tokens-inf(blodwen-lazy (lambda () (/ 1.0 0.0))))
(define LanguageC-45TOMLC-45Tokens-ignored (lambda (arg-0) (let ((e-1 (vector-ref arg-0 0))) (if (null? e-1) 0 (let ((e-5 (car e-1))) (case (vector-ref e-5 0) ((6) 1)(else 0)))))))
(define LanguageC-45TOMLC-45Tokens-getString (lambda (arg-0) (if (null? arg-0) '() (let ((e-1 (car arg-0))) (case (vector-ref e-1 0) ((3) (box (TextC-45Token-value (csegen-733) arg-0)))(else '()))))))
(define LanguageC-45TOMLC-45Tokens-getKeyString (lambda (arg-0) (if (null? arg-0) '() (let ((e-1 (car arg-0))) (case (vector-ref e-1 0) ((3) (let ((e-3 (vector-ref e-1 1))) (cond ((equal? e-3 0) (box (TextC-45Token-value (csegen-733) arg-0))) ((equal? e-3 1) (box (TextC-45Token-value (csegen-733) arg-0)))(else '()))))(else '()))))))
(define LanguageC-45TOMLC-45Tokens-charToInt (lambda (arg-0) (let ((sc0 (let ((sc1 (PreludeC-45EqOrd-u--C-60C-61_Ord_Char #\0 arg-0))) (cond ((equal? sc1 1) (PreludeC-45EqOrd-u--C-60C-61_Ord_Char arg-0 #\9)) (else 0))))) (cond ((equal? sc0 1) (PreludeC-45Cast-u--cast_Cast_Int_Integer (bs- (cast-char-boundedInt arg-0 63) (cast-char-boundedInt #\0 63) 63))) (else (PreludeC-45Cast-u--cast_Cast_Int_Integer (bs- (cast-char-boundedInt (PreludeC-45Types-toLower arg-0) 63) (cast-char-boundedInt #\a 63) 63)))))))
(define LanguageC-45TOMLC-45Lexer-tomlTokenMap(blodwen-lazy (lambda () ((TextC-45Lexer-toTokenMap) (cons (cons (TextC-45Lexer-newline) (vector 4 (vector 3 ))) (cons (cons (TextC-45Lexer-lineComment (TextC-45Lexer-is #\#)) (vector 6 )) (cons (cons (TextC-45Lexer-spaces) (vector 6 )) (cons (cons (TextC-45Lexer-is #\,) (vector 4 (vector 0 ))) (cons (cons (TextC-45Lexer-is #\.) (vector 4 (vector 1 ))) (cons (cons (TextC-45Lexer-is #\=) (vector 4 (vector 2 ))) (cons (cons (TextC-45Lexer-is #\[) (vector 4 (vector 4 0))) (cons (cons (TextC-45Lexer-is #\]) (vector 4 (vector 4 1))) (cons (cons (TextC-45Lexer-is #\{) (vector 4 (vector 5 0))) (cons (cons (TextC-45Lexer-is #\}) (vector 4 (vector 5 1))) (cons (cons (TextC-45LexerC-45Core-C-60C-124C-62 (TextC-45Lexer-exact "true") (TextC-45Lexer-exact "false")) (vector 0 )) (cons (cons (LanguageC-45TOMLC-45Lexer-integerLit) (vector 1 )) (cons (cons (LanguageC-45TOMLC-45Lexer-floatLit) (vector 2 )) (cons (cons (LanguageC-45TOMLC-45Lexer-basicStringLit) (vector 3 0)) (cons (cons (LanguageC-45TOMLC-45Lexer-bareKey) (vector 5 )) '())))))))))))))))))))
(define LanguageC-45TOMLC-45Lexer-sepIntLit(blodwen-lazy (lambda () (vector 4 (vector 5 (csegen-830) (LanguageC-45TOMLC-45Lexer-nonZeroDigit)) (lambda () (TextC-45Lexer-many (TextC-45LexerC-45Core-C-60C-124C-62 (TextC-45Lexer-is #\_) (TextC-45Lexer-digit))))))))
(define LanguageC-45TOMLC-45Lexer-sepBaseLit (lambda (arg-0 arg-1) (vector 4 (vector 4 (TextC-45Lexer-exact arg-0) (lambda () arg-1)) (lambda () (TextC-45Lexer-many (vector 5 (csegen-835) arg-1))))))
(define LanguageC-45TOMLC-45Lexer-nonZeroDigit(blodwen-lazy (lambda () (TextC-45Lexer-range #\1 #\9))))
(define LanguageC-45TOMLC-45Lexer-lexTOML (lambda (arg-0) (let ((sc0 (TextC-45LexerC-45Core-lex (LanguageC-45TOMLC-45Lexer-tomlTokenMap) arg-0))) (if (null? sc0) '() (let ((e-2 (car sc0))) (let ((e-3 (cdr sc0))) (if (null? e-3) '() (let ((e-7 (cdr e-3))) (if (null? e-7) '() (let ((e-11 (cdr e-7))) (cond ((equal? e-11 "") (box e-2))(else '()))))))))))))
(define LanguageC-45TOMLC-45Lexer-integerLit(blodwen-lazy (lambda () (vector 4 (TextC-45LexerC-45Core-C-60C-124C-62 (LanguageC-45TOMLC-45Lexer-sepBaseLit "0x" (TextC-45Lexer-hexDigit)) (TextC-45LexerC-45Core-C-60C-124C-62 (LanguageC-45TOMLC-45Lexer-sepBaseLit "0o" (TextC-45Lexer-octDigit)) (TextC-45LexerC-45Core-C-60C-124C-62 (LanguageC-45TOMLC-45Lexer-sepBaseLit "0b" (TextC-45Lexer-binDigit)) (LanguageC-45TOMLC-45Lexer-sepIntLit)))) (lambda () (TextC-45LexerC-45Core-reject (TextC-45Lexer-oneOf ".eE")))))))
(define LanguageC-45TOMLC-45Lexer-floatLit(blodwen-lazy (lambda () (let ((u--sign (TextC-45Lexer-oneOf "+-"))) (let ((u--whole (TextC-45LexerC-45Core-C-60C-124C-62 (TextC-45Lexer-is #\0) (vector 4 (LanguageC-45TOMLC-45Lexer-nonZeroDigit) (lambda () (csegen-845)))))) (let ((u--frac (vector 4 (vector 4 (TextC-45Lexer-is #\.) (lambda () (TextC-45Lexer-digit))) (lambda () (csegen-845))))) (let ((u--exp (vector 4 (vector 4 (TextC-45Lexer-like #\e) (lambda () (csegen-830))) (lambda () (TextC-45Lexer-digits))))) (let ((u--constant (TextC-45LexerC-45Core-C-60C-124C-62 (TextC-45Lexer-exact "nan") (TextC-45Lexer-exact "inf")))) (vector 5 (TextC-45Lexer-opt u--sign) (TextC-45LexerC-45Core-C-60C-124C-62 (vector 4 u--whole (lambda () (TextC-45LexerC-45Core-C-60C-124C-62 (vector 4 u--frac (lambda () (TextC-45Lexer-opt u--exp))) u--exp))) u--constant))))))))))
(define LanguageC-45TOMLC-45Lexer-basicStringLit(blodwen-lazy (lambda () (TextC-45Lexer-quote (TextC-45Lexer-is #\") (TextC-45LexerC-45Core-C-60C-124C-62 (TextC-45Lexer-escape (TextC-45Lexer-is #\\) (TextC-45Lexer-any)) (TextC-45Lexer-isNot #\\))))))
(define LanguageC-45TOMLC-45Lexer-bareKey(blodwen-lazy (lambda () (TextC-45Lexer-some (TextC-45LexerC-45Core-C-60C-124C-62 (TextC-45Lexer-alphaNum) (TextC-45LexerC-45Core-C-60C-124C-62 (TextC-45Lexer-is #\_) (TextC-45Lexer-is #\-)))))))
(define TextC-45Lexer-toTokenMap(blodwen-lazy (lambda () ((csegen-226) (lambda (lamc-0) (let ((e-2 (car lamc-0))) (let ((e-3 (cdr lamc-0))) (cons e-2 (lambda (eta-0) (cons e-3 eta-0))))))))))
(define TextC-45Lexer-surround (lambda (arg-0 arg-1 arg-2) (vector 4 arg-0 (lambda () (TextC-45Lexer-manyThen arg-1 arg-2)))))
(define TextC-45Lexer-spaces(blodwen-lazy (lambda () (TextC-45Lexer-some (TextC-45Lexer-space)))))
(define TextC-45Lexer-space(blodwen-lazy (lambda () (TextC-45LexerC-45Core-pred (lambda (eta-0) (PreludeC-45Types-isSpace eta-0))))))
(define TextC-45Lexer-some (lambda (arg-0) (vector 4 arg-0 (lambda () (TextC-45Lexer-many arg-0)))))
(define TextC-45Lexer-range (lambda (arg-0 arg-1) (TextC-45LexerC-45Core-pred (lambda (u--x) (let ((sc0 (PreludeC-45EqOrd-u--C-62C-61_Ord_Char u--x (PreludeC-45EqOrd-u--min_Ord_Char arg-0 arg-1)))) (cond ((equal? sc0 1) (PreludeC-45EqOrd-u--C-60C-61_Ord_Char u--x (PreludeC-45EqOrd-u--max_Ord_Char arg-0 arg-1))) (else 0)))))))
(define TextC-45Lexer-quote (lambda (arg-0 arg-1) (TextC-45Lexer-surround arg-0 arg-0 arg-1)))
(define TextC-45Lexer-opt (lambda (arg-0) (TextC-45LexerC-45Core-C-60C-124C-62 arg-0 (TextC-45LexerC-45Core-empty))))
(define TextC-45Lexer-oneOf (lambda (arg-0) (TextC-45LexerC-45Core-pred (lambda (u--x) (PreludeC-45Types-elem (csegen-98) (csegen-2) u--x (PreludeC-45Types-fastUnpack arg-0))))))
(define TextC-45Lexer-octDigit(blodwen-lazy (lambda () (TextC-45LexerC-45Core-pred (lambda (eta-0) (PreludeC-45Types-isOctDigit eta-0))))))
(define TextC-45Lexer-newline(blodwen-lazy (lambda () (TextC-45LexerC-45Core-C-60C-124C-62 (TextC-45Lexer-exact "\xd;\xa;") (TextC-45Lexer-oneOf "\xd;\xa;")))))
(define TextC-45Lexer-manyUntil (lambda (arg-1 arg-2) (TextC-45Lexer-many (vector 5 (TextC-45LexerC-45Core-reject arg-1) arg-2))))
(define TextC-45Lexer-manyThen (lambda (arg-1 arg-2) (vector 5 (TextC-45Lexer-manyUntil arg-1 arg-2) arg-1)))
(define TextC-45Lexer-many (lambda (arg-0) (TextC-45Lexer-opt (TextC-45Lexer-some arg-0))))
(define TextC-45Lexer-lineComment (lambda (arg-0) (vector 4 (vector 4 arg-0 (lambda () (TextC-45Lexer-manyUntil (TextC-45Lexer-newline) (TextC-45Lexer-any)))) (lambda () (TextC-45Lexer-opt (TextC-45Lexer-newline))))))
(define TextC-45Lexer-like (lambda (arg-0) (TextC-45LexerC-45Core-pred (lambda (u--y) (PreludeC-45EqOrd-u--C-61C-61_Eq_Char (PreludeC-45Types-toUpper arg-0) (PreludeC-45Types-toUpper u--y))))))
(define TextC-45Lexer-isNot (lambda (arg-0) (TextC-45LexerC-45Core-pred (lambda (arg-1) (PreludeC-45EqOrd-u--C-47C-61_Eq_Char arg-1 arg-0)))))
(define TextC-45Lexer-is (lambda (arg-0) (TextC-45LexerC-45Core-pred (lambda (arg-1) (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 arg-0)))))
(define TextC-45Lexer-hexDigit(blodwen-lazy (lambda () (TextC-45LexerC-45Core-pred (lambda (eta-0) (PreludeC-45Types-isHexDigit eta-0))))))
(define TextC-45Lexer-exact (lambda (arg-0) (let ((sc0 (PreludeC-45Types-fastUnpack arg-0))) (if (null? sc0) (TextC-45LexerC-45Core-fail) (let ((e-2 (car sc0))) (let ((e-3 (cdr sc0))) (TextC-45LexerC-45Core-concatMap (lambda (eta-0) (TextC-45Lexer-is eta-0)) (cons e-2 e-3))))))))
(define TextC-45Lexer-escape (lambda (arg-0 arg-1) (vector 4 arg-0 (lambda () arg-1))))
(define TextC-45Lexer-digits(blodwen-lazy (lambda () (TextC-45Lexer-some (TextC-45Lexer-digit)))))
(define TextC-45Lexer-digit(blodwen-lazy (lambda () (TextC-45LexerC-45Core-pred (lambda (eta-0) (PreludeC-45Types-isDigit eta-0))))))
(define TextC-45Lexer-binDigit(blodwen-lazy (lambda () (TextC-45LexerC-45Core-pred (lambda (u--c) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char u--c #\0))) (cond ((equal? sc0 1) 1) (else (PreludeC-45EqOrd-u--C-61C-61_Eq_Char u--c #\1)))))))))
(define TextC-45Lexer-any(blodwen-lazy (lambda () (TextC-45LexerC-45Core-pred (lambda (eta-0) 1)))))
(define TextC-45Lexer-alphaNum(blodwen-lazy (lambda () (TextC-45LexerC-45Core-pred (lambda (eta-0) (PreludeC-45Types-isAlphaNum eta-0))))))
(define TextC-45LexerC-45Core-case--tokenise-2726 (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (if (null? arg-7) (cons (PreludeC-45TypesC-45List-reverse arg-3) (cons arg-5 (cons arg-4 arg-1))) (let ((e-1 (unbox arg-7))) (let ((e-5 (car e-1))) (let ((e-6 (cdr e-1))) (let ((e-9 (car e-6))) (let ((e-10 (cdr e-6))) (let ((e-13 (car e-10))) (let ((e-14 (cdr e-10))) (let ((sc4 (arg-6 (let ((e-4 (vector-ref e-5 0))) e-4)))) (cond ((equal? sc4 1) (cons (PreludeC-45TypesC-45List-reverse arg-3) (cons arg-5 (cons arg-4 '())))) (else (TextC-45LexerC-45Core-tokenise arg-6 e-9 e-13 (cons e-5 arg-3) arg-2 e-14))))))))))))))
(define TextC-45LexerC-45Core-case--tokeniseC-44getFirstToken-2636 (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (if (null? arg-11) (TextC-45LexerC-45Core-n--3663-2501-u--getFirstToken arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-9 arg-10) (let ((e-1 (unbox arg-11))) (let ((e-5 (car e-1))) (let ((e-6 (cdr e-1))) (let ((u--lineC-39 (bs+ arg-5 (PreludeC-45Cast-u--cast_Cast_Nat_Int (TextC-45LexerC-45Core-n--3663-2499-u--countNLs arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 e-5)) 63))) (let ((u--colC-39 (TextC-45LexerC-45Core-n--3663-2500-u--getCols arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 e-5 arg-4))) (box (cons (vector (arg-8 (PreludeC-45Types-fastPack (PreludeC-45TypesC-45List-reverse e-5))) 0 (vector arg-5 arg-4 u--lineC-39 u--colC-39)) (cons u--lineC-39 (cons u--colC-39 e-6))))))))))))
(define TextC-45LexerC-45Core-n--3663-2501-u--getFirstToken (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (if (null? arg-7) '() (let ((e-2 (car arg-7))) (let ((e-3 (cdr arg-7))) (let ((e-6 (car e-2))) (let ((e-7 (cdr e-2))) (TextC-45LexerC-45Core-case--tokeniseC-44getFirstToken-2636 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 e-6 e-7 e-3 arg-8 (TextC-45LexerC-45Core-scan e-6 '() arg-8)))))))))
(define TextC-45LexerC-45Core-n--3663-2500-u--getCols (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 (DataC-45List-span (csegen-433) (PreludeC-45TypesC-45List-reverse arg-7)))) (let ((e-2 (car sc0))) (let ((e-3 (cdr sc0))) (if (null? e-3) (bs+ arg-8 (PreludeC-45Cast-u--cast_Cast_Nat_Int (PreludeC-45TypesC-45List-lengthTR e-2)) 63) (PreludeC-45Cast-u--cast_Cast_Nat_Int (PreludeC-45TypesC-45List-lengthTR e-2))))))))
(define TextC-45LexerC-45Core-n--3663-2499-u--countNLs (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (PreludeC-45TypesC-45List-lengthTR (PreludeC-45TypesC-45List-filter (csegen-434) arg-7))))
(define TextC-45LexerC-45Core-tokenise (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (TextC-45LexerC-45Core-case--tokenise-2726 arg-6 arg-5 arg-4 arg-3 arg-2 arg-1 (TextC-45LexerC-45Core-n--3663-2501-u--getFirstToken arg-6 arg-5 arg-4 arg-3 arg-2 arg-1 arg-5 arg-6))))
(define TextC-45LexerC-45Core-scan (lambda (arg-1 arg-2 arg-3) (case (vector-ref arg-1 0) ((0) (box (cons arg-2 arg-3))) ((1) '()) ((2) (let ((e-2 (vector-ref arg-1 1))) (let ((e-3 (vector-ref arg-1 2))) (let ((sc1 (PreludeC-45EqOrd-u--C-61C-61_Eq_Bool (DataC-45Maybe-isJust (TextC-45LexerC-45Core-scan e-3 arg-2 arg-3)) e-2))) (cond ((equal? sc1 1) (box (cons arg-2 arg-3))) (else '())))))) ((3) (let ((e-4 (vector-ref arg-1 1))) (if (null? arg-3) '() (let ((e-21 (car arg-3))) (let ((e-22 (cdr arg-3))) (let ((sc2 (e-4 e-21))) (cond ((equal? sc2 1) (box (cons (cons e-21 arg-2) e-22))) (else '())))))))) ((4) (let ((e-6 (vector-ref arg-1 1))) (let ((e-7 (vector-ref arg-1 2))) (PreludeC-45Types-u--C-62C-62C-61_Monad_Maybe (TextC-45LexerC-45Core-scan e-6 arg-2 arg-3) (lambda (_-0) (let ((e-2 (car _-0))) (let ((e-3 (cdr _-0))) (TextC-45LexerC-45Core-scan (e-7) e-2 e-3)))))))) ((5) (let ((e-10 (vector-ref arg-1 1))) (let ((e-11 (vector-ref arg-1 2))) (PreludeC-45Types-u--C-62C-62C-61_Monad_Maybe (TextC-45LexerC-45Core-scan e-10 arg-2 arg-3) (lambda (_-0) (let ((e-2 (car _-0))) (let ((e-3 (cdr _-0))) (TextC-45LexerC-45Core-scan e-11 e-2 e-3)))))))) ((6) (let ((e-13 (vector-ref arg-1 1))) (let ((e-14 (vector-ref arg-1 2))) (PreludeC-45Types-u--C-62C-62C-61_Monad_Maybe (TextC-45LexerC-45Core-scan e-13 arg-2 arg-3) (lambda (_-0) (let ((e-2 (car _-0))) (let ((e-3 (cdr _-0))) (TextC-45LexerC-45Core-scan e-14 e-2 e-3)))))))) (else (let ((e-17 (vector-ref arg-1 1))) (let ((e-18 (vector-ref arg-1 2))) (PreludeC-45Types-maybe (lambda () (TextC-45LexerC-45Core-scan e-18 arg-2 arg-3)) (lambda () (lambda (eta-0) (box eta-0))) (TextC-45LexerC-45Core-scan e-17 arg-2 arg-3))))))))
(define TextC-45LexerC-45Core-reject (lambda (ext-0) (vector 2 0 ext-0)))
(define TextC-45LexerC-45Core-pred (lambda (ext-0) (vector 3 ext-0)))
(define TextC-45LexerC-45Core-lex (lambda (arg-1 arg-2) (let ((sc0 (TextC-45LexerC-45Core-tokenise (lambda (eta-0) 0) 0 0 '() arg-1 (PreludeC-45Types-fastUnpack arg-2)))) (let ((e-2 (car sc0))) (let ((e-3 (cdr sc0))) (let ((e-6 (car e-3))) (let ((e-7 (cdr e-3))) (let ((e-10 (car e-7))) (let ((e-11 (cdr e-7))) (cons e-2 (cons e-6 (cons e-10 (PreludeC-45Types-fastPack e-11)))))))))))))
(define TextC-45LexerC-45Core-fail(blodwen-lazy (lambda () (vector 1 ))))
(define TextC-45LexerC-45Core-empty(blodwen-lazy (lambda () (vector 0 ))))
(define TextC-45LexerC-45Core-concatMap (lambda (arg-2 arg-3) (if (null? arg-3) (vector 0 ) (let ((e-2 (car arg-3))) (let ((e-3 (cdr arg-3))) (if (null? e-3) (arg-2 e-2) (vector 6 (arg-2 e-2) (TextC-45LexerC-45Core-concatMap arg-2 e-3))))))))
(define TextC-45LexerC-45Core-C-60C-124C-62 (lambda (ext-0 ext-1) (vector 7 ext-0 ext-1)))
(define PackC-45CoreC-45Git-withGit (lambda (arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((u--dir (PackC-45CoreC-45Git-gitDir arg-3 arg-4 arg-6))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) (SystemC-45FileC-45Meta-exists (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-2 arg-11999)))) (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 u--dir)) (lambda (_-0) (cond ((equal? _-0 0) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9934)))) (PackC-45CoreC-45IO-mkParentDir arg-2 u--dir) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9934)))) (PackC-45CoreC-45Git-gitClone arg-2 arg-5 u--dir) (lambda () (PackC-45CoreC-45IO-inDir arg-2 u--dir (lambda (u--d) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9934)))) (PackC-45CoreC-45Git-gitCheckout arg-2 arg-6) (lambda () (arg-7 u--d)))))))))) (else (PackC-45CoreC-45IO-inDir arg-2 u--dir arg-7))))))))
(define PackC-45CoreC-45Git-packDB(blodwen-lazy (lambda () "pack-db")))
(define PackC-45CoreC-45Git-gitLatest (lambda (arg-1 arg-2 arg-3) (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) eta-2 eta-3))))) (lambda (eta-0) (Builtin-fst (DataC-45String-break (lambda (eta-1) (PreludeC-45Types-isSpace eta-1)) eta-0))) (PackC-45CoreC-45IO-sysRun arg-1 (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "git ls-remote " (cons (let ((eff-0 arg-2)) eff-0) (cons " " (cons (let ((eff-0 arg-3)) eff-0) '())))))))))
(define PackC-45CoreC-45Git-gitDir (lambda (arg-0 arg-1 arg-2) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 arg-0 ((csegen-250) arg-1)) ((csegen-250) arg-2))))
(define PackC-45CoreC-45Git-gitClone (lambda (arg-1 arg-2 arg-3) (PackC-45CoreC-45IO-sys arg-1 (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "git clone -q " (cons (let ((eff-0 arg-2)) eff-0) (cons " " (cons (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 arg-3) '()))))))))
(define PackC-45CoreC-45Git-gitCheckout (lambda (arg-1 arg-2) (PackC-45CoreC-45IO-sys arg-1 (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "git checkout -q " (cons (let ((eff-0 arg-2)) eff-0) '()))))))
(define PackC-45CoreC-45Git-defaultPackRepo(blodwen-lazy (lambda () "https://github.com/stefan-hoeck/idris2-pack")))
(define PackC-45CoreC-45Git-dbRepo(blodwen-lazy (lambda () "https://github.com/stefan-hoeck/idris2-pack-db")))
(define PackC-45CoreC-45Git-compiler(blodwen-lazy (lambda () "idris2-compiler")))
(define PackC-45ConfigC-45Types-n--8119-10622-u--adj (lambda (arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((e-2 (vector-ref arg-4 0))) (let ((e-3 (vector-ref arg-4 1))) (let ((e-5 (vector-ref arg-4 3))) (let ((e-7 (vector-ref arg-4 5))) (let ((e-8 (vector-ref arg-4 6))) (let ((e-9 (vector-ref arg-4 7))) (let ((e-10 (vector-ref arg-4 8))) (let ((e-11 (vector-ref arg-4 9))) (let ((e-12 (vector-ref arg-4 10))) (let ((e-13 (vector-ref arg-4 11))) (let ((e-14 (vector-ref arg-4 12))) (let ((e-15 (vector-ref arg-4 13))) (let ((e-17 (vector-ref arg-4 15))) (let ((e-18 (vector-ref arg-4 16))) (let ((e-19 (vector-ref arg-4 17))) (let ((e-20 (vector-ref arg-4 18))) (vector e-2 e-3 arg-7 e-5 arg-8 e-7 e-8 e-9 e-10 e-11 e-12 e-13 e-14 e-15 arg-9 e-17 e-18 e-19 e-20)))))))))))))))))))
(define PackC-45ConfigC-45Types-u--interpolate_Interpolation_Codegen (lambda (arg-0) (case (vector-ref arg-0 0) ((0) "") ((1) "chez") ((2) "chez-sep") ((3) "racket") ((4) "gambit") ((5) "node") ((6) "javascript") ((7) "refc") ((8) "vmcode-interp") (else (let ((e-0 (vector-ref arg-0 1))) e-0)))))
(define PackC-45ConfigC-45Types-traverse (lambda (arg-3 arg-4 arg-5 arg-6) (let ((u--iurl (DataC-45Maybe-fromMaybe (lambda () arg-5) (let ((e-3 (vector-ref arg-6 1))) e-3)))) (let ((u--purl (DataC-45Maybe-fromMaybe (lambda () (PackC-45CoreC-45Git-defaultPackRepo)) (let ((e-5 (vector-ref arg-6 3))) e-5)))) (let ((u--cst (DataC-45SortedMap-u--traverse_Traversable_C-40SortedMapC-32C-36kC-41 arg-3 (lambda (eta-0) (DataC-45SortedMap-u--traverse_Traversable_C-40SortedMapC-32C-36kC-41 arg-3 (lambda (eta-1) (PackC-45DatabaseC-45Types-traverse arg-3 arg-4 eta-1)) eta-0)) (let ((e-16 (vector-ref arg-6 14))) e-16)))) (let ((u--ic (PreludeC-45Types-u--traverse_Traversable_Maybe arg-3 (arg-4 u--iurl) (let ((e-4 (vector-ref arg-6 2))) e-4)))) (let ((u--pc (PreludeC-45Types-u--traverse_Traversable_Maybe arg-3 (arg-4 u--purl) (let ((e-6 (vector-ref arg-6 4))) e-6)))) (let ((e-3 (vector-ref arg-3 2))) ((((e-3 'erased) 'erased) (let ((e-4 (vector-ref arg-3 2))) ((((e-4 'erased) 'erased) (let ((e-7 (vector-ref arg-3 2))) ((((e-7 'erased) 'erased) (let ((e-11 (vector-ref arg-3 1))) ((e-11 'erased) (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (PackC-45ConfigC-45Types-n--8119-10622-u--adj arg-3 arg-6 arg-5 arg-4 eta-0 eta-1 eta-2))))))) u--ic))) u--pc))) u--cst)))))))))
(define PackC-45ConfigC-45Types-pkgs(blodwen-lazy (lambda () (DataC-45SortedMap-fromList (csegen-347) (PreludeC-45Interfaces-C-60C-36C-62 (csegen-225) (lambda (u--c) (cons (PackC-45DatabaseC-45Types-corePkgName u--c) (vector 2 u--c))) (PackC-45DatabaseC-45Types-corePkgs))))))
(define PackC-45ConfigC-45Types-mergeRight (lambda (ext-0 ext-1) (DataC-45SortedMap-mergeWith (lambda (_-10835) (lambda (u--v) u--v)) ext-0 ext-1)))
(define PackC-45ConfigC-45Types-allPackages (lambda (arg-0 arg-1) (let ((u--all (DataC-45Maybe-fromMaybe (lambda () (csegen-357)) (DataC-45SortedMap-lookup (csegen-242) (let ((e-16 (vector-ref arg-0 14))) e-16))))) (let ((u--loc (DataC-45Maybe-fromMaybe (lambda () (csegen-357)) (DataC-45SortedMap-lookup (let ((e-2 (vector-ref arg-0 0))) e-2) (let ((e-16 (vector-ref arg-0 14))) e-16))))) (PackC-45ConfigC-45Types-mergeRight (PackC-45ConfigC-45Types-mergeRight (PackC-45ConfigC-45Types-mergeRight (let ((e-3 (vector-ref arg-1 3))) e-3) u--all) u--loc) (PackC-45ConfigC-45Types-pkgs))))))
(define PackC-45ConfigC-45TOML-initToml (lambda (arg-0 arg-1) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "# The package collection to use\xa;collection = \"" (cons (let ((eff-0 (let ((eff-0 arg-1)) eff-0))) (PreludeC-45Types-fastPack eff-0)) (cons "\"\xa;\xa;[install]\xa;\xa;# Whether to install packages together with their\xa;# sources or not. This is mainly useful for programmers\xa;# who have set their editor up with some *go to definition*\xa;# functionality (for instance by using idris2-lsp with neovim).\xa;with-src   = true\xa;\xa;# Whether to install API docs together with installed\xa;# libraries.\xa;# with-docs = false\xa;\xa;# Whether to use katla to generate HTML links to\xa;# semantically highlighted API sources\xa;# use-katla = false\xa;\xa;# Whether to prompt the user before building or installing\xa;# packages or applications with custom build hooks in their\xa;# `.ipkg` file.\xa;safety-prompt = true\xa;\xa;# Must-have libraries. These will be installed automatically\xa;# when using a new package collection.\xa;# libs       = [ \"toml\", \"elab-util\" ]\xa;\xa;# Must-have applications. These will be installed automatically\xa;# when using a new package collection.\xa;# apps       = [ \"lsp\" ]\xa;\xa;[pack]\xa;\xa;# Override this to use a custom GitHub repo for pack\xa;# url = \"https://github.com/stefan-hoeck/idris2-pack\"\xa;\xa;# Override this to use a custom commit and branch for pack\xa;# commit = \"latest:main\"\xa;\xa;[idris2]\xa;\xa;# Whether to build Idris2 with its bootstrap compiler.\xa;# Bootstrapping takes longer than building with an existing\xa;# Idris2 installation, but it will work even if the existing\xa;# Idris2 compiler is outdated.\xa;bootstrap  = false\xa;\xa;# Name or path to the scheme executable to use.\xa;scheme      = \"" (cons arg-0 (cons "\"\xa;\xa;# Default code generator to us\xa;# codegen     = \"chez\"\xa;\xa;# Set this to `true` in order to run REPL sessions from within\xa;# `rlwrap`. This will give you additional features such as a\xa;# command history.\xa;repl.rlwrap = false\xa;\xa;# Override this to use a custom GitHub repo for the Idris compiler\xa;# url = \"https://github.com/idris-lang/Idris2\"\xa;\xa;# Override this to use a custom commit and branch for the Idris compiler\xa;# commit = \"latest:main\"\xa;\xa;# Below are some examples for custom packages\xa;\xa;# A local package to be available with all\xa;# package collections. The path to the package's root\xa;# directory can be absolute or relative. In the latter\xa;# case, it will be considered to be relative to the\xa;# parent directory of the `pack.toml` file where it is\xa;# defined.\xa;#\xa;# The path to `.ipkg` files must always relative to the\xa;# given `path`.\xa;# [custom.all.chem]\xa;# type = \"local\"\xa;# path = \"/data/idris/chem\"\xa;# ipkg = \"chem.ipkg\"\xa;\xa;# A package on GitHub to be available with all\xa;# package collections.\xa;# [custom.all.foo]\xa;# type = \"github\"\xa;# url  = \"https://github.com/bar/foo\"\xa;# ipkg = \"foo.ipkg\"\xa;\xa;# Override library `toml` from package collection `nightly-220503`\xa;# by using a custom commit hash.\xa;# [custom.nightly-220503.toml]\xa;# type   = \"github\"\xa;# url    = \"https://github.com/cuddlefishie/toml-idr\"\xa;# commit = \"eb7a146f565276f82ebf30cb6d5502e9f65dcc3c\"\xa;# ipkg   = \"toml.ipkg\"" '()))))))))
(define PackC-45ConfigC-45Environment-case--idrisWithCG-3108 (lambda (arg-0 arg-1) (case (vector-ref arg-1 0) ((0) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons ((csegen-234) (let ((sc1 (PackC-45ConfigC-45Environment-idrisExec (let ((e-0 (vector-ref arg-0 0))) e-0) (let ((e-3 (vector-ref arg-0 3))) e-3)))) (let ((e-1 (car sc1))) (let ((e-2 (cdr sc1))) (DataC-45FilePath-C-60C-47C-62 e-1 (vector 1 (cons '() e-2))))))) '())))(else (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons ((csegen-234) (let ((sc0 (PackC-45ConfigC-45Environment-idrisExec (let ((e-0 (vector-ref arg-0 0))) e-0) (let ((e-3 (vector-ref arg-0 3))) e-3)))) (let ((e-1 (car sc0))) (let ((e-2 (cdr sc0))) (DataC-45FilePath-C-60C-47C-62 e-1 (vector 1 (cons '() e-2))))))) (cons " --cg " (cons (PackC-45ConfigC-45Types-u--interpolate_Interpolation_Codegen arg-1) '()))))))))
(define PackC-45ConfigC-45Environment-updateDB (lambda (arg-1 arg-2 arg-3) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45CoreC-45IO-rmDir arg-1 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 arg-3)) eff-0) (csegen-877))) (lambda () (PackC-45CoreC-45IO-finally (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-rmDir arg-1 (let ((eff-0 arg-2)) eff-0)) (PackC-45CoreC-45Git-withGit arg-1 (let ((eff-0 arg-2)) eff-0) (PackC-45CoreC-45Git-packDB) (PackC-45CoreC-45Git-dbRepo) "main" (lambda (u--d) (PackC-45CoreC-45IO-copyDir arg-1 (DataC-45FilePath-C-60C-47C-62 u--d (vector 1 (cons '() (PreludeC-45Types-fastUnpack "collections")))) (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 arg-3)) eff-0) (csegen-877))))))))))
(define PackC-45ConfigC-45Environment-schemeVar (lambda (arg-0) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "SCHEME=" (cons (PackC-45CoreC-45Types-quote (lambda (eta-0) (DataC-45FilePath-u--interpolate_Interpolation_FilePath eta-0)) (let ((e-7 (vector-ref arg-0 5))) e-7)) '())))))
(define PackC-45ConfigC-45Environment-resolveMeta (lambda (arg-1 arg-2 arg-3 arg-4 arg-5) (case (vector-ref arg-5 0) ((0) (let ((e-0 (vector-ref arg-5 1))) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) e-0))) ((2) (let ((e-1 (vector-ref arg-5 1))) (PackC-45CoreC-45Git-gitLatest arg-1 arg-4 e-1))) (else (let ((e-2 (vector-ref arg-5 1))) (let ((u--cfile (PackC-45ConfigC-45Environment-commitFile arg-2 arg-4 e-2))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-fileMissing (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) (let ((e-9 (vector-ref e-6 0))) e-9))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) e-6)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) e-6)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) u--cfile) (lambda (u--commitMissing) (let ((sc1 (cond ((equal? u--commitMissing 1) 1) (else arg-3)))) (cond ((equal? sc1 1) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45Git-gitLatest arg-1 arg-4 e-2) (lambda (u--c) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) (let ((e-9 (vector-ref e-6 0))) e-9))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) e-6)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) e-6)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45CoreC-45IO-write arg-1 u--cfile (let ((eff-0 u--c)) eff-0)) (lambda () (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) e-6)) u--c)))))) (else (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) (let ((e-9 (vector-ref e-6 0))) e-9))) eta-2 eta-3))))) (lambda (u--s) (DataC-45String-trim u--s)) (PackC-45CoreC-45IO-read arg-1 u--cfile)))))))))))))
(define PackC-45ConfigC-45Environment-prefixVar (lambda (arg-0 arg-1) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "PREFIX=" (cons (PackC-45CoreC-45Types-quote (lambda (eta-0) (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 eta-0)) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 arg-0)) eff-0) (csegen-248)) ((csegen-250) (let ((e-1 (vector-ref arg-1 1))) e-1))) (csegen-263))) '())))))
(define PackC-45ConfigC-45Environment-pkgRelDir (lambda (arg-1) (let ((sc0 (DataC-45FilePathC-45Body-fromChars (PreludeC-45Types-fastUnpack (let ((e-1 (vector-ref arg-1 0))) (let ((e-0 (vector-ref e-1 0))) e-0)))))) (if (null? sc0) (DataC-45FilePath-C-60C-47C-62 ((csegen-880) (let ((e-1 (vector-ref arg-1 0))) (let ((e-0 (vector-ref e-1 0))) e-0))) (vector 1 (cons '() ((let ((eff-0 (lambda (eta-0) (PackC-45CoreC-45Types-u--cast_Cast_C-40MaybeC-32PkgVersionC-41_Body eta-0)))) (lambda (arg-0) (eff-0 arg-0))) (let ((e-1 (vector-ref arg-1 0))) (let ((e-27 (vector-ref e-1 1))) e-27)))))) (let ((e-1 (unbox sc0))) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-u--neutral_Monoid_C-40PathC-32RelC-41) (vector 1 (cons '() (PackC-45CoreC-45Types-C-60C-45C-62 (lambda (eta-0) eta-0) (lambda (eta-0) (PackC-45CoreC-45Types-u--cast_Cast_C-40MaybeC-32PkgVersionC-41_Body eta-0)) e-1 (let ((e-4 (vector-ref arg-1 0))) (let ((e-28 (vector-ref e-4 1))) e-28)))))))))))
(define PackC-45ConfigC-45Environment-pkgInstallDir (lambda (arg-1 arg-2 arg-3 arg-4 arg-5) (let ((u--vers (let ((e-2 (vector-ref arg-2 2))) e-2))) (let ((u--dir (DataC-45FilePath-C-60C-47C-62 (case (vector-ref arg-4 0) ((0) (let ((e-2 (vector-ref arg-4 2))) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 arg-1)) eff-0) (csegen-248)) ((csegen-250) (let ((e-7 (vector-ref arg-2 1))) e-7))) ((csegen-250) arg-3)) ((csegen-250) e-2)))) ((1) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 arg-1)) eff-0) (csegen-248)) ((csegen-250) (let ((e-1 (vector-ref arg-2 1))) e-1))) (csegen-256)) ((csegen-250) arg-3))) (else (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 arg-1)) eff-0) (csegen-248)) ((csegen-250) (let ((e-1 (vector-ref arg-2 1))) e-1))) (csegen-263)))) (vector 1 (cons '() (PackC-45CoreC-45Types-C-60C-45C-62 (lambda (eta-0) eta-0) (lambda (eta-0) (PackC-45CoreC-45Types-u--cast_Cast_PkgVersion_Body eta-0)) (csegen-261) (let ((e-2 (vector-ref arg-2 2))) e-2))))))) (case (vector-ref arg-4 0) ((2) (let ((e-1 (vector-ref arg-4 1))) (DataC-45FilePath-C-60C-47C-62 u--dir (vector 1 (cons '() (PackC-45CoreC-45Types-C-60C-45C-62 (lambda (eta-0) (PackC-45DatabaseC-45Types-u--cast_Cast_CorePkg_Body eta-0)) (lambda (eta-0) (PackC-45CoreC-45Types-u--cast_Cast_PkgVersion_Body eta-0)) e-1 u--vers)))))) ((0) (DataC-45FilePath-C-60C-47C-62 u--dir (PackC-45ConfigC-45Environment-pkgRelDir arg-5))) (else (DataC-45FilePath-C-60C-47C-62 u--dir (PackC-45ConfigC-45Environment-pkgRelDir arg-5))))))))
(define PackC-45ConfigC-45Environment-pkgExec (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (cons (DataC-45FilePath-C-60C-47C-62 (case (vector-ref arg-3 0) ((0) (let ((e-2 (vector-ref arg-3 2))) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 arg-0)) eff-0) (csegen-248)) ((csegen-250) (let ((e-7 (vector-ref arg-1 1))) e-7))) ((csegen-250) arg-2)) ((csegen-250) e-2)))) ((1) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 arg-0)) eff-0) (csegen-248)) ((csegen-250) (let ((e-1 (vector-ref arg-1 1))) e-1))) (csegen-256)) ((csegen-250) arg-2))) (else (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 arg-0)) eff-0) (csegen-248)) ((csegen-250) (let ((e-1 (vector-ref arg-1 1))) e-1))) (csegen-263)))) (csegen-267)) arg-4)))
(define PackC-45ConfigC-45Environment-pathDirs (lambda (arg-1 arg-2 arg-3) (let ((sc0 (Builtin-fst arg-1))) (let ((e-1 (car sc0))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (PackC-45CoreC-45IO-filterM (let ((sc1 (Builtin-fst arg-1))) (let ((e-7 (car sc1))) e-7)) (lambda (lamc-0) (let ((e-7 (car lamc-0))) (let ((e-6 (cdr lamc-0))) (SystemC-45FileC-45Meta-exists (Builtin-fst arg-1) (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 ((arg-3 e-7) e-6)))))) (DataC-45SortedMap-toList (PackC-45ConfigC-45Types-allPackages (Builtin-snd (Builtin-snd (Builtin-snd arg-1))) (Builtin-fst (Builtin-snd (Builtin-snd arg-1))))))) (lambda (u--ps) (let ((u--psC-39 (PreludeC-45TypesC-45List-filter (lambda (eta-0) (let ((sc1 (PackC-45DatabaseC-45Types-isCorePkg (let ((eff-0 (Builtin-fst eta-0))) eff-0)))) (cond ((equal? sc1 1) 0) (else 1)))) u--ps))) (let ((sc1 (Builtin-fst arg-1))) (let ((e-7 (car sc1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (PreludeC-45Types-fastConcat (DataC-45List-intersperse ":" (cons arg-2 (((csegen-226) (lambda (lamc-0) (let ((e-15 (car lamc-0))) (let ((e-14 (cdr lamc-0))) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons ((csegen-234) ((arg-3 e-15) e-14)) '())))))) u--psC-39)))))))))))))))))
(define PackC-45ConfigC-45Environment-patchesDir (lambda (arg-0) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 arg-0)) eff-0) (csegen-877)) (vector 1 (cons '() (cons #\p (cons #\a (cons #\t (cons #\c (cons #\h (cons #\e (cons #\s '()))))))))))))
(define PackC-45ConfigC-45Environment-patchFile (lambda (arg-0 arg-1 arg-2 arg-3) (let ((e-1 (car arg-3))) (let ((e-2 (cdr arg-3))) (cons (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (PackC-45ConfigC-45Environment-patchesDir arg-0) (vector 1 (cons '() ((csegen-302) (let ((e-21 (vector-ref arg-1 0))) e-21))))) ((csegen-250) arg-2)) e-1) (let ((eff-0 e-2)) (let ((eff-1 (cons #\. (cons #\p (cons #\a (cons #\t (cons #\c (cons #\h '())))))))) (PreludeC-45TypesC-45List-tailRecAppend eff-0 eff-1))))))))
(define PackC-45ConfigC-45Environment-packagePathDirs (lambda (arg-1 arg-2) (PackC-45ConfigC-45Environment-pathDirs (cons arg-1 (cons (let ((e-0 (vector-ref arg-2 0))) e-0) (cons (let ((e-3 (vector-ref arg-2 3))) e-3) (let ((e-2 (vector-ref arg-2 2))) e-2)))) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 (let ((e-0 (vector-ref arg-2 0))) e-0))) eff-0) (csegen-248)) ((csegen-250) (let ((e-3 (vector-ref arg-2 3))) (let ((e-6 (vector-ref e-3 1))) e-6)))) (csegen-263)) (vector 1 (cons '() (PackC-45CoreC-45Types-C-60C-45C-62 (lambda (eta-0) eta-0) (lambda (eta-0) (PackC-45CoreC-45Types-u--cast_Cast_PkgVersion_Body eta-0)) (csegen-261) (let ((e-3 (vector-ref arg-2 3))) (let ((e-5 (vector-ref e-3 2))) e-5))))))) '())) (lambda (eta-0) (lambda (eta-1) (DataC-45FilePath-C-60C-47C-62 (case (vector-ref eta-1 0) ((0) (let ((e-2 (vector-ref eta-1 2))) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 (let ((e-0 (vector-ref arg-2 0))) e-0))) eff-0) (csegen-248)) ((csegen-250) (let ((e-5 (vector-ref arg-2 3))) (let ((e-10 (vector-ref e-5 1))) e-10)))) ((csegen-250) eta-0)) ((csegen-250) e-2)))) ((1) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 (let ((e-0 (vector-ref arg-2 0))) e-0))) eff-0) (csegen-248)) ((csegen-250) (let ((e-3 (vector-ref arg-2 3))) (let ((e-9 (vector-ref e-3 1))) e-9)))) (csegen-256)) ((csegen-250) eta-0))) (else (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 (let ((e-0 (vector-ref arg-2 0))) e-0))) eff-0) (csegen-248)) ((csegen-250) (let ((e-3 (vector-ref arg-2 3))) (let ((e-6 (vector-ref e-3 1))) e-6)))) (csegen-263)))) (vector 1 (cons '() (PackC-45CoreC-45Types-C-60C-45C-62 (lambda (eta-2) eta-2) (lambda (eta-2) (PackC-45CoreC-45Types-u--cast_Cast_PkgVersion_Body eta-2)) (csegen-261) (let ((e-3 (vector-ref arg-2 3))) (let ((e-5 (vector-ref e-3 2))) e-5)))))))))))
(define PackC-45ConfigC-45Environment-packagePath (lambda (arg-1 arg-2) (PreludeC-45Interfaces-C-60C-36C-62 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) (lambda (__infixTupleSection-0) (cons "IDRIS2_PACKAGE_PATH" __infixTupleSection-0)) (PackC-45ConfigC-45Environment-packagePathDirs arg-1 arg-2))))
(define PackC-45ConfigC-45Environment-packageLibDirs (lambda (arg-1 arg-2) (PackC-45ConfigC-45Environment-pathDirs (cons arg-1 (cons (let ((e-0 (vector-ref arg-2 0))) e-0) (cons (let ((e-3 (vector-ref arg-2 3))) e-3) (let ((e-2 (vector-ref arg-2 2))) e-2)))) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 (let ((e-0 (vector-ref arg-2 0))) e-0))) eff-0) (csegen-248)) ((csegen-250) (let ((e-3 (vector-ref arg-2 3))) (let ((e-6 (vector-ref e-3 1))) e-6)))) (csegen-263)) (vector 1 (cons '() (PackC-45CoreC-45Types-C-60C-45C-62 (lambda (eta-0) eta-0) (lambda (eta-0) (PackC-45CoreC-45Types-u--cast_Cast_PkgVersion_Body eta-0)) (csegen-261) (let ((e-3 (vector-ref arg-2 3))) (let ((e-5 (vector-ref e-3 2))) e-5)))))) (csegen-308))) '())) (lambda (eta-0) (lambda (eta-1) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (case (vector-ref eta-1 0) ((0) (let ((e-2 (vector-ref eta-1 2))) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 (let ((e-0 (vector-ref arg-2 0))) e-0))) eff-0) (csegen-248)) ((csegen-250) (let ((e-5 (vector-ref arg-2 3))) (let ((e-10 (vector-ref e-5 1))) e-10)))) ((csegen-250) eta-0)) ((csegen-250) e-2)))) ((1) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 (let ((e-0 (vector-ref arg-2 0))) e-0))) eff-0) (csegen-248)) ((csegen-250) (let ((e-3 (vector-ref arg-2 3))) (let ((e-9 (vector-ref e-3 1))) e-9)))) (csegen-256)) ((csegen-250) eta-0))) (else (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 (let ((e-0 (vector-ref arg-2 0))) e-0))) eff-0) (csegen-248)) ((csegen-250) (let ((e-3 (vector-ref arg-2 3))) (let ((e-6 (vector-ref e-3 1))) e-6)))) (csegen-263)))) (vector 1 (cons '() (PackC-45CoreC-45Types-C-60C-45C-62 (lambda (eta-2) eta-2) (lambda (eta-2) (PackC-45CoreC-45Types-u--cast_Cast_PkgVersion_Body eta-2)) (csegen-261) (let ((e-3 (vector-ref arg-2 3))) (let ((e-5 (vector-ref e-3 2))) e-5)))))) (csegen-308)))))))
(define PackC-45ConfigC-45Environment-packageDataDirs (lambda (arg-1 arg-2) (PackC-45ConfigC-45Environment-pathDirs (cons arg-1 (cons (let ((e-0 (vector-ref arg-2 0))) e-0) (cons (let ((e-3 (vector-ref arg-2 3))) e-3) (let ((e-2 (vector-ref arg-2 2))) e-2)))) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 (let ((e-0 (vector-ref arg-2 0))) e-0))) eff-0) (csegen-248)) ((csegen-250) (let ((e-3 (vector-ref arg-2 3))) (let ((e-6 (vector-ref e-3 1))) e-6)))) (csegen-263)) (vector 1 (cons '() (PackC-45CoreC-45Types-C-60C-45C-62 (lambda (eta-0) eta-0) (lambda (eta-0) (PackC-45CoreC-45Types-u--cast_Cast_PkgVersion_Body eta-0)) (csegen-261) (let ((e-3 (vector-ref arg-2 3))) (let ((e-5 (vector-ref e-3 2))) e-5)))))) (csegen-903))) '())) (lambda (eta-0) (lambda (eta-1) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (case (vector-ref eta-1 0) ((0) (let ((e-2 (vector-ref eta-1 2))) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 (let ((e-0 (vector-ref arg-2 0))) e-0))) eff-0) (csegen-248)) ((csegen-250) (let ((e-5 (vector-ref arg-2 3))) (let ((e-10 (vector-ref e-5 1))) e-10)))) ((csegen-250) eta-0)) ((csegen-250) e-2)))) ((1) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 (let ((e-0 (vector-ref arg-2 0))) e-0))) eff-0) (csegen-248)) ((csegen-250) (let ((e-3 (vector-ref arg-2 3))) (let ((e-9 (vector-ref e-3 1))) e-9)))) (csegen-256)) ((csegen-250) eta-0))) (else (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 (let ((e-0 (vector-ref arg-2 0))) e-0))) eff-0) (csegen-248)) ((csegen-250) (let ((e-3 (vector-ref arg-2 3))) (let ((e-6 (vector-ref e-3 1))) e-6)))) (csegen-263)))) (vector 1 (cons '() (PackC-45CoreC-45Types-C-60C-45C-62 (lambda (eta-2) eta-2) (lambda (eta-2) (PackC-45CoreC-45Types-u--cast_Cast_PkgVersion_Body eta-2)) (csegen-261) (let ((e-3 (vector-ref arg-2 3))) (let ((e-5 (vector-ref e-3 2))) e-5)))))) (csegen-903)))))))
(define PackC-45ConfigC-45Environment-packToml(blodwen-lazy (lambda () (cons #\p (cons #\a (cons #\c (cons #\k (csegen-904))))))))
(define PackC-45ConfigC-45Environment-packRepo (lambda (arg-0) (DataC-45Maybe-fromMaybe (lambda () (PackC-45CoreC-45Git-defaultPackRepo)) (let ((e-5 (vector-ref arg-0 3))) e-5))))
(define PackC-45ConfigC-45Environment-packExec (lambda (arg-0) (cons (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 arg-0)) eff-0) (csegen-267)) (csegen-27))))
(define PackC-45ConfigC-45Environment-packCommit (lambda (arg-0) (let ((e-6 (vector-ref arg-0 4))) e-6)))
(define PackC-45ConfigC-45Environment-logMany (lambda (arg-1 arg-2 arg-3 arg-4 arg-5) (PreludeC-45Interfaces-when (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (let ((sc0 (PackC-45CoreC-45Types-u--C-62C-61_Ord_LogLevel arg-3 arg-2))) (cond ((equal? sc0 1) (let ((sc1 (PreludeC-45Types-u--null_Foldable_List (arg-5)))) (cond ((equal? sc1 1) 0) (else 1)))) (else 0))) (lambda () (PackC-45ConfigC-45Environment-log arg-1 arg-2 arg-3 (lambda () (DataC-45String-fastUnlines (cons (arg-4) (((csegen-226) (lambda (eta-0) (DataC-45String-indent 2 eta-0))) (arg-5))))))))))
(define PackC-45ConfigC-45Environment-log (lambda (arg-1 arg-2 arg-3 arg-4) (PreludeC-45Interfaces-when (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (PackC-45CoreC-45Types-u--C-62C-61_Ord_LogLevel arg-3 arg-2) (lambda () (PreludeC-45IO-putStrLn arg-1 (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons "[ " (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_LogLevel arg-3) (cons " ] " (cons (arg-4) '()))))))))))
(define PackC-45ConfigC-45Environment-loadDB (lambda (arg-1 arg-2 arg-3 arg-4) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-missing (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 arg-3)) eff-0) (csegen-877))) (lambda (bind-0) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) bind-0 (lambda () (PackC-45ConfigC-45Environment-updateDB arg-1 arg-2 arg-3))))) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45ConfigC-45Environment-log (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) (let ((e-18 (vector-ref arg-4 16))) e-18) 0 (lambda () "reading package collection")) (lambda () (PackC-45CoreC-45TOML-readFromTOML arg-1 (lambda (eta-0) (lambda (eta-1) (PackC-45DatabaseC-45TOML-u--fromTOML_FromTOML_DB eta-0 eta-1))) (PackC-45ConfigC-45Environment-dbFile arg-3 arg-4))))))))
(define PackC-45ConfigC-45Environment-libPath (lambda (arg-1 arg-2) (PreludeC-45Interfaces-C-60C-36C-62 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) (lambda (__infixTupleSection-0) (cons "IDRIS2_LIBS" __infixTupleSection-0)) (PackC-45ConfigC-45Environment-packageLibDirs arg-1 arg-2))))
(define PackC-45ConfigC-45Environment-libInstallPrefix (lambda (arg-1 arg-2 arg-3) (cons (cons "IDRIS2_PREFIX" (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons (DataC-45FilePath-u--interpolate_Interpolation_C-40PathC-32C-36tC-41 (let ((e-1 (vector-ref arg-3 0))) (case (vector-ref e-1 0) ((0) (let ((e-8 (vector-ref e-1 2))) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 arg-1)) eff-0) (csegen-248)) ((csegen-250) (let ((e-12 (vector-ref arg-2 1))) e-12))) ((csegen-250) (let ((e-13 (vector-ref arg-3 1))) e-13))) ((csegen-250) e-8)))) ((1) (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 arg-1)) eff-0) (csegen-248)) ((csegen-250) (let ((e-11 (vector-ref arg-2 1))) e-11))) (csegen-256)) ((csegen-250) (let ((e-12 (vector-ref arg-3 1))) e-12)))) (else (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 arg-1)) eff-0) (csegen-248)) ((csegen-250) (let ((e-8 (vector-ref arg-2 1))) e-8))) (csegen-263)))))) '()))) '())))
(define PackC-45ConfigC-45Environment-ipkgCachePath (lambda (arg-0 arg-1 arg-2 ext-0) (let ((e-1 (car ext-0))) (let ((e-2 (cdr ext-0))) (cons (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 arg-0)) eff-0) (csegen-918)) ((csegen-250) arg-1)) ((csegen-250) arg-2)) e-1) e-2)))))
(define PackC-45ConfigC-45Environment-idrisWithCG (lambda (arg-0) (PackC-45ConfigC-45Environment-case--idrisWithCG-3108 arg-0 (let ((e-2 (vector-ref arg-0 2))) (let ((e-19 (vector-ref e-2 17))) e-19)))))
(define PackC-45ConfigC-45Environment-idrisExec (lambda (arg-0 arg-1) (cons (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 arg-0)) eff-0) (csegen-248)) ((csegen-250) (let ((e-1 (vector-ref arg-1 1))) e-1))) (csegen-263)) (csegen-267)) (csegen-261))))
(define PackC-45ConfigC-45Environment-getPackDir (lambda (arg-1) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45ConfigC-45Environment-getEnvPath (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) "PACK_DIR") (lambda (_-0) (if (null? _-0) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45ConfigC-45Environment-getEnvPath (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) "HOME") (lambda (_-1) (if (null? _-1) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) (vector 0 (vector 1 )))))) (let ((e-2 (unbox _-1))) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) e-6)) (DataC-45FilePath-C-60C-47C-62 e-2 (vector 1 (cons '() (cons #\. (csegen-27)))))))))) (let ((e-2 (unbox _-0))) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) e-6)) e-2)))))))
(define PackC-45ConfigC-45Environment-getEnvPath (lambda (arg-1 arg-2) (PreludeC-45Interfaces-C-60C-36C-62 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) (lambda (arg-0) (PreludeC-45Types-u--C-62C-62C-61_Monad_Maybe arg-0 (lambda (eta-0) (DataC-45FilePathC-45AbsPath-parse eta-0)))) (System-getEnv arg-1 arg-2))))
(define PackC-45ConfigC-45Environment-env (lambda (arg-1 arg-2 arg-3 arg-4 arg-5) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45ConfigC-45Environment-loadDB arg-1 arg-3 arg-2 arg-4) (lambda (u--db) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45ConfigC-45Types-traverse (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (eta-0) (lambda (eta-1) (PackC-45ConfigC-45Environment-resolveMeta arg-1 arg-2 arg-5 eta-0 eta-1))) (let ((e-0 (vector-ref u--db 0))) e-0) arg-4) (lambda (u--c) (let ((u--url (DataC-45Maybe-fromMaybe (lambda () (let ((e-0 (vector-ref u--db 0))) e-0)) (let ((e-3 (vector-ref u--c 1))) e-3)))) (let ((u--commit (DataC-45Maybe-fromMaybe (lambda () (let ((e-1 (vector-ref u--db 1))) e-1)) (let ((e-4 (vector-ref u--c 2))) e-4)))) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (vector arg-2 arg-3 u--c (let ((e-2 (vector-ref u--db 2))) (let ((e-3 (vector-ref u--db 3))) (vector u--url u--commit e-2 e-3)))))))))))))
(define PackC-45ConfigC-45Environment-defaultColl (lambda (arg-1 arg-2 arg-3) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-missing (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 arg-3)) eff-0) (csegen-877))) (lambda (bind-0) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) bind-0 (lambda () (PackC-45ConfigC-45Environment-updateDB arg-1 arg-2 arg-3))))) (lambda () (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) eta-2 eta-3))))) (lambda (eta-0) (PreludeC-45TypesC-45List-filter (lambda (arg-0) (let ((sc0 (let ((eff-0 (cons #\H (cons #\E (cons #\A (cons #\D (csegen-904))))))) (let ((eff-1 arg-0)) (PreludeC-45Types-u--C-61C-61_Eq_C-40ListC-32C-36aC-41 (csegen-2) eff-0 eff-1))))) (cond ((equal? sc0 1) 0) (else 1)))) eta-0)) (PackC-45CoreC-45IO-tomlFiles arg-1 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 arg-3)) eff-0) (csegen-877)))) (lambda (_-0) (if (null? _-0) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (csegen-931)) (let ((e-1 (car _-0))) (let ((e-2 (cdr _-0))) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-4 (car arg-1))) (let ((e-7 (vector-ref e-4 0))) e-7)) (PreludeC-45Types-maybe (lambda () (csegen-931)) (lambda () (lambda (eta-0) eta-0)) ((csegen-493) (DataC-45FilePathC-45Body-split (PreludeC-45Types-u--foldl_Foldable_List (lambda (eta-0) (lambda (eta-1) (let ((sc1 (PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering (let ((eff-0 eta-0)) (let ((eff-1 eta-1)) (PreludeC-45Types-u--compare_Ord_C-40ListC-32C-36aC-41 (csegen-14) eff-0 eff-1))) 2))) (cond ((equal? sc1 1) eta-0) (else eta-1))))) e-1 e-2))))))))))))))
(define PackC-45ConfigC-45Environment-dbFile (lambda (arg-0 arg-1) (cons (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 arg-0)) eff-0) (csegen-877)) (let ((eff-0 (let ((eff-0 (let ((e-2 (vector-ref arg-1 0))) e-2))) eff-0))) (let ((eff-1 (csegen-904))) (PreludeC-45TypesC-45List-tailRecAppend eff-0 eff-1))))))
(define PackC-45ConfigC-45Environment-dataPath (lambda (arg-1 arg-2) (PreludeC-45Interfaces-C-60C-36C-62 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) (lambda (__infixTupleSection-0) (cons "IDRIS2_DATA" __infixTupleSection-0)) (PackC-45ConfigC-45Environment-packageDataDirs arg-1 arg-2))))
(define PackC-45ConfigC-45Environment-coreCachePath (lambda (arg-0 arg-1 arg-2) (cons (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 arg-0)) eff-0) (csegen-918)) ((let ((eff-0 (lambda (eta-0) (vector 1 (cons '() (PackC-45DatabaseC-45Types-u--cast_Cast_CorePkg_Body eta-0)))))) (lambda (arg-3) (eff-0 arg-3))) arg-2)) ((csegen-250) (let ((e-1 (vector-ref arg-1 1))) e-1))) (PackC-45DatabaseC-45Types-coreIpkgFile arg-2))))
(define PackC-45ConfigC-45Environment-commitFile (lambda (arg-0 arg-1 arg-2) (let ((u--relPath ((csegen-880) (PreludeC-45Interfaces-concat (csegen-233) (csegen-98) (cons (let ((eff-0 arg-1)) eff-0) (cons "/" (cons (let ((eff-0 arg-2)) eff-0) '()))))))) (cons (DataC-45FilePath-C-60C-47C-62 (DataC-45FilePath-C-60C-47C-62 (let ((eff-0 arg-0)) eff-0) (csegen-918)) u--relPath) (cons #\c (cons #\o (cons #\m (cons #\m (cons #\i (cons #\t '()))))))))))
(define PackC-45ConfigC-45Environment-buildEnv (lambda (arg-1 arg-2) (PreludeC-45Interfaces-sequence (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (csegen-103) (cons (PackC-45ConfigC-45Environment-packagePath arg-1 arg-2) (cons (PackC-45ConfigC-45Environment-libPath arg-1 arg-2) (cons (PackC-45ConfigC-45Environment-dataPath arg-1 arg-2) '()))))))
(load-shared-object "libidris2_support.so")
(collect-request-handler (lambda () (collect) (blodwen-run-finalisers)))
(PrimIO-unsafePerformIO (MicroPack-main))  (collect 4)
  (blodwen-run-finalisers)
  
  )