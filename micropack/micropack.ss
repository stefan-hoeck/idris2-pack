#!/usr/bin/scheme --program

;; @generated by Idris 0.5.1-a197300f7, Chez backend
(import (chezscheme))
(case (machine-type)
  [(i3fb ti3fb a6fb ta6fb) #f]
  [(i3le ti3le a6le ta6le tarm64le) (load-shared-object "libc.so.6")]
  [(i3osx ti3osx a6osx ta6osx tarm64osx) (load-shared-object "libc.dylib")]
  [(i3nt ti3nt a6nt ta6nt) (load-shared-object "msvcrt.dll")]
  [else (load-shared-object "libc.so")])



(let ()
(define (blodwen-os)
  (case (machine-type)
    [(i3le ti3le a6le ta6le) "unix"]  ; GNU/Linux
    [(i3ob ti3ob a6ob ta6ob) "unix"]  ; OpenBSD
    [(i3fb ti3fb a6fb ta6fb) "unix"]  ; FreeBSD
    [(i3nb ti3nb a6nb ta6nb) "unix"]  ; NetBSD
    [(i3osx ti3osx a6osx ta6osx tarm64osx) "darwin"]
    [(i3nt ti3nt a6nt ta6nt) "windows"]
    [else "unknown"]))

(define blodwen-lazy
  (lambda (f)
    (let ([evaluated #f] [res void])
      (lambda ()
        (if (not evaluated)
            (begin (set! evaluated #t)
                   (set! res (f))
                   (set! f void))
            (void))
        res))))

(define (blodwen-toSignedInt x bits)
  (if (logbit? bits x)
      (logor x (ash -1 bits))
      (logand x (sub1 (ash 1 bits)))))

(define (blodwen-toUnsignedInt x bits)
  (logand x (sub1 (ash 1 bits))))

(define (blodwen-euclidDiv a b)
  (let ((q (quotient a b))
        (r (remainder a b)))
    (if (< r 0)
      (if (> b 0) (- q 1) (+ q 1))
      q)))

(define (blodwen-euclidMod a b)
  (let ((r (remainder a b)))
    (if (< r 0)
      (if (> b 0) (+ r b) (- r b))
      r)))

(define bu+ (lambda (x y bits) (blodwen-toUnsignedInt (+ x y) bits)))
(define bu- (lambda (x y bits) (blodwen-toUnsignedInt (- x y) bits)))
(define bu* (lambda (x y bits) (blodwen-toUnsignedInt (* x y) bits)))
(define bu/ (lambda (x y bits) (blodwen-toUnsignedInt (quotient x y) bits)))

(define bs+ (lambda (x y bits) (blodwen-toSignedInt (+ x y) bits)))
(define bs- (lambda (x y bits) (blodwen-toSignedInt (- x y) bits)))
(define bs* (lambda (x y bits) (blodwen-toSignedInt (* x y) bits)))
(define bs/ (lambda (x y bits) (blodwen-toSignedInt (blodwen-euclidDiv x y) bits)))

(define (integer->bits8 x) (logand x (sub1 (ash 1 8))))
(define (integer->bits16 x) (logand x (sub1 (ash 1 16))))
(define (integer->bits32 x) (logand x (sub1 (ash 1 32))))
(define (integer->bits64 x) (logand x (sub1 (ash 1 64))))

(define (bits16->bits8 x) (logand x (sub1 (ash 1 8))))
(define (bits32->bits8 x) (logand x (sub1 (ash 1 8))))
(define (bits64->bits8 x) (logand x (sub1 (ash 1 8))))
(define (bits32->bits16 x) (logand x (sub1 (ash 1 16))))
(define (bits64->bits16 x) (logand x (sub1 (ash 1 16))))
(define (bits64->bits32 x) (logand x (sub1 (ash 1 32))))

(define (blodwen-bits-shl-signed x y bits) (blodwen-toSignedInt (ash x y) bits))

(define (blodwen-bits-shl x y bits) (logand (ash x y) (sub1 (ash 1 bits))))

(define blodwen-shl (lambda (x y) (ash x y)))
(define blodwen-shr (lambda (x y) (ash x (- y))))
(define blodwen-and (lambda (x y) (logand x y)))
(define blodwen-or (lambda (x y) (logor x y)))
(define blodwen-xor (lambda (x y) (logxor x y)))

(define cast-num
  (lambda (x)
    (if (number? x) x 0)))
(define destroy-prefix
  (lambda (x)
    (cond
      ((equal? x "") "")
      ((equal? (string-ref x 0) #\#) "")
      (else x))))

(define exact-floor
  (lambda (x)
    (inexact->exact (floor x))))

(define exact-truncate
  (lambda (x)
    (inexact->exact (truncate x))))

(define exact-truncate-boundedInt
  (lambda (x y)
    (blodwen-toSignedInt (exact-truncate x) y)))

(define exact-truncate-boundedUInt
  (lambda (x y)
    (blodwen-toUnsignedInt (exact-truncate x) y)))

(define cast-char-boundedInt
  (lambda (x y)
    (blodwen-toSignedInt (char->integer x) y)))

(define cast-char-boundedUInt
  (lambda (x y)
    (blodwen-toUnsignedInt (char->integer x) y)))

(define cast-string-int
  (lambda (x)
    (exact-truncate (cast-num (string->number (destroy-prefix x))))))

(define cast-string-boundedInt
  (lambda (x y)
    (blodwen-toSignedInt (cast-string-int x) y)))

(define cast-string-boundedUInt
  (lambda (x y)
    (blodwen-toUnsignedInt (cast-string-int x) y)))

(define cast-int-char
  (lambda (x)
    (if (or
          (and (>= x 0) (<= x #xd7ff))
          (and (>= x #xe000) (<= x #x10ffff)))
        (integer->char x)
        (integer->char 0))))

(define cast-string-double
  (lambda (x)
    (exact->inexact (cast-num (string->number (destroy-prefix x))))))


(define (string-concat xs) (apply string-append xs))
(define (string-unpack s) (string->list s))
(define (string-pack xs) (list->string xs))

(define string-cons (lambda (x y) (string-append (string x) y)))
(define string-reverse (lambda (x)
  (list->string (reverse (string->list x)))))
(define (string-substr off len s)
    (let* ((l (string-length s))
          (b (max 0 off))
          (x (max 0 len))
          (end (min l (+ b x))))
          (if (> b l)
              ""
              (substring s b end))))

(define (blodwen-string-iterator-new s)
  0)

(define (blodwen-string-iterator-to-string _ s ofs f)
  (f (substring s ofs (string-length s))))

(define (blodwen-string-iterator-next s ofs)
  (if (>= ofs (string-length s))
      '() ; EOF
      (cons (string-ref s ofs) (+ ofs 1))))

(define either-left
  (lambda (x)
    (vector 0 x)))

(define either-right
  (lambda (x)
    (vector 1 x)))

(define blodwen-error-quit
  (lambda (msg)
    (display msg)
    (newline)
    (exit 1)))

(define (blodwen-get-line p)
    (if (port? p)
        (let ((str (get-line p)))
            (if (eof-object? str)
                ""
                str))
        void))

(define (blodwen-get-char p)
    (if (port? p)
        (let ((chr (get-char p)))
            (if (eof-object? chr)
                #\nul
                chr))
        void))

;; Buffers

(define (blodwen-new-buffer size)
  (make-bytevector size 0))

(define (blodwen-buffer-size buf)
  (bytevector-length buf))

(define (blodwen-buffer-setbyte buf loc val)
  (bytevector-u8-set! buf loc val))

(define (blodwen-buffer-getbyte buf loc)
  (bytevector-u8-ref buf loc))

(define (blodwen-buffer-setbits16 buf loc val)
  (bytevector-u16-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getbits16 buf loc)
  (bytevector-u16-ref buf loc (native-endianness)))

(define (blodwen-buffer-setbits32 buf loc val)
  (bytevector-u32-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getbits32 buf loc)
  (bytevector-u32-ref buf loc (native-endianness)))

(define (blodwen-buffer-setbits64 buf loc val)
  (bytevector-u64-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getbits64 buf loc)
  (bytevector-u64-ref buf loc (native-endianness)))

(define (blodwen-buffer-setint32 buf loc val)
  (bytevector-s32-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getint32 buf loc)
  (bytevector-s32-ref buf loc (native-endianness)))

(define (blodwen-buffer-setint buf loc val)
  (bytevector-s64-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getint buf loc)
  (bytevector-s64-ref buf loc (native-endianness)))

(define (blodwen-buffer-setdouble buf loc val)
  (bytevector-ieee-double-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getdouble buf loc)
  (bytevector-ieee-double-ref buf loc (native-endianness)))

(define (blodwen-stringbytelen str)
  (bytevector-length (string->utf8 str)))

(define (blodwen-buffer-setstring buf loc val)
  (let* [(strvec (string->utf8 val))
         (len (bytevector-length strvec))]
    (bytevector-copy! strvec 0 buf loc len)))

(define (blodwen-buffer-getstring buf loc len)
  (let [(newvec (make-bytevector len))]
    (bytevector-copy! buf loc newvec 0 len)
    (utf8->string newvec)))

(define (blodwen-buffer-copydata buf start len dest loc)
  (bytevector-copy! buf start dest loc len))

;; Threads

(define-record thread-handle (semaphore))

(define (blodwen-thread proc)
  (let [(sema (blodwen-make-semaphore 0))]
    (fork-thread (lambda () (proc (vector 0)) (blodwen-semaphore-post sema)))
    (make-thread-handle sema)
    ))

(define (blodwen-thread-wait handle)
  (blodwen-semaphore-wait (thread-handle-semaphore handle)))

;; Thread mailboxes

(define blodwen-thread-data
  (make-thread-parameter #f))

(define (blodwen-get-thread-data ty)
  (blodwen-thread-data))

(define (blodwen-set-thread-data ty a)
  (blodwen-thread-data a))

;; Semaphore

(define-record semaphore (box mutex condition))

(define (blodwen-make-semaphore init)
  (make-semaphore (box init) (make-mutex) (make-condition)))

(define (blodwen-semaphore-post sema)
  (with-mutex (semaphore-mutex sema)
    (let [(sema-box (semaphore-box sema))]
      (set-box! sema-box (+ (unbox sema-box) 1))
      (condition-signal (semaphore-condition sema))
    )))

(define (blodwen-semaphore-wait sema)
  (with-mutex (semaphore-mutex sema)
    (let [(sema-box (semaphore-box sema))]
      (when (= (unbox sema-box) 0)
        (condition-wait (semaphore-condition sema) (semaphore-mutex sema)))
      (set-box! sema-box (- (unbox sema-box) 1))
      )))

;; Barrier

(define-record barrier (count-box num-threads mutex cond))

(define (blodwen-make-barrier num-threads)
  (make-barrier (box 0) num-threads (make-mutex) (make-condition)))

(define (blodwen-barrier-wait barrier)
  (let [(count-box (barrier-count-box barrier))
        (num-threads (barrier-num-threads barrier))
        (mutex (barrier-mutex barrier))
        (condition (barrier-cond barrier))]
    (with-mutex mutex
    (let* [(count-old (unbox count-box))
           (count-new (+ count-old 1))]
      (set-box! count-box count-new)
      (if (= count-new num-threads)
          (condition-broadcast condition)
          (condition-wait condition mutex))
      ))))

;; Channel
; With thanks to Alain Zscheile (@zseri) for help with understanding condition
; variables, and figuring out where the problems were and how to solve them.

(define-record channel (read-mut read-cv read-box val-cv val-box))

(define (blodwen-make-channel ty)
  (make-channel
    (make-mutex)
    (make-condition)
    (box #t)
    (make-condition)
    (box '())
    ))

; block on the read status using read-cv until the value has been read
(define (channel-put-while-helper chan)
  (let ([read-mut (channel-read-mut chan)]
        [read-box (channel-read-box chan)]
        [read-cv  (channel-read-cv  chan)]
        )
    (if (unbox read-box)
      (void)    ; val has been read, so everything is fine
      (begin    ; otherwise, block/spin with cv
        (condition-wait read-cv read-mut)
        (channel-put-while-helper chan)
        )
      )))

(define (blodwen-channel-put ty chan val)
  (with-mutex (channel-read-mut chan)
    (channel-put-while-helper chan)
    (let ([read-box (channel-read-box chan)]
          [val-box  (channel-val-box  chan)]
          )
      (set-box! val-box val)
      (set-box! read-box #f)
      ))
  (condition-signal (channel-val-cv chan))
  )

; block on the value until it has been set
(define (channel-get-while-helper chan)
  (let ([read-mut (channel-read-mut chan)]
        [read-box (channel-read-box chan)]
        [val-cv   (channel-val-cv   chan)]
        )
    (if (unbox read-box)
      (begin
        (condition-wait val-cv read-mut)
        (channel-get-while-helper chan)
        )
      (void)
      )))

(define (blodwen-channel-get ty chan)
  (mutex-acquire (channel-read-mut chan))
  (channel-get-while-helper chan)
  (let* ([val-box  (channel-val-box  chan)]
         [read-box (channel-read-box chan)]
         [read-cv  (channel-read-cv  chan)]
         [the-val  (unbox val-box)]
         )
    (set-box! val-box '())
    (set-box! read-box #t)
    (mutex-release (channel-read-mut chan))
    (condition-signal read-cv)
    the-val))

;; Mutex

(define (blodwen-make-mutex)
  (make-mutex))
(define (blodwen-mutex-acquire mutex)
  (mutex-acquire mutex))
(define (blodwen-mutex-release mutex)
  (mutex-release mutex))

;; Condition variable

(define (blodwen-make-condition)
  (make-condition))
(define (blodwen-condition-wait condition mutex)
  (condition-wait condition mutex))
(define (blodwen-condition-wait-timeout condition mutex timeout)
  (let* [(sec (div timeout 1000000))
         (micro (mod timeout 1000000))]
    (condition-wait condition mutex (make-time 'time-duration (* 1000 micro) sec))))
(define (blodwen-condition-signal condition)
  (condition-signal condition))
(define (blodwen-condition-broadcast condition)
  (condition-broadcast condition))

;; Future

(define-record future-internal (result ready mutex signal))
(define (blodwen-make-future work)
  (let ([future (make-future-internal #f #f (make-mutex) (make-condition))])
    (fork-thread (lambda ()
      (let ([result (work)])
        (with-mutex (future-internal-mutex future)
          (set-future-internal-result! future result)
          (set-future-internal-ready! future #t)
          (condition-broadcast (future-internal-signal future))))))
    future))
(define (blodwen-await-future ty future)
  (let ([mutex (future-internal-mutex future)])
    (with-mutex mutex
      (if (not (future-internal-ready future))
          (condition-wait (future-internal-signal future) mutex))
      (future-internal-result future))))

(define (blodwen-sleep s) (sleep (make-time 'time-duration 0 s)))
(define (blodwen-usleep s)
  (let ((sec (div s 1000000))
        (micro (mod s 1000000)))
       (sleep (make-time 'time-duration (* 1000 micro) sec))))

(define (blodwen-clock-time-utc) (current-time 'time-utc))
(define (blodwen-clock-time-monotonic) (current-time 'time-monotonic))
(define (blodwen-clock-time-duration) (current-time 'time-duration))
(define (blodwen-clock-time-process) (current-time 'time-process))
(define (blodwen-clock-time-thread) (current-time 'time-thread))
(define (blodwen-clock-time-gccpu) (current-time 'time-collector-cpu))
(define (blodwen-clock-time-gcreal) (current-time 'time-collector-real))
(define (blodwen-is-time? clk) (if (time? clk) 1 0))
(define (blodwen-clock-second time) (time-second time))
(define (blodwen-clock-nanosecond time) (time-nanosecond time))


(define (blodwen-arg-count)
  (length (command-line)))

(define (blodwen-arg n)
  (if (< n (length (command-line))) (list-ref (command-line) n) ""))

(define (blodwen-hasenv var)
  (if (eq? (getenv var) #f) 0 1))

;; Randoms
(define random-seed-register 0)
(define (initialize-random-seed-once)
  (if (= (virtual-register random-seed-register) 0)
      (let ([seed (time-nanosecond (current-time))])
        (set-virtual-register! random-seed-register seed)
        (random-seed seed))))

(define (blodwen-random-seed seed)
  (set-virtual-register! random-seed-register seed)
  (random-seed seed))
(define blodwen-random
  (case-lambda
    ;; no argument, pick a real value from [0, 1.0)
    [() (begin
          (initialize-random-seed-once)
          (random 1.0))]
    ;; single argument k, pick an integral value from [0, k)
    [(k)
      (begin
        (initialize-random-seed-once)
        (if (> k 0)
              (random k)
              (assertion-violationf 'blodwen-random "invalid range argument ~a" k)))]))

;; For finalisers

(define blodwen-finaliser (make-guardian))
(define (blodwen-register-object obj proc)
  (let [(x (cons obj proc))]
       (blodwen-finaliser x)
       x))
(define blodwen-run-finalisers
  (lambda ()
    (let run ()
      (let ([x (blodwen-finaliser)])
        (when x
          (((cdr x) (car x)) 'erased)
          (run))))))

;; For creating and reading back scheme objects

; read a scheme string and evaluate it, returning 'Just result' on success
; TODO: catch exception!
(define (blodwen-eval-scheme str)
  (guard
     (x [#t '()]) ; Nothing on failure
     (box (eval (read (open-input-string str)))))
  ); box == Just

(define (blodwen-eval-okay obj)
  (if (null? obj)
      0
      1))

(define (blodwen-get-eval-result obj)
  (unbox obj))

(define (blodwen-debug-scheme obj)
  (display obj) (newline))

(define (blodwen-is-number obj)
  (if (number? obj) 1 0))

(define (blodwen-is-integer obj)
  (if (and (number? obj) (exact? obj)) 1 0))

(define (blodwen-is-float obj)
  (if (flonum? obj) 1 0))

(define (blodwen-is-char obj)
  (if (char? obj) 1 0))

(define (blodwen-is-string obj)
  (if (string? obj) 1 0))

(define (blodwen-is-procedure obj)
  (if (procedure? obj) 1 0))

(define (blodwen-is-symbol obj)
  (if (symbol? obj) 1 0))

(define (blodwen-is-vector obj)
  (if (vector? obj) 1 0))

(define (blodwen-is-nil obj)
  (if (null? obj) 1 0))

(define (blodwen-is-pair obj)
  (if (pair? obj) 1 0))

(define (blodwen-is-box obj)
  (if (box? obj) 1 0))

(define (blodwen-make-symbol str)
  (string->symbol str))

; The below rely on checking that the objects are the right type first.

(define (blodwen-vector-ref obj i)
  (vector-ref obj i))

(define (blodwen-vector-length obj)
  (vector-length obj))

(define (blodwen-vector-list obj)
  (vector->list obj))

(define (blodwen-unbox obj)
  (unbox obj))

(define (blodwen-apply obj arg)
  (obj arg))

(define (blodwen-force obj)
  (obj))

(define (blodwen-read-symbol sym)
  (symbol->string sym))

(define (blodwen-id x) x)
(define System-prim__system (lambda (farg-0 farg-1) ((foreign-procedure "idris2_system" (string) int) farg-0)))
(define System-prim__getEnv (lambda (farg-0 farg-1) ((foreign-procedure "getenv" (string) void*) farg-0)))
(define System-prim__getArgCount (lambda (farg-0) (blodwen-arg-count )))
(define System-prim__getArg (lambda (farg-0 farg-1) (blodwen-arg farg-0)))
(define System-prim__exit (lambda (farg-0 farg-1) ((foreign-procedure "exit" (int) void) farg-0) (vector 0 )))
(define PreludeC-45Types-fastUnpack (lambda (farg-0) (string-unpack farg-0)))
(define PreludeC-45Types-fastPack (lambda (farg-0) (string-pack farg-0)))
(define PreludeC-45Types-fastConcat (lambda (farg-0) (string-concat farg-0)))
(define PreludeC-45IO-prim__putStr (lambda (farg-0 farg-1) ((foreign-procedure "idris2_putStr" (string) void) farg-0) (vector 0 )))
(define PreludeC-45IO-prim__getString (lambda (farg-0) ((foreign-procedure "idris2_getString" (void*) string) farg-0)))
(define PreludeC-45IO-prim__getStr (lambda (farg-0) ((foreign-procedure "idris2_getStr" () string) )))
(define PrimIO-prim__nullAnyPtr (lambda (farg-0) ((foreign-procedure "idris2_isNull" (void*) int) farg-0)))
(define SystemC-45FileC-45ReadWrite-prim__writeLine (lambda (farg-0 farg-1 farg-2) ((foreign-procedure "idris2_writeLine" (void* string) int) farg-0 farg-1)))
(define SystemC-45FileC-45ReadWrite-prim__seekLine (lambda (farg-0 farg-1) ((foreign-procedure "idris2_seekLine" (void*) int) farg-0)))
(define SystemC-45FileC-45ReadWrite-prim__readLine (lambda (farg-0 farg-1) ((foreign-procedure "idris2_readLine" (void*) void*) farg-0)))
(define SystemC-45FileC-45ReadWrite-prim__eof (lambda (farg-0 farg-1) ((foreign-procedure "idris2_eof" (void*) int) farg-0)))
(define SystemC-45FileC-45Error-prim__fileErrno (lambda (farg-0) ((foreign-procedure "idris2_fileErrno" () int) )))
(define SystemC-45Errno-prim__strerror (lambda (farg-0 farg-1) ((foreign-procedure "idris2_strerror" (int) string) farg-0)))
(define SystemC-45Errno-prim__getErrno (lambda (farg-0) ((foreign-procedure "idris2_getErrno" () int) )))
(define SystemC-45FileC-45Handle-prim__open (lambda (farg-0 farg-1 farg-2) ((foreign-procedure "idris2_openFile" (string string) void*) farg-0 farg-1)))
(define SystemC-45FileC-45Handle-prim__close (lambda (farg-0 farg-1) ((foreign-procedure "idris2_closeFile" (void*) void) farg-0) (vector 0 )))
(define SystemC-45Directory-prim__openDir (lambda (farg-0 farg-1) ((foreign-procedure "idris2_openDir" (string) void*) farg-0)))
(define SystemC-45Directory-prim__dirEntry (lambda (farg-0 farg-1) ((foreign-procedure "idris2_nextDirEntry" (void*) void*) farg-0)))
(define SystemC-45Directory-prim__currentDir (lambda (farg-0) ((foreign-procedure "idris2_currentDirectory" () void*) )))
(define SystemC-45Directory-prim__closeDir (lambda (farg-0 farg-1) ((foreign-procedure "idris2_closeDir" (void*) void) farg-0) (vector 0 )))
(define SystemC-45Directory-prim__changeDir (lambda (farg-0 farg-1) ((foreign-procedure "idris2_changeDir" (string) int) farg-0)))
(define csegen-0(blodwen-lazy (lambda () (lambda (eta-0) (lambda (eta-1) (PreludeC-45EqOrd-u--C-61C-61_Eq_String eta-0 eta-1))))))
(define csegen-4(blodwen-lazy (lambda () (lambda (eta-0) (lambda (eta-1) (PreludeC-45EqOrd-u--compare_Ord_String eta-0 eta-1))))))
(define csegen-12(blodwen-lazy (lambda () (vector (cons (lambda (arg-528) (lambda (arg-531) (PreludeC-45Basics-on (csegen-0) (lambda (eta-0) eta-0) arg-528 arg-531))) (lambda (arg-538) (lambda (arg-541) (let ((sc0 (PreludeC-45Basics-on (csegen-0) (lambda (eta-0) eta-0) arg-538 arg-541))) (cond ((equal? sc0 1) 0) (else 1)))))) (lambda (arg-1418) (lambda (arg-1421) (PreludeC-45Basics-on (csegen-4) (lambda (eta-0) eta-0) arg-1418 arg-1421))) (lambda (arg-1428) (lambda (arg-1431) (PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering (PreludeC-45Basics-on (csegen-4) (lambda (eta-0) eta-0) arg-1428 arg-1431) 0))) (lambda (arg-1438) (lambda (arg-1441) (PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering (PreludeC-45Basics-on (csegen-4) (lambda (eta-0) eta-0) arg-1438 arg-1441) 2))) (lambda (arg-1448) (lambda (arg-1451) (PreludeC-45EqOrd-u--C-47C-61_Eq_Ordering (PreludeC-45Basics-on (csegen-4) (lambda (eta-0) eta-0) arg-1448 arg-1451) 2))) (lambda (arg-1458) (lambda (arg-1461) (PreludeC-45EqOrd-u--C-47C-61_Eq_Ordering (PreludeC-45Basics-on (csegen-4) (lambda (eta-0) eta-0) arg-1458 arg-1461) 0))) (lambda (arg-1468) (lambda (arg-1471) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering (PreludeC-45Basics-on (csegen-4) (lambda (eta-0) eta-0) arg-1468 arg-1471) 2))) (cond ((equal? sc0 1) arg-1468) (else arg-1471))))) (lambda (arg-1478) (lambda (arg-1481) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering (PreludeC-45Basics-on (csegen-4) (lambda (eta-0) eta-0) arg-1478 arg-1481) 0))) (cond ((equal? sc0 1) arg-1478) (else arg-1481)))))))))
(define csegen-13(blodwen-lazy (lambda () (DataC-45SortedMap-empty (csegen-12)))))
(define csegen-16(blodwen-lazy (lambda () (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (lambda (eta-0) (PreludeC-45IO-u--map_Functor_IO u--func arg-8737 eta-0)))))))))
(define csegen-20(blodwen-lazy (lambda () (vector (csegen-16) (lambda (u--a) (lambda (arg-9440) (lambda (eta-0) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (lambda (eta-0) (let ((act-17 (arg-9446 eta-0))) (let ((act-16 (arg-9453 eta-0))) (act-17 act-16))))))))))))
(define csegen-23(blodwen-lazy (lambda () (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (lambda (eta-0) (let ((act-24 (arg-9920 eta-0))) ((arg-9923 act-24) eta-0))))))))))
(define csegen-26(blodwen-lazy (lambda () (vector (csegen-20) (csegen-23) (lambda (u--a) (lambda (arg-9934) (lambda (eta-0) (let ((act-29 (arg-9934 eta-0))) (act-29 eta-0)))))))))
(define csegen-29(blodwen-lazy (lambda () (vector (csegen-20) (csegen-23) (lambda (u--a) (lambda (arg-9934) (lambda (eta-0) (let ((act-51 (arg-9934 eta-0))) (act-51 eta-0)))))))))
(define csegen-30(blodwen-lazy (lambda () (cons (csegen-29) (lambda (u--a) (lambda (arg-11999) arg-11999))))))
(define csegen-40(blodwen-lazy (lambda () (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (csegen-16) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (csegen-20) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (csegen-20) arg-9446 arg-9453)))))))))
(define csegen-46(blodwen-lazy (lambda () (vector (csegen-40) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (csegen-26) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (csegen-26) arg-9934)))))))
(define csegen-55(blodwen-lazy (lambda () (cons (vector (csegen-40) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (csegen-29) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (csegen-29) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (csegen-30) arg-11999)))))))
(define csegen-84(blodwen-lazy (lambda () (vector (lambda (u--acc) (lambda (u--elem) (lambda (u--func) (lambda (u--init) (lambda (u--input) (PreludeC-45Types-u--foldr_Foldable_List u--func u--init u--input)))))) (lambda (u--elem) (lambda (u--acc) (lambda (u--func) (lambda (u--init) (lambda (u--input) (PreludeC-45Types-u--foldl_Foldable_List u--func u--init u--input)))))) (lambda (u--elem) (lambda (arg-10420) (PreludeC-45Types-u--null_Foldable_List arg-10420))) (lambda (u--elem) (lambda (u--acc) (lambda (u--m) (lambda (i_con-0) (lambda (u--funcM) (lambda (u--init) (lambda (u--input) (PreludeC-45Types-u--foldlM_Foldable_List i_con-0 u--funcM u--init u--input)))))))) (lambda (u--elem) (lambda (arg-10449) arg-10449)) (lambda (u--a) (lambda (u--m) (lambda (i_con-0) (lambda (u--f) (lambda (arg-10463) (PreludeC-45Types-u--foldMap_Foldable_List i_con-0 u--f arg-10463))))))))))
(define csegen-89(blodwen-lazy (lambda () (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (PreludeC-45Types-u--map_Functor_List u--func arg-8737))))) (csegen-84) (lambda (u--b) (lambda (u--a) (lambda (u--f) (lambda (i_con-0) (lambda (arg-13115) (lambda (arg-13122) (PreludeC-45Types-u--traverse_Traversable_List i_con-0 arg-13115 arg-13122)))))))))))
(define csegen-92(blodwen-lazy (lambda () (vector (lambda (arg-5756) (lambda (arg-5759) (bs+ arg-5756 arg-5759 63))) (lambda (arg-5766) (lambda (arg-5769) (bs* arg-5766 arg-5769 63))) (lambda (arg-5776) (blodwen-toSignedInt arg-5776 63))))))
(define csegen-106(blodwen-lazy (lambda () (vector (cons (lambda (arg-528) (lambda (arg-531) (PreludeC-45EqOrd-u--C-61C-61_Eq_Int arg-528 arg-531))) (lambda (arg-538) (lambda (arg-541) (PreludeC-45EqOrd-u--C-47C-61_Eq_Int arg-538 arg-541)))) (lambda (arg-1418) (lambda (arg-1421) (PreludeC-45EqOrd-u--compare_Ord_Int arg-1418 arg-1421))) (lambda (arg-1428) (lambda (arg-1431) (PreludeC-45EqOrd-u--C-60_Ord_Int arg-1428 arg-1431))) (lambda (arg-1438) (lambda (arg-1441) (PreludeC-45EqOrd-u--C-62_Ord_Int arg-1438 arg-1441))) (lambda (arg-1448) (lambda (arg-1451) (PreludeC-45EqOrd-u--C-60C-61_Ord_Int arg-1448 arg-1451))) (lambda (arg-1458) (lambda (arg-1461) (PreludeC-45EqOrd-u--C-62C-61_Ord_Int arg-1458 arg-1461))) (lambda (arg-1468) (lambda (arg-1471) (PreludeC-45EqOrd-u--max_Ord_Int arg-1468 arg-1471))) (lambda (arg-1478) (lambda (arg-1481) (PreludeC-45EqOrd-u--min_Ord_Int arg-1478 arg-1481)))))))
(define csegen-128(blodwen-lazy (lambda () (lambda (eta-0) (lambda (eta-1) (cons eta-0 eta-1))))))
(define csegen-132(blodwen-lazy (lambda () (cons (lambda (arg-528) (lambda (arg-531) (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-528 arg-531))) (lambda (arg-538) (lambda (arg-541) (PreludeC-45EqOrd-u--C-47C-61_Eq_Char arg-538 arg-541)))))))
(define csegen-175(blodwen-lazy (lambda () (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 arg-9920 arg-9923))))))))
(define csegen-176(blodwen-lazy (lambda () (lambda (u--a) (lambda (arg-9934) (PreludeC-45Types-u--join_Monad_C-40EitherC-32C-36eC-41 arg-9934))))))
(define csegen-192(blodwen-lazy (lambda () (vector (lambda (u--acc) (lambda (u--elem) (lambda (u--func) (lambda (u--init) (lambda (u--input) (PreludeC-45Types-u--foldr_Foldable_C-40EitherC-32C-36eC-41 u--func u--init u--input)))))) (lambda (u--elem) (lambda (u--acc) (lambda (u--func) (lambda (u--init) (lambda (u--input) (PreludeC-45Types-u--foldl_Foldable_C-40EitherC-32C-36eC-41 u--func u--init u--input)))))) (lambda (u--elem) (lambda (arg-10420) (PreludeC-45Types-u--null_Foldable_C-40EitherC-32C-36eC-41 arg-10420))) (lambda (u--elem) (lambda (u--acc) (lambda (u--m) (lambda (i_con-0) (lambda (u--funcM) (lambda (u--init) (lambda (u--input) (PreludeC-45Types-u--foldlM_Foldable_C-40EitherC-32C-36eC-41 i_con-0 u--funcM u--init u--input)))))))) (lambda (u--elem) (lambda (arg-10449) (PreludeC-45Types-u--toList_Foldable_C-40EitherC-32C-36eC-41 arg-10449))) (lambda (u--a) (lambda (u--m) (lambda (i_con-0) (lambda (u--f) (lambda (arg-10463) (PreludeC-45Types-u--foldMap_Foldable_C-40EitherC-32C-36eC-41 i_con-0 u--f arg-10463))))))))))
(define csegen-196(blodwen-lazy (lambda () (lambda (u--b) (lambda (u--a) (lambda (u--f) (lambda (i_con-0) (lambda (arg-13115) (lambda (arg-13122) (PreludeC-45Types-u--traverse_Traversable_C-40EitherC-32C-36eC-41 i_con-0 arg-13115 arg-13122))))))))))
(define csegen-206(blodwen-lazy (lambda () (cons (lambda (arg-528) (lambda (arg-531) (PreludeC-45EqOrd-u--C-61C-61_Eq_String arg-528 arg-531))) (lambda (arg-538) (lambda (arg-541) (PreludeC-45EqOrd-u--C-47C-61_Eq_String arg-538 arg-541)))))))
(define csegen-210(blodwen-lazy (lambda () (lambda (eta-0) (lambda (eta-1) (cons eta-0 eta-1))))))
(define csegen-212(blodwen-lazy (lambda () (cons (lambda (arg-8326) (lambda (arg-8329) (string-append arg-8326 arg-8329))) ""))))
(define csegen-222(blodwen-lazy (lambda () (cons (cons (lambda (arg-528) (lambda (arg-531) (LibrariesC-45UtilsC-45Path-u--C-61C-61_Eq_PathTokenKind arg-528 arg-531))) (lambda (arg-538) (lambda (arg-541) (LibrariesC-45UtilsC-45Path-u--C-47C-61_Eq_PathTokenKind arg-538 arg-541)))) (cons (lambda (arg-823) (LibrariesC-45UtilsC-45Path-u--TokType_TokenKind_PathTokenKind arg-823)) (lambda (u--kind) (lambda (arg-832) (LibrariesC-45UtilsC-45Path-u--tokValue_TokenKind_PathTokenKind u--kind arg-832))))))))
(define csegen-223(blodwen-lazy (lambda () (LibrariesC-45TextC-45Parser-match (csegen-222) '()))))
(define csegen-225(blodwen-lazy (lambda () (vector 9 1 (csegen-223) (lambda () (lambda (u--server) (vector 11 1 (LibrariesC-45UtilsC-45Path-bodySeparator) (lambda () (vector 9 0 (csegen-223) (lambda () (lambda (u--share) (vector 0 (vector 0 u--server u--share)))))))))))))
(define csegen-230(blodwen-lazy (lambda () (DataC-45Nat-isSucc (let ((sc0 (LibrariesC-45TextC-45Quantity-exactly 2))) (let ((e-0 (car sc0))) e-0))))))
(define csegen-231(blodwen-lazy (lambda () (LibrariesC-45TextC-45Parser-match (csegen-222) (box #\\)))))
(define csegen-233(blodwen-lazy (lambda () (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 (csegen-230) (lambda (eta-0) (vector 0 )) (LibrariesC-45TextC-45Parser-count (LibrariesC-45TextC-45Quantity-exactly 2) (csegen-231))))))
(define csegen-236(blodwen-lazy (lambda () (vector 11 1 (LibrariesC-45TextC-45Parser-match (csegen-222) (box #\?)) (lambda () (vector 11 0 (csegen-231) (lambda () (vector 0 (vector 0 )))))))))
(define csegen-243(blodwen-lazy (lambda () (lambda (arg-0) (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-0 #\.)))))
(define csegen-261(blodwen-lazy (lambda () (LibrariesC-45TextC-45Parser-optional 1 (LibrariesC-45TextC-45Parser-some (LibrariesC-45UtilsC-45Path-bodySeparator))))))
(define csegen-285(blodwen-lazy (lambda () (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 eta-2 eta-3))))))))
(define csegen-292(blodwen-lazy (lambda () (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (LibrariesC-45TextC-45Bounded-u--map_Functor_WithBounds eta-2 eta-3))))))))
(define csegen-295(blodwen-lazy (lambda () (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (PreludeC-45Types-u--map_Functor_Maybe eta-2 eta-3))))))))
(define csegen-297(blodwen-lazy (lambda () (cons (cons "End of input" '()) '()))))
(define csegen-300(blodwen-lazy (lambda () (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (LibrariesC-45TextC-45Bounded-u--map_Functor_WithBounds u--func arg-8737))))))))
(define csegen-311(blodwen-lazy (lambda () (lambda (arg-0) (PreludeC-45EqOrd-u--C-47C-61_Eq_Char arg-0 (integer->char 10))))))
(define csegen-312(blodwen-lazy (lambda () (lambda (arg-0) (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-0 (integer->char 10))))))
(define csegen-322(blodwen-lazy (lambda () (cons (lambda (arg-8326) (lambda (arg-8329) (PreludeC-45TypesC-45List-tailRecAppend arg-8326 arg-8329))) '()))))
(define csegen-323(blodwen-lazy (lambda () (LibrariesC-45TextC-45Parser-sepBy1 1 (ParserC-45RuleC-45Package-dotC-39) (ParserC-45RuleC-45Package-integerLit)))))
(define csegen-326(blodwen-lazy (lambda () (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (DataC-45List1-u--map_Functor_List1 eta-2 eta-3))))))))
(define csegen-337(blodwen-lazy (lambda () (lambda (eta-0) (lambda (eta-1) (vector 15 eta-0 eta-1))))))
(define csegen-347(blodwen-lazy (lambda () (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 (lambda (eta-0) (vector 0 )) (ParserC-45RuleC-45Package-exactProperty "version")))))
(define csegen-363(blodwen-lazy (lambda () (lambda (eta-0) (ParserC-45LexerC-45Common-isIdentTrailing 0 eta-0)))))
(define csegen-433(blodwen-lazy (lambda () (vector 5 (LibrariesC-45TextC-45LexerC-45Core-pred (lambda (eta-0) (ParserC-45LexerC-45Common-isIdentStart 1 eta-0))) (lambda () (LibrariesC-45TextC-45Lexer-many (LibrariesC-45TextC-45LexerC-45Core-pred (lambda (eta-0) (ParserC-45LexerC-45Common-isIdentTrailing 1 eta-0)))))))))
(define csegen-467(blodwen-lazy (lambda () (lambda (arg-0) (PreludeC-45EqOrd-u--C-61C-61_Eq_Char #\. arg-0)))))
(define csegen-487(blodwen-lazy (lambda () (DataC-45SortedMap-empty (vector (csegen-206) (lambda (arg-1418) (lambda (arg-1421) (PreludeC-45EqOrd-u--compare_Ord_String arg-1418 arg-1421))) (lambda (arg-1428) (lambda (arg-1431) (PreludeC-45EqOrd-u--C-60_Ord_String arg-1428 arg-1431))) (lambda (arg-1438) (lambda (arg-1441) (PreludeC-45EqOrd-u--C-62_Ord_String arg-1438 arg-1441))) (lambda (arg-1448) (lambda (arg-1451) (PreludeC-45EqOrd-u--C-60C-61_Ord_String arg-1448 arg-1451))) (lambda (arg-1458) (lambda (arg-1461) (PreludeC-45EqOrd-u--C-62C-61_Ord_String arg-1458 arg-1461))) (lambda (arg-1468) (lambda (arg-1471) (PreludeC-45EqOrd-u--max_Ord_String arg-1468 arg-1471))) (lambda (arg-1478) (lambda (arg-1481) (PreludeC-45EqOrd-u--min_Ord_String arg-1478 arg-1481))))))))
(define csegen-514(blodwen-lazy (lambda () (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 eta-2 eta-3))))))))
(define csegen-519(blodwen-lazy (lambda () (cons (lambda (arg-823) (LanguageC-45TOMLC-45Tokens-u--TokType_TokenKind_TOMLTokenKind arg-823)) (lambda (u--kind) (lambda (arg-832) (LanguageC-45TOMLC-45Tokens-u--tokValue_TokenKind_TOMLTokenKind u--kind arg-832)))))))
(define csegen-522(blodwen-lazy (lambda () (cons (lambda (arg-528) (lambda (arg-531) (LanguageC-45TOMLC-45Tokens-u--C-61C-61_Eq_TOMLTokenKind arg-528 arg-531))) (lambda (arg-538) (lambda (arg-541) (LanguageC-45TOMLC-45Tokens-u--C-47C-61_Eq_TOMLTokenKind arg-538 arg-541)))))))
(define csegen-565(blodwen-lazy (lambda () (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (TextC-45Bounded-u--map_Functor_WithBounds eta-2 eta-3))))))))
(define csegen-567(blodwen-lazy (lambda () (cons (cons "End of input" '()) '()))))
(define csegen-570(blodwen-lazy (lambda () (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (TextC-45Bounded-u--map_Functor_WithBounds u--func arg-8737))))))))
(define csegen-601(blodwen-lazy (lambda () (TextC-45Lexer-opt (TextC-45Lexer-oneOf "+-")))))
(define csegen-606(blodwen-lazy (lambda () (TextC-45Lexer-opt (TextC-45Lexer-is #\_)))))
(define csegen-616(blodwen-lazy (lambda () (TextC-45Lexer-many (vector 5 (csegen-606) (TextC-45Lexer-digit))))))
(define u--prim__add_Integer (lambda (arg-0 arg-1) (+ arg-0 arg-1)))
(define u--prim__sub_Integer (lambda (arg-0 arg-1) (- arg-0 arg-1)))
(define u--prim__mul_Integer (lambda (arg-0 arg-1) (* arg-0 arg-1)))
(define MicroPack-microInit (lambda (arg-0 arg-1 arg-2) (vector arg-0 arg-2 (LibrariesC-45UtilsC-45Path-parse arg-1) 1 1 1 '() 0 '() (cons "pack" '()) (csegen-13) 0 1 (vector 1 ) (vector 0 ))))
(define MicroPack-main (lambda (ext-0) (PackC-45CoreC-45IO-run (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (csegen-26) (PackC-45ConfigC-45Env-packDir (csegen-30)) (lambda (u--dir) (PreludeC-45Interfaces-C-62C-62 (csegen-46) (PackC-45CoreC-45IO-mkDir (csegen-30) u--dir) (lambda () (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (csegen-26) (PackC-45ConfigC-45Env-defaultColl (csegen-30) u--dir) (lambda (u--defCol) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (csegen-26) (System-getArgs (csegen-55)) (lambda (u--args) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (csegen-26) (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (lambda (eta-4) (lambda (eta-5) (lambda (eta-6) (lambda (eta-7) (lambda (eta-8) (PreludeC-45IO-u--map_Functor_IO eta-6 eta-7 eta-8)))))) eta-2 eta-3))))) (lambda (eta-0) (DataC-45Maybe-fromMaybe (lambda () "scheme") eta-0)) (System-getEnv (csegen-55) "SCHEME")) (lambda (u--scheme) (let ((u--db (if (null? u--args) u--defCol (let ((e-2 (cdr u--args))) (if (null? e-2) u--defCol (let ((e-4 (car e-2))) (let ((e-5 (cdr e-2))) (if (null? e-5) e-4 u--defCol)))))))) (let ((u--conf (MicroPack-microInit u--dir u--scheme u--db))) (PreludeC-45Interfaces-C-62C-62 (csegen-46) (PackC-45CoreC-45IO-write (csegen-30) (PackC-45ConfigC-45Types-packToml u--dir) (PackC-45ConfigC-45TOML-initToml u--scheme u--db)) (lambda () (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (csegen-26) (PackC-45RunnerC-45Install-idrisEnv (csegen-30) u--conf) (lambda (u--e) (PackC-45RunnerC-45Install-links (csegen-30) u--e))))))))))))))))) ext-0)))
(define System-system (lambda (arg-1 arg-2) (let ((e-2 (cdr arg-1))) ((e-2 'erased) (lambda (eta-0) (System-prim__system arg-2 eta-0))))))
(define System-getEnv (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (System-prim__getEnv arg-2 eta-0))))) (lambda (u--env) (let ((sc1 (PreludeC-45EqOrd-u--C-47C-61_Eq_Int (PrimIO-prim__nullAnyPtr (PrimIO-prim__forgetPtr u--env)) (blodwen-toSignedInt 0 63)))) (cond ((equal? sc1 1) (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) '()))))) (else (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (box (PreludeC-45IO-prim__getString u--env)))))))))))))))
(define System-getArgs (lambda (arg-1) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (System-prim__getArgCount eta-0))))) (lambda (u--n) (let ((sc1 (PreludeC-45EqOrd-u--C-62_Ord_Int u--n (blodwen-toSignedInt 0 63)))) (cond ((equal? sc1 1) (PreludeC-45Interfaces-for (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) e-10)) (csegen-89) (PreludeC-45Types-u--rangeFromTo_Range_C-36a (cons (vector (csegen-92) (lambda (arg-6164) (lambda (arg-6167) (PreludeC-45Num-u--div_Integral_Int arg-6164 arg-6167))) (lambda (arg-6174) (lambda (arg-6177) (PreludeC-45Num-u--mod_Integral_Int arg-6174 arg-6177)))) (cons (csegen-106) (vector (csegen-92) (lambda (arg-5875) (bs- 0 arg-5875 63)) (lambda (arg-5881) (lambda (arg-5884) (bs- arg-5881 arg-5884 63)))))) 0 (bs- u--n 1 63)) (lambda (eta-0) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-1) (System-prim__getArg eta-0 eta-1))))))) (else (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) '())))))))))))))
(define System-exitWith (lambda (arg-2 arg-3) (if (null? arg-3) (let ((e-2 (cdr arg-2))) ((e-2 'erased) (Builtin-believe_me (lambda (eta-0) (System-prim__exit 0 eta-0))))) (let ((e-0 (car arg-3))) (let ((e-2 (cdr arg-2))) ((e-2 'erased) (Builtin-believe_me (lambda (eta-0) (System-prim__exit e-0 eta-0)))))))))
(define System-exitFailure (lambda (arg-2) (System-exitWith arg-2 (cons 1 (vector 0 )))))
(define System-die (lambda (arg-2 arg-3) (PreludeC-45Interfaces-C-62C-62 (let ((e-1 (car arg-2))) e-1) (PreludeC-45IO-putStrLn arg-2 arg-3) (lambda () (System-exitFailure arg-2)))))
(define PreludeC-45Basics-uncurry (lambda (arg-3 arg-4) (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) ((arg-3 e-2) e-3)))))
(define PreludeC-45Basics-on (lambda (arg-3 arg-4 ext-0 ext-1) ((arg-3 (arg-4 ext-0)) (arg-4 ext-1))))
(define PreludeC-45Basics-flip (lambda (arg-3 arg-4 arg-5) ((arg-3 arg-5) arg-4)))
(define Builtin-snd (lambda (arg-2) (let ((e-3 (cdr arg-2))) e-3)))
(define Builtin-idris_crash (lambda (ext-0) (blodwen-error-quit (string-append "ERROR: " ext-0))))
(define Builtin-fst (lambda (arg-2) (let ((e-2 (car arg-2))) e-2)))
(define Builtin-believe_me (lambda (arg-2) arg-2))
(define PreludeC-45Types-n--9361-8543-u--hexChars (lambda (arg-0) (cons #\0 (cons #\1 (cons #\2 (cons #\3 (cons #\4 (cons #\5 (cons #\6 (cons #\7 (cons #\8 (cons #\9 (cons #\A (cons #\B (cons #\C (cons #\D (cons #\E (cons #\F '()))))))))))))))))))
(define PreludeC-45Types-u--traverse_Traversable_List (lambda (arg-3 arg-4 arg-5) (if (null? arg-5) (let ((e-2 (vector-ref arg-3 1))) ((e-2 'erased) '())) (let ((e-2 (car arg-5))) (let ((e-3 (cdr arg-5))) (let ((e-4 (vector-ref arg-3 2))) ((((e-4 'erased) 'erased) (let ((e-6 (vector-ref arg-3 2))) ((((e-6 'erased) 'erased) (let ((e-10 (vector-ref arg-3 1))) ((e-10 'erased) (csegen-128)))) (arg-4 e-2)))) (PreludeC-45Types-u--traverse_Traversable_List arg-3 arg-4 e-3))))))))
(define PreludeC-45Types-u--traverse_Traversable_C-40EitherC-32C-36eC-41 (lambda (arg-4 arg-5 arg-6) (case (vector-ref arg-6 0) ((0) (let ((e-2 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-4 1))) ((e-4 'erased) (vector 0 e-2))))) (else (let ((e-5 (vector-ref arg-6 1))) (PreludeC-45Interfaces-C-60C-36C-62 (let ((e-1 (vector-ref arg-4 0))) e-1) (lambda (eta-0) (vector 1 eta-0)) (arg-5 e-5)))))))
(define PreludeC-45Types-u--toList_Foldable_C-40EitherC-32C-36eC-41 (lambda (ext-0) (PreludeC-45Types-u--foldr_Foldable_C-40EitherC-32C-36eC-41 (csegen-128) '() ext-0)))
(define PreludeC-45Types-u--rangeFromTo_Range_C-36a (lambda (arg-1 arg-2 arg-3) (let ((sc0 (let ((sc1 (Builtin-fst (Builtin-snd arg-1)))) (let ((e-2 (vector-ref sc1 1))) ((e-2 arg-2) arg-3))))) (cond ((equal? sc0 0) (PreludeC-45Types-takeUntil (lambda (arg-0) (let ((sc1 (Builtin-fst (Builtin-snd arg-1)))) (let ((e-6 (vector-ref sc1 5))) ((e-6 arg-0) arg-3)))) (PreludeC-45Types-countFrom arg-2 (lambda (arg-0) (let ((sc1 (Builtin-snd (Builtin-snd arg-1)))) (let ((e-1 (vector-ref sc1 0))) (let ((e-6 (vector-ref e-1 0))) ((e-6 arg-0) (let ((sc1 (Builtin-snd (Builtin-snd arg-1)))) (let ((e-9 (vector-ref sc1 0))) (let ((e-10 (vector-ref e-9 2))) (e-10 1)))))))))))) ((equal? sc0 1) (PreludeC-45Types-u--pure_Applicative_List arg-2)) (else (PreludeC-45Types-takeUntil (lambda (arg-0) (let ((sc1 (Builtin-fst (Builtin-snd arg-1)))) (let ((e-5 (vector-ref sc1 4))) ((e-5 arg-0) arg-3)))) (PreludeC-45Types-countFrom arg-2 (lambda (u--x) (let ((sc1 (Builtin-snd (Builtin-snd arg-1)))) (let ((e-3 (vector-ref sc1 2))) ((e-3 u--x) (let ((sc1 (Builtin-snd (Builtin-snd arg-1)))) (let ((e-6 (vector-ref sc1 0))) (let ((e-7 (vector-ref e-6 2))) (e-7 1)))))))))))))))
(define PreludeC-45Types-u--pure_Applicative_List (lambda (arg-1) (cons arg-1 '())))
(define PreludeC-45Types-u--null_Foldable_List (lambda (arg-1) (if (null? arg-1) 1 0)))
(define PreludeC-45Types-u--null_Foldable_C-40EitherC-32C-36eC-41 (lambda (arg-2) (case (vector-ref arg-2 0) ((0) 1) (else 0))))
(define PreludeC-45Types-u--map_Functor_Maybe (lambda (arg-2 arg-3) (if (null? arg-3) '() (let ((e-1 (unbox arg-3))) (box (arg-2 e-1))))))
(define PreludeC-45Types-u--map_Functor_List (lambda (arg-2 arg-3) (if (null? arg-3) '() (let ((e-2 (car arg-3))) (let ((e-3 (cdr arg-3))) (cons (arg-2 e-2) (PreludeC-45Types-u--map_Functor_List arg-2 e-3)))))))
(define PreludeC-45Types-u--join_Monad_C-40EitherC-32C-36eC-41 (lambda (arg-2) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 arg-2 (lambda (eta-0) eta-0))))
(define PreludeC-45Types-u--foldr_Foldable_List (lambda (arg-2 arg-3 arg-4) (if (null? arg-4) arg-3 (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) ((arg-2 e-2) (PreludeC-45Types-u--foldr_Foldable_List arg-2 arg-3 e-3)))))))
(define PreludeC-45Types-u--foldr_Foldable_C-40EitherC-32C-36eC-41 (lambda (arg-3 arg-4 arg-5) (case (vector-ref arg-5 0) ((0) arg-4) (else (let ((e-5 (vector-ref arg-5 1))) ((arg-3 e-5) arg-4))))))
(define PreludeC-45Types-u--foldl_Foldable_List (lambda (arg-2 arg-3 arg-4) (if (null? arg-4) arg-3 (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) (PreludeC-45Types-u--foldl_Foldable_List arg-2 ((arg-2 arg-3) e-2) e-3))))))
(define PreludeC-45Types-u--foldl_Foldable_C-40EitherC-32C-36eC-41 (lambda (arg-3 arg-4 arg-5) ((PreludeC-45Types-u--foldr_Foldable_C-40EitherC-32C-36eC-41 (lambda (eta-0) (lambda (eta-1) (PreludeC-45Basics-flip (lambda (eta-2) (lambda (eta-3) (lambda (eta-4) (eta-2 (eta-3 eta-4))))) (lambda (eta-2) (PreludeC-45Basics-flip arg-3 eta-0 eta-2)) eta-1))) (lambda (eta-0) eta-0) arg-5) arg-4)))
(define PreludeC-45Types-u--foldlM_Foldable_List (lambda (arg-3 arg-4 arg-5 ext-0) (PreludeC-45Types-u--foldl_Foldable_List (lambda (u--ma) (lambda (u--b) (let ((e-2 (vector-ref arg-3 1))) ((((e-2 'erased) 'erased) u--ma) (lambda (eta-0) (PreludeC-45Basics-flip arg-4 u--b eta-0)))))) (let ((e-1 (vector-ref arg-3 0))) (let ((e-5 (vector-ref e-1 1))) ((e-5 'erased) arg-5))) ext-0)))
(define PreludeC-45Types-u--foldlM_Foldable_C-40EitherC-32C-36eC-41 (lambda (arg-4 arg-5 arg-6 ext-0) (PreludeC-45Types-u--foldl_Foldable_C-40EitherC-32C-36eC-41 (lambda (u--ma) (lambda (u--b) (let ((e-2 (vector-ref arg-4 1))) ((((e-2 'erased) 'erased) u--ma) (lambda (eta-0) (PreludeC-45Basics-flip arg-5 u--b eta-0)))))) (let ((e-1 (vector-ref arg-4 0))) (let ((e-5 (vector-ref e-1 1))) ((e-5 'erased) arg-6))) ext-0)))
(define PreludeC-45Types-u--foldMap_Foldable_List (lambda (arg-2 arg-3 ext-0) (PreludeC-45Types-u--foldl_Foldable_List (lambda (u--acc) (lambda (u--elem) (let ((e-1 (car arg-2))) ((e-1 u--acc) (arg-3 u--elem))))) (let ((e-2 (cdr arg-2))) e-2) ext-0)))
(define PreludeC-45Types-u--foldMap_Foldable_C-40EitherC-32C-36eC-41 (lambda (arg-3 arg-4 ext-0) (PreludeC-45Types-u--foldr_Foldable_C-40EitherC-32C-36eC-41 (lambda (eta-0) (lambda (eta-1) (let ((e-1 (car arg-3))) ((e-1 (arg-4 eta-0)) eta-1)))) (let ((e-2 (cdr arg-3))) e-2) ext-0)))
(define PreludeC-45Types-u--C-62C-62C-61_Monad_Maybe (lambda (arg-2 arg-3) (if (null? arg-2) '() (let ((e-2 (unbox arg-2))) (arg-3 e-2)))))
(define PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (lambda (arg-3 arg-4) (case (vector-ref arg-3 0) ((0) (let ((e-2 (vector-ref arg-3 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref arg-3 1))) (arg-4 e-5))))))
(define PreludeC-45Types-u--C-61C-61_Eq_C-40MaybeC-32C-36aC-41 (lambda (arg-1 arg-2 arg-3) (if (null? arg-2) (if (null? arg-3) 1 0) (let ((e-2 (unbox arg-2))) (if (null? arg-3) 0 (let ((e-8 (unbox arg-3))) (let ((e-1 (car arg-1))) ((e-1 e-2) e-8))))))))
(define PreludeC-45Types-u--C-61C-61_Eq_C-40ListC-32C-36aC-41 (lambda (arg-1 arg-2 arg-3) (if (null? arg-2) (if (null? arg-3) 1 0) (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (if (null? arg-3) 0 (let ((e-6 (car arg-3))) (let ((e-7 (cdr arg-3))) (let ((sc2 (let ((e-1 (car arg-1))) ((e-1 e-2) e-6)))) (cond ((equal? sc2 1) (PreludeC-45Types-u--C-61C-61_Eq_C-40ListC-32C-36aC-41 arg-1 e-3 e-7)) (else 0)))))))))))
(define PreludeC-45Types-u--C-60C-124C-62_Alternative_Maybe (lambda (arg-1 arg-2) (if (null? arg-1) (arg-2) (let ((e-1 (unbox arg-1))) (box e-1)))))
(define PreludeC-45Types-u--C-60C-42C-62_Applicative_Maybe (lambda (arg-2 arg-3) (if (null? arg-2) '() (let ((e-1 (unbox arg-2))) (if (null? arg-3) '() (let ((e-3 (unbox arg-3))) (box (e-1 e-3))))))))
(define PreludeC-45Types-toUpper (lambda (arg-0) (let ((sc0 (PreludeC-45Types-isLower arg-0))) (cond ((equal? sc0 1) (cast-int-char (bs- (cast-char-boundedInt arg-0 63) 32 63))) (else arg-0)))))
(define PreludeC-45Types-toLower (lambda (arg-0) (let ((sc0 (PreludeC-45Types-isUpper arg-0))) (cond ((equal? sc0 1) (cast-int-char (bs+ (cast-char-boundedInt arg-0 63) 32 63))) (else arg-0)))))
(define PreludeC-45Types-takeUntil (lambda (arg-1 arg-2) (let ((e-1 (car arg-2))) (let ((e-2 (cdr arg-2))) (let ((sc1 (arg-1 e-1))) (cond ((equal? sc1 1) (cons e-1 '())) (else (cons e-1 (PreludeC-45Types-takeUntil arg-1 (e-2))))))))))
(define PreludeC-45TypesC-45List-tailRecAppend (lambda (arg-1 arg-2) (PreludeC-45TypesC-45List-reverseOnto arg-2 (PreludeC-45TypesC-45List-reverse arg-1))))
(define PreludeC-45Types-substr (lambda (arg-0 arg-1 arg-2) (let ((sc0 (PreludeC-45EqOrd-u--C-60_Ord_Integer arg-0 (PreludeC-45TypesC-45String-length arg-2)))) (cond ((equal? sc0 1) (string-substr (blodwen-toSignedInt arg-0 63) (blodwen-toSignedInt arg-1 63) arg-2)) (else "")))))
(define PreludeC-45TypesC-45List-reverseOnto (lambda (arg-1 arg-2) (if (null? arg-2) arg-1 (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (PreludeC-45TypesC-45List-reverseOnto (cons e-2 arg-1) e-3))))))
(define PreludeC-45TypesC-45List-reverse (lambda (ext-0) (PreludeC-45TypesC-45List-reverseOnto '() ext-0)))
(define PreludeC-45Types-prim__integerToNat (lambda (arg-0) (let ((sc0 (let ((sc1 (or (and (<= 0 arg-0) 1) 0))) (cond ((equal? sc1 0) 0)(else 1))))) (cond ((equal? sc0 1) (Builtin-believe_me arg-0)) (else 0)))))
(define PreludeC-45Types-maybe (lambda (arg-2 arg-3 arg-4) (if (null? arg-4) (arg-2) (let ((e-2 (unbox arg-4))) ((arg-3) e-2)))))
(define PreludeC-45Types-listBindOnto (lambda (arg-2 arg-3 arg-4) (if (null? arg-4) (PreludeC-45TypesC-45List-reverse arg-3) (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) (PreludeC-45Types-listBindOnto arg-2 (PreludeC-45TypesC-45List-reverseOnto arg-3 (arg-2 e-2)) e-3))))))
(define PreludeC-45Types-listBind (lambda (arg-2 arg-3) (PreludeC-45Types-listBindOnto arg-3 '() arg-2)))
(define PreludeC-45TypesC-45List-lengthTR (lambda (ext-0) (PreludeC-45TypesC-45List-lengthPlus 0 ext-0)))
(define PreludeC-45TypesC-45List-lengthPlus (lambda (arg-1 arg-2) (if (null? arg-2) arg-1 (let ((e-3 (cdr arg-2))) (PreludeC-45TypesC-45List-lengthPlus (+ arg-1 1) e-3)))))
(define PreludeC-45TypesC-45String-length (lambda (arg-0) (PreludeC-45Types-prim__integerToNat (string-length arg-0))))
(define PreludeC-45Types-isUpper (lambda (arg-0) (let ((sc0 (PreludeC-45EqOrd-u--C-62C-61_Ord_Char arg-0 #\A))) (cond ((equal? sc0 1) (PreludeC-45EqOrd-u--C-60C-61_Ord_Char arg-0 #\Z)) (else 0)))))
(define PreludeC-45Types-isSpace (lambda (arg-0) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-0 #\ ))) (cond ((equal? sc0 1) 1) (else (let ((sc1 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-0 (integer->char 9)))) (cond ((equal? sc1 1) 1) (else (let ((sc2 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-0 (integer->char 13)))) (cond ((equal? sc2 1) 1) (else (let ((sc3 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-0 (integer->char 10)))) (cond ((equal? sc3 1) 1) (else (let ((sc4 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-0 (integer->char 12)))) (cond ((equal? sc4 1) 1) (else (let ((sc5 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-0 (integer->char 11)))) (cond ((equal? sc5 1) 1) (else (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-0 (integer->char 160))))))))))))))))))))))
(define PreludeC-45Types-isOctDigit (lambda (arg-0) (let ((sc0 (PreludeC-45EqOrd-u--C-62C-61_Ord_Char arg-0 #\0))) (cond ((equal? sc0 1) (PreludeC-45EqOrd-u--C-60C-61_Ord_Char arg-0 #\7)) (else 0)))))
(define PreludeC-45Types-isLower (lambda (arg-0) (let ((sc0 (PreludeC-45EqOrd-u--C-62C-61_Ord_Char arg-0 #\a))) (cond ((equal? sc0 1) (PreludeC-45EqOrd-u--C-60C-61_Ord_Char arg-0 #\z)) (else 0)))))
(define PreludeC-45Types-isHexDigit (lambda (arg-0) (PreludeC-45Types-elem (csegen-84) (csegen-132) (PreludeC-45Types-toUpper arg-0) (PreludeC-45Types-n--9361-8543-u--hexChars arg-0))))
(define PreludeC-45Types-isDigit (lambda (arg-0) (let ((sc0 (PreludeC-45EqOrd-u--C-62C-61_Ord_Char arg-0 #\0))) (cond ((equal? sc0 1) (PreludeC-45EqOrd-u--C-60C-61_Ord_Char arg-0 #\9)) (else 0)))))
(define PreludeC-45Types-isAlphaNum (lambda (arg-0) (let ((sc0 (PreludeC-45Types-isDigit arg-0))) (cond ((equal? sc0 1) 1) (else (PreludeC-45Types-isAlpha arg-0))))))
(define PreludeC-45Types-isAlpha (lambda (arg-0) (let ((sc0 (PreludeC-45Types-isUpper arg-0))) (cond ((equal? sc0 1) 1) (else (PreludeC-45Types-isLower arg-0))))))
(define PreludeC-45Types-getAt (lambda (arg-1 arg-2) (cond ((equal? arg-1 0) (if (null? arg-2) '() (let ((e-3 (car arg-2))) (box e-3))))(else (let ((e-1 (- arg-1 1))) (if (null? arg-2) '() (let ((e-7 (cdr arg-2))) (PreludeC-45Types-getAt e-1 e-7))))))))
(define PreludeC-45TypesC-45List-filter (lambda (arg-1 arg-2) (if (null? arg-2) '() (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (let ((sc1 (arg-1 e-2))) (cond ((equal? sc1 1) (cons e-2 (PreludeC-45TypesC-45List-filter arg-1 e-3))) (else (PreludeC-45TypesC-45List-filter arg-1 e-3)))))))))
(define PreludeC-45Types-elemBy (lambda (arg-2 arg-3 arg-4 ext-0) (PreludeC-45Interfaces-any arg-2 (arg-3 arg-4) ext-0)))
(define PreludeC-45Types-elem (lambda (arg-2 arg-3 ext-1 ext-0) (PreludeC-45Types-elemBy arg-2 (lambda (eta-0) (lambda (eta-1) (let ((e-1 (car arg-3))) ((e-1 eta-0) eta-1)))) ext-1 ext-0)))
(define PreludeC-45Types-either (lambda (arg-3 arg-4 arg-5) (case (vector-ref arg-5 0) ((0) (let ((e-2 (vector-ref arg-5 1))) ((arg-3) e-2))) (else (let ((e-5 (vector-ref arg-5 1))) ((arg-4) e-5))))))
(define PreludeC-45Types-countFrom (lambda (arg-1 arg-2) (cons arg-1 (lambda () (PreludeC-45Types-countFrom (arg-2 arg-1) arg-2)))))
(define PreludeC-45Num-u--mod_Integral_Int (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Int arg-1 (blodwen-toSignedInt 0 63)))) (cond ((equal? sc0 0) (blodwen-euclidMod arg-0 arg-1))(else ((Builtin-idris_crash 'erased) "Unhandled input for Prelude.Num.case block in mod at Prelude.Num:131:3--133:40"))))))
(define PreludeC-45Num-u--div_Integral_Int (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Int arg-1 (blodwen-toSignedInt 0 63)))) (cond ((equal? sc0 0) (bs/ arg-0 arg-1 63))(else ((Builtin-idris_crash 'erased) "Unhandled input for Prelude.Num.case block in div at Prelude.Num:128:3--130:40"))))))
(define PreludeC-45EqOrd-u--min_Ord_String (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-60_Ord_String arg-0 arg-1))) (cond ((equal? sc0 1) arg-0) (else arg-1)))))
(define PreludeC-45EqOrd-u--min_Ord_Int (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-60_Ord_Int arg-0 arg-1))) (cond ((equal? sc0 1) arg-0) (else arg-1)))))
(define PreludeC-45EqOrd-u--min_Ord_Char (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-60_Ord_Char arg-0 arg-1))) (cond ((equal? sc0 1) arg-0) (else arg-1)))))
(define PreludeC-45EqOrd-u--min_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (lambda (arg-2 arg-3 arg-4 arg-5) (let ((sc0 (PreludeC-45EqOrd-u--C-60_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 arg-2 arg-3 arg-4 arg-5))) (cond ((equal? sc0 1) arg-4) (else arg-5)))))
(define PreludeC-45EqOrd-u--max_Ord_String (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-62_Ord_String arg-0 arg-1))) (cond ((equal? sc0 1) arg-0) (else arg-1)))))
(define PreludeC-45EqOrd-u--max_Ord_Int (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-62_Ord_Int arg-0 arg-1))) (cond ((equal? sc0 1) arg-0) (else arg-1)))))
(define PreludeC-45EqOrd-u--max_Ord_Char (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-62_Ord_Char arg-0 arg-1))) (cond ((equal? sc0 1) arg-0) (else arg-1)))))
(define PreludeC-45EqOrd-u--max_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (lambda (arg-2 arg-3 arg-4 arg-5) (let ((sc0 (PreludeC-45EqOrd-u--C-62_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 arg-2 arg-3 arg-4 arg-5))) (cond ((equal? sc0 1) arg-4) (else arg-5)))))
(define PreludeC-45EqOrd-u--compare_Ord_String (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-60_Ord_String arg-0 arg-1))) (cond ((equal? sc0 1) 0) (else (let ((sc1 (PreludeC-45EqOrd-u--C-61C-61_Eq_String arg-0 arg-1))) (cond ((equal? sc1 1) 1) (else 2))))))))
(define PreludeC-45EqOrd-u--compare_Ord_Integer (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-60_Ord_Integer arg-0 arg-1))) (cond ((equal? sc0 1) 0) (else (let ((sc1 (PreludeC-45EqOrd-u--C-61C-61_Eq_Integer arg-0 arg-1))) (cond ((equal? sc1 1) 1) (else 2))))))))
(define PreludeC-45EqOrd-u--compare_Ord_Int (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-60_Ord_Int arg-0 arg-1))) (cond ((equal? sc0 1) 0) (else (let ((sc1 (PreludeC-45EqOrd-u--C-61C-61_Eq_Int arg-0 arg-1))) (cond ((equal? sc1 1) 1) (else 2))))))))
(define PreludeC-45EqOrd-u--compare_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (lambda (arg-2 arg-3 arg-4 arg-5) (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) (let ((e-6 (car arg-5))) (let ((e-7 (cdr arg-5))) (let ((sc2 (let ((e-1 (vector-ref arg-2 0))) (let ((e-13 (cdr e-1))) ((e-13 e-2) e-6))))) (cond ((equal? sc2 1) (let ((e-12 (vector-ref arg-2 1))) ((e-12 e-2) e-6))) (else (let ((e-12 (vector-ref arg-3 1))) ((e-12 e-3) e-7)))))))))))
(define PreludeC-45EqOrd-u--C-62_Ord_String (lambda (arg-0 arg-1) (let ((sc0 (or (and (string>? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-62_Ord_Int (lambda (arg-0 arg-1) (let ((sc0 (or (and (> arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-62_Ord_Char (lambda (arg-0 arg-1) (let ((sc0 (or (and (char>? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-62_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (lambda (arg-2 arg-3 arg-4 arg-5) (PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering (PreludeC-45EqOrd-u--compare_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 arg-2 arg-3 arg-4 arg-5) 2)))
(define PreludeC-45EqOrd-u--C-62C-61_Ord_String (lambda (arg-0 arg-1) (let ((sc0 (or (and (string>=? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-62C-61_Ord_Int (lambda (arg-0 arg-1) (let ((sc0 (or (and (>= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-62C-61_Ord_Char (lambda (arg-0 arg-1) (let ((sc0 (or (and (char>=? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-61C-61_Eq_String (lambda (arg-0 arg-1) (let ((sc0 (or (and (string=? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering (lambda (arg-0 arg-1) (cond ((equal? arg-0 0) (cond ((equal? arg-1 0) 1)(else 0))) ((equal? arg-0 1) (cond ((equal? arg-1 1) 1)(else 0))) ((equal? arg-0 2) (cond ((equal? arg-1 2) 1)(else 0)))(else 0))))
(define PreludeC-45EqOrd-u--C-61C-61_Eq_Integer (lambda (arg-0 arg-1) (let ((sc0 (or (and (= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-61C-61_Eq_Int (lambda (arg-0 arg-1) (let ((sc0 (or (and (= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-61C-61_Eq_Char (lambda (arg-0 arg-1) (let ((sc0 (or (and (char=? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-61C-61_Eq_Bool (lambda (arg-0 arg-1) (cond ((equal? arg-0 1) (cond ((equal? arg-1 1) 1)(else 0))) ((equal? arg-0 0) (cond ((equal? arg-1 0) 1)(else 0)))(else 0))))
(define PreludeC-45EqOrd-u--C-60_Ord_String (lambda (arg-0 arg-1) (let ((sc0 (or (and (string<? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-60_Ord_Integer (lambda (arg-0 arg-1) (let ((sc0 (or (and (< arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-60_Ord_Int (lambda (arg-0 arg-1) (let ((sc0 (or (and (< arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-60_Ord_Char (lambda (arg-0 arg-1) (let ((sc0 (or (and (char<? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-60_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (lambda (arg-2 arg-3 arg-4 arg-5) (PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering (PreludeC-45EqOrd-u--compare_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 arg-2 arg-3 arg-4 arg-5) 0)))
(define PreludeC-45EqOrd-u--C-60C-61_Ord_String (lambda (arg-0 arg-1) (let ((sc0 (or (and (string<=? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-60C-61_Ord_Int (lambda (arg-0 arg-1) (let ((sc0 (or (and (<= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-60C-61_Ord_Char (lambda (arg-0 arg-1) (let ((sc0 (or (and (char<=? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-47C-61_Eq_String (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_String arg-0 arg-1))) (cond ((equal? sc0 1) 0) (else 1)))))
(define PreludeC-45EqOrd-u--C-47C-61_Eq_Ordering (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering arg-0 arg-1))) (cond ((equal? sc0 1) 0) (else 1)))))
(define PreludeC-45EqOrd-u--C-47C-61_Eq_Int (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Int arg-0 arg-1))) (cond ((equal? sc0 1) 0) (else 1)))))
(define PreludeC-45EqOrd-u--C-47C-61_Eq_Char (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-0 arg-1))) (cond ((equal? sc0 1) 0) (else 1)))))
(define PreludeC-45InterfacesC-45Applicative-u--pure_Applicative_ComposeC-40C-40C-46C-32C-36fC-41C-32C-36gC-41 (lambda (arg-3 arg-4 ext-0) (let ((e-2 (vector-ref arg-3 1))) ((e-2 'erased) (let ((e-5 (vector-ref arg-4 1))) ((e-5 'erased) ext-0))))))
(define PreludeC-45InterfacesC-45Functor-u--map_Functor_ComposeC-40C-40C-46C-32C-36fC-41C-32C-36gC-41 (lambda (arg-4 arg-5 ext-0 ext-1) ((((arg-4 'erased) 'erased) (lambda (arg-1) ((((arg-5 'erased) 'erased) ext-0) arg-1))) ext-1)))
(define PreludeC-45InterfacesC-45Monad-u--C-62C-62C-61_Monad_ComposeC-40C-40C-46C-32C-36mC-41C-32C-36tC-41 (lambda (arg-4 arg-5 arg-6 arg-7 arg-8) (let ((e-2 (vector-ref arg-4 1))) ((((e-2 'erased) 'erased) arg-7) (lambda (eta-0) (let ((e-6 (vector-ref arg-4 0))) (let ((e-9 (vector-ref e-6 0))) ((((e-9 'erased) 'erased) (lambda (clam-0) (let ((e-10 (vector-ref arg-5 2))) ((e-10 'erased) clam-0)))) (let ((e-10 (vector-ref arg-6 2))) ((((((e-10 'erased) 'erased) 'erased) (let ((e-15 (vector-ref arg-4 0))) e-15)) arg-8) eta-0))))))))))
(define PreludeC-45InterfacesC-45BoolC-45Semigroup-u--C-60C-43C-62_Semigroup_AnyBool (lambda (arg-0 arg-1) (cond ((equal? arg-0 1) 1) (else arg-1))))
(define PreludeC-45InterfacesC-45BoolC-45Semigroup-u--C-60C-43C-62_Semigroup_AllBool (lambda (arg-0 arg-1) (cond ((equal? arg-0 1) arg-1) (else 0))))
(define PreludeC-45InterfacesC-45Applicative-u--C-60C-42C-62_Applicative_ComposeC-40C-40C-46C-32C-36fC-41C-32C-36gC-41 (lambda (arg-4 arg-5 arg-6 arg-7) (let ((e-3 (vector-ref arg-4 2))) ((((e-3 'erased) 'erased) (let ((e-4 (vector-ref arg-4 2))) ((((e-4 'erased) 'erased) (let ((e-8 (vector-ref arg-4 1))) ((e-8 'erased) (lambda (clam-0) (lambda (clam-1) (let ((e-10 (vector-ref arg-5 2))) ((((e-10 'erased) 'erased) clam-0) clam-1))))))) arg-6))) arg-7))))
(define PreludeC-45Interfaces-when (lambda (arg-1 arg-2 arg-3) (cond ((equal? arg-2 1) (arg-3)) (else (let ((e-2 (vector-ref arg-1 1))) ((e-2 'erased) (vector 0 )))))))
(define PreludeC-45Interfaces-traverse_ (lambda (arg-4 arg-5 arg-6 ext-0) (let ((e-1 (vector-ref arg-5 0))) (((((e-1 'erased) 'erased) (lambda (eta-0) (lambda (eta-1) (PreludeC-45Interfaces-C-42C-62 arg-4 (arg-6 eta-0) eta-1)))) (let ((e-8 (vector-ref arg-4 1))) ((e-8 'erased) (vector 0 )))) ext-0))))
(define PreludeC-45Interfaces-for (lambda (arg-4 arg-5 ext-0 ext-1) (PreludeC-45Basics-flip (lambda (clam-0) (lambda (clam-1) (let ((e-3 (vector-ref arg-5 2))) ((((((e-3 'erased) 'erased) 'erased) arg-4) clam-0) clam-1)))) ext-0 ext-1)))
(define PreludeC-45Interfaces-concat (lambda (arg-2 arg-3 ext-0) (let ((e-6 (vector-ref arg-3 5))) (((((e-6 'erased) 'erased) arg-2) (lambda (eta-0) eta-0)) ext-0))))
(define PreludeC-45Interfaces-any (lambda (arg-2 ext-1 ext-0) (let ((e-6 (vector-ref arg-2 5))) (((((e-6 'erased) 'erased) (cons (lambda (arg-8326) (lambda (arg-8329) (PreludeC-45InterfacesC-45BoolC-45Semigroup-u--C-60C-43C-62_Semigroup_AnyBool arg-8326 arg-8329))) 0)) ext-1) ext-0))))
(define PreludeC-45Interfaces-all (lambda (arg-2 ext-1 ext-0) (let ((e-6 (vector-ref arg-2 5))) (((((e-6 'erased) 'erased) (cons (lambda (arg-8326) (lambda (arg-8329) (PreludeC-45InterfacesC-45BoolC-45Semigroup-u--C-60C-43C-62_Semigroup_AllBool arg-8326 arg-8329))) 1)) ext-1) ext-0))))
(define PreludeC-45Interfaces-C-62C-62 (lambda (arg-2 arg-3 arg-4) (let ((e-2 (vector-ref arg-2 1))) ((((e-2 'erased) 'erased) arg-3) (lambda (_-10158) (arg-4))))))
(define PreludeC-45Interfaces-C-60C-36C-62 (lambda (arg-3 arg-4 arg-5) ((((arg-3 'erased) 'erased) arg-4) arg-5)))
(define PreludeC-45Interfaces-C-42C-62 (lambda (arg-3 arg-4 arg-5) (let ((e-3 (vector-ref arg-3 2))) ((((e-3 'erased) 'erased) (let ((e-6 (vector-ref arg-3 0))) ((((e-6 'erased) 'erased) (lambda (eta-0) (lambda (eta-1) eta-1))) arg-4))) arg-5))))
(define PreludeC-45Interfaces-C-36C-62 (lambda (arg-3 arg-4 arg-5) ((((arg-3 'erased) 'erased) (lambda (eta-0) arg-5)) arg-4)))
(define PreludeC-45Show-n--3172-11556-u--showC-39 (lambda (arg-1 arg-2 arg-3 arg-4) (if (null? arg-4) arg-3 (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) (if (null? e-3) (string-append arg-3 (let ((e-1 (car arg-1))) (e-1 e-2))) (PreludeC-45Show-n--3172-11556-u--showC-39 arg-1 arg-2 (string-append arg-3 (string-append (let ((e-1 (car arg-1))) (e-1 e-2)) ", ")) e-3)))))))
(define PreludeC-45Show-n--2390-10835-u--asciiTab (lambda (arg-0) (cons "NUL" (cons "SOH" (cons "STX" (cons "ETX" (cons "EOT" (cons "ENQ" (cons "ACK" (cons "BEL" (cons "BS" (cons "HT" (cons "LF" (cons "VT" (cons "FF" (cons "CR" (cons "SO" (cons "SI" (cons "DLE" (cons "DC1" (cons "DC2" (cons "DC3" (cons "DC4" (cons "NAK" (cons "SYN" (cons "ETB" (cons "CAN" (cons "EM" (cons "SUB" (cons "ESC" (cons "FS" (cons "GS" (cons "RS" (cons "US" '()))))))))))))))))))))))))))))))))))
(define PreludeC-45Show-u--show_Show_String (lambda (arg-0) (string-cons #\" (PreludeC-45Show-showLitString (PreludeC-45Types-fastUnpack arg-0) "\""))))
(define PreludeC-45Show-u--show_Show_Nat (lambda (arg-0) (PreludeC-45Show-u--show_Show_Integer arg-0)))
(define PreludeC-45Show-u--show_Show_Integer (lambda (arg-0) (PreludeC-45Show-u--showPrec_Show_Integer (vector 0 ) arg-0)))
(define PreludeC-45Show-u--show_Show_Int (lambda (arg-0) (PreludeC-45Show-u--showPrec_Show_Int (vector 0 ) arg-0)))
(define PreludeC-45Show-u--show_Show_C-40ListC-32C-36aC-41 (lambda (arg-1 arg-2) (string-append "[" (string-append (PreludeC-45Show-n--3172-11556-u--showC-39 arg-1 arg-2 "" arg-2) "]"))))
(define PreludeC-45Show-u--showPrec_Show_String (lambda (arg-0 arg-1) (PreludeC-45Show-u--show_Show_String arg-1)))
(define PreludeC-45Show-u--showPrec_Show_Integer (lambda (ext-0 ext-1) (PreludeC-45Show-primNumShow (lambda (eta-0) (number->string eta-0)) ext-0 ext-1)))
(define PreludeC-45Show-u--showPrec_Show_Int (lambda (ext-0 ext-1) (PreludeC-45Show-primNumShow (lambda (eta-0) (number->string eta-0)) ext-0 ext-1)))
(define PreludeC-45Show-u--compare_Ord_Prec (lambda (arg-0 arg-1) (case (vector-ref arg-0 0) ((4) (let ((e-0 (vector-ref arg-0 1))) (case (vector-ref arg-1 0) ((4) (let ((e-1 (vector-ref arg-1 1))) (PreludeC-45EqOrd-u--compare_Ord_Integer e-0 e-1)))(else (PreludeC-45EqOrd-u--compare_Ord_Integer (PreludeC-45Show-precCon arg-0) (PreludeC-45Show-precCon arg-1))))))(else (PreludeC-45EqOrd-u--compare_Ord_Integer (PreludeC-45Show-precCon arg-0) (PreludeC-45Show-precCon arg-1))))))
(define PreludeC-45Show-u--C-62C-61_Ord_Prec (lambda (arg-0 arg-1) (PreludeC-45EqOrd-u--C-47C-61_Eq_Ordering (PreludeC-45Show-u--compare_Ord_Prec arg-0 arg-1) 0)))
(define PreludeC-45Show-showParens (lambda (arg-0 arg-1) (cond ((equal? arg-0 0) arg-1) (else (string-append "(" (string-append arg-1 ")"))))))
(define PreludeC-45Show-showLitString (lambda (arg-0 ext-0) (if (null? arg-0) ext-0 (let ((e-2 (car arg-0))) (let ((e-3 (cdr arg-0))) (cond ((equal? e-2 #\") (string-append "\\\"" (PreludeC-45Show-showLitString e-3 ext-0)))(else ((PreludeC-45Show-showLitChar e-2) (PreludeC-45Show-showLitString e-3 ext-0)))))))))
(define PreludeC-45Show-showLitChar (lambda (arg-0) (cond ((equal? arg-0 (integer->char 7)) (lambda (arg-1) (string-append "\\a" arg-1))) ((equal? arg-0 (integer->char 8)) (lambda (arg-1) (string-append "\\b" arg-1))) ((equal? arg-0 (integer->char 12)) (lambda (arg-1) (string-append "\\f" arg-1))) ((equal? arg-0 (integer->char 10)) (lambda (arg-1) (string-append "\\n" arg-1))) ((equal? arg-0 (integer->char 13)) (lambda (arg-1) (string-append "\\r" arg-1))) ((equal? arg-0 (integer->char 9)) (lambda (arg-1) (string-append "\\t" arg-1))) ((equal? arg-0 (integer->char 11)) (lambda (arg-1) (string-append "\\v" arg-1))) ((equal? arg-0 (integer->char 14)) (lambda (eta-0) (PreludeC-45Show-protectEsc (lambda (arg-1) (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\H)) "\\SO" eta-0))) ((equal? arg-0 (integer->char 127)) (lambda (arg-1) (string-append "\\DEL" arg-1))) ((equal? arg-0 #\\) (lambda (arg-1) (string-append "\\\\" arg-1)))(else (lambda (clam-0) (let ((sc0 (PreludeC-45Types-getAt (PreludeC-45Types-prim__integerToNat (char->integer arg-0)) (PreludeC-45Show-n--2390-10835-u--asciiTab arg-0)))) (if (null? sc0) (let ((sc1 (PreludeC-45EqOrd-u--C-62_Ord_Char arg-0 (integer->char 127)))) (cond ((equal? sc1 1) (string-cons #\\ (PreludeC-45Show-protectEsc (lambda (eta-0) (PreludeC-45Types-isDigit eta-0)) (PreludeC-45Show-u--show_Show_Int (cast-char-boundedInt arg-0 63)) clam-0))) (else (string-cons arg-0 clam-0)))) (let ((e-1 (unbox sc0))) (string-cons #\\ (string-append e-1 clam-0))))))))))
(define PreludeC-45Show-protectEsc (lambda (arg-0 arg-1 arg-2) (string-append arg-1 (string-append (let ((sc0 (PreludeC-45Show-firstCharIs arg-0 arg-2))) (cond ((equal? sc0 1) "\\&") (else ""))) arg-2))))
(define PreludeC-45Show-primNumShow (lambda (arg-1 arg-2 arg-3) (let ((u--str (arg-1 arg-3))) (PreludeC-45Show-showParens (let ((sc0 (PreludeC-45Show-u--C-62C-61_Ord_Prec arg-2 (vector 5 )))) (cond ((equal? sc0 1) (PreludeC-45Show-firstCharIs (lambda (arg-0) (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-0 #\-)) u--str)) (else 0))) u--str))))
(define PreludeC-45Show-precCon (lambda (arg-0) (case (vector-ref arg-0 0) ((0) 0) ((1) 1) ((2) 2) ((3) 3) ((4) 4) ((5) 5) (else 6))))
(define PreludeC-45Show-firstCharIs (lambda (arg-0 arg-1) (cond ((equal? arg-1 "") 0)(else (arg-0 (string-ref arg-1 0))))))
(define PreludeC-45IO-u--map_Functor_IO (lambda (arg-2 arg-3 ext-0) (let ((act-5 (arg-3 ext-0))) (arg-2 act-5))))
(define PreludeC-45IO-putStrLn (lambda (arg-1 arg-2) (PreludeC-45IO-putStr arg-1 (string-append arg-2 "\xa;"))))
(define PreludeC-45IO-putStr (lambda (arg-1 arg-2) (let ((e-2 (cdr arg-1))) ((e-2 'erased) (lambda (eta-0) (PreludeC-45IO-prim__putStr arg-2 eta-0))))))
(define PreludeC-45IO-getLine (lambda (arg-1) (let ((e-2 (cdr arg-1))) ((e-2 'erased) (lambda (eta-0) (PreludeC-45IO-prim__getStr eta-0))))))
(define PrimIO-unsafePerformIO (lambda (arg-1) (PrimIO-unsafeCreateWorld (lambda (u--w) (arg-1 u--w)))))
(define PrimIO-unsafeCreateWorld (lambda (arg-1) (arg-1 #f)))
(define PrimIO-prim__forgetPtr (lambda (ext-0) (Builtin-believe_me ext-0)))
(define PreludeC-45Cast-u--cast_Cast_String_Integer (lambda (ext-0) (cast-string-int ext-0)))
(define PreludeC-45Cast-u--cast_Cast_Nat_Int (lambda (ext-0) (blodwen-toSignedInt ext-0 63)))
(define PreludeC-45Cast-u--cast_Cast_Integer_Double (lambda (ext-0) (exact->inexact ext-0)))
(define PreludeC-45Cast-u--cast_Cast_Int_Integer (lambda (ext-0) ext-0))
(define PreludeC-45Cast-u--cast_Cast_Char_String (lambda (ext-0) (string ext-0)))
(define SystemC-45FileC-45Support-ok (lambda (arg-3 arg-4) (let ((e-1 (car arg-3))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) (vector 1 arg-4)))))))
(define SystemC-45FileC-45ReadWrite-writeFile (lambda (arg-1 arg-2 arg-3) (SystemC-45FileC-45Handle-withFile arg-1 arg-2 1 (lambda (eta-0) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) eta-0))))) (lambda (eta-0) (PreludeC-45Basics-flip (lambda (eta-1) (lambda (eta-2) (SystemC-45FileC-45ReadWrite-fPutStr arg-1 eta-1 eta-2))) arg-3 eta-0)))))
(define SystemC-45FileC-45ReadWrite-readLinesOnto (lambda (arg-1 arg-2 arg-3 arg-4 arg-5) (if (null? arg-4) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) (vector 1 (cons 0 (PreludeC-45TypesC-45List-reverse arg-2))))))) (let ((e-0 (unbox arg-4))) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (SystemC-45FileC-45ReadWrite-fEOF arg-1 arg-5)) (lambda (_-0) (cond ((equal? _-0 0) (cond ((equal? arg-3 0) (PreludeC-45InterfacesC-45Monad-u--C-62C-62C-61_Monad_ComposeC-40C-40C-46C-32C-36mC-41C-32C-36tC-41 (let ((e-7 (car arg-1))) e-7) (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (case (vector-ref arg-8737 0) ((0) (let ((e-6 (vector-ref arg-8737 1))) (vector 0 e-6))) (else (let ((e-6 (vector-ref arg-8737 1))) (vector 1 (u--func e-6))))))))) (lambda (u--a) (lambda (arg-9440) (vector 1 arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (case (vector-ref arg-9446 0) ((0) (let ((e-6 (vector-ref arg-9446 1))) (vector 0 e-6))) (else (let ((e-6 (vector-ref arg-9446 1))) (case (vector-ref arg-9453 0) ((1) (let ((e-8 (vector-ref arg-9453 1))) (vector 1 (e-6 e-8)))) (else (let ((e-11 (vector-ref arg-9453 1))) (vector 0 e-11)))))))))))) (csegen-175) (csegen-176)) (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (case (vector-ref arg-8737 0) ((0) (let ((e-6 (vector-ref arg-8737 1))) (vector 0 e-6))) (else (let ((e-6 (vector-ref arg-8737 1))) (vector 1 (u--func e-6))))))))) (csegen-192) (csegen-196)) (SystemC-45FileC-45ReadWrite-fGetLine arg-1 arg-5) (lambda (u--str) (SystemC-45FileC-45ReadWrite-readLinesOnto arg-1 (cons u--str arg-2) 0 (e-0) arg-5))))(else (let ((e-6 (- arg-3 1))) (PreludeC-45Interfaces-C-42C-62 (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (PreludeC-45InterfacesC-45Functor-u--map_Functor_ComposeC-40C-40C-46C-32C-36fC-41C-32C-36gC-41 (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) (let ((e-14 (vector-ref e-11 0))) e-14))) (lambda (b-0) (lambda (a-0) (lambda (func-0) (lambda (arg-8738) (case (vector-ref arg-8738 0) ((0) (let ((e-7 (vector-ref arg-8738 1))) (vector 0 e-7))) (else (let ((e-7 (vector-ref arg-8738 1))) (vector 1 (func-0 e-7))))))))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (PreludeC-45InterfacesC-45Applicative-u--pure_Applicative_ComposeC-40C-40C-46C-32C-36fC-41C-32C-36gC-41 (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) e-11)) (vector (lambda (u--b) (lambda (a-0) (lambda (u--func) (lambda (arg-8737) (case (vector-ref arg-8737 0) ((0) (let ((e-7 (vector-ref arg-8737 1))) (vector 0 e-7))) (else (let ((e-7 (vector-ref arg-8737 1))) (vector 1 (u--func e-7))))))))) (lambda (a-0) (lambda (arg-9441) (vector 1 arg-9441))) (lambda (u--b) (lambda (a-0) (lambda (arg-9446) (lambda (arg-9453) (case (vector-ref arg-9446 0) ((0) (let ((e-7 (vector-ref arg-9446 1))) (vector 0 e-7))) (else (let ((e-7 (vector-ref arg-9446 1))) (case (vector-ref arg-9453 0) ((1) (let ((e-8 (vector-ref arg-9453 1))) (vector 1 (e-7 e-8)))) (else (let ((e-11 (vector-ref arg-9453 1))) (vector 0 e-11)))))))))))) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (PreludeC-45InterfacesC-45Applicative-u--C-60C-42C-62_Applicative_ComposeC-40C-40C-46C-32C-36fC-41C-32C-36gC-41 (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) e-11)) (vector (lambda (b-0) (lambda (a-0) (lambda (u--func) (lambda (arg-8737) (case (vector-ref arg-8737 0) ((0) (let ((e-7 (vector-ref arg-8737 1))) (vector 0 e-7))) (else (let ((e-7 (vector-ref arg-8737 1))) (vector 1 (u--func e-7))))))))) (lambda (a-0) (lambda (arg-9440) (vector 1 arg-9440))) (lambda (b-0) (lambda (a-0) (lambda (arg-9447) (lambda (arg-9454) (case (vector-ref arg-9447 0) ((0) (let ((e-7 (vector-ref arg-9447 1))) (vector 0 e-7))) (else (let ((e-7 (vector-ref arg-9447 1))) (case (vector-ref arg-9454 0) ((1) (let ((e-8 (vector-ref arg-9454 1))) (vector 1 (e-7 e-8)))) (else (let ((e-11 (vector-ref arg-9454 1))) (vector 0 e-11)))))))))))) arg-9446 arg-9453)))))) (SystemC-45FileC-45ReadWrite-fSeekLine arg-1 arg-5) (SystemC-45FileC-45ReadWrite-readLinesOnto arg-1 arg-2 e-6 (box e-0) arg-5)))))) (else (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (vector 1 (cons 1 (PreludeC-45TypesC-45List-reverse arg-2)))))))))))))))))
(define SystemC-45FileC-45ReadWrite-readFilePage (lambda (arg-1 arg-2 arg-3 arg-4) (SystemC-45FileC-45Handle-withFile arg-1 arg-4 0 (lambda (eta-0) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) eta-0))))) (lambda (eta-0) (SystemC-45FileC-45ReadWrite-readLinesOnto arg-1 '() arg-2 arg-3 eta-0)))))
(define SystemC-45FileC-45ReadWrite-readFile (lambda (arg-1 ext-0) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) ((((e-8 'erased) 'erased) (lambda (eta-0) (case (vector-ref eta-0 0) ((0) (let ((e-9 (vector-ref eta-0 1))) (vector 0 e-9))) (else (let ((e-9 (vector-ref eta-0 1))) (vector 1 (PreludeC-45Types-fastConcat (Builtin-snd e-9)))))))) (SystemC-45FileC-45ReadWrite-readFilePage arg-1 0 (DataC-45Fuel-forever) ext-0)))))))
(define SystemC-45FileC-45ReadWrite-fSeekLine (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (SystemC-45FileC-45ReadWrite-prim__seekLine arg-2 eta-0))))) (lambda (u--res) (let ((sc1 (PreludeC-45EqOrd-u--C-47C-61_Eq_Int u--res (blodwen-toSignedInt 0 63)))) (cond ((equal? sc1 1) (SystemC-45FileC-45Error-returnError arg-1)) (else (SystemC-45FileC-45Support-ok arg-1 (vector 0 )))))))))))
(define SystemC-45FileC-45ReadWrite-fPutStr (lambda (arg-1 arg-2 arg-3) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (SystemC-45FileC-45ReadWrite-prim__writeLine arg-2 arg-3 eta-0))))) (lambda (u--res) (let ((sc1 (PreludeC-45EqOrd-u--C-61C-61_Eq_Int u--res (blodwen-toSignedInt 0 63)))) (cond ((equal? sc1 1) (SystemC-45FileC-45Error-returnError arg-1)) (else (SystemC-45FileC-45Support-ok arg-1 (vector 0 )))))))))))
(define SystemC-45FileC-45ReadWrite-fGetLine (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (SystemC-45FileC-45ReadWrite-prim__readLine arg-2 eta-0))))) (lambda (u--res) (let ((sc1 (PreludeC-45EqOrd-u--C-47C-61_Eq_Int (PrimIO-prim__nullAnyPtr (PrimIO-prim__forgetPtr u--res)) (blodwen-toSignedInt 0 63)))) (cond ((equal? sc1 1) (SystemC-45FileC-45Error-returnError arg-1)) (else (SystemC-45FileC-45Support-ok arg-1 (PreludeC-45IO-prim__getString u--res)))))))))))
(define SystemC-45FileC-45ReadWrite-fEOF (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (SystemC-45FileC-45ReadWrite-prim__eof arg-2 eta-0))))) (lambda (u--res) (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (PreludeC-45EqOrd-u--C-47C-61_Eq_Int u--res (blodwen-toSignedInt 0 63))))))))))))
(define SystemC-45FileC-45Error-u--show_Show_FileError (lambda (arg-0) (case (vector-ref arg-0 0) ((0) (let ((e-0 (vector-ref arg-0 1))) (SystemC-45Errno-strerror e-0))) ((1) "File Read Error") ((2) "File Write Error") ((3) "File Not Found") ((4) "Permission Denied") (else "File Exists"))))
(define SystemC-45FileC-45Error-returnError (lambda (arg-2) (let ((e-1 (car arg-2))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-2))) ((e-6 'erased) (lambda (eta-0) (SystemC-45FileC-45Error-prim__fileErrno eta-0))))) (lambda (u--err) (let ((e-7 (car arg-2))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (vector 0 (cond ((equal? u--err 0) (vector 1 )) ((equal? u--err 1) (vector 2 )) ((equal? u--err 2) (vector 3 )) ((equal? u--err 3) (vector 4 )) ((equal? u--err 4) (vector 5 ))(else (vector 0 (bs- u--err 5 63)))))))))))))))
(define SystemC-45Errno-strerror (lambda (arg-0) (PrimIO-unsafePerformIO (lambda (eta-0) (SystemC-45Errno-prim__strerror arg-0 eta-0)))))
(define SystemC-45Errno-getErrno (lambda (arg-1) (let ((e-2 (cdr arg-1))) ((e-2 'erased) (lambda (eta-0) (SystemC-45Errno-prim__getErrno eta-0))))))
(define SystemC-45FileC-45Handle-withFile (lambda (arg-3 arg-4 arg-5 arg-6 arg-7) (let ((e-1 (car arg-3))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (SystemC-45FileC-45Handle-openFile arg-3 arg-4 arg-5)) (lambda (_-0) (case (vector-ref _-0 0) ((1) (let ((e-6 (vector-ref _-0 1))) (let ((e-8 (car arg-3))) (let ((e-10 (vector-ref e-8 1))) ((((e-10 'erased) 'erased) (arg-7 e-6)) (lambda (u--res) (PreludeC-45Interfaces-C-62C-62 (let ((e-13 (car arg-3))) e-13) (SystemC-45FileC-45Handle-closeFile arg-3 e-6) (lambda () (let ((e-13 (car arg-3))) (let ((e-16 (vector-ref e-13 0))) (let ((e-18 (vector-ref e-16 1))) ((e-18 'erased) u--res)))))))))))) (else (let ((e-6 (vector-ref _-0 1))) (PreludeC-45Interfaces-C-60C-36C-62 (let ((e-8 (car arg-3))) (let ((e-11 (vector-ref e-8 0))) (let ((e-14 (vector-ref e-11 0))) e-14))) (lambda (eta-0) (vector 0 eta-0)) (arg-6 e-6)))))))))))
(define SystemC-45FileC-45Handle-openFile (lambda (arg-1 arg-2 arg-3) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (SystemC-45FileC-45Handle-prim__open arg-2 (SystemC-45FileC-45Mode-modeStr arg-3) eta-0))))) (lambda (u--res) (let ((sc1 (PreludeC-45EqOrd-u--C-47C-61_Eq_Int (PrimIO-prim__nullAnyPtr u--res) (blodwen-toSignedInt 0 63)))) (cond ((equal? sc1 1) (SystemC-45FileC-45Error-returnError arg-1)) (else (SystemC-45FileC-45Support-ok arg-1 u--res))))))))))
(define SystemC-45FileC-45Handle-closeFile (lambda (arg-1 arg-2) (let ((e-2 (cdr arg-1))) ((e-2 'erased) (lambda (eta-0) (SystemC-45FileC-45Handle-prim__close arg-2 eta-0))))))
(define SystemC-45FileC-45Mode-modeStr (lambda (arg-0) (cond ((equal? arg-0 0) (let ((sc1 (SystemC-45Info-isWindows))) (cond ((equal? sc1 1) "rb") (else "r")))) ((equal? arg-0 1) (let ((sc1 (SystemC-45Info-isWindows))) (cond ((equal? sc1 1) "wb") (else "w")))) ((equal? arg-0 2) (let ((sc1 (SystemC-45Info-isWindows))) (cond ((equal? sc1 1) "ab") (else "a")))) ((equal? arg-0 3) (let ((sc1 (SystemC-45Info-isWindows))) (cond ((equal? sc1 1) "rb+") (else "r+")))) ((equal? arg-0 4) (let ((sc1 (SystemC-45Info-isWindows))) (cond ((equal? sc1 1) "wb+") (else "w+")))) (else (let ((sc1 (SystemC-45Info-isWindows))) (cond ((equal? sc1 1) "ab+") (else "a+")))))))
(define SystemC-45Info-os(blodwen-lazy (lambda () (blodwen-os))))
(define SystemC-45Info-isWindows(blodwen-lazy (lambda () (PreludeC-45Types-elem (csegen-84) (csegen-206) (SystemC-45Info-os) (cons "windows" (cons "mingw32" (cons "cygwin32" '())))))))
(define DataC-45Nat-isSucc (lambda (arg-0) (cond ((equal? arg-0 0) 0)(else 1))))
(define DataC-45Maybe-toMaybe (lambda (arg-1 arg-2) (cond ((equal? arg-1 1) (box (arg-2))) (else '()))))
(define DataC-45Maybe-isJust (lambda (arg-1) (if (null? arg-1) 0 1)))
(define DataC-45Maybe-fromMaybe (lambda (arg-1 arg-2) (if (null? arg-2) (arg-1) (let ((e-2 (unbox arg-2))) e-2))))
(define DataC-45List1-u--traverse_Traversable_List1 (lambda (arg-3 arg-4 arg-5) (let ((e-1 (car arg-5))) (let ((e-2 (cdr arg-5))) (let ((e-3 (vector-ref arg-3 2))) ((((e-3 'erased) 'erased) (let ((e-6 (vector-ref arg-3 2))) ((((e-6 'erased) 'erased) (let ((e-10 (vector-ref arg-3 1))) ((e-10 'erased) (csegen-210)))) (arg-4 e-1)))) (PreludeC-45Types-u--traverse_Traversable_List arg-3 arg-4 e-2)))))))
(define DataC-45List1-u--map_Functor_List1 (lambda (arg-2 arg-3) (let ((e-1 (car arg-3))) (let ((e-2 (cdr arg-3))) (cons (arg-2 e-1) (PreludeC-45Types-u--map_Functor_List arg-2 e-2))))))
(define DataC-45List1-u--C-61C-61_Eq_C-40List1C-32C-36aC-41 (lambda (arg-1 arg-2 arg-3) (let ((e-1 (car arg-2))) (let ((e-2 (cdr arg-2))) (let ((e-4 (car arg-3))) (let ((e-5 (cdr arg-3))) (let ((sc2 (let ((e-6 (car arg-1))) ((e-6 e-1) e-4)))) (cond ((equal? sc2 1) (PreludeC-45Types-u--C-61C-61_Eq_C-40ListC-32C-36aC-41 arg-1 e-2 e-5)) (else 0)))))))))
(define DataC-45List1-singleton (lambda (arg-1) (cons arg-1 '())))
(define DataC-45List1-reverseOnto (lambda (arg-1 arg-2) (if (null? arg-2) arg-1 (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (DataC-45List1-reverseOnto (cons e-2 (DataC-45List1-forget arg-1)) e-3))))))
(define DataC-45List1-reverse (lambda (arg-1) (let ((e-1 (car arg-1))) (let ((e-2 (cdr arg-1))) (DataC-45List1-reverseOnto (DataC-45List1-singleton e-1) e-2)))))
(define DataC-45List1-forget (lambda (arg-1) (let ((e-1 (car arg-1))) (let ((e-2 (cdr arg-1))) (cons e-1 e-2)))))
(define DataC-45List1-appendl (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-2 (cdr arg-1))) (cons e-1 (PreludeC-45TypesC-45List-tailRecAppend e-2 arg-2))))))
(define DataC-45List1-C-43C-43 (lambda (arg-1 arg-2) (DataC-45List1-appendl arg-1 (DataC-45List1-forget arg-2))))
(define DataC-45List-split (lambda (arg-1 arg-2) (let ((sc0 (DataC-45List-break arg-1 arg-2))) (let ((e-2 (car sc0))) (let ((e-3 (cdr sc0))) (if (null? e-3) (DataC-45List1-singleton e-2) (let ((e-7 (cdr e-3))) (cons e-2 (DataC-45List1-forget (DataC-45List-split arg-1 e-7))))))))))
(define DataC-45List-span (lambda (arg-1 arg-2) (if (null? arg-2) (cons '() '()) (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (let ((sc1 (arg-1 e-2))) (cond ((equal? sc1 1) (let ((sc2 (DataC-45List-span arg-1 e-3))) (let ((e-5 (car sc2))) (let ((e-4 (cdr sc2))) (cons (cons e-2 e-5) e-4))))) (else (cons '() (cons e-2 e-3))))))))))
(define DataC-45List-partition (lambda (arg-1 arg-2) (if (null? arg-2) (cons '() '()) (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (let ((sc1 (DataC-45List-partition arg-1 e-3))) (let ((e-5 (car sc1))) (let ((e-4 (cdr sc1))) (let ((sc2 (arg-1 e-2))) (cond ((equal? sc2 1) (cons (cons e-2 e-5) e-4)) (else (cons e-5 (cons e-2 e-4)))))))))))))
(define DataC-45List-mergeReplicate (lambda (arg-1 arg-2) (if (null? arg-2) '() (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (cons arg-1 (cons e-2 (DataC-45List-mergeReplicate arg-1 e-3))))))))
(define DataC-45List-last (lambda (arg-1) (let ((e-1 (car arg-1))) (let ((e-2 (cdr arg-1))) (if (null? e-2) e-1 (DataC-45List-last e-2))))))
(define DataC-45List-intersperse (lambda (arg-1 arg-2) (if (null? arg-2) '() (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (cons e-2 (DataC-45List-mergeReplicate arg-1 e-3)))))))
(define DataC-45List-init (lambda (arg-1) (let ((e-1 (car arg-1))) (let ((e-2 (cdr arg-1))) (if (null? e-2) '() (cons e-1 (DataC-45List-init e-2)))))))
(define DataC-45List-headC-39 (lambda (arg-1) (if (null? arg-1) '() (let ((e-2 (car arg-1))) (box e-2)))))
(define DataC-45List-dropWhile (lambda (arg-1 arg-2) (if (null? arg-2) '() (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (let ((sc1 (arg-1 e-2))) (cond ((equal? sc1 1) (DataC-45List-dropWhile arg-1 e-3)) (else (cons e-2 e-3)))))))))
(define DataC-45List-deleteBy (lambda (arg-2 arg-3 arg-4) (if (null? arg-4) '() (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) (let ((sc1 ((arg-2 arg-3) e-2))) (cond ((equal? sc1 1) e-3) (else (cons e-2 (DataC-45List-deleteBy arg-2 arg-3 e-3))))))))))
(define DataC-45List-delete (lambda (arg-1 ext-0 ext-1) (DataC-45List-deleteBy (lambda (eta-0) (lambda (eta-1) (let ((e-1 (car arg-1))) ((e-1 eta-0) eta-1)))) ext-0 ext-1)))
(define DataC-45List-break (lambda (arg-1 arg-2) (DataC-45List-span (lambda (eta-0) (let ((sc0 (arg-1 eta-0))) (cond ((equal? sc0 1) 0) (else 1)))) arg-2)))
(define DataC-45Fuel-forever(blodwen-lazy (lambda () (box (lambda () (DataC-45Fuel-forever))))))
(define SystemC-45FileC-45Meta-exists (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (SystemC-45FileC-45Handle-openFile arg-1 arg-2 0)) (lambda (_-0) (case (vector-ref _-0 0) ((1) (let ((e-6 (vector-ref _-0 1))) (PreludeC-45Interfaces-C-62C-62 (let ((e-8 (car arg-1))) e-8) (SystemC-45FileC-45Handle-closeFile arg-1 e-6) (lambda () (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) (let ((e-13 (vector-ref e-11 1))) ((e-13 'erased) 1)))))))) (else (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) (let ((e-13 (vector-ref e-11 1))) ((e-13 'erased) 0))))))))))))
(define DataC-45String-with--parsePositiveC-44parsePosTrimmed-6830 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (cond ((equal? arg-3 "") (if (null? arg-4) '() (let ((e-0 (car arg-4))) (let ((e-1 (cdr arg-4))) (cond ((equal? e-0 #\+) (PreludeC-45Types-u--map_Functor_Maybe (lambda (eta-0) (let ((e-3 (vector-ref arg-1 2))) (e-3 eta-0))) (DataC-45String-parseNumWithoutSign (PreludeC-45Types-fastUnpack e-1) 0)))(else (let ((sc3 (let ((sc4 (PreludeC-45EqOrd-u--C-62C-61_Ord_Char e-0 #\0))) (cond ((equal? sc4 1) (PreludeC-45EqOrd-u--C-60C-61_Ord_Char e-0 #\9)) (else 0))))) (cond ((equal? sc3 1) (PreludeC-45Types-u--map_Functor_Maybe (lambda (eta-0) (let ((e-3 (vector-ref arg-1 2))) (e-3 eta-0))) (DataC-45String-parseNumWithoutSign (PreludeC-45Types-fastUnpack e-1) (PreludeC-45Cast-u--cast_Cast_Int_Integer (bs- (cast-char-boundedInt e-0 63) (cast-char-boundedInt #\0 63) 63))))) (else '())))))))))(else (let ((e-0 (car arg-4))) (let ((e-1 (cdr arg-4))) (cond ((equal? e-0 #\+) (PreludeC-45Types-u--map_Functor_Maybe (lambda (eta-0) (let ((e-3 (vector-ref arg-1 2))) (e-3 eta-0))) (DataC-45String-parseNumWithoutSign (PreludeC-45Types-fastUnpack e-1) 0)))(else (let ((sc1 (let ((sc2 (PreludeC-45EqOrd-u--C-62C-61_Ord_Char e-0 #\0))) (cond ((equal? sc2 1) (PreludeC-45EqOrd-u--C-60C-61_Ord_Char e-0 #\9)) (else 0))))) (cond ((equal? sc1 1) (PreludeC-45Types-u--map_Functor_Maybe (lambda (eta-0) (let ((e-3 (vector-ref arg-1 2))) (e-3 eta-0))) (DataC-45String-parseNumWithoutSign (PreludeC-45Types-fastUnpack e-1) (PreludeC-45Cast-u--cast_Cast_Int_Integer (bs- (cast-char-boundedInt e-0 63) (cast-char-boundedInt #\0 63) 63))))) (else '())))))))))))
(define DataC-45String-with--ltrim-6503 (lambda (arg-0 arg-1) (cond ((equal? arg-0 "") (case (vector-ref arg-1 0) ((0) "")(else (let ((e-0 (vector-ref arg-1 1))) (let ((e-1 (vector-ref arg-1 2))) (let ((e-2 (vector-ref arg-1 3))) (let ((u--str (string-cons e-0 e-1))) (let ((sc2 (PreludeC-45Types-isSpace e-0))) (cond ((equal? sc2 1) (DataC-45String-with--ltrim-6503 e-1 (e-2))) (else u--str))))))))))(else (let ((e-0 (vector-ref arg-1 1))) (let ((e-1 (vector-ref arg-1 2))) (let ((e-2 (vector-ref arg-1 3))) (let ((u--str (string-cons e-0 e-1))) (let ((sc1 (PreludeC-45Types-isSpace e-0))) (cond ((equal? sc1 1) (DataC-45String-with--ltrim-6503 e-1 (e-2))) (else u--str)))))))))))
(define DataC-45String-with--asList-6479 (lambda (arg-0 arg-1) (cond ((equal? arg-0 "") (if (null? arg-1) (vector 0 ) (let ((e-0 (car arg-1))) (let ((e-1 (cdr arg-1))) (vector 1 e-0 e-1 (lambda () (DataC-45String-asList e-1)))))))(else (let ((e-0 (car arg-1))) (let ((e-1 (cdr arg-1))) (vector 1 e-0 e-1 (lambda () (DataC-45String-asList e-1)))))))))
(define DataC-45String-n--4219-6824-u--parsePosTrimmed (lambda (arg-1 arg-2 arg-3) (DataC-45String-with--parsePositiveC-44parsePosTrimmed-6830 'erased arg-1 arg-3 arg-3 (DataC-45String-strM arg-3))))
(define DataC-45String-unwords (lambda (ext-0) (DataC-45String-joinBy " " ext-0)))
(define DataC-45String-trim (lambda (ext-0) (DataC-45String-ltrim (string-reverse (DataC-45String-ltrim (string-reverse ext-0))))))
(define DataC-45String-strM (lambda (arg-0) (cond ((equal? arg-0 "") '())(else (Builtin-believe_me (cons (string-ref arg-0 0) (substring arg-0 1 (string-length arg-0))))))))
(define DataC-45String-split (lambda (arg-0 arg-1) (DataC-45List1-u--map_Functor_List1 (lambda (eta-0) (PreludeC-45Types-fastPack eta-0)) (DataC-45List-split arg-0 (PreludeC-45Types-fastUnpack arg-1)))))
(define DataC-45String-singleton (lambda (arg-0) (string-cons arg-0 "")))
(define DataC-45String-parsePositive (lambda (arg-1 arg-2) (DataC-45String-n--4219-6824-u--parsePosTrimmed arg-1 arg-2 (DataC-45String-trim arg-2))))
(define DataC-45String-parseNumWithoutSign (lambda (arg-0 arg-1) (if (null? arg-0) (box arg-1) (let ((e-2 (car arg-0))) (let ((e-3 (cdr arg-0))) (let ((sc1 (let ((sc2 (PreludeC-45EqOrd-u--C-62C-61_Ord_Char e-2 #\0))) (cond ((equal? sc2 1) (PreludeC-45EqOrd-u--C-60C-61_Ord_Char e-2 #\9)) (else 0))))) (cond ((equal? sc1 1) (DataC-45String-parseNumWithoutSign e-3 (+ (* arg-1 10) (PreludeC-45Cast-u--cast_Cast_Int_Integer (bs- (cast-char-boundedInt e-2 63) (cast-char-boundedInt #\0 63) 63))))) (else '()))))))))
(define DataC-45String-ltrim (lambda (arg-0) (DataC-45String-with--ltrim-6503 arg-0 (DataC-45String-asList arg-0))))
(define DataC-45String-joinBy (lambda (arg-0 arg-1) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (DataC-45List-intersperse arg-0 arg-1))))
(define DataC-45String-asList (lambda (arg-0) (DataC-45String-with--asList-6479 arg-0 (DataC-45String-strM arg-0))))
(define PackC-45RunnerC-45Install-case--idrisWithCG-8077 (lambda (arg-0 arg-1) (case (vector-ref arg-1 0) ((0) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_Path (PackC-45ConfigC-45Types-idrisExec arg-0)) '())))(else (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_Path (PackC-45ConfigC-45Types-idrisExec arg-0)) (cons " --cg " (cons (PackC-45ConfigC-45Types-u--interpolate_Interpolation_Codegen arg-1) '()))))))))
(define PackC-45RunnerC-45Install-case--idrisWithCG-8032 (lambda (arg-0 arg-1) (case (vector-ref arg-1 0) ((0) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_Path (PackC-45ConfigC-45Types-collectionIdrisExec arg-0)) '())))(else (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_Path (PackC-45ConfigC-45Types-collectionIdrisExec arg-0)) (cons " --cg " (cons (PackC-45ConfigC-45Types-u--interpolate_Interpolation_Codegen arg-1) '()))))))))
(define PackC-45RunnerC-45Install-n--5222-8248-u--s (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons arg-4 (cons " " (cons (PackC-45RunnerC-45Install-n--5222-8247-u--pre arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (cons " " (cons arg-7 (cons " " (cons arg-3 (cons " " (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_Path arg-2) '()))))))))))))
(define PackC-45RunnerC-45Install-n--5222-8247-u--pre (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (cond ((equal? arg-6 1) "") (else (PackC-45ConfigC-45Types-buildEnv arg-5)))))
(define PackC-45RunnerC-45Install-removeExec (lambda (arg-2 arg-3 arg-4 arg-5) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9934)))) (PackC-45ConfigC-45Env-debug (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-2 arg-11999)))) arg-3 (lambda () (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "Removing application " (cons arg-5 '()))))) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9934)))) (PackC-45CoreC-45IO-rmFile arg-2 (PackC-45ConfigC-45Types-collectionAppExec arg-3 arg-5)) (lambda () (PackC-45CoreC-45IO-rmDir arg-2 (PackC-45ConfigC-45Types-packageBinDir arg-3 arg-4))))))))
(define PackC-45RunnerC-45Install-promptDesc (lambda (arg-2 ext-0 ext-1 ext-2) (PackC-45RunnerC-45Install-prompt arg-2 (PackC-45DatabaseC-45Types-name ext-0) ext-1 ext-2)))
(define PackC-45RunnerC-45Install-prompt (lambda (arg-2 arg-3 arg-4 arg-5) (let ((sc0 (let ((sc1 (let ((e-6 (vector-ref arg-4 4))) e-6))) (cond ((equal? sc1 1) (DataC-45Maybe-isJust (PreludeC-45Types-u--C-60C-124C-62_Alternative_Maybe (let ((e-19 (vector-ref arg-5 19))) e-19) (lambda () (PreludeC-45Types-u--C-60C-124C-62_Alternative_Maybe (let ((e-20 (vector-ref arg-5 20))) e-20) (lambda () (PreludeC-45Types-u--C-60C-124C-62_Alternative_Maybe (let ((e-21 (vector-ref arg-5 21))) e-21) (lambda () (let ((e-22 (vector-ref arg-5 22))) e-22))))))))) (else 0))))) (cond ((equal? sc0 1) (PreludeC-45Interfaces-C-62C-62 (let ((e-1 (car arg-2))) e-1) (PreludeC-45IO-putStrLn arg-2 (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "Package " (cons arg-3 (cons " uses custom build hooks. Continue (yes/*no)?" '()))))) (lambda () (let ((e-1 (car arg-2))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (PreludeC-45Interfaces-C-60C-36C-62 (let ((e-7 (car arg-2))) (let ((e-10 (vector-ref e-7 0))) (let ((e-13 (vector-ref e-10 0))) e-13))) (lambda (eta-0) (DataC-45String-trim eta-0)) (PreludeC-45IO-getLine arg-2))) (lambda (_-0) (cond ((equal? _-0 "yes") (let ((e-7 (car arg-2))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) 1)))))(else (PreludeC-45Interfaces-C-36C-62 (let ((e-7 (car arg-2))) (let ((e-10 (vector-ref e-7 0))) (let ((e-13 (vector-ref e-10 0))) e-13))) (PreludeC-45IO-putStrLn arg-2 "Aborting...") 0)))))))))) (else (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) 1)))))))))
(define PackC-45RunnerC-45Install-packInstalled (lambda (arg-2 arg-3) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) (PackC-45RunnerC-45Install-packExec arg-2 arg-3) (lambda (eta-0) (PackC-45CoreC-45IO-exists (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-2 arg-11999)))) eta-0)))))
(define PackC-45RunnerC-45Install-packExec (lambda (arg-2 arg-3) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) (PackC-45RunnerC-45Database-resolve arg-2 arg-3 (vector 0 "pack")) (lambda (u--rp) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) (PackC-45ConfigC-45Types-packageExec arg-3 u--rp "pack"))))))
(define PackC-45RunnerC-45Install-mkIdris (lambda (arg-1 arg-2) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45ConfigC-45Env-debug (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) arg-2 (lambda () "Checking Idris installation")) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-missing (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) (PackC-45ConfigC-45Types-idrisInstallDir arg-2)) (lambda (bind-0) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) bind-0 (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45ConfigC-45Env-debug (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) arg-2 (lambda () "No Idris compiler found. Installing...")) (let ((sc0 (let ((e-5 (vector-ref arg-2 3))) e-5))) (cond ((equal? sc0 1) (lambda () (PackC-45CoreC-45Git-withGit arg-1 (PackC-45ConfigC-45Types-tmpDir arg-2) (let ((e-16 (vector-ref arg-2 14))) (let ((e-0 (vector-ref e-16 0))) e-0)) (let ((e-16 (vector-ref arg-2 14))) (let ((e-1 (vector-ref e-16 1))) e-1)) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45CoreC-45IO-sys arg-1 (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "make bootstrap " (cons (PackC-45ConfigC-45Types-prefixVar arg-2) (cons " " (cons (PackC-45ConfigC-45Types-schemeVar arg-2) '())))))) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45CoreC-45IO-sys arg-1 (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "make install " (cons (PackC-45ConfigC-45Types-prefixVar arg-2) '())))) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45CoreC-45IO-sys arg-1 "make clean-libs") (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45CoreC-45IO-sys arg-1 "rm -r build/ttc build/exec") (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45CoreC-45IO-sys arg-1 (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "make idris2-exec " (cons (PackC-45ConfigC-45Types-idrisBootVar arg-2) (cons " " (cons (PackC-45ConfigC-45Types-prefixVar arg-2) (cons " IDRIS2_INC_CGS=\"\"" '()))))))) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45CoreC-45IO-sys arg-1 (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "make libs " (cons (PackC-45ConfigC-45Types-idrisBootVar arg-2) (cons " " (cons (PackC-45ConfigC-45Types-prefixVar arg-2) '())))))) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45CoreC-45IO-sys arg-1 (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "make install " (cons (PackC-45ConfigC-45Types-idrisBootVar arg-2) (cons " " (cons (PackC-45ConfigC-45Types-prefixVar arg-2) '())))))) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45CoreC-45IO-sys arg-1 (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "make install-with-src-libs " (cons (PackC-45ConfigC-45Types-idrisBootVar arg-2) (cons " " (cons (PackC-45ConfigC-45Types-prefixVar arg-2) '())))))) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45CoreC-45IO-sys arg-1 "rm -r build/ttc build/exec") (lambda () (PackC-45CoreC-45IO-sys arg-1 (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "make install-with-src-api " (cons (PackC-45ConfigC-45Types-idrisBootVar arg-2) (cons " " (cons (PackC-45ConfigC-45Types-prefixVar arg-2) '()))))))))))))))))))))))))))) (else (lambda () (PackC-45CoreC-45Git-withGit arg-1 (PackC-45ConfigC-45Types-tmpDir arg-2) (let ((e-16 (vector-ref arg-2 14))) (let ((e-0 (vector-ref e-16 0))) e-0)) (let ((e-16 (vector-ref arg-2 14))) (let ((e-1 (vector-ref e-16 1))) e-1)) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45CoreC-45IO-sys arg-1 (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "make support " (cons (PackC-45ConfigC-45Types-prefixVar arg-2) '())))) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45CoreC-45IO-sys arg-1 (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "make idris2-exec " (cons (PackC-45ConfigC-45Types-prefixVar arg-2) (cons " IDRIS2_INC_CGS=\"\"" '()))))) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45CoreC-45IO-sys arg-1 (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "make libs " (cons (PackC-45ConfigC-45Types-prefixVar arg-2) '())))) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45CoreC-45IO-sys arg-1 (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "make install " (cons (PackC-45ConfigC-45Types-prefixVar arg-2) '())))) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45CoreC-45IO-sys arg-1 (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "make install-with-src-libs " (cons (PackC-45ConfigC-45Types-prefixVar arg-2) '())))) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45CoreC-45IO-sys arg-1 "rm -r build/ttc build/exec") (lambda () (PackC-45CoreC-45IO-sys arg-1 (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "make install-with-src-api " (cons (PackC-45ConfigC-45Types-idrisBootVar arg-2) (cons " " (cons (PackC-45ConfigC-45Types-prefixVar arg-2) '())))))))))))))))))))))))))))) (lambda () (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45RunnerC-45Install-packExec arg-1 arg-2) (lambda (u--exepath) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45RunnerC-45Install-appLink arg-1 (PackC-45ConfigC-45Types-idrisExec arg-2) (PackC-45ConfigC-45Types-collectionIdrisExec arg-2) (box u--exepath)) (lambda () (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (let ((e-2 (vector-ref arg-2 0))) (let ((e-3 (vector-ref arg-2 1))) (let ((e-4 (vector-ref arg-2 2))) (let ((e-5 (vector-ref arg-2 3))) (let ((e-6 (vector-ref arg-2 4))) (let ((e-7 (vector-ref arg-2 5))) (let ((e-8 (vector-ref arg-2 6))) (let ((e-9 (vector-ref arg-2 7))) (let ((e-10 (vector-ref arg-2 8))) (let ((e-11 (vector-ref arg-2 9))) (let ((e-12 (vector-ref arg-2 10))) (let ((e-13 (vector-ref arg-2 11))) (let ((e-14 (vector-ref arg-2 12))) (let ((e-15 (vector-ref arg-2 13))) (let ((e-16 (vector-ref arg-2 14))) (vector e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 e-13 e-14 e-15 e-16)))))))))))))))))))))))))))
(define PackC-45RunnerC-45Install-links (lambda (arg-1 arg-2) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45CoreC-45IO-rmDir arg-1 (PackC-45ConfigC-45Types-packBinDir arg-2)) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45ConfigC-45Env-debug (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) arg-2 (lambda () "Creating sym links")) (lambda () (PackC-45CoreC-45IO-link arg-1 (PackC-45ConfigC-45Types-collectionBinDir arg-2) (PackC-45ConfigC-45Types-packBinDir arg-2))))))))
(define PackC-45RunnerC-45Install-installLib (lambda (arg-1 arg-2 arg-3) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45ConfigC-45Env-debug (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) arg-2 (lambda () (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "Installing library " (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_PkgRep arg-3) (cons "..." '())))))) (lambda () (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45RunnerC-45Database-resolve arg-1 arg-2 arg-3) (lambda (u--rp) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PreludeC-45Interfaces-traverse_ (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (csegen-84) (lambda (eta-0) (PackC-45RunnerC-45Install-installLib arg-1 arg-2 eta-0)) (PackC-45DatabaseC-45Types-dependencies u--rp)) (case (vector-ref u--rp 0) ((0) (let ((e-0 (vector-ref u--rp 1))) (let ((e-1 (vector-ref u--rp 2))) (let ((e-2 (vector-ref u--rp 3))) (let ((e-3 (vector-ref u--rp 4))) (let ((e-4 (vector-ref u--rp 5))) (let ((e-5 (vector-ref u--rp 6))) (lambda () (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-7 (car arg-1))) e-7) (PackC-45RunnerC-45Database-packageExists arg-1 arg-2 u--rp) (lambda (_-0) (let ((rp-0 (vector 0 e-0 e-1 e-2 e-3 e-4 e-5))) (cond ((equal? _-0 0) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-7 (car arg-1))) e-7) (PackC-45RunnerC-45Install-promptDesc (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-13 (vector-ref e-10 0))) e-13))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) e-10)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) e-10)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-7 (car arg-1))) e-7) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-7 (car arg-1))) e-7) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) rp-0 arg-2 e-5) (lambda (bind-0) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-13 (vector-ref e-10 0))) e-13))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) e-10)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) e-10)) arg-9446 arg-9453)))))) bind-0 (lambda () (PackC-45CoreC-45Git-withGit arg-1 (PackC-45ConfigC-45Types-tmpDir arg-2) e-1 e-2 (let ((u--pf (PackC-45ConfigC-45Types-patchFile arg-2 e-0 e-3))) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-13 (vector-ref e-10 0))) e-13))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) e-10)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) e-10)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-7 (car arg-1))) e-7) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-7 (car arg-1))) e-7) arg-9934)))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-7 (car arg-1))) e-7) (PackC-45CoreC-45IO-exists (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-13 (vector-ref e-10 0))) e-13))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) e-10)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) e-10)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-7 (car arg-1))) e-7) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-7 (car arg-1))) e-7) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) u--pf) (lambda (bind-1) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-13 (vector-ref e-10 0))) e-13))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) e-10)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) e-10)) arg-9446 arg-9453)))))) bind-1 (lambda () (PackC-45CoreC-45IO-patch arg-1 e-3 u--pf))))) (lambda () (PackC-45RunnerC-45Install-idrisPkg arg-1 arg-2 (PackC-45ConfigC-45Types-packageInstallPrefix arg-2 rp-0) (PackC-45RunnerC-45Install-installCmd (let ((e-7 (vector-ref arg-2 5))) e-7)) e-3)))))))))) (else (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) e-10)) (vector 0 ))))))))))))))) ((1) (let ((e-6 (vector-ref u--rp 1))) (let ((e-7 (vector-ref u--rp 2))) (lambda () (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45RunnerC-45Install-promptDesc (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-10 (vector-ref e-5 0))) e-10))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) u--rp arg-2 e-7) (lambda (bind-0) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-10 (vector-ref e-5 0))) e-10))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) bind-0 (lambda () (PackC-45RunnerC-45Install-idrisPkg arg-1 arg-2 (PackC-45ConfigC-45Types-packageInstallPrefix arg-2 u--rp) (PackC-45RunnerC-45Install-installCmd (let ((e-17 (vector-ref arg-2 5))) e-17)) e-6))))))))) ((2) (let ((e-9 (vector-ref u--rp 2))) (let ((e-10 (vector-ref u--rp 3))) (let ((e-12 (vector-ref u--rp 5))) (lambda () (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45RunnerC-45Install-promptDesc (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-13 (vector-ref e-5 0))) e-13))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) u--rp arg-2 e-12) (lambda (bind-0) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-13 (vector-ref e-5 0))) e-13))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) bind-0 (lambda () (PackC-45CoreC-45IO-inDir arg-1 e-9 (PackC-45RunnerC-45Install-idrisPkg arg-1 arg-2 (PackC-45ConfigC-45Types-packageInstallPrefix arg-2 u--rp) (PackC-45RunnerC-45Install-installCmd (let ((e-7 (vector-ref arg-2 5))) e-7)) e-10)))))))))))(else (lambda () (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45RunnerC-45Database-packageExists arg-1 arg-2 u--rp) (lambda (_-0) (cond ((equal? _-0 0) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) (vector 0 (vector 15 (PackC-45DatabaseC-45Types-name u--rp) (let ((e-16 (vector-ref arg-2 14))) (let ((e-25 (vector-ref e-16 2))) e-25)) (let ((e-16 (vector-ref arg-2 14))) (let ((e-26 (vector-ref e-16 1))) e-26))))))))) (else (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (vector 0 ))))))))))))))))
(define PackC-45RunnerC-45Install-installCmd (lambda (arg-0) (cond ((equal? arg-0 1) "--install-with-src") (else "--install"))))
(define PackC-45RunnerC-45Install-installApp (lambda (arg-1 arg-2 arg-3) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45ConfigC-45Env-debug (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) arg-2 (lambda () (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "Installing application " (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_PkgRep arg-3) (cons "..." '())))))) (lambda () (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45RunnerC-45Database-resolve arg-1 arg-2 arg-3) (lambda (u--rp) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (PackC-45DatabaseC-45Types-executable u--rp)) (lambda (_-0) (if (null? _-0) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) (vector 0 (vector 9 arg-3)))))) (let ((e-1 (unbox _-0))) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) (let ((e-9 (vector-ref e-6 0))) e-9))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) e-6)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) e-6)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) arg-9934)))) (PreludeC-45Interfaces-traverse_ (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) (let ((e-9 (vector-ref e-6 0))) e-9))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) e-6)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) e-6)) arg-9446 arg-9453)))))) (csegen-84) (lambda (eta-0) (PackC-45RunnerC-45Install-installLib arg-1 arg-2 eta-0)) (PackC-45DatabaseC-45Types-dependencies u--rp)) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) (let ((e-9 (vector-ref e-6 0))) e-9))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) e-6)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) e-6)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) arg-9934)))) (case (vector-ref u--rp 0) ((0) (let ((e-0 (vector-ref u--rp 1))) (let ((e-6 (vector-ref u--rp 2))) (let ((e-2 (vector-ref u--rp 3))) (let ((e-3 (vector-ref u--rp 4))) (let ((e-4 (vector-ref u--rp 5))) (let ((e-5 (vector-ref u--rp 6))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-8 (car arg-1))) e-8) (PackC-45RunnerC-45Database-executableExists arg-1 arg-2 u--rp e-1) (lambda (_-1) (let ((rp-0 (vector 0 e-0 e-6 e-2 e-3 e-4 e-5))) (cond ((equal? _-1 0) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-8 (car arg-1))) e-8) (PackC-45RunnerC-45Install-promptDesc (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) (let ((e-14 (vector-ref e-11 0))) e-14))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) e-11)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) e-11)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-8 (car arg-1))) e-8) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-8 (car arg-1))) e-8) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) rp-0 arg-2 e-5) (lambda (bind-0) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) (let ((e-14 (vector-ref e-11 0))) e-14))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) e-11)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) e-11)) arg-9446 arg-9453)))))) bind-0 (lambda () (PackC-45CoreC-45Git-withGit arg-1 (PackC-45ConfigC-45Types-tmpDir arg-2) e-6 e-2 (let ((u--pf (PackC-45ConfigC-45Types-patchFile arg-2 e-0 e-3))) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) (let ((e-14 (vector-ref e-11 0))) e-14))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) e-11)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) e-11)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-8 (car arg-1))) e-8) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-8 (car arg-1))) e-8) arg-9934)))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-8 (car arg-1))) e-8) (PackC-45CoreC-45IO-exists (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) (let ((e-14 (vector-ref e-11 0))) e-14))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) e-11)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) e-11)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-8 (car arg-1))) e-8) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-8 (car arg-1))) e-8) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) u--pf) (lambda (bind-1) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) (let ((e-14 (vector-ref e-11 0))) e-14))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) e-11)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) e-11)) arg-9446 arg-9453)))))) bind-1 (lambda () (PackC-45CoreC-45IO-patch arg-1 e-3 u--pf))))) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) (let ((e-14 (vector-ref e-11 0))) e-14))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) e-11)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) e-11)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-8 (car arg-1))) e-8) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-8 (car arg-1))) e-8) arg-9934)))) (PackC-45RunnerC-45Install-idrisPkg arg-1 arg-2 "" "--build" e-3) (lambda () (PackC-45RunnerC-45Install-copyApp arg-1 arg-2 rp-0)))))))))))) (else (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) e-11)) (vector 0 )))))))))))))) ((1) (let ((e-6 (vector-ref u--rp 1))) (let ((e-7 (vector-ref u--rp 2))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) (PackC-45RunnerC-45Install-promptDesc (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-8 (vector-ref e-3 0))) (let ((e-11 (vector-ref e-8 0))) e-11))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-8 (vector-ref e-3 0))) e-8)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-8 (vector-ref e-3 0))) e-8)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) u--rp arg-2 e-7) (lambda (bind-0) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-8 (vector-ref e-3 0))) (let ((e-11 (vector-ref e-8 0))) e-11))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-8 (vector-ref e-3 0))) e-8)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-8 (vector-ref e-3 0))) e-8)) arg-9446 arg-9453)))))) bind-0 (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-8 (vector-ref e-3 0))) (let ((e-11 (vector-ref e-8 0))) e-11))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-8 (vector-ref e-3 0))) e-8)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-8 (vector-ref e-3 0))) e-8)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) arg-9934)))) (PackC-45RunnerC-45Install-removeExec arg-1 arg-2 u--rp e-1) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-8 (vector-ref e-3 0))) (let ((e-11 (vector-ref e-8 0))) e-11))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-8 (vector-ref e-3 0))) e-8)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-8 (vector-ref e-3 0))) e-8)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) arg-9934)))) (PackC-45RunnerC-45Install-idrisPkg arg-1 arg-2 "" "--build" e-6) (lambda () (PackC-45RunnerC-45Install-copyApp arg-1 arg-2 u--rp)))))))))))) ((2) (let ((e-9 (vector-ref u--rp 2))) (let ((e-10 (vector-ref u--rp 3))) (let ((e-12 (vector-ref u--rp 5))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) (PackC-45RunnerC-45Install-promptDesc (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) (let ((e-14 (vector-ref e-6 0))) e-14))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) e-6)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) e-6)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) u--rp arg-2 e-12) (lambda (bind-0) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) (let ((e-14 (vector-ref e-6 0))) e-14))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) e-6)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) e-6)) arg-9446 arg-9453)))))) bind-0 (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) (let ((e-14 (vector-ref e-6 0))) e-14))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) e-6)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) e-6)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) arg-9934)))) (PackC-45RunnerC-45Install-removeExec arg-1 arg-2 u--rp e-1) (lambda () (PackC-45CoreC-45IO-inDir arg-1 e-9 (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) (let ((e-14 (vector-ref e-6 0))) e-14))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) e-6)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) e-6)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) arg-9934)))) (PackC-45RunnerC-45Install-idrisPkg arg-1 arg-2 "" "--build" e-10) (lambda () (PackC-45RunnerC-45Install-copyApp arg-1 arg-2 u--rp))))))))))))))(else (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) (let ((e-8 (vector-ref e-6 1))) ((e-8 'erased) (vector 0 (vector 9 arg-3)))))))) (let ((sc1 (PackC-45DatabaseC-45Types-usePackagePath u--rp))) (cond ((equal? sc1 1) (lambda () (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) e-3) (PackC-45RunnerC-45Install-packExec arg-1 arg-2) (lambda (eta-0) (PackC-45RunnerC-45Install-appLink arg-1 (PackC-45ConfigC-45Types-packageExec arg-2 u--rp e-1) (PackC-45ConfigC-45Types-collectionAppExec arg-2 e-1) (box eta-0)))))) (else (lambda () (PackC-45RunnerC-45Install-appLink arg-1 (PackC-45ConfigC-45Types-packageExec arg-2 u--rp e-1) (PackC-45ConfigC-45Types-collectionAppExec arg-2 e-1) '()))))))))))))))))))
(define PackC-45RunnerC-45Install-idrisWithCG (lambda (arg-0 arg-1) (cond ((equal? arg-1 1) (PackC-45RunnerC-45Install-case--idrisWithCG-8032 arg-0 (let ((e-15 (vector-ref arg-0 13))) e-15))) (else (PackC-45RunnerC-45Install-case--idrisWithCG-8077 arg-0 (let ((e-15 (vector-ref arg-0 13))) e-15))))))
(define PackC-45RunnerC-45Install-idrisPkg (lambda (arg-1 arg-2 arg-3 arg-4 arg-5) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45RunnerC-45Install-packInstalled arg-1 arg-2) (lambda (u--b) (let ((u--exe (PackC-45RunnerC-45Install-idrisWithCG arg-2 u--b))) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (b-0) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (b-0) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (b-0) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45ConfigC-45Env-debug (cons (vector (vector (lambda (b-0) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (b-0) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (b-0) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) arg-2 (lambda () (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "About to run: " (cons (PackC-45RunnerC-45Install-n--5222-8248-u--s arg-1 arg-5 arg-4 arg-3 arg-2 u--b u--exe) '()))))) (lambda () (PackC-45CoreC-45IO-sys arg-1 (PackC-45RunnerC-45Install-n--5222-8248-u--s arg-1 arg-5 arg-4 arg-3 arg-2 u--b u--exe)))))))))
(define PackC-45RunnerC-45Install-idrisEnv (lambda (arg-1 arg-2) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45ConfigC-45Env-env arg-1 arg-2) (lambda (eta-0) (PackC-45RunnerC-45Install-mkIdris arg-1 eta-0))) (lambda (u--e) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PreludeC-45Interfaces-traverse_ (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (csegen-84) (lambda (eta-0) (PackC-45RunnerC-45Install-installLib arg-1 u--e eta-0)) (PreludeC-45Types-u--map_Functor_List (lambda (eta-0) (vector 0 eta-0)) (let ((e-10 (vector-ref u--e 8))) e-10))) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PreludeC-45Interfaces-traverse_ (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (csegen-84) (lambda (eta-0) (PackC-45RunnerC-45Install-installApp arg-1 u--e eta-0)) (PreludeC-45Types-u--map_Functor_List (lambda (eta-0) (vector 0 eta-0)) (let ((e-11 (vector-ref u--e 9))) e-11))) (lambda () (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) u--e)))))))))
(define PackC-45RunnerC-45Install-copyApp (lambda (arg-1 arg-2 arg-3) (let ((u--dir (PackC-45ConfigC-45Types-packageBinDir arg-2 arg-3))) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45ConfigC-45Env-debug (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) arg-2 (lambda () (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "Copying application to " (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_Path u--dir) '()))))) (lambda () (PackC-45CoreC-45IO-mkDir arg-1 u--dir))) (lambda () (PackC-45CoreC-45IO-sys arg-1 (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "cp -r build/exec/* " (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_Path u--dir) '())))))))))
(define PackC-45RunnerC-45Install-appLink (lambda (arg-1 arg-2 arg-3 arg-4) (if (null? arg-4) (PackC-45CoreC-45IO-link arg-1 arg-2 arg-3) (let ((e-2 (unbox arg-4))) (let ((u--content (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "#!/bin/sh\xa;\xa;export IDRIS2_PACKAGE_PATH=\"$(pack package-path)\"\xa;export IDRIS2_LIBS=\"$(\"" (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_Path e-2) (cons "\" libs-path)\"\xa;export IDRIS2_DATA=\"$(\"" (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_Path e-2) (cons "\" data-path)\"\xa;\"" (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_Path arg-2) (cons "\" \"$@\"" '())))))))))) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) (let ((e-9 (vector-ref e-6 0))) e-9))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) e-6)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) e-6)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45CoreC-45IO-write arg-1 arg-3 u--content) (lambda () (PackC-45CoreC-45IO-sys arg-1 (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "chmod +x " (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_Path arg-3) '())))))))))))
(define PackC-45RunnerC-45Database-case--resolveImpl-7573 (lambda (arg-2 arg-3 arg-4 arg-5) (if (null? arg-5) (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) (vector 0 (vector 8 arg-3)))))) (let ((e-2 (unbox arg-5))) (case (vector-ref e-2 0) ((0) (let ((e-3 (vector-ref e-2 1))) (let ((e-4 (vector-ref e-2 2))) (let ((e-5 (vector-ref e-2 3))) (let ((e-6 (vector-ref e-2 4))) (let ((u--cache (PackC-45ConfigC-45Types-ipkgPath arg-4 arg-3 e-4 e-5))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) (PackC-45CoreC-45IO-exists (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-10 (vector-ref e-1 0))) (let ((e-13 (vector-ref e-10 0))) e-13))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-10 (vector-ref e-1 0))) e-10)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-10 (vector-ref e-1 0))) e-10)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-2 arg-11999)))) u--cache) (lambda (u--b) (cond ((equal? u--b 1) (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-10 (vector-ref e-1 0))) (let ((e-13 (vector-ref e-10 0))) e-13))) eta-2 eta-3))))) (lambda (eta-0) (vector 0 arg-3 e-3 e-4 e-5 e-6 eta-0)) (PackC-45CoreC-45Ipkg-parseIpkgFile arg-2 u--cache))) (else (PackC-45CoreC-45Git-withGit arg-2 (PackC-45ConfigC-45Types-tmpDir arg-4) e-3 e-4 (let ((u--pf (PackC-45ConfigC-45Types-patchFile arg-4 arg-3 e-5))) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (b-0) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-10 (vector-ref e-1 0))) (let ((e-13 (vector-ref e-10 0))) e-13))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-10 (vector-ref e-1 0))) e-10)) arg-9440))) (lambda (b-0) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-10 (vector-ref e-1 0))) e-10)) arg-9446 arg-9453)))))) (lambda (b-0) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9934)))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) (PackC-45CoreC-45IO-exists (cons (vector (vector (lambda (b-0) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-10 (vector-ref e-1 0))) (let ((e-13 (vector-ref e-10 0))) e-13))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-10 (vector-ref e-1 0))) e-10)) arg-9440))) (lambda (b-0) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-10 (vector-ref e-1 0))) e-10)) arg-9446 arg-9453)))))) (lambda (b-0) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-2 arg-11999)))) u--pf) (lambda (bind-0) (PreludeC-45Interfaces-when (vector (lambda (b-0) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-10 (vector-ref e-1 0))) (let ((e-13 (vector-ref e-10 0))) e-13))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-10 (vector-ref e-1 0))) e-10)) arg-9440))) (lambda (b-0) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-10 (vector-ref e-1 0))) e-10)) arg-9446 arg-9453)))))) bind-0 (lambda () (PackC-45CoreC-45IO-patch arg-2 e-5 u--pf))))) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (b-0) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-10 (vector-ref e-1 0))) (let ((e-13 (vector-ref e-10 0))) e-13))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-10 (vector-ref e-1 0))) e-10)) arg-9440))) (lambda (b-0) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-10 (vector-ref e-1 0))) e-10)) arg-9446 arg-9453)))))) (lambda (b-0) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9934)))) (PackC-45CoreC-45IO-copyFile arg-2 e-5 u--cache) (lambda () (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-10 (vector-ref e-1 0))) (let ((e-13 (vector-ref e-10 0))) e-13))) eta-2 eta-3))))) (lambda (eta-0) (vector 0 arg-3 e-3 e-4 e-5 e-6 eta-0)) (PackC-45CoreC-45Ipkg-parseIpkgFile arg-2 e-5)))))))))))))))))) (else (let ((e-7 (vector-ref e-2 1))) (let ((e-8 (vector-ref e-2 2))) (let ((e-9 (vector-ref e-2 3))) (PackC-45CoreC-45IO-inDir arg-2 e-7 (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-6 (vector-ref e-1 0))) (let ((e-12 (vector-ref e-6 0))) e-12))) eta-2 eta-3))))) (lambda (eta-0) (vector 2 arg-3 e-7 e-8 e-9 eta-0)) (PackC-45CoreC-45Ipkg-parseIpkgFile arg-2 e-8))))))))))))
(define PackC-45RunnerC-45Database-resolveImpl (lambda (arg-2 arg-3 arg-4) (case (vector-ref arg-4 0) ((0) (let ((e-0 (vector-ref arg-4 1))) (cond ((equal? e-0 "base") (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) (vector 3 ))) ((equal? e-0 "contrib") (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) (vector 4 ))) ((equal? e-0 "linear") (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) (vector 6 ))) ((equal? e-0 "idris2") (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) (vector 5 ))) ((equal? e-0 "network") (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) (vector 7 ))) ((equal? e-0 "prelude") (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) (vector 8 ))) ((equal? e-0 "test") (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) (vector 9 )))(else (PackC-45RunnerC-45Database-case--resolveImpl-7573 arg-2 e-0 arg-3 (DataC-45SortedMap-lookup e-0 (PackC-45ConfigC-45Types-allPackages arg-3))))))) (else (let ((e-1 (vector-ref arg-4 1))) (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-2))) (let ((e-6 (vector-ref e-3 0))) (let ((e-9 (vector-ref e-6 0))) e-9))) eta-2 eta-3))))) (lambda (eta-0) (vector 1 e-1 eta-0)) (PackC-45CoreC-45Ipkg-parseIpkgFile arg-2 e-1)))))))
(define PackC-45RunnerC-45Database-resolve (lambda (arg-2 arg-3 arg-4) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9934)))) (PackC-45ConfigC-45Env-debug (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-2 arg-11999)))) arg-3 (lambda () (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "Trying to resolve package " (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_PkgRep arg-4) '()))))) (lambda () (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) (PackC-45RunnerC-45Database-resolveImpl arg-2 arg-3 arg-4) (lambda (u--res) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9934)))) (PackC-45ConfigC-45Env-debug (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-2 arg-11999)))) arg-3 (lambda () (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "Found " (cons (PackC-45RunnerC-45Database-descStr u--res) (cons " " (cons (PackC-45DatabaseC-45Types-name u--res) '()))))))) (lambda () (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) u--res)))))))))
(define PackC-45RunnerC-45Database-packageExists (lambda (arg-2 arg-3 arg-4) (let ((u--dir (PackC-45ConfigC-45Types-packageInstallDir arg-3 arg-4))) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9934)))) (PackC-45ConfigC-45Env-debug (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-2 arg-11999)))) arg-3 (lambda () (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "Looking for package " (cons (PackC-45DatabaseC-45Types-name arg-4) (cons " at " (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_Path u--dir) '()))))))) (lambda () (PackC-45CoreC-45IO-exists (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-2 arg-11999)))) u--dir))))))
(define PackC-45RunnerC-45Database-executableExists (lambda (arg-2 arg-3 arg-4 arg-5) (let ((u--pth (PackC-45ConfigC-45Types-packageExec arg-3 arg-4 arg-5))) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9934)))) (PackC-45ConfigC-45Env-debug (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-2 arg-11999)))) arg-3 (lambda () (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "Looking for executable " (cons arg-5 (cons " at " (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_Path u--pth) '()))))))) (lambda () (PackC-45CoreC-45IO-exists (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-2 arg-11999)))) u--pth))))))
(define PackC-45RunnerC-45Database-execStr (lambda (arg-0) (PreludeC-45Types-maybe (lambda () "library") (lambda () (lambda (eta-0) "application")) (let ((e-14 (vector-ref arg-0 14))) e-14))))
(define PackC-45RunnerC-45Database-descStr (lambda (arg-0) (case (vector-ref arg-0 0) ((0) (let ((e-1 (vector-ref arg-0 2))) (let ((e-2 (vector-ref arg-0 3))) (let ((e-5 (vector-ref arg-0 6))) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "GitHub " (cons (PackC-45RunnerC-45Database-execStr e-5) (cons " (" (cons e-1 (cons ":" (cons e-2 (cons ")" '())))))))))))) ((1) (let ((e-7 (vector-ref arg-0 2))) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons ".ipkg " (cons (PackC-45RunnerC-45Database-execStr e-7) '()))))) ((2) (let ((e-12 (vector-ref arg-0 5))) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "local " (cons (PackC-45RunnerC-45Database-execStr e-12) '())))))(else "core package"))))
(define PackC-45DatabaseC-45Types-usePackagePath (lambda (arg-0) (case (vector-ref arg-0 0) ((0) (let ((e-4 (vector-ref arg-0 5))) e-4)) ((2) (let ((e-9 (vector-ref arg-0 4))) e-9))(else 0))))
(define PackC-45DatabaseC-45Types-name (lambda (arg-0) (case (vector-ref arg-0 0) ((0) (let ((e-0 (vector-ref arg-0 1))) e-0)) ((1) (let ((e-7 (vector-ref arg-0 2))) (let ((e-0 (vector-ref e-7 0))) e-0))) ((2) (let ((e-8 (vector-ref arg-0 1))) e-8)) ((3) "base") ((4) "contrib") ((5) "idris2") ((6) "linear") ((7) "network") ((8) "prelude") (else "test"))))
(define PackC-45DatabaseC-45Types-executable (lambda (arg-0) (PreludeC-45Types-u--C-62C-62C-61_Monad_Maybe (PackC-45DatabaseC-45Types-desc arg-0) (lambda (eta-0) (let ((e-14 (vector-ref eta-0 14))) e-14)))))
(define PackC-45DatabaseC-45Types-desc (lambda (arg-0) (case (vector-ref arg-0 0) ((0) (let ((e-5 (vector-ref arg-0 6))) (box e-5))) ((1) (let ((e-7 (vector-ref arg-0 2))) (box e-7))) ((2) (let ((e-12 (vector-ref arg-0 5))) (box e-12)))(else '()))))
(define PackC-45DatabaseC-45Types-dependencies (lambda (arg-0) (let ((sc0 (PackC-45DatabaseC-45Types-desc arg-0))) (if (null? sc0) '() (let ((e-1 (unbox sc0))) (PreludeC-45Types-u--map_Functor_List (lambda (eta-0) (vector 0 (let ((e-0 (car eta-0))) e-0))) (let ((e-11 (vector-ref e-1 11))) e-11)))))))
(define PackC-45CoreC-45Types-u--interpolate_Interpolation_PkgVersion (lambda (ext-0) (IdrisC-45PackageC-45Types-u--show_Show_PkgVersion ext-0)))
(define PackC-45CoreC-45Types-u--interpolate_Interpolation_PkgRep (lambda (arg-0) (case (vector-ref arg-0 0) ((0) (let ((e-0 (vector-ref arg-0 1))) e-0)) (else (let ((e-1 (vector-ref arg-0 1))) (PackC-45CoreC-45Types-u--interpolate_Interpolation_Path e-1))))))
(define PackC-45CoreC-45Types-u--interpolate_Interpolation_Path (lambda (ext-0) (LibrariesC-45UtilsC-45Path-u--show_Show_Path ext-0)))
(define PackC-45CoreC-45Types-u--interpolate_Interpolation_LogLevel (lambda (arg-0) (cond ((equal? arg-0 0) "debug") ((equal? arg-0 1) "info") (else "warning"))))
(define PackC-45CoreC-45Types-u--interpolate_Interpolation_FileError (lambda (ext-0) (SystemC-45FileC-45Error-u--show_Show_FileError ext-0)))
(define PackC-45CoreC-45Types-u--compare_Ord_LogLevel (lambda (ext-0 ext-1) (PreludeC-45Basics-on (lambda (eta-0) (lambda (eta-1) (PreludeC-45EqOrd-u--compare_Ord_Integer eta-0 eta-1))) (lambda (eta-0) (PackC-45CoreC-45Types-llToNat eta-0)) ext-0 ext-1)))
(define PackC-45CoreC-45Types-u--C-62C-61_Ord_LogLevel (lambda (arg-0 arg-1) (PreludeC-45EqOrd-u--C-47C-61_Eq_Ordering (PackC-45CoreC-45Types-u--compare_Ord_LogLevel arg-0 arg-1) 0)))
(define PackC-45CoreC-45Types-tomlPath (lambda (ext-0) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (DataC-45List-intersperse "." ext-0))))
(define PackC-45CoreC-45Types-printTOMLErr (lambda (arg-0) (case (vector-ref arg-0 0) ((0) (let ((e-0 (vector-ref arg-0 1))) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "Missing toml key: " (cons (PackC-45CoreC-45Types-tomlPath e-0) (cons "." '())))))) (else (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "Wrong type at " (cons (PackC-45CoreC-45Types-tomlPath e-1) (cons ". Expect " (cons e-2 (cons "." '()))))))))))))
(define PackC-45CoreC-45Types-printErr (lambda (arg-0) (case (vector-ref arg-0 0) ((0) "Failed to get current directory.") ((1) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "Failed to figure out package directory.\xa;This means, that neither environment variable \"PACK_DIR\"\xa;nor environment varaible \"HOME\" was set." '()))) ((2) (let ((e-0 (vector-ref arg-0 1))) (let ((e-1 (vector-ref arg-0 2))) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "Error when creating directory \"" (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_Path e-0) (cons "\": " (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_FileError e-1) (cons "." '()))))))))) ((3) (let ((e-2 (vector-ref arg-0 1))) (let ((e-3 (vector-ref arg-0 2))) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "Error when reading file \"" (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_Path e-2) (cons "\": " (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_FileError e-3) (cons "." '()))))))))) ((4) (let ((e-4 (vector-ref arg-0 1))) (let ((e-5 (vector-ref arg-0 2))) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "Error when writing to file \"" (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_Path e-4) (cons "\": " (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_FileError e-5) (cons "." '()))))))))) ((5) (let ((e-6 (vector-ref arg-0 1))) (let ((e-7 (vector-ref arg-0 2))) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "Error when reading directory \"" (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_Path e-6) (cons "\": " (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_FileError e-7) (cons "." '()))))))))) ((6) (let ((e-8 (vector-ref arg-0 1))) (let ((e-9 (vector-ref arg-0 2))) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "Error when executing system command.\xa;Command: " (cons e-8 (cons "\xa;Error code: " (cons (PreludeC-45Show-u--show_Show_Int e-9) '())))))))) ((7) (let ((e-10 (vector-ref arg-0 1))) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "Failed to change to directory \"" (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_Path e-10) (cons "\"." '())))))) ((10) (let ((e-11 (vector-ref arg-0 1))) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "Invalid package description: \"" (cons e-11 (cons "\".\xa;This should be of the format \"name,url,commit hash,ipkg file\"." '())))))) ((12) (let ((e-12 (vector-ref arg-0 1))) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "Invalid data base header: \"" (cons e-12 (cons "\".\xa;This should be of the format \"idris2 commit hash,idris2 version\"." '())))))) ((13) (let ((e-13 (vector-ref arg-0 1))) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "Invalid package version: \"" (cons e-13 (cons "\"." '())))))) ((8) (let ((e-14 (vector-ref arg-0 1))) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "Unknown package: " (cons e-14 '()))))) ((9) (let ((e-15 (vector-ref arg-0 1))) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "Package " (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_PkgRep e-15) (cons " is not an application" '())))))) ((11) "Empty package data base") ((14) (let ((e-16 (vector-ref arg-0 1))) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "Failed to parse .ipkg file: " (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_Path e-16) '()))))) ((15) (let ((e-17 (vector-ref arg-0 1))) (let ((e-18 (vector-ref arg-0 2))) (let ((e-19 (vector-ref arg-0 3))) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "Core package \"" (cons e-17 (cons "\" missing for Idris2 version " (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_PkgVersion e-18) (cons " (commit: " (cons e-19 (cons ")" '())))))))))))) ((16) (let ((e-20 (vector-ref arg-0 1))) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "Unknown command line arg: " (cons e-20 '()))))) ((17) (let ((e-21 (vector-ref arg-0 1))) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "Invalid command line args: " (cons (DataC-45String-unwords e-21) '()))))) ((18) (let ((e-22 (vector-ref arg-0 1))) e-22)) ((20) (let ((e-23 (vector-ref arg-0 1))) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "Unknown command: " (cons (DataC-45String-unwords e-23) '()))))) ((19) "Can only build or typecheck a single Idris2 package given as an `.ipkg` file.") ((21) (let ((e-24 (vector-ref arg-0 1))) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "Failed to clone GitHub repository into " (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_Path e-24) (cons ".\xa;Directory already exists." '())))))) ((22) (let ((e-25 (vector-ref arg-0 1))) (let ((e-26 (vector-ref arg-0 2))) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "Error in file " (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_Path e-25) (cons ": " (cons (PackC-45CoreC-45Types-printTOMLErr e-26) (cons "." '()))))))))) ((23) (let ((e-27 (vector-ref arg-0 1))) (let ((e-28 (vector-ref arg-0 2))) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "Error in file " (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_Path e-27) (cons ": " (cons e-28 (cons "." '()))))))))) (else (let ((e-29 (vector-ref arg-0 1))) (cond ((equal? e-29 0) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons (PreludeC-45Show-u--show_Show_Nat e-29) (cons " packages failed to build." '()))))(else (let ((e-30 (- e-29 1))) (cond ((equal? e-30 0) "1 package failed to build.")(else (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons (PreludeC-45Show-u--show_Show_Nat e-29) (cons " packages failed to build." '())))))))))))))
(define PackC-45CoreC-45Types-prefixKey (lambda (arg-1 ext-0) (case (vector-ref ext-0 0) ((0) (let ((e-2 (vector-ref ext-0 1))) (vector 0 (case (vector-ref e-2 0) ((0) (let ((e-0 (vector-ref e-2 1))) (vector 0 (cons arg-1 e-0)))) (else (let ((e-1 (vector-ref e-2 1))) (let ((e-3 (vector-ref e-2 2))) (vector 1 (cons arg-1 e-1) e-3)))))))) (else (let ((e-5 (vector-ref ext-0 1))) (vector 1 e-5))))))
(define PackC-45CoreC-45Types-llToNat (lambda (arg-0) (cond ((equal? arg-0 0) 0) ((equal? arg-0 1) 1) (else 2))))
(define LibrariesC-45UtilsC-45Path-case--C-60C-46C-62-7110 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (if (null? arg-5) arg-1 (let ((e-1 (unbox arg-5))) (let ((sc1 (LibrariesC-45UtilsC-45Path-splitFileName e-1))) (let ((e-2 (car sc1))) (LibrariesC-45UtilsC-45Path-u--show_Show_Path (LibrariesC-45UtilsC-45Path-setFileNameC-39 (string-append e-2 arg-4) arg-2))))))))
(define LibrariesC-45UtilsC-45Path-case--splitFileName-6415 (lambda (arg-0 arg-1) (let ((e-2 (car arg-1))) (let ((e-3 (cdr arg-1))) (if (null? e-3) (cons arg-0 "") (let ((e-6 (car e-3))) (let ((e-7 (cdr e-3))) (cond ((equal? e-6 #\.) (if (null? e-7) (cons arg-0 "") (cons (PreludeC-45Types-fastPack (PreludeC-45TypesC-45List-reverse e-7)) (PreludeC-45Types-fastPack (PreludeC-45TypesC-45List-reverse e-2)))))(else (cons (PreludeC-45Types-fastPack (PreludeC-45TypesC-45List-reverse e-7)) (PreludeC-45Types-fastPack (PreludeC-45TypesC-45List-reverse e-2))))))))))))
(define LibrariesC-45UtilsC-45Path-case--splitParentC-39-6264 (lambda (arg-0 arg-1) (if (null? arg-1) '() (let ((e-2 (car arg-1))) (let ((e-3 (cdr arg-1))) (let ((u--parent (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (vector e-0 e-1 (DataC-45List-init (cons e-2 e-3)) 0))))) (let ((u--child (vector '() 0 (cons (DataC-45List-last (cons e-2 e-3)) '()) (let ((e-4 (vector-ref arg-0 3))) e-4)))) (box (cons u--parent u--child)))))))))
(define LibrariesC-45UtilsC-45Path-n--6379-6348-u--findNormal (lambda (arg-0 arg-1) (if (null? arg-1) '() (let ((e-1 (car arg-1))) (let ((e-2 (cdr arg-1))) (case (vector-ref e-1 0) ((2) (let ((e-3 (vector-ref e-1 1))) (box e-3))) ((0) (LibrariesC-45UtilsC-45Path-n--6379-6348-u--findNormal arg-0 e-2))(else '())))))))
(define LibrariesC-45UtilsC-45Path-n--7026-6953-u--filter (lambda (arg-0 arg-2 arg-3) (if (null? arg-3) '() (let ((e-2 (unbox arg-3))) (DataC-45Maybe-toMaybe (arg-2 e-2) (lambda () e-2))))))
(define LibrariesC-45UtilsC-45Path-u--tokValue_TokenKind_PathTokenKind (lambda (arg-0 arg-1) (if (null? arg-0) arg-1 (vector 0 ))))
(define LibrariesC-45UtilsC-45Path-u--show_Show_Volume (lambda (arg-0) (case (vector-ref arg-0 0) ((0) (let ((e-0 (vector-ref arg-0 1))) (let ((e-1 (vector-ref arg-0 2))) (string-append "\\\\" (string-append e-0 (string-append "\\" e-1)))))) (else (let ((e-2 (vector-ref arg-0 1))) (string-append (DataC-45String-singleton e-2) ":"))))))
(define LibrariesC-45UtilsC-45Path-u--show_Show_Path (lambda (arg-0) (let ((u--sep (DataC-45String-singleton (LibrariesC-45UtilsC-45Path-dirSeparator)))) (let ((u--showVol (PreludeC-45Types-maybe (lambda () "") (lambda () (lambda (eta-0) (LibrariesC-45UtilsC-45Path-u--show_Show_Volume eta-0))) (let ((e-0 (vector-ref arg-0 0))) e-0)))) (let ((u--showRoot (let ((sc0 (let ((e-1 (vector-ref arg-0 1))) e-1))) (cond ((equal? sc0 1) u--sep) (else ""))))) (let ((u--showBody (LibrariesC-45DataC-45StringC-45Extra-join u--sep (csegen-84) (PreludeC-45Types-u--map_Functor_List (lambda (eta-0) (LibrariesC-45UtilsC-45Path-u--show_Show_Body eta-0)) (let ((e-2 (vector-ref arg-0 2))) e-2))))) (let ((u--showTrail (let ((sc0 (let ((e-3 (vector-ref arg-0 3))) e-3))) (cond ((equal? sc0 1) u--sep) (else ""))))) (string-append u--showVol (string-append u--showRoot (string-append u--showBody u--showTrail))))))))))
(define LibrariesC-45UtilsC-45Path-u--show_Show_Body (lambda (arg-0) (case (vector-ref arg-0 0) ((0) ".") ((1) "..") (else (let ((e-0 (vector-ref arg-0 1))) e-0)))))
(define LibrariesC-45UtilsC-45Path-u--TokType_TokenKind_PathTokenKind (lambda (arg-0) (if (null? arg-0) (vector "String" ) (vector "Builtin.Unit" ))))
(define LibrariesC-45UtilsC-45Path-u--C-61C-61_Eq_PathTokenKind (lambda (arg-0 arg-1) (if (null? arg-0) (if (null? arg-1) 1 0) (let ((e-0 (unbox arg-0))) (if (null? arg-1) 0 (let ((e-1 (unbox arg-1))) (PreludeC-45EqOrd-u--C-61C-61_Eq_Char e-0 e-1)))))))
(define LibrariesC-45UtilsC-45Path-u--C-61C-61_Eq_Body (lambda (arg-0 arg-1) (case (vector-ref arg-0 0) ((0) (case (vector-ref arg-1 0) ((0) 1)(else 0))) ((1) (case (vector-ref arg-1 0) ((1) 1)(else 0))) ((2) (let ((e-0 (vector-ref arg-0 1))) (case (vector-ref arg-1 0) ((2) (let ((e-1 (vector-ref arg-1 1))) (PreludeC-45EqOrd-u--C-61C-61_Eq_String e-0 e-1)))(else 0))))(else 0))))
(define LibrariesC-45UtilsC-45Path-u--C-47C-61_Eq_PathTokenKind (lambda (arg-0 arg-1) (let ((sc0 (LibrariesC-45UtilsC-45Path-u--C-61C-61_Eq_PathTokenKind arg-0 arg-1))) (cond ((equal? sc0 1) 0) (else 1)))))
(define LibrariesC-45UtilsC-45Path-u--C-47C-61_Eq_Body (lambda (arg-0 arg-1) (let ((sc0 (LibrariesC-45UtilsC-45Path-u--C-61C-61_Eq_Body arg-0 arg-1))) (cond ((equal? sc0 1) 0) (else 1)))))
(define LibrariesC-45UtilsC-45Path-verbatimUnc(blodwen-lazy (lambda () (vector 11 1 (LibrariesC-45UtilsC-45Path-verbatim) (lambda () (csegen-225))))))
(define LibrariesC-45UtilsC-45Path-verbatimDisk(blodwen-lazy (lambda () (vector 11 1 (LibrariesC-45UtilsC-45Path-verbatim) (lambda () (vector 9 0 (LibrariesC-45UtilsC-45Path-disk) (lambda () (lambda (u--disk) (vector 0 u--disk)))))))))
(define LibrariesC-45UtilsC-45Path-verbatim(blodwen-lazy (lambda () (let ((sc0 (csegen-230))) (cond ((equal? sc0 0) (vector 12 0 1 (csegen-233) (lambda () (csegen-236)))) (else (vector 11 1 (csegen-233) (lambda () (csegen-236)))))))))
(define LibrariesC-45UtilsC-45Path-unc(blodwen-lazy (lambda () (let ((sc0 (csegen-230))) (cond ((equal? sc0 0) (vector 12 0 1 (csegen-233) (lambda () (csegen-225)))) (else (vector 11 1 (csegen-233) (lambda () (csegen-225)))))))))
(define LibrariesC-45UtilsC-45Path-splitParentC-39 (lambda (arg-0) (LibrariesC-45UtilsC-45Path-case--splitParentC-39-6264 arg-0 (let ((e-2 (vector-ref arg-0 2))) e-2))))
(define LibrariesC-45UtilsC-45Path-splitFileName (lambda (arg-0) (LibrariesC-45UtilsC-45Path-case--splitFileName-6415 arg-0 (DataC-45List-break (csegen-243) (PreludeC-45TypesC-45List-reverse (PreludeC-45Types-fastUnpack arg-0))))))
(define LibrariesC-45UtilsC-45Path-setFileNameC-39 (lambda (arg-0 arg-1) (let ((sc0 (DataC-45Maybe-isJust (LibrariesC-45UtilsC-45Path-fileNameC-39 arg-1)))) (cond ((equal? sc0 1) (LibrariesC-45UtilsC-45Path-appendC-39 (DataC-45Maybe-fromMaybe (lambda () (LibrariesC-45UtilsC-45Path-emptyPath)) (LibrariesC-45UtilsC-45Path-parentC-39 arg-1)) (LibrariesC-45UtilsC-45Path-parse arg-0))) (else (LibrariesC-45UtilsC-45Path-appendC-39 arg-1 (LibrariesC-45UtilsC-45Path-parse arg-0)))))))
(define LibrariesC-45UtilsC-45Path-pathTokenMap(blodwen-lazy (lambda () (LibrariesC-45TextC-45Lexer-toTokenMap (cons (cons (LibrariesC-45TextC-45Lexer-is #\/) (box #\/)) (cons (cons (LibrariesC-45TextC-45Lexer-is #\\) (box #\\)) (cons (cons (LibrariesC-45TextC-45Lexer-is #\:) (box #\:)) (cons (cons (LibrariesC-45TextC-45Lexer-is #\?) (box #\?)) (cons (cons (LibrariesC-45TextC-45Lexer-some (LibrariesC-45TextC-45Lexer-non (LibrariesC-45TextC-45Lexer-oneOf "/\\:?"))) '()) '())))))))))
(define LibrariesC-45UtilsC-45Path-parseVolume(blodwen-lazy (lambda () (vector 13 1 1 (LibrariesC-45UtilsC-45Path-verbatimUnc) (lambda () (vector 13 1 1 (LibrariesC-45UtilsC-45Path-verbatimDisk) (lambda () (vector 13 1 1 (LibrariesC-45UtilsC-45Path-unc) (lambda () (LibrariesC-45UtilsC-45Path-disk))))))))))
(define LibrariesC-45UtilsC-45Path-parsePath(blodwen-lazy (lambda () (vector 10 0 0 (LibrariesC-45TextC-45Parser-optional 1 (LibrariesC-45UtilsC-45Path-parseVolume)) (lambda (u--vol) (vector 10 0 0 (csegen-261) (lambda (u--root) (vector 10 0 0 (LibrariesC-45TextC-45Parser-sepBy 1 (LibrariesC-45TextC-45Parser-some (LibrariesC-45UtilsC-45Path-bodySeparator)) (LibrariesC-45UtilsC-45Path-parseBody)) (lambda (u--body) (vector 10 0 0 (csegen-261) (lambda (u--trailSep) (let ((body-0 (PreludeC-45TypesC-45List-filter (lambda (lcase-0) (case (vector-ref lcase-0 0) ((2) (let ((e-0 (vector-ref lcase-0 1))) (PreludeC-45EqOrd-u--C-47C-61_Eq_String (DataC-45String-ltrim e-0) "")))(else 1))) u--body))) (let ((body-1 (if (null? body-0) '() (let ((e-2 (car body-0))) (let ((e-3 (cdr body-0))) (cons e-2 (DataC-45List-delete (cons (lambda (arg-528) (lambda (arg-531) (LibrariesC-45UtilsC-45Path-u--C-61C-61_Eq_Body arg-528 arg-531))) (lambda (arg-538) (lambda (arg-541) (LibrariesC-45UtilsC-45Path-u--C-47C-61_Eq_Body arg-538 arg-541)))) (vector 0 ) e-3))))))) (vector 0 (vector u--vol (DataC-45Maybe-isJust u--root) body-1 (DataC-45Maybe-isJust u--trailSep))))))))))))))))
(define LibrariesC-45UtilsC-45Path-parseBody(blodwen-lazy (lambda () (vector 9 0 (csegen-223) (lambda () (lambda (u--text) (cond ((equal? u--text "..") (vector 0 (vector 1 ))) ((equal? u--text ".") (vector 0 (vector 0 )))(else (vector 0 (vector 2 u--text))))))))))
(define LibrariesC-45UtilsC-45Path-parse (lambda (arg-0) (let ((sc0 (LibrariesC-45TextC-45ParserC-45Core-parse 0 (LibrariesC-45UtilsC-45Path-parsePath) (LibrariesC-45UtilsC-45Path-lexPath arg-0)))) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 1))) (if (null? e-2) (LibrariesC-45UtilsC-45Path-emptyPath) (let ((e-6 (cdr e-2))) (if (null? e-6) (LibrariesC-45UtilsC-45Path-emptyPath) (let ((e-9 (car e-6))) e-9))))))(else (LibrariesC-45UtilsC-45Path-emptyPath))))))
(define LibrariesC-45UtilsC-45Path-parentC-39 (lambda (ext-0) (PreludeC-45Types-u--map_Functor_Maybe (lambda (eta-0) (Builtin-fst eta-0)) (LibrariesC-45UtilsC-45Path-splitParentC-39 ext-0))))
(define LibrariesC-45UtilsC-45Path-parent (lambda (ext-0) (PreludeC-45Types-u--map_Functor_Maybe (lambda (eta-0) (LibrariesC-45UtilsC-45Path-u--show_Show_Path eta-0)) (LibrariesC-45UtilsC-45Path-parentC-39 (LibrariesC-45UtilsC-45Path-parse ext-0)))))
(define LibrariesC-45UtilsC-45Path-lexPath (lambda (arg-0) (let ((sc0 (LibrariesC-45TextC-45LexerC-45Core-lex (LibrariesC-45UtilsC-45Path-pathTokenMap) arg-0))) (let ((e-2 (car sc0))) (let ((e-3 (cdr sc0))) (let ((e-7 (cdr e-3))) e-2))))))
(define LibrariesC-45UtilsC-45Path-isAbsoluteC-39 (lambda (arg-0) (let ((sc0 (SystemC-45Info-isWindows))) (cond ((equal? sc0 1) (let ((e-0 (vector-ref arg-0 0))) (if (null? e-0) 0 (let ((e-4 (unbox e-0))) (case (vector-ref e-4 0) ((0) 1) (else (let ((e-8 (vector-ref arg-0 1))) e-8))))))) (else (let ((e-1 (vector-ref arg-0 1))) e-1))))))
(define LibrariesC-45UtilsC-45Path-fileStem (lambda (arg-0) (PreludeC-45Types-u--C-62C-62C-61_Monad_Maybe (LibrariesC-45UtilsC-45Path-fileName arg-0) (lambda (bind-0) (box (Builtin-fst (LibrariesC-45UtilsC-45Path-splitFileName bind-0)))))))
(define LibrariesC-45UtilsC-45Path-fileNameC-39 (lambda (arg-0) (LibrariesC-45UtilsC-45Path-n--6379-6348-u--findNormal arg-0 (PreludeC-45TypesC-45List-reverse (let ((e-2 (vector-ref arg-0 2))) e-2)))))
(define LibrariesC-45UtilsC-45Path-fileName (lambda (ext-0) (LibrariesC-45UtilsC-45Path-fileNameC-39 (LibrariesC-45UtilsC-45Path-parse ext-0))))
(define LibrariesC-45UtilsC-45Path-extension (lambda (arg-0) (PreludeC-45Types-u--C-62C-62C-61_Monad_Maybe (LibrariesC-45UtilsC-45Path-fileName arg-0) (lambda (eta-0) (LibrariesC-45UtilsC-45Path-n--7026-6953-u--filter arg-0 (lambda (arg-1) (PreludeC-45EqOrd-u--C-47C-61_Eq_String arg-1 "")) (box (Builtin-snd (LibrariesC-45UtilsC-45Path-splitFileName eta-0))))))))
(define LibrariesC-45UtilsC-45Path-emptyPath(blodwen-lazy (lambda () (vector '() 0 '() 0))))
(define LibrariesC-45UtilsC-45Path-disk(blodwen-lazy (lambda () (vector 9 1 (csegen-223) (lambda () (lambda (u--text) (vector 10 0 1 (let ((sc0 (PreludeC-45Types-fastUnpack u--text))) (if (null? sc0) (vector 4 '() 0 "Expects disk") (let ((e-1 (car sc0))) (vector 0 e-1)))) (lambda (u--disk) (vector 11 0 (LibrariesC-45TextC-45Parser-match (csegen-222) (box #\:)) (lambda () (vector 0 (vector 1 (PreludeC-45Types-toUpper u--disk)))))))))))))
(define LibrariesC-45UtilsC-45Path-dirSeparator(blodwen-lazy (lambda () (let ((sc0 (SystemC-45Info-isWindows))) (cond ((equal? sc0 1) #\\) (else #\/))))))
(define LibrariesC-45UtilsC-45Path-bodySeparator(blodwen-lazy (lambda () (vector 13 1 1 (csegen-231) (lambda () (LibrariesC-45TextC-45Parser-match (csegen-222) (box #\/)))))))
(define LibrariesC-45UtilsC-45Path-appendC-39 (lambda (arg-0 arg-1) (let ((sc0 (let ((sc1 (LibrariesC-45UtilsC-45Path-isAbsoluteC-39 arg-1))) (cond ((equal? sc1 1) 1) (else (DataC-45Maybe-isJust (let ((e-0 (vector-ref arg-1 0))) e-0))))))) (cond ((equal? sc0 1) arg-1) (else (let ((sc1 (let ((e-1 (vector-ref arg-1 1))) e-1))) (cond ((equal? sc1 1) (let ((e-1 (vector-ref arg-1 1))) (let ((e-2 (vector-ref arg-1 2))) (let ((e-3 (vector-ref arg-1 3))) (vector (let ((e-7 (vector-ref arg-0 0))) e-7) e-1 e-2 e-3))))) (else (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (vector e-0 e-1 (PreludeC-45TypesC-45List-tailRecAppend (let ((e-5 (vector-ref arg-0 2))) e-5) (let ((e-5 (vector-ref arg-1 2))) e-5)) (let ((e-4 (vector-ref arg-1 3))) e-4))))))))))))
(define LibrariesC-45UtilsC-45Path-C-60C-46C-62 (lambda (arg-0 arg-1) (let ((u--pathC-39 (LibrariesC-45UtilsC-45Path-parse arg-0))) (let ((u--ext (PreludeC-45Types-fastPack (DataC-45List-dropWhile (lambda (u--char) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char u--char #\.))) (cond ((equal? sc0 1) 1) (else (PreludeC-45Types-isSpace u--char))))) (PreludeC-45Types-fastUnpack arg-1))))) (let ((ext-0 (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_String u--ext ""))) (cond ((equal? sc0 1) "") (else (string-append "." u--ext)))))) (LibrariesC-45UtilsC-45Path-case--C-60C-46C-62-7110 arg-1 arg-0 u--pathC-39 u--ext ext-0 (LibrariesC-45UtilsC-45Path-fileNameC-39 u--pathC-39)))))))
(define LibrariesC-45UtilsC-45Path-C-47C-62 (lambda (arg-0 arg-1) (LibrariesC-45UtilsC-45Path-appendC-39 arg-0 (LibrariesC-45UtilsC-45Path-parse arg-1))))
(define LibrariesC-45TextC-45Quantity-exactly (lambda (arg-0) (cons arg-0 (box arg-0))))
(define LibrariesC-45TextC-45Quantity-between (lambda (arg-0 arg-1) (cons arg-0 (box arg-1))))
(define LibrariesC-45TextC-45Quantity-atMost (lambda (arg-0) (cons 0 (box arg-0))))
(define LibrariesC-45TextC-45Quantity-atLeast (lambda (arg-0) (cons arg-0 '())))
(define LibrariesC-45TextC-45Parser-some (lambda (arg-3) (vector 9 0 arg-3 (lambda () (lambda (bind-0) (vector 10 0 0 (LibrariesC-45TextC-45Parser-many arg-3) (lambda (bind-1) (vector 0 (cons bind-0 bind-1)))))))))
(define LibrariesC-45TextC-45Parser-sepBy1 (lambda (arg-4 arg-5 arg-6) (vector 10 arg-4 0 (vector 10 0 arg-4 (vector 0 (csegen-210)) (lambda (u--f) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 arg-4 u--f arg-6))) (lambda (u--f) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 0 u--f (LibrariesC-45TextC-45Parser-many (vector 10 1 arg-4 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 (lambda (eta-0) (lambda (eta-1) eta-1)) arg-5) (lambda (f-0) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 arg-4 f-0 arg-6)))))))))
(define LibrariesC-45TextC-45Parser-sepBy (lambda (arg-4 arg-5 arg-6) (LibrariesC-45TextC-45Parser-option arg-4 '() (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 arg-4 eta-2 eta-3))))) (lambda (eta-0) (DataC-45List1-forget eta-0)) (LibrariesC-45TextC-45Parser-sepBy1 arg-4 arg-5 arg-6)))))
(define LibrariesC-45TextC-45Parser-optional (lambda (arg-3 arg-4) (LibrariesC-45TextC-45Parser-option arg-3 '() (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 arg-3 (lambda (eta-0) (box eta-0)) arg-4))))
(define LibrariesC-45TextC-45Parser-option (lambda (arg-3 arg-4 arg-5) (cond ((equal? arg-3 0) (vector 13 0 0 arg-5 (lambda () (vector 0 arg-4)))) (else (vector 13 1 0 arg-5 (lambda () (vector 0 arg-4)))))))
(define LibrariesC-45TextC-45Parser-match (lambda (arg-2 arg-3) (vector 1 "Unrecognised input" (lambda (u--t) (let ((sc0 (let ((sc1 (Builtin-fst arg-2))) (let ((e-1 (car sc1))) ((e-1 (let ((e-4 (car u--t))) e-4)) arg-3))))) (cond ((equal? sc0 1) (box (let ((sc1 (Builtin-snd arg-2))) (let ((e-2 (cdr sc1))) ((e-2 arg-3) (let ((e-3 (cdr u--t))) e-3)))))) (else '())))))))
(define LibrariesC-45TextC-45Parser-many (lambda (arg-3) (LibrariesC-45TextC-45Parser-option 1 '() (PreludeC-45Interfaces-C-60C-36C-62 (csegen-285) (lambda (eta-0) (DataC-45List1-forget eta-0)) (LibrariesC-45TextC-45Parser-some arg-3)))))
(define LibrariesC-45TextC-45Parser-location(blodwen-lazy (lambda () (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 0 eta-2 eta-3))))) (lambda (eta-0) (LibrariesC-45TextC-45Bounded-startBounds eta-0)) (vector 15 )))))
(define LibrariesC-45TextC-45Parser-count1 (lambda (arg-3 arg-4) (vector 9 (let ((sc0 (DataC-45Nat-isSucc (let ((e-0 (car arg-3))) e-0)))) (cond ((equal? sc0 1) 1) (else 0))) arg-4 (lambda () (lambda (u--x) (vector 10 (DataC-45Nat-isSucc (let ((e-0 (car arg-3))) e-0)) 0 (LibrariesC-45TextC-45Parser-count arg-3 arg-4) (lambda (u--xs) (vector 0 (cons u--x u--xs)))))))))
(define LibrariesC-45TextC-45Parser-count (lambda (arg-3 arg-4) (let ((e-0 (car arg-3))) (let ((e-1 (cdr arg-3))) (cond ((equal? e-0 0) (if (null? e-1) (LibrariesC-45TextC-45Parser-many arg-4) (let ((e-5 (unbox e-1))) (cond ((equal? e-5 0) (vector 0 '()))(else (let ((e-6 (- e-5 1))) (LibrariesC-45TextC-45Parser-option 1 '() (LibrariesC-45TextC-45Parser-count1 (LibrariesC-45TextC-45Quantity-atMost e-6) arg-4))))))))(else (let ((e-2 (- e-0 1))) (if (null? e-1) (LibrariesC-45TextC-45Parser-count1 (LibrariesC-45TextC-45Quantity-atLeast e-2) arg-4) (let ((e-9 (unbox e-1))) (cond ((equal? e-9 0) (vector 4 '() 0 "Quantity out of order"))(else (let ((e-10 (- e-9 1))) (LibrariesC-45TextC-45Parser-count1 (LibrariesC-45TextC-45Quantity-between (+ e-2 1) e-10) arg-4)))))))))))))
(define LibrariesC-45TextC-45ParserC-45Core-case--doParse-5277 (lambda (arg-3 arg-5 arg-6 arg-7 arg-8 arg-9 arg-11) (case (vector-ref arg-11 0) ((0) (let ((e-3 (vector-ref arg-11 1))) (let ((e-4 (vector-ref arg-11 2))) (let ((e-5 (vector-ref arg-11 3))) (vector 0 e-3 e-4 e-5))))) (else (let ((e-9 (vector-ref arg-11 1))) (let ((e-10 (vector-ref arg-11 2))) (let ((e-11 (vector-ref arg-11 3))) (let ((e-12 (vector-ref arg-11 4))) (let ((e-13 (vector-ref arg-11 5))) (vector 1 e-9 e-10 e-11 (PreludeC-45Interfaces-C-60C-36C-62 (csegen-292) (lambda (eta-0) e-12) e-12) e-13))))))))))
(define LibrariesC-45TextC-45ParserC-45Core-case--doParse-4952 (lambda (arg-3 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-13) (case (vector-ref arg-13 0) ((0) (let ((e-3 (vector-ref arg-13 1))) (let ((e-4 (vector-ref arg-13 2))) (let ((e-5 (vector-ref arg-13 3))) (vector 0 e-3 e-4 e-5))))) (else (let ((e-9 (vector-ref arg-13 1))) (let ((e-10 (vector-ref arg-13 2))) (let ((e-11 (vector-ref arg-13 3))) (let ((e-12 (vector-ref arg-13 4))) (let ((e-13 (vector-ref arg-13 5))) (LibrariesC-45TextC-45ParserC-45Core-mergeWith e-12 (LibrariesC-45TextC-45ParserC-45Core-doParse arg-3 e-9 e-10 e-11 ((arg-7) (let ((e-1 (vector-ref e-12 0))) e-1)) e-13)))))))))))
(define LibrariesC-45TextC-45ParserC-45Core-case--doParse-4834 (lambda (arg-3 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-14) (case (vector-ref arg-14 0) ((0) (let ((e-3 (vector-ref arg-14 1))) (let ((e-4 (vector-ref arg-14 2))) (let ((e-5 (vector-ref arg-14 3))) (vector 0 e-3 e-4 e-5))))) (else (let ((e-9 (vector-ref arg-14 1))) (let ((e-10 (vector-ref arg-14 2))) (let ((e-11 (vector-ref arg-14 3))) (let ((e-12 (vector-ref arg-14 4))) (let ((e-13 (vector-ref arg-14 5))) (LibrariesC-45TextC-45ParserC-45Core-mergeWith e-12 (LibrariesC-45TextC-45ParserC-45Core-doParse arg-3 e-9 e-10 e-11 (arg-8 (let ((e-1 (vector-ref e-12 0))) e-1)) e-13)))))))))))
(define LibrariesC-45TextC-45ParserC-45Core-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32doParse-4586 (lambda (arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-12 arg-13 arg-14 arg-15 arg-16) (case (vector-ref arg-16 0) ((0) (let ((e-3 (vector-ref arg-16 1))) (let ((e-4 (vector-ref arg-16 2))) (let ((e-5 (vector-ref arg-16 3))) (let ((sc1 (cond ((equal? e-3 1) 1) (else e-4)))) (cond ((equal? sc1 1) (vector 0 e-3 e-4 e-5)) (else (vector 0 0 0 (DataC-45List1-C-43C-43 arg-12 e-5))))))))) (else (let ((e-9 (vector-ref arg-16 1))) (let ((e-10 (vector-ref arg-16 2))) (let ((e-12 (vector-ref arg-16 4))) (let ((e-13 (vector-ref arg-16 5))) (vector 1 e-9 e-10 arg-9 e-12 e-13)))))))))
(define LibrariesC-45TextC-45ParserC-45Core-case--doParse-4464 (lambda (arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-13) (case (vector-ref arg-13 0) ((0) (let ((e-3 (vector-ref arg-13 1))) (let ((e-4 (vector-ref arg-13 2))) (let ((e-5 (vector-ref arg-13 3))) (let ((sc1 (cond ((equal? e-3 1) 1) (else e-4)))) (cond ((equal? sc1 1) (vector 0 arg-10 e-4 e-5)) (else (LibrariesC-45TextC-45ParserC-45Core-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32doParse-4586 arg-3 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 e-5 e-4 e-3 arg-4 (LibrariesC-45TextC-45ParserC-45Core-doParse arg-3 arg-4 arg-11 0 (arg-6) arg-9))))))))) (else (let ((e-9 (vector-ref arg-13 1))) (let ((e-10 (vector-ref arg-13 2))) (let ((e-12 (vector-ref arg-13 4))) (let ((e-13 (vector-ref arg-13 5))) (vector 1 e-9 e-10 arg-10 e-12 e-13)))))))))
(define LibrariesC-45TextC-45ParserC-45Core-case--doParse-4087 (lambda (arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (case (vector-ref arg-10 0) ((0) (let ((e-3 (vector-ref arg-10 1))) (let ((e-5 (vector-ref arg-10 3))) (vector 0 e-3 1 e-5))))(else arg-10))))
(define LibrariesC-45TextC-45ParserC-45Core-case--doParse-3986 (lambda (arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (case (vector-ref arg-10 0) ((0) (let ((e-3 (vector-ref arg-10 1))) (let ((e-5 (vector-ref arg-10 3))) (vector 0 e-3 0 e-5))))(else arg-10))))
(define LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 (lambda (arg-4 arg-5 arg-6) (cond ((equal? arg-4 0) (case (vector-ref arg-6 0) ((0) (let ((e-65 (vector-ref arg-6 1))) (vector 0 (arg-5 e-65))))(else (case (vector-ref arg-6 0) ((4) (let ((e-49 (vector-ref arg-6 1))) (let ((e-50 (vector-ref arg-6 2))) (let ((e-51 (vector-ref arg-6 3))) (vector 4 e-49 e-50 e-51))))) ((6) (let ((e-56 (vector-ref arg-6 1))) (vector 6 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 arg-4 arg-5 e-56)))) ((8) (let ((e-61 (vector-ref arg-6 1))) (vector 8 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 arg-4 arg-5 e-61))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((1) (let ((e-43 (vector-ref arg-6 1))) (let ((e-44 (vector-ref arg-6 2))) (vector 1 e-43 (lambda (eta-0) (PreludeC-45Types-u--map_Functor_Maybe arg-5 (e-44 eta-0)))))))(else (case (vector-ref arg-6 0) ((13) (let ((e-36 (vector-ref arg-6 1))) (let ((e-37 (vector-ref arg-6 2))) (let ((e-38 (vector-ref arg-6 3))) (let ((e-39 (vector-ref arg-6 4))) (vector 13 e-36 e-37 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-36 arg-5 e-38) (lambda () (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-37 arg-5 (e-39)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((9) (let ((e-30 (vector-ref arg-6 1))) (let ((e-31 (vector-ref arg-6 2))) (let ((e-32 (vector-ref arg-6 3))) (vector 9 e-30 e-31 (lambda () (lambda (u--val) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-30 arg-5 ((e-32) u--val)))))))))(else (case (vector-ref arg-6 0) ((10) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 10 e-22 e-23 e-24 (lambda (u--val) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 arg-5 (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((11) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 11 e-15 e-16 (lambda () (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 arg-5 (e-17))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))))))(else (case (vector-ref arg-6 0) ((10) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 10 e-22 e-23 e-24 (lambda (u--val) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 arg-5 (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((11) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 11 e-15 e-16 (lambda () (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 arg-5 (e-17))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))))))))))(else (case (vector-ref arg-6 0) ((13) (let ((e-36 (vector-ref arg-6 1))) (let ((e-37 (vector-ref arg-6 2))) (let ((e-38 (vector-ref arg-6 3))) (let ((e-39 (vector-ref arg-6 4))) (vector 13 e-36 e-37 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-36 arg-5 e-38) (lambda () (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-37 arg-5 (e-39)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((9) (let ((e-30 (vector-ref arg-6 1))) (let ((e-31 (vector-ref arg-6 2))) (let ((e-32 (vector-ref arg-6 3))) (vector 9 e-30 e-31 (lambda () (lambda (u--val) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-30 arg-5 ((e-32) u--val)))))))))(else (case (vector-ref arg-6 0) ((10) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 10 e-22 e-23 e-24 (lambda (u--val) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 arg-5 (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((11) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 11 e-15 e-16 (lambda () (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 arg-5 (e-17))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))))))(else (case (vector-ref arg-6 0) ((10) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 10 e-22 e-23 e-24 (lambda (u--val) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 arg-5 (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((11) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 11 e-15 e-16 (lambda () (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 arg-5 (e-17))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))))))))))))))(else (case (vector-ref arg-6 0) ((4) (let ((e-49 (vector-ref arg-6 1))) (let ((e-50 (vector-ref arg-6 2))) (let ((e-51 (vector-ref arg-6 3))) (vector 4 e-49 e-50 e-51))))) ((6) (let ((e-56 (vector-ref arg-6 1))) (vector 6 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 arg-4 arg-5 e-56)))) ((8) (let ((e-61 (vector-ref arg-6 1))) (vector 8 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 arg-4 arg-5 e-61))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((1) (let ((e-43 (vector-ref arg-6 1))) (let ((e-44 (vector-ref arg-6 2))) (vector 1 e-43 (lambda (eta-0) (PreludeC-45Types-u--map_Functor_Maybe arg-5 (e-44 eta-0)))))))(else (case (vector-ref arg-6 0) ((13) (let ((e-36 (vector-ref arg-6 1))) (let ((e-37 (vector-ref arg-6 2))) (let ((e-38 (vector-ref arg-6 3))) (let ((e-39 (vector-ref arg-6 4))) (vector 13 e-36 e-37 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-36 arg-5 e-38) (lambda () (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-37 arg-5 (e-39)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((9) (let ((e-30 (vector-ref arg-6 1))) (let ((e-31 (vector-ref arg-6 2))) (let ((e-32 (vector-ref arg-6 3))) (vector 9 e-30 e-31 (lambda () (lambda (u--val) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-30 arg-5 ((e-32) u--val)))))))))(else (case (vector-ref arg-6 0) ((10) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 10 e-22 e-23 e-24 (lambda (u--val) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 arg-5 (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((11) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 11 e-15 e-16 (lambda () (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 arg-5 (e-17))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))))))(else (case (vector-ref arg-6 0) ((10) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 10 e-22 e-23 e-24 (lambda (u--val) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 arg-5 (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((11) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 11 e-15 e-16 (lambda () (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 arg-5 (e-17))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))))))))))(else (case (vector-ref arg-6 0) ((13) (let ((e-36 (vector-ref arg-6 1))) (let ((e-37 (vector-ref arg-6 2))) (let ((e-38 (vector-ref arg-6 3))) (let ((e-39 (vector-ref arg-6 4))) (vector 13 e-36 e-37 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-36 arg-5 e-38) (lambda () (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-37 arg-5 (e-39)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((9) (let ((e-30 (vector-ref arg-6 1))) (let ((e-31 (vector-ref arg-6 2))) (let ((e-32 (vector-ref arg-6 3))) (vector 9 e-30 e-31 (lambda () (lambda (u--val) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-30 arg-5 ((e-32) u--val)))))))))(else (case (vector-ref arg-6 0) ((10) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 10 e-22 e-23 e-24 (lambda (u--val) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 arg-5 (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((11) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 11 e-15 e-16 (lambda () (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 arg-5 (e-17))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))))))(else (case (vector-ref arg-6 0) ((10) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 10 e-22 e-23 e-24 (lambda (u--val) (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 arg-5 (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((11) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 11 e-15 e-16 (lambda () (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 arg-5 (e-17))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 12 e-3 e-4 e-5 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((14) (let ((e-11 (vector-ref arg-6 1))) (vector 10 arg-4 0 (vector 14 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 10 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0))))))))))))))))))))))))
(define LibrariesC-45TextC-45ParserC-45Core-parse (lambda (arg-2 arg-3 arg-4) (let ((sc0 (LibrariesC-45TextC-45ParserC-45Core-doParse (lambda (eta-0) (lambda (eta-1) (vector 0 ))) (vector 0 ) '() 0 arg-3 arg-4))) (case (vector-ref sc0 0) ((0) (let ((e-5 (vector-ref sc0 3))) (vector 0 e-5))) (else (let ((e-10 (vector-ref sc0 2))) (let ((e-12 (vector-ref sc0 4))) (let ((e-13 (vector-ref sc0 5))) (vector 1 (cons e-10 (cons (let ((e-1 (vector-ref e-12 0))) e-1) e-13)))))))))))
(define LibrariesC-45TextC-45ParserC-45Core-mergeWith (lambda (arg-4 arg-5) (case (vector-ref arg-5 0) ((1) (let ((e-3 (vector-ref arg-5 1))) (let ((e-4 (vector-ref arg-5 2))) (let ((e-5 (vector-ref arg-5 3))) (let ((e-6 (vector-ref arg-5 4))) (let ((e-7 (vector-ref arg-5 5))) (vector 1 e-3 e-4 e-5 (LibrariesC-45TextC-45Bounded-mergeBounds arg-4 e-6) e-7)))))))(else arg-5))))
(define LibrariesC-45TextC-45ParserC-45Core-doParse (lambda (arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (case (vector-ref arg-8 0) ((0) (let ((e-3 (vector-ref arg-8 1))) (vector 1 arg-5 arg-6 arg-7 (LibrariesC-45TextC-45Bounded-irrelevantBounds e-3) arg-9))) ((5) (let ((e-6 (vector-ref arg-8 1))) (let ((e-7 (vector-ref arg-8 2))) (vector 1 arg-5 (cons (cons e-6 e-7) arg-6) arg-7 (LibrariesC-45TextC-45Bounded-irrelevantBounds (vector 0 )) arg-9)))) ((4) (let ((e-12 (vector-ref arg-8 1))) (let ((e-13 (vector-ref arg-8 2))) (let ((e-14 (vector-ref arg-8 3))) (vector 0 arg-7 e-13 (cons (cons e-14 (PreludeC-45Types-u--C-60C-124C-62_Alternative_Maybe e-12 (lambda () (PreludeC-45Interfaces-C-60C-36C-62 (csegen-295) (lambda (eta-0) (let ((e-3 (vector-ref eta-0 2))) e-3)) (DataC-45List-headC-39 arg-9))))) '())))))) ((6) (let ((e-19 (vector-ref arg-8 1))) (LibrariesC-45TextC-45ParserC-45Core-case--doParse-3986 arg-4 arg-5 e-19 arg-9 arg-7 arg-6 (LibrariesC-45TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 arg-7 e-19 arg-9)))) ((7) (vector 1 arg-5 arg-6 1 (LibrariesC-45TextC-45Bounded-irrelevantBounds (vector 0 )) arg-9)) ((8) (let ((e-26 (vector-ref arg-8 1))) (LibrariesC-45TextC-45ParserC-45Core-case--doParse-4087 arg-4 arg-5 e-26 arg-9 arg-7 arg-6 (LibrariesC-45TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 arg-7 e-26 arg-9)))) ((1) (let ((e-30 (vector-ref arg-8 1))) (let ((e-31 (vector-ref arg-8 2))) (if (null? arg-9) (vector 0 arg-7 0 (csegen-297)) (let ((e-85 (car arg-9))) (let ((e-86 (cdr arg-9))) (let ((sc2 (e-31 (let ((e-1 (vector-ref e-85 0))) e-1)))) (if (null? sc2) (vector 0 arg-7 0 (cons (cons e-30 (box (let ((e-3 (vector-ref e-85 2))) e-3))) '())) (let ((e-2 (unbox sc2))) (vector 1 arg-5 arg-6 arg-7 (PreludeC-45Interfaces-C-60C-36C-62 (csegen-292) (lambda (eta-0) e-2) e-85) e-86)))))))))) ((3) (if (null? arg-9) (vector 1 arg-5 arg-6 arg-7 (LibrariesC-45TextC-45Bounded-irrelevantBounds (vector 0 )) '()) (let ((e-89 (car arg-9))) (vector 0 arg-7 0 (cons (cons "Expected end of input" (box (let ((e-3 (vector-ref e-89 2))) e-3))) '()))))) ((2) (let ((e-36 (vector-ref arg-8 1))) (let ((e-37 (vector-ref arg-8 2))) (if (null? arg-9) (vector 0 arg-7 0 (csegen-297)) (let ((e-93 (car arg-9))) (let ((e-94 (cdr arg-9))) (let ((sc2 (e-37 (let ((e-1 (vector-ref e-93 0))) e-1)))) (cond ((equal? sc2 1) (vector 1 arg-5 arg-6 arg-7 (LibrariesC-45TextC-45Bounded-removeIrrelevance e-93) (cons e-93 e-94))) (else (vector 0 arg-7 0 (cons (cons e-36 (box (let ((e-3 (vector-ref e-93 2))) e-3))) '()))))))))))) ((13) (let ((e-41 (vector-ref arg-8 1))) (let ((e-42 (vector-ref arg-8 2))) (let ((e-43 (vector-ref arg-8 3))) (let ((e-44 (vector-ref arg-8 4))) (LibrariesC-45TextC-45ParserC-45Core-case--doParse-4464 arg-4 arg-5 e-42 e-44 e-41 e-43 arg-9 arg-7 arg-6 (LibrariesC-45TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 0 e-43 arg-9))))))) ((10) (let ((e-49 (vector-ref arg-8 1))) (let ((e-50 (vector-ref arg-8 2))) (let ((e-51 (vector-ref arg-8 3))) (let ((e-52 (vector-ref arg-8 4))) (LibrariesC-45TextC-45ParserC-45Core-case--doParse-4834 arg-4 e-49 e-50 arg-5 e-52 e-51 arg-9 arg-7 arg-6 (LibrariesC-45TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 arg-7 e-51 arg-9))))))) ((9) (let ((e-57 (vector-ref arg-8 1))) (let ((e-58 (vector-ref arg-8 2))) (let ((e-59 (vector-ref arg-8 3))) (LibrariesC-45TextC-45ParserC-45Core-case--doParse-4952 arg-4 e-57 arg-5 e-59 e-58 arg-9 arg-7 arg-6 (LibrariesC-45TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 arg-7 e-58 arg-9)))))) ((12) (let ((e-65 (vector-ref arg-8 3))) (let ((e-66 (vector-ref arg-8 4))) (let ((sc1 (LibrariesC-45TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 arg-7 e-65 arg-9))) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (let ((e-4 (vector-ref sc1 2))) (let ((e-5 (vector-ref sc1 3))) (vector 0 e-3 e-4 e-5))))) (else (let ((e-9 (vector-ref sc1 1))) (let ((e-10 (vector-ref sc1 2))) (let ((e-11 (vector-ref sc1 3))) (let ((e-12 (vector-ref sc1 4))) (let ((e-13 (vector-ref sc1 5))) (LibrariesC-45TextC-45ParserC-45Core-mergeWith e-12 (LibrariesC-45TextC-45ParserC-45Core-doParse arg-4 e-9 e-10 e-11 e-66 e-13))))))))))))) ((11) (let ((e-71 (vector-ref arg-8 2))) (let ((e-72 (vector-ref arg-8 3))) (let ((sc1 (LibrariesC-45TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 arg-7 e-71 arg-9))) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (let ((e-4 (vector-ref sc1 2))) (let ((e-5 (vector-ref sc1 3))) (vector 0 e-3 e-4 e-5))))) (else (let ((e-9 (vector-ref sc1 1))) (let ((e-10 (vector-ref sc1 2))) (let ((e-11 (vector-ref sc1 3))) (let ((e-12 (vector-ref sc1 4))) (let ((e-13 (vector-ref sc1 5))) (LibrariesC-45TextC-45ParserC-45Core-mergeWith e-12 (LibrariesC-45TextC-45ParserC-45Core-doParse arg-4 e-9 e-10 e-11 (e-72) e-13))))))))))))) ((14) (let ((e-77 (vector-ref arg-8 1))) (LibrariesC-45TextC-45ParserC-45Core-case--doParse-5277 arg-4 arg-5 e-77 arg-9 arg-7 arg-6 (LibrariesC-45TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 arg-7 e-77 arg-9)))) ((15) (if (null? arg-9) (vector 0 arg-7 0 (csegen-297)) (let ((e-97 (car arg-9))) (let ((e-98 (cdr arg-9))) (vector 1 arg-5 arg-6 arg-7 (LibrariesC-45TextC-45Bounded-irrelevantBounds (let ((e-3 (vector-ref e-97 2))) e-3)) (cons e-97 e-98)))))) (else (let ((e-82 (vector-ref arg-8 1))) (vector 1 ((arg-4 arg-5) e-82) arg-6 arg-7 (LibrariesC-45TextC-45Bounded-irrelevantBounds (vector 0 )) arg-9))))))
(define LibrariesC-45TextC-45Bounded-u--map_Functor_WithBounds (lambda (arg-2 arg-3) (let ((e-1 (vector-ref arg-3 0))) (let ((e-2 (vector-ref arg-3 1))) (let ((e-3 (vector-ref arg-3 2))) (vector (arg-2 e-1) e-2 e-3))))))
(define LibrariesC-45TextC-45Bounded-startBounds (lambda (arg-0) (cons (let ((e-0 (vector-ref arg-0 0))) e-0) (let ((e-1 (vector-ref arg-0 1))) e-1))))
(define LibrariesC-45TextC-45Bounded-start (lambda (ext-0) (LibrariesC-45TextC-45Bounded-startBounds (let ((e-3 (vector-ref ext-0 2))) e-3))))
(define LibrariesC-45TextC-45Bounded-removeIrrelevance (lambda (arg-1) (let ((e-1 (vector-ref arg-1 0))) (let ((e-3 (vector-ref arg-1 2))) (vector e-1 1 e-3)))))
(define LibrariesC-45TextC-45Bounded-mergeBounds (lambda (arg-2 arg-3) (let ((e-6 (vector-ref arg-2 1))) (cond ((equal? e-6 1) (let ((e-9 (vector-ref arg-3 0))) (let ((e-10 (vector-ref arg-3 1))) (cond ((equal? e-10 1) (LibrariesC-45TextC-45Bounded-irrelevantBounds e-9))(else arg-3)))))(else (let ((e-1 (vector-ref arg-3 0))) (let ((e-2 (vector-ref arg-3 1))) (cond ((equal? e-2 1) (PreludeC-45Interfaces-C-60C-36C-62 (csegen-300) (lambda (eta-0) e-1) arg-2))(else (let ((sc0 (PreludeC-45EqOrd-u--min_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (csegen-106) (csegen-106) (LibrariesC-45TextC-45Bounded-start arg-2) (LibrariesC-45TextC-45Bounded-start arg-3)))) (let ((e-8 (car sc0))) (let ((e-4 (cdr sc0))) (let ((sc1 (PreludeC-45EqOrd-u--max_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (csegen-106) (csegen-106) (LibrariesC-45TextC-45Bounded-end arg-2) (LibrariesC-45TextC-45Bounded-end arg-3)))) (let ((e-10 (car sc1))) (let ((e-9 (cdr sc1))) (vector (let ((e-13 (vector-ref arg-3 0))) e-13) 0 (vector e-8 e-4 e-10 e-9)))))))))))))))))
(define LibrariesC-45TextC-45Bounded-irrelevantBounds (lambda (arg-1) (vector arg-1 1 (vector -1 -1 -1 -1))))
(define LibrariesC-45TextC-45Bounded-endBounds (lambda (arg-0) (cons (let ((e-2 (vector-ref arg-0 2))) e-2) (let ((e-3 (vector-ref arg-0 3))) e-3))))
(define LibrariesC-45TextC-45Bounded-end (lambda (ext-0) (LibrariesC-45TextC-45Bounded-endBounds (let ((e-3 (vector-ref ext-0 2))) e-3))))
(define LibrariesC-45TextC-45Lexer-toTokenMap (lambda (ext-0) (PreludeC-45Types-u--map_Functor_List (lambda (lamc-0) (let ((e-2 (car lamc-0))) (let ((e-3 (cdr lamc-0))) (cons e-2 (lambda (eta-0) (cons e-3 eta-0)))))) ext-0)))
(define LibrariesC-45TextC-45Lexer-surround (lambda (arg-0 arg-1 arg-2) (vector 5 arg-0 (lambda () (LibrariesC-45TextC-45Lexer-manyThen arg-1 arg-2)))))
(define LibrariesC-45TextC-45Lexer-stringLit(blodwen-lazy (lambda () (LibrariesC-45TextC-45Lexer-quote (LibrariesC-45TextC-45Lexer-is #\") (LibrariesC-45TextC-45LexerC-45Core-C-60C-124C-62 (LibrariesC-45TextC-45Lexer-escape (LibrariesC-45TextC-45Lexer-is #\\) (LibrariesC-45TextC-45Lexer-any)) (LibrariesC-45TextC-45Lexer-any))))))
(define LibrariesC-45TextC-45Lexer-space(blodwen-lazy (lambda () (LibrariesC-45TextC-45LexerC-45Core-pred (lambda (eta-0) (PreludeC-45Types-isSpace eta-0))))))
(define LibrariesC-45TextC-45Lexer-some (lambda (arg-0) (vector 5 arg-0 (lambda () (LibrariesC-45TextC-45Lexer-many arg-0)))))
(define LibrariesC-45TextC-45Lexer-quote (lambda (arg-0 arg-1) (LibrariesC-45TextC-45Lexer-surround arg-0 arg-0 arg-1)))
(define LibrariesC-45TextC-45Lexer-opt (lambda (arg-0) (LibrariesC-45TextC-45LexerC-45Core-C-60C-124C-62 arg-0 (LibrariesC-45TextC-45LexerC-45Core-empty))))
(define LibrariesC-45TextC-45Lexer-oneOf (lambda (arg-0) (LibrariesC-45TextC-45LexerC-45Core-pred (lambda (u--x) (PreludeC-45Types-elem (csegen-84) (csegen-132) u--x (PreludeC-45Types-fastUnpack arg-0))))))
(define LibrariesC-45TextC-45Lexer-non (lambda (arg-0) (vector 6 (LibrariesC-45TextC-45LexerC-45Core-reject arg-0) (LibrariesC-45TextC-45Lexer-any))))
(define LibrariesC-45TextC-45Lexer-newline(blodwen-lazy (lambda () (LibrariesC-45TextC-45LexerC-45Core-C-60C-124C-62 (LibrariesC-45TextC-45Lexer-exact "\xd;\xa;") (LibrariesC-45TextC-45Lexer-oneOf "\xd;\xa;")))))
(define LibrariesC-45TextC-45Lexer-manyUntil (lambda (arg-1 arg-2) (LibrariesC-45TextC-45Lexer-many (vector 6 (LibrariesC-45TextC-45LexerC-45Core-reject arg-1) arg-2))))
(define LibrariesC-45TextC-45Lexer-manyThen (lambda (arg-1 arg-2) (vector 6 (LibrariesC-45TextC-45Lexer-manyUntil arg-1 arg-2) arg-1)))
(define LibrariesC-45TextC-45Lexer-many (lambda (arg-0) (LibrariesC-45TextC-45Lexer-opt (LibrariesC-45TextC-45Lexer-some arg-0))))
(define LibrariesC-45TextC-45Lexer-isNot (lambda (arg-0) (LibrariesC-45TextC-45LexerC-45Core-pred (lambda (arg-1) (PreludeC-45EqOrd-u--C-47C-61_Eq_Char arg-1 arg-0)))))
(define LibrariesC-45TextC-45Lexer-is (lambda (arg-0) (LibrariesC-45TextC-45LexerC-45Core-pred (lambda (arg-1) (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 arg-0)))))
(define LibrariesC-45TextC-45Lexer-intLit(blodwen-lazy (lambda () (vector 6 (LibrariesC-45TextC-45Lexer-opt (LibrariesC-45TextC-45Lexer-is #\-)) (LibrariesC-45TextC-45Lexer-digits)))))
(define LibrariesC-45TextC-45Lexer-exact (lambda (arg-0) (let ((sc0 (PreludeC-45Types-fastUnpack arg-0))) (if (null? sc0) (LibrariesC-45TextC-45LexerC-45Core-fail) (let ((e-2 (car sc0))) (let ((e-3 (cdr sc0))) (LibrariesC-45TextC-45LexerC-45Core-concatMap (lambda (eta-0) (LibrariesC-45TextC-45Lexer-is eta-0)) (cons e-2 e-3))))))))
(define LibrariesC-45TextC-45Lexer-escape (lambda (arg-0 arg-1) (vector 5 arg-0 (lambda () arg-1))))
(define LibrariesC-45TextC-45Lexer-digits(blodwen-lazy (lambda () (LibrariesC-45TextC-45Lexer-some (LibrariesC-45TextC-45Lexer-digit)))))
(define LibrariesC-45TextC-45Lexer-digit(blodwen-lazy (lambda () (LibrariesC-45TextC-45LexerC-45Core-pred (lambda (eta-0) (PreludeC-45Types-isDigit eta-0))))))
(define LibrariesC-45TextC-45Lexer-any(blodwen-lazy (lambda () (LibrariesC-45TextC-45LexerC-45Core-pred (lambda (eta-0) 1)))))
(define LibrariesC-45TextC-45LexerC-45Core-case--tokenise-2749 (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (if (null? arg-7) (cons (PreludeC-45TypesC-45List-reverse arg-3) (cons arg-5 (cons arg-4 arg-1))) (let ((e-1 (unbox arg-7))) (let ((e-5 (car e-1))) (let ((e-6 (cdr e-1))) (let ((e-9 (car e-6))) (let ((e-10 (cdr e-6))) (let ((e-13 (car e-10))) (let ((e-14 (cdr e-10))) (let ((sc4 (arg-6 (let ((e-4 (vector-ref e-5 0))) e-4)))) (cond ((equal? sc4 1) (cons (PreludeC-45TypesC-45List-reverse arg-3) (cons arg-5 (cons arg-4 '())))) (else (LibrariesC-45TextC-45LexerC-45Core-tokenise arg-6 e-9 e-13 (cons e-5 arg-3) arg-2 e-14))))))))))))))
(define LibrariesC-45TextC-45LexerC-45Core-case--tokeniseC-44getFirstToken-2659 (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (if (null? arg-11) (LibrariesC-45TextC-45LexerC-45Core-n--3684-2524-u--getFirstToken arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-9 arg-10) (let ((e-1 (unbox arg-11))) (let ((e-5 (car e-1))) (let ((e-6 (cdr e-1))) (let ((u--lineC-39 (bs+ arg-5 (PreludeC-45Cast-u--cast_Cast_Nat_Int (LibrariesC-45TextC-45LexerC-45Core-n--3684-2522-u--countNLs arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 e-5)) 63))) (let ((u--colC-39 (LibrariesC-45TextC-45LexerC-45Core-n--3684-2523-u--getCols arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 e-5 arg-4))) (box (cons (vector (arg-8 (PreludeC-45Types-fastPack (PreludeC-45TypesC-45List-reverse e-5))) 0 (vector arg-5 arg-4 u--lineC-39 u--colC-39)) (cons u--lineC-39 (cons u--colC-39 e-6))))))))))))
(define LibrariesC-45TextC-45LexerC-45Core-n--3684-2524-u--getFirstToken (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (if (null? arg-7) '() (let ((e-2 (car arg-7))) (let ((e-3 (cdr arg-7))) (let ((e-6 (car e-2))) (let ((e-7 (cdr e-2))) (LibrariesC-45TextC-45LexerC-45Core-case--tokeniseC-44getFirstToken-2659 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 e-6 e-7 e-3 arg-8 (LibrariesC-45TextC-45LexerC-45Core-scan e-6 '() arg-8)))))))))
(define LibrariesC-45TextC-45LexerC-45Core-n--3684-2523-u--getCols (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 (DataC-45List-span (csegen-311) (PreludeC-45TypesC-45List-reverse arg-7)))) (let ((e-2 (car sc0))) (let ((e-3 (cdr sc0))) (if (null? e-3) (bs+ arg-8 (PreludeC-45Cast-u--cast_Cast_Nat_Int (PreludeC-45TypesC-45List-lengthTR e-2)) 63) (PreludeC-45Cast-u--cast_Cast_Nat_Int (PreludeC-45TypesC-45List-lengthTR e-2))))))))
(define LibrariesC-45TextC-45LexerC-45Core-n--3684-2522-u--countNLs (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (PreludeC-45TypesC-45List-lengthTR (PreludeC-45TypesC-45List-filter (csegen-312) arg-7))))
(define LibrariesC-45TextC-45LexerC-45Core-tokenise (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (LibrariesC-45TextC-45LexerC-45Core-case--tokenise-2749 arg-6 arg-5 arg-4 arg-3 arg-2 arg-1 (LibrariesC-45TextC-45LexerC-45Core-n--3684-2524-u--getFirstToken arg-6 arg-5 arg-4 arg-3 arg-2 arg-1 arg-5 arg-6))))
(define LibrariesC-45TextC-45LexerC-45Core-scan (lambda (arg-1 arg-2 arg-3) (case (vector-ref arg-1 0) ((0) (box (cons arg-2 arg-3))) ((1) '()) ((2) (if (null? arg-3) (box (cons arg-2 '())) '())) ((3) (let ((e-2 (vector-ref arg-1 1))) (let ((e-3 (vector-ref arg-1 2))) (let ((sc1 (PreludeC-45EqOrd-u--C-61C-61_Eq_Bool (DataC-45Maybe-isJust (LibrariesC-45TextC-45LexerC-45Core-scan e-3 arg-2 arg-3)) e-2))) (cond ((equal? sc1 1) (box (cons arg-2 arg-3))) (else '())))))) ((4) (let ((e-4 (vector-ref arg-1 1))) (if (null? arg-3) '() (let ((e-25 (car arg-3))) (let ((e-26 (cdr arg-3))) (let ((sc2 (e-4 e-25))) (cond ((equal? sc2 1) (box (cons (cons e-25 arg-2) e-26))) (else '())))))))) ((5) (let ((e-6 (vector-ref arg-1 1))) (let ((e-7 (vector-ref arg-1 2))) (PreludeC-45Types-u--C-62C-62C-61_Monad_Maybe (LibrariesC-45TextC-45LexerC-45Core-scan e-6 arg-2 arg-3) (lambda (_-0) (let ((e-2 (car _-0))) (let ((e-3 (cdr _-0))) (LibrariesC-45TextC-45LexerC-45Core-scan (e-7) e-2 e-3)))))))) ((6) (let ((e-10 (vector-ref arg-1 1))) (let ((e-11 (vector-ref arg-1 2))) (PreludeC-45Types-u--C-62C-62C-61_Monad_Maybe (LibrariesC-45TextC-45LexerC-45Core-scan e-10 arg-2 arg-3) (lambda (_-0) (let ((e-2 (car _-0))) (let ((e-3 (cdr _-0))) (LibrariesC-45TextC-45LexerC-45Core-scan e-11 e-2 e-3)))))))) ((7) (let ((e-13 (vector-ref arg-1 1))) (let ((e-14 (vector-ref arg-1 2))) (PreludeC-45Types-u--C-62C-62C-61_Monad_Maybe (LibrariesC-45TextC-45LexerC-45Core-scan e-13 arg-2 arg-3) (lambda (_-0) (let ((e-2 (car _-0))) (let ((e-3 (cdr _-0))) (LibrariesC-45TextC-45LexerC-45Core-scan e-14 e-2 e-3)))))))) (else (let ((e-17 (vector-ref arg-1 1))) (let ((e-18 (vector-ref arg-1 2))) (PreludeC-45Types-maybe (lambda () (LibrariesC-45TextC-45LexerC-45Core-scan e-18 arg-2 arg-3)) (lambda () (lambda (eta-0) (box eta-0))) (LibrariesC-45TextC-45LexerC-45Core-scan e-17 arg-2 arg-3))))))))
(define LibrariesC-45TextC-45LexerC-45Core-reject (lambda (ext-0) (vector 3 0 ext-0)))
(define LibrariesC-45TextC-45LexerC-45Core-pred (lambda (ext-0) (vector 4 ext-0)))
(define LibrariesC-45TextC-45LexerC-45Core-lexTo (lambda (arg-1 arg-2 arg-3) (let ((sc0 (LibrariesC-45TextC-45LexerC-45Core-tokenise arg-1 0 0 '() arg-2 (PreludeC-45Types-fastUnpack arg-3)))) (let ((e-2 (car sc0))) (let ((e-3 (cdr sc0))) (let ((e-6 (car e-3))) (let ((e-7 (cdr e-3))) (let ((e-10 (car e-7))) (let ((e-11 (cdr e-7))) (cons e-2 (cons e-6 (cons e-10 (PreludeC-45Types-fastPack e-11)))))))))))))
(define LibrariesC-45TextC-45LexerC-45Core-lex (lambda (arg-1 arg-2) (let ((sc0 (LibrariesC-45TextC-45LexerC-45Core-tokenise (lambda (eta-0) 0) 0 0 '() arg-1 (PreludeC-45Types-fastUnpack arg-2)))) (let ((e-2 (car sc0))) (let ((e-3 (cdr sc0))) (let ((e-6 (car e-3))) (let ((e-7 (cdr e-3))) (let ((e-10 (car e-7))) (let ((e-11 (cdr e-7))) (cons e-2 (cons e-6 (cons e-10 (PreludeC-45Types-fastPack e-11)))))))))))))
(define LibrariesC-45TextC-45LexerC-45Core-fail(blodwen-lazy (lambda () (vector 1 ))))
(define LibrariesC-45TextC-45LexerC-45Core-expect (lambda (ext-0) (vector 3 1 ext-0)))
(define LibrariesC-45TextC-45LexerC-45Core-empty(blodwen-lazy (lambda () (vector 0 ))))
(define LibrariesC-45TextC-45LexerC-45Core-concatMap (lambda (arg-2 arg-3) (if (null? arg-3) (vector 0 ) (let ((e-2 (car arg-3))) (let ((e-3 (cdr arg-3))) (if (null? e-3) (arg-2 e-2) (vector 7 (arg-2 e-2) (LibrariesC-45TextC-45LexerC-45Core-concatMap arg-2 e-3))))))))
(define LibrariesC-45TextC-45LexerC-45Core-C-60C-124C-62 (lambda (ext-0 ext-1) (vector 8 ext-0 ext-1)))
(define LibrariesC-45DataC-45StringC-45Extra-join (lambda (arg-1 arg-2 arg-3) (LibrariesC-45DataC-45StringC-45Extra-drop (PreludeC-45TypesC-45String-length arg-1) (let ((e-2 (vector-ref arg-2 1))) (((((e-2 'erased) 'erased) (lambda (u--acc) (lambda (u--x) (string-append u--acc (string-append arg-1 u--x))))) "") arg-3)))))
(define LibrariesC-45DataC-45StringC-45Extra-drop (lambda (arg-0 arg-1) (PreludeC-45Types-substr arg-0 (PreludeC-45TypesC-45String-length arg-1) arg-1)))
(define IdrisC-45PackageC-45Types-u--show_Show_PkgVersion (lambda (arg-0) (CoreC-45NameC-45Namespace-showSep "." (PreludeC-45Types-u--map_Functor_List (lambda (eta-0) (PreludeC-45Show-u--show_Show_Nat eta-0)) (DataC-45List1-forget arg-0)))))
(define IdrisC-45PackageC-45Types-initPkgDesc (lambda (arg-0) (vector arg-0 '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '())))
(define IdrisC-45PackageC-45Types-anyBounds(blodwen-lazy (lambda () (vector '() 1 '() 1))))
(define CoreC-45NameC-45Namespace-showSep (lambda (arg-0 ext-0) (LibrariesC-45DataC-45StringC-45Extra-join arg-0 (csegen-84) ext-0)))
(define CoreC-45NameC-45Namespace-mkNestedNamespace (lambda (arg-0 arg-1) (if (null? arg-0) (cons arg-1 '()) (let ((e-2 (unbox arg-0))) (cons arg-1 e-2)))))
(define CoreC-45NameC-45Namespace-mkNamespacedIdent (lambda (arg-0) (let ((u--nns (DataC-45List1-reverse (DataC-45String-split (csegen-243) arg-0)))) (let ((u--name (let ((e-1 (car u--nns))) e-1))) (let ((u--ns (let ((e-2 (cdr u--nns))) e-2))) (if (null? u--ns) (cons '() u--name) (cons (box u--ns) u--name)))))))
(define DataC-45SortedMap-n--3673-10932-u--inserted (lambda (arg-2 arg-3 arg-4) (PreludeC-45Types-listBind (DataC-45SortedMap-toList arg-2) (lambda (_-0) (let ((e-2 (car _-0))) (let ((e-3 (cdr _-0))) (let ((u--vC-39 ((PreludeC-45Types-maybe (lambda () (lambda (eta-0) eta-0)) (lambda () arg-4) (DataC-45SortedMap-lookup e-2 arg-3)) e-3))) (PreludeC-45Types-u--pure_Applicative_List (cons e-2 u--vC-39)))))))))
(define DataC-45SortedMap-unDPair (lambda (arg-2) (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (cons e-2 e-3)))))
(define DataC-45SortedMap-toList (lambda (ext-0) (PreludeC-45Types-u--map_Functor_List (lambda (eta-0) (DataC-45SortedMap-unDPair eta-0)) (DataC-45SortedMapC-45Dependent-toList ext-0))))
(define DataC-45SortedMap-mergeWith (lambda (arg-2 arg-3 arg-4) (DataC-45SortedMap-insertFrom (csegen-84) (DataC-45SortedMap-n--3673-10932-u--inserted arg-4 arg-3 arg-2) arg-3)))
(define DataC-45SortedMap-mergeLeft (lambda (ext-0 ext-1) (DataC-45SortedMap-mergeWith (lambda (eta-0) (lambda (eta-1) eta-0)) ext-0 ext-1)))
(define DataC-45SortedMap-lookup (lambda (arg-2 ext-0) (PreludeC-45Types-u--map_Functor_Maybe (lambda (eta-0) (let ((e-3 (cdr eta-0))) e-3)) (DataC-45SortedMapC-45Dependent-lookup arg-2 ext-0))))
(define DataC-45SortedMap-insertFrom (lambda (arg-3 ext-0 ext-1) (PreludeC-45Basics-flip (lambda (eta-0) (lambda (clam-0) (let ((e-2 (vector-ref arg-3 1))) (((((e-2 'erased) 'erased) (lambda (eta-1) (lambda (eta-2) (PreludeC-45Basics-flip (lambda (eta-3) (PreludeC-45Basics-uncurry (lambda (eta-4) (lambda (eta-5) (lambda (eta-6) (DataC-45SortedMap-insert eta-4 eta-5 eta-6)))) eta-3)) eta-1 eta-2)))) eta-0) clam-0)))) ext-0 ext-1)))
(define DataC-45SortedMap-insert (lambda (arg-2 arg-3 ext-0) (DataC-45SortedMapC-45Dependent-insert arg-2 arg-3 ext-0)))
(define DataC-45SortedMap-fromList (lambda (arg-2 ext-0) (PreludeC-45Basics-flip (lambda (eta-0) (lambda (eta-1) (DataC-45SortedMap-insertFrom (csegen-84) eta-0 eta-1))) (DataC-45SortedMap-empty arg-2) ext-0)))
(define DataC-45SortedMap-empty (lambda (arg-2) (DataC-45SortedMapC-45Dependent-empty arg-2)))
(define DataC-45SortedMapC-45Dependent-n--6687-6807-u--treeToListC-39 (lambda (arg-5 arg-6) (case (vector-ref arg-6 0) ((0) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (arg-5 (cons e-3 e-4))))) ((1) (let ((e-9 (vector-ref arg-6 1))) (let ((e-11 (vector-ref arg-6 3))) (DataC-45SortedMapC-45Dependent-n--6687-6807-u--treeToListC-39 (lambda (arg-0) (cons arg-0 (DataC-45SortedMapC-45Dependent-n--6687-6807-u--treeToListC-39 arg-5 e-11))) e-9)))) (else (let ((e-16 (vector-ref arg-6 1))) (let ((e-18 (vector-ref arg-6 3))) (let ((e-20 (vector-ref arg-6 5))) (DataC-45SortedMapC-45Dependent-n--6687-6807-u--treeToListC-39 (lambda (arg-0) (cons arg-0 (DataC-45SortedMapC-45Dependent-n--6687-6807-u--treeToListC-39 (lambda (arg-1) (cons arg-1 (DataC-45SortedMapC-45Dependent-n--6687-6807-u--treeToListC-39 arg-5 e-20))) e-18))) e-16))))))))
(define DataC-45SortedMapC-45Dependent-treeToList (lambda (ext-0) (DataC-45SortedMapC-45Dependent-n--6687-6807-u--treeToListC-39 (lambda (arg-0) (cons arg-0 '())) ext-0)))
(define DataC-45SortedMapC-45Dependent-treeLookup (lambda (arg-4 arg-5 arg-6) (case (vector-ref arg-6 0) ((0) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((sc1 (let ((e-1 (vector-ref arg-4 0))) (let ((e-12 (car e-1))) ((e-12 arg-5) e-3))))) (cond ((equal? sc1 1) (box (cons e-3 e-4))) (else '())))))) ((1) (let ((e-9 (vector-ref arg-6 1))) (let ((e-10 (vector-ref arg-6 2))) (let ((e-11 (vector-ref arg-6 3))) (let ((sc1 (let ((e-5 (vector-ref arg-4 4))) ((e-5 arg-5) e-10)))) (cond ((equal? sc1 1) (DataC-45SortedMapC-45Dependent-treeLookup arg-4 arg-5 e-9)) (else (DataC-45SortedMapC-45Dependent-treeLookup arg-4 arg-5 e-11)))))))) (else (let ((e-16 (vector-ref arg-6 1))) (let ((e-17 (vector-ref arg-6 2))) (let ((e-18 (vector-ref arg-6 3))) (let ((e-19 (vector-ref arg-6 4))) (let ((e-20 (vector-ref arg-6 5))) (let ((sc1 (let ((e-5 (vector-ref arg-4 4))) ((e-5 arg-5) e-17)))) (cond ((equal? sc1 1) (DataC-45SortedMapC-45Dependent-treeLookup arg-4 arg-5 e-16)) (else (let ((sc2 (let ((e-5 (vector-ref arg-4 4))) ((e-5 arg-5) e-19)))) (cond ((equal? sc2 1) (DataC-45SortedMapC-45Dependent-treeLookup arg-4 arg-5 e-18)) (else (DataC-45SortedMapC-45Dependent-treeLookup arg-4 arg-5 e-20))))))))))))))))
(define DataC-45SortedMapC-45Dependent-treeInsertC-39 (lambda (arg-4 arg-5 arg-6 arg-7) (case (vector-ref arg-7 0) ((0) (let ((e-3 (vector-ref arg-7 1))) (let ((e-4 (vector-ref arg-7 2))) (let ((sc1 (let ((e-2 (vector-ref arg-4 1))) ((e-2 arg-5) e-3)))) (cond ((equal? sc1 0) (vector 1 (cons (vector 0 arg-5 arg-6) (cons arg-5 (vector 0 e-3 e-4))))) ((equal? sc1 1) (vector 0 (vector 0 arg-5 arg-6))) (else (vector 1 (cons (vector 0 e-3 e-4) (cons e-3 (vector 0 arg-5 arg-6)))))))))) ((1) (let ((e-9 (vector-ref arg-7 1))) (let ((e-10 (vector-ref arg-7 2))) (let ((e-11 (vector-ref arg-7 3))) (let ((sc1 (let ((e-5 (vector-ref arg-4 4))) ((e-5 arg-5) e-10)))) (cond ((equal? sc1 1) (let ((sc2 (DataC-45SortedMapC-45Dependent-treeInsertC-39 arg-4 arg-5 arg-6 e-9))) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 (vector 1 e-2 e-10 e-11)))) (else (let ((e-5 (vector-ref sc2 1))) (let ((e-8 (car e-5))) (let ((e-12 (cdr e-5))) (let ((e-14 (car e-12))) (let ((e-13 (cdr e-12))) (vector 0 (vector 2 e-8 e-14 e-13 e-10 e-11))))))))))) (else (let ((sc2 (DataC-45SortedMapC-45Dependent-treeInsertC-39 arg-4 arg-5 arg-6 e-11))) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 (vector 1 e-9 e-10 e-2)))) (else (let ((e-5 (vector-ref sc2 1))) (let ((e-8 (car e-5))) (let ((e-12 (cdr e-5))) (let ((e-14 (car e-12))) (let ((e-13 (cdr e-12))) (vector 0 (vector 2 e-9 e-10 e-8 e-14 e-13))))))))))))))))) (else (let ((e-16 (vector-ref arg-7 1))) (let ((e-17 (vector-ref arg-7 2))) (let ((e-18 (vector-ref arg-7 3))) (let ((e-19 (vector-ref arg-7 4))) (let ((e-20 (vector-ref arg-7 5))) (let ((sc1 (let ((e-5 (vector-ref arg-4 4))) ((e-5 arg-5) e-17)))) (cond ((equal? sc1 1) (let ((sc2 (DataC-45SortedMapC-45Dependent-treeInsertC-39 arg-4 arg-5 arg-6 e-16))) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 (vector 2 e-2 e-17 e-18 e-19 e-20)))) (else (let ((e-5 (vector-ref sc2 1))) (let ((e-8 (car e-5))) (let ((e-9 (cdr e-5))) (let ((e-12 (car e-9))) (let ((e-13 (cdr e-9))) (vector 1 (cons (vector 1 e-8 e-12 e-13) (cons e-17 (vector 1 e-18 e-19 e-20))))))))))))) (else (let ((sc2 (let ((e-5 (vector-ref arg-4 4))) ((e-5 arg-5) e-19)))) (cond ((equal? sc2 1) (let ((sc3 (DataC-45SortedMapC-45Dependent-treeInsertC-39 arg-4 arg-5 arg-6 e-18))) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 (vector 2 e-16 e-17 e-2 e-19 e-20)))) (else (let ((e-5 (vector-ref sc3 1))) (let ((e-8 (car e-5))) (let ((e-9 (cdr e-5))) (let ((e-12 (car e-9))) (let ((e-13 (cdr e-9))) (vector 1 (cons (vector 1 e-16 e-17 e-8) (cons e-12 (vector 1 e-13 e-19 e-20))))))))))))) (else (let ((sc3 (DataC-45SortedMapC-45Dependent-treeInsertC-39 arg-4 arg-5 arg-6 e-20))) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 (vector 2 e-16 e-17 e-18 e-19 e-2)))) (else (let ((e-5 (vector-ref sc3 1))) (let ((e-8 (car e-5))) (let ((e-9 (cdr e-5))) (let ((e-12 (car e-9))) (let ((e-13 (cdr e-9))) (vector 1 (cons (vector 1 e-16 e-17 e-18) (cons e-19 (vector 1 e-8 e-12 e-13)))))))))))))))))))))))))))
(define DataC-45SortedMapC-45Dependent-treeInsert (lambda (arg-4 arg-5 arg-6 arg-7) (let ((sc0 (DataC-45SortedMapC-45Dependent-treeInsertC-39 arg-4 arg-5 arg-6 arg-7))) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((e-8 (car e-5))) (let ((e-9 (cdr e-5))) (let ((e-12 (car e-9))) (let ((e-13 (cdr e-9))) (vector 1 (vector 1 e-8 e-12 e-13))))))))))))
(define DataC-45SortedMapC-45Dependent-toList (lambda (arg-2) (case (vector-ref arg-2 0) ((0) '()) (else (let ((e-7 (vector-ref arg-2 3))) (DataC-45SortedMapC-45Dependent-treeToList e-7))))))
(define DataC-45SortedMapC-45Dependent-lookup (lambda (arg-2 arg-3) (case (vector-ref arg-3 0) ((0) '()) (else (let ((e-5 (vector-ref arg-3 1))) (let ((e-7 (vector-ref arg-3 3))) (DataC-45SortedMapC-45Dependent-treeLookup e-5 arg-2 e-7)))))))
(define DataC-45SortedMapC-45Dependent-insert (lambda (arg-2 arg-3 arg-4) (case (vector-ref arg-4 0) ((0) (let ((e-2 (vector-ref arg-4 1))) (vector 1 e-2 0 (vector 0 arg-2 arg-3)))) (else (let ((e-5 (vector-ref arg-4 1))) (let ((e-6 (vector-ref arg-4 2))) (let ((e-7 (vector-ref arg-4 3))) (let ((sc1 (DataC-45SortedMapC-45Dependent-treeInsert e-5 arg-2 arg-3 e-7))) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 1 e-5 e-6 e-2))) (else (let ((e-8 (vector-ref sc1 1))) (vector 1 e-5 (+ e-6 1) e-8))))))))))))
(define DataC-45SortedMapC-45Dependent-empty (lambda (arg-2) (vector 0 arg-2)))
(define PackC-45CoreC-45Ipkg-n--5828-5004-u--strField (lambda (arg-0 arg-1 arg-2) (vector 10 0 1 (LibrariesC-45TextC-45Parser-location) (lambda (u--start) (vector 11 1 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 (lambda (eta-0) (vector 0 )) (ParserC-45RuleC-45Package-exactProperty arg-2)) (lambda () (vector 11 1 (ParserC-45RuleC-45Package-equals) (lambda () (vector 9 0 (ParserC-45RuleC-45Package-stringLit) (lambda () (lambda (u--str) (vector 10 0 0 (LibrariesC-45TextC-45Parser-location) (lambda (u--end) (vector 0 ((arg-1 (vector 0 (vector 1 arg-0) u--start u--end)) u--str)))))))))))))))
(define PackC-45CoreC-45Ipkg-n--5828-5001-u--mkBound (lambda (arg-0 arg-1 arg-2) (if (null? arg-1) (vector 0 arg-2) (let ((e-1 (car arg-1))) (let ((e-2 (cdr arg-1))) (case (vector-ref e-1 0) ((0) (let ((e-5 (vector-ref e-1 2))) (let ((e-6 (vector-ref e-1 3))) (PreludeC-45Types-maybe (lambda () (PackC-45CoreC-45Ipkg-n--5828-5001-u--mkBound arg-0 e-2 (let ((e-0 (vector-ref arg-2 0))) (let ((e-8 (vector-ref arg-2 1))) (vector e-0 e-8 (box e-5) e-6))))) (lambda () (lambda (_-5298) (vector 4 '() 0 "Dependency already has an upper bound"))) (let ((e-7 (vector-ref arg-2 2))) e-7))))) (else (let ((e-8 (vector-ref e-1 2))) (let ((e-9 (vector-ref e-1 3))) (PreludeC-45Types-maybe (lambda () (PackC-45CoreC-45Ipkg-n--5828-5001-u--mkBound arg-0 e-2 (let ((e-4 (vector-ref arg-2 2))) (let ((e-3 (vector-ref arg-2 3))) (vector (box e-8) e-9 e-4 e-3))))) (lambda () (lambda (_-5338) (vector 4 '() 0 "Dependency already has a lower bound"))) (let ((e-0 (vector-ref arg-2 0))) e-0)))))))))))
(define PackC-45CoreC-45Ipkg-n--5828-5002-u--langversions (lambda (arg-0) (vector 10 0 0 (LibrariesC-45TextC-45Parser-sepBy 1 (ParserC-45RuleC-45Package-andop) (PackC-45CoreC-45Ipkg-n--5828-5000-u--bound arg-0)) (lambda (u--bs) (PackC-45CoreC-45Ipkg-n--5828-5001-u--mkBound arg-0 (PreludeC-45Interfaces-concat (csegen-322) (csegen-84) u--bs) (IdrisC-45PackageC-45Types-anyBounds))))))
(define PackC-45CoreC-45Ipkg-n--5828-5003-u--depends (lambda (arg-0) (vector 9 0 (ParserC-45RuleC-45Package-packageName) (lambda () (lambda (u--name) (vector 10 0 0 (LibrariesC-45TextC-45Parser-sepBy 1 (ParserC-45RuleC-45Package-andop) (PackC-45CoreC-45Ipkg-n--5828-5000-u--bound arg-0)) (lambda (u--bs) (vector 10 0 0 (PackC-45CoreC-45Ipkg-n--5828-5001-u--mkBound arg-0 (PreludeC-45Interfaces-concat (csegen-322) (csegen-84) u--bs) (IdrisC-45PackageC-45Types-anyBounds)) (lambda (bind-0) (vector 0 (cons u--name bind-0)))))))))))
(define PackC-45CoreC-45Ipkg-n--5828-5000-u--bound (lambda (arg-0) (vector 13 1 1 (vector 11 1 (ParserC-45RuleC-45Package-lte) (lambda () (vector 9 0 (csegen-323) (lambda () (lambda (u--vs) (vector 0 (cons (vector 0 arg-0 (PreludeC-45Interfaces-C-60C-36C-62 (csegen-326) (lambda (eta-0) (PreludeC-45Types-prim__integerToNat eta-0)) u--vs) 1) '()))))))) (lambda () (vector 13 1 1 (vector 11 1 (ParserC-45RuleC-45Package-gte) (lambda () (vector 9 0 (csegen-323) (lambda () (lambda (u--vs) (vector 0 (cons (vector 1 arg-0 (PreludeC-45Interfaces-C-60C-36C-62 (csegen-326) (lambda (eta-0) (PreludeC-45Types-prim__integerToNat eta-0)) u--vs) 1) '()))))))) (lambda () (vector 13 1 1 (vector 11 1 (ParserC-45RuleC-45Package-lt) (lambda () (vector 9 0 (csegen-323) (lambda () (lambda (u--vs) (vector 0 (cons (vector 0 arg-0 (PreludeC-45Interfaces-C-60C-36C-62 (csegen-326) (lambda (eta-0) (PreludeC-45Types-prim__integerToNat eta-0)) u--vs) 0) '()))))))) (lambda () (vector 13 1 1 (vector 11 1 (ParserC-45RuleC-45Package-gt) (lambda () (vector 9 0 (csegen-323) (lambda () (lambda (u--vs) (vector 0 (cons (vector 1 arg-0 (PreludeC-45Interfaces-C-60C-36C-62 (csegen-326) (lambda (eta-0) (PreludeC-45Types-prim__integerToNat eta-0)) u--vs) 0) '()))))))) (lambda () (vector 11 1 (ParserC-45RuleC-45Package-eqop) (lambda () (vector 9 0 (csegen-323) (lambda () (lambda (u--vs) (vector 0 (cons (vector 0 arg-0 (PreludeC-45Interfaces-C-60C-36C-62 (csegen-326) (lambda (eta-0) (PreludeC-45Types-prim__integerToNat eta-0)) u--vs) 1) (cons (vector 1 arg-0 (PreludeC-45Interfaces-C-60C-36C-62 (csegen-326) (lambda (eta-0) (PreludeC-45Types-prim__integerToNat eta-0)) u--vs) 1) '()))))))))))))))))))
(define PackC-45CoreC-45Ipkg-pkgDesc (lambda (arg-0) (vector 11 1 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 (lambda (eta-0) (vector 0 )) (ParserC-45RuleC-45Package-exactProperty "package")) (lambda () (vector 9 0 (ParserC-45RuleC-45Package-packageName) (lambda () (lambda (u--name) (vector 10 0 0 (LibrariesC-45TextC-45Parser-many (PackC-45CoreC-45Ipkg-field arg-0)) (lambda (u--fields) (vector 0 (cons u--name u--fields)))))))))))
(define PackC-45CoreC-45Ipkg-parseIpkgFile (lambda (arg-1 arg-2) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-read arg-1 arg-2) (lambda (eta-0) (ControlC-45MonadC-45ErrorC-45Interface-liftEither (vector (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-2204) (ControlC-45MonadC-45ErrorC-45Interface-u--throwError_MonadError_C-36e_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-2204))) (lambda (u--a) (lambda (arg-2210) (lambda (arg-2213) (ControlC-45MonadC-45ErrorC-45Either-catchE (let ((e-1 (car arg-1))) e-1) arg-2210 arg-2213))))) (PackC-45CoreC-45Ipkg-parseIpkg arg-2 eta-0))))))
(define PackC-45CoreC-45Ipkg-parseIpkg (lambda (arg-0 arg-1) (let ((u--err (vector 14 arg-0))) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (let ((sc0 (ParserC-45LexerC-45Package-lex arg-1))) (case (vector-ref sc0 0) ((0) (vector 0 u--err)) (else (let ((e-5 (vector-ref sc0 1))) (vector 1 e-5))))) (lambda (u--toks) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (let ((sc0 (LibrariesC-45TextC-45ParserC-45Core-parse 1 (PackC-45CoreC-45Ipkg-pkgDesc (LibrariesC-45UtilsC-45Path-u--show_Show_Path arg-0)) u--toks))) (case (vector-ref sc0 0) ((0) (vector 0 u--err)) (else (let ((e-5 (vector-ref sc0 1))) (vector 1 e-5))))) (lambda (_-0) (let ((e-3 (cdr _-0))) (let ((e-6 (car e-3))) (let ((e-10 (car e-6))) (let ((e-11 (cdr e-6))) (vector 1 (PackC-45CoreC-45Ipkg-addFields e-10 e-11)))))))))))))
(define PackC-45CoreC-45Ipkg-field (lambda (arg-0) (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--5828-5004-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 3 eta-0 eta-1))) "authors") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--5828-5004-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 4 eta-0 eta-1))) "maintainers") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--5828-5004-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 5 eta-0 eta-1))) "license") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--5828-5004-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 6 eta-0 eta-1))) "brief") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--5828-5004-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 7 eta-0 eta-1))) "readme") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--5828-5004-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 8 eta-0 eta-1))) "homepage") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--5828-5004-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 9 eta-0 eta-1))) "sourceloc") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--5828-5004-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 10 eta-0 eta-1))) "bugtracker") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--5828-5004-u--strField arg-0 (csegen-337) "options") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--5828-5004-u--strField arg-0 (csegen-337) "opts") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--5828-5004-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 16 eta-0 eta-1))) "sourcedir") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--5828-5004-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 17 eta-0 eta-1))) "builddir") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--5828-5004-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 18 eta-0 eta-1))) "outputdir") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--5828-5004-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 19 eta-0 eta-1))) "prebuild") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--5828-5004-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 20 eta-0 eta-1))) "postbuild") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--5828-5004-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 21 eta-0 eta-1))) "preinstall") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--5828-5004-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 22 eta-0 eta-1))) "postinstall") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--5828-5004-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 23 eta-0 eta-1))) "preclean") (lambda () (vector 13 1 1 (PackC-45CoreC-45Ipkg-n--5828-5004-u--strField arg-0 (lambda (eta-0) (lambda (eta-1) (vector 24 eta-0 eta-1))) "postclean") (lambda () (vector 13 1 1 (vector 10 0 1 (LibrariesC-45TextC-45Parser-location) (lambda (u--start) (vector 11 1 (csegen-347) (lambda () (vector 11 1 (ParserC-45RuleC-45Package-equals) (lambda () (vector 9 0 (csegen-323) (lambda () (lambda (u--vs) (vector 10 0 0 (LibrariesC-45TextC-45Parser-location) (lambda (u--end) (vector 0 (vector 0 (vector 0 (vector 1 arg-0) u--start u--end) (PreludeC-45Interfaces-C-60C-36C-62 (csegen-326) (lambda (eta-0) (PreludeC-45Types-prim__integerToNat eta-0)) u--vs)))))))))))))) (lambda () (vector 13 1 1 (vector 10 0 1 (LibrariesC-45TextC-45Parser-location) (lambda (u--start) (vector 11 0 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 (lambda (eta-0) (vector 0 )) (ParserC-45RuleC-45Package-exactProperty "langversion")) (lambda () (vector 10 0 0 (PackC-45CoreC-45Ipkg-n--5828-5002-u--langversions arg-0) (lambda (u--lvs) (vector 10 0 0 (LibrariesC-45TextC-45Parser-location) (lambda (u--end) (vector 0 (vector 1 (vector 0 (vector 1 arg-0) u--start u--end) u--lvs)))))))))) (lambda () (vector 13 1 1 (vector 10 0 1 (LibrariesC-45TextC-45Parser-location) (lambda (u--start) (vector 11 1 (csegen-347) (lambda () (vector 11 1 (ParserC-45RuleC-45Package-equals) (lambda () (vector 9 0 (ParserC-45RuleC-45Package-stringLit) (lambda () (lambda (u--v) (vector 10 0 0 (LibrariesC-45TextC-45Parser-location) (lambda (u--end) (vector 0 (vector 2 (vector 0 (vector 1 arg-0) u--start u--end) u--v))))))))))))) (lambda () (vector 13 1 1 (vector 11 1 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 (lambda (eta-0) (vector 0 )) (ParserC-45RuleC-45Package-exactProperty "depends")) (lambda () (vector 11 1 (ParserC-45RuleC-45Package-equals) (lambda () (vector 9 0 (ParserC-45RuleC-45Package-sep (PackC-45CoreC-45Ipkg-n--5828-5003-u--depends arg-0)) (lambda () (lambda (u--ds) (vector 0 (vector 11 u--ds))))))))) (lambda () (vector 13 1 1 (vector 11 1 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 (lambda (eta-0) (vector 0 )) (ParserC-45RuleC-45Package-exactProperty "modules")) (lambda () (vector 11 1 (ParserC-45RuleC-45Package-equals) (lambda () (vector 9 0 (ParserC-45RuleC-45Package-sep (vector 10 0 1 (LibrariesC-45TextC-45Parser-location) (lambda (u--start) (vector 9 0 (ParserC-45RuleC-45Package-moduleIdent) (lambda () (lambda (u--m) (vector 10 0 0 (LibrariesC-45TextC-45Parser-location) (lambda (u--end) (vector 0 (cons (vector 0 (vector 1 arg-0) u--start u--end) u--m)))))))))) (lambda () (lambda (u--ms) (vector 0 (vector 12 u--ms))))))))) (lambda () (vector 13 1 1 (vector 11 1 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 (lambda (eta-0) (vector 0 )) (ParserC-45RuleC-45Package-exactProperty "main")) (lambda () (vector 11 1 (ParserC-45RuleC-45Package-equals) (lambda () (vector 10 0 1 (LibrariesC-45TextC-45Parser-location) (lambda (u--start) (vector 9 0 (ParserC-45RuleC-45Package-moduleIdent) (lambda () (lambda (u--m) (vector 10 0 0 (LibrariesC-45TextC-45Parser-location) (lambda (u--end) (vector 0 (vector 13 (vector 0 (vector 1 arg-0) u--start u--end) u--m))))))))))))) (lambda () (vector 11 1 (LibrariesC-45TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 (lambda (eta-0) (vector 0 )) (ParserC-45RuleC-45Package-exactProperty "executable")) (lambda () (vector 11 1 (ParserC-45RuleC-45Package-equals) (lambda () (vector 9 0 (vector 13 1 1 (ParserC-45RuleC-45Package-stringLit) (lambda () (ParserC-45RuleC-45Package-packageName))) (lambda () (lambda (u--e) (vector 0 (vector 14 u--e)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(define PackC-45CoreC-45Ipkg-addFields (lambda (ext-0 ext-1) (PreludeC-45Types-u--foldl_Foldable_List (lambda (eta-0) (lambda (eta-1) (PackC-45CoreC-45Ipkg-addField eta-0 eta-1))) (IdrisC-45PackageC-45Types-initPkgDesc ext-0) ext-1)))
(define PackC-45CoreC-45Ipkg-addField (lambda (arg-0 arg-1) (case (vector-ref arg-1 0) ((0) (let ((e-1 (vector-ref arg-1 2))) (let ((e-26 (vector-ref arg-0 0))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-26 (box e-1) e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 e-13 e-14 e-15 e-16 e-17 e-18 e-19 e-20 e-21 e-22 e-23 e-24))))))))))))))))))))))))))) ((1) (let ((e-3 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-25 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 (box e-3) e-25 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 e-13 e-14 e-15 e-16 e-17 e-18 e-19 e-20 e-21 e-22 e-23 e-24))))))))))))))))))))))))))) ((2) arg-0) ((3) (let ((e-7 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-26 (vector-ref arg-0 6))) (let ((e-25 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 (box e-7) e-4 e-5 e-26 e-25 e-8 e-9 e-10 e-11 e-12 e-13 e-14 e-15 e-16 e-17 e-18 e-19 e-20 e-21 e-22 e-23 e-24))))))))))))))))))))))))))) ((4) (let ((e-9 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-26 (vector-ref arg-0 8))) (let ((e-25 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 (box e-9) e-5 e-6 e-7 e-26 e-25 e-10 e-11 e-12 e-13 e-14 e-15 e-16 e-17 e-18 e-19 e-20 e-21 e-22 e-23 e-24))))))))))))))))))))))))))) ((5) (let ((e-11 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-26 (vector-ref arg-0 10))) (let ((e-25 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 (box e-11) e-6 e-7 e-8 e-9 e-26 e-25 e-12 e-13 e-14 e-15 e-16 e-17 e-18 e-19 e-20 e-21 e-22 e-23 e-24))))))))))))))))))))))))))) ((6) (let ((e-13 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-26 (vector-ref arg-0 12))) (let ((e-25 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 (box e-13) e-7 e-8 e-9 e-10 e-11 e-26 e-25 e-14 e-15 e-16 e-17 e-18 e-19 e-20 e-21 e-22 e-23 e-24))))))))))))))))))))))))))) ((7) (let ((e-15 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-26 (vector-ref arg-0 14))) (let ((e-25 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 (box e-15) e-8 e-9 e-10 e-11 e-12 e-13 e-26 e-25 e-16 e-17 e-18 e-19 e-20 e-21 e-22 e-23 e-24))))))))))))))))))))))))))) ((8) (let ((e-17 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-26 (vector-ref arg-0 16))) (let ((e-25 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 (box e-17) e-9 e-10 e-11 e-12 e-13 e-14 e-15 e-26 e-25 e-18 e-19 e-20 e-21 e-22 e-23 e-24))))))))))))))))))))))))))) ((9) (let ((e-19 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-26 (vector-ref arg-0 18))) (let ((e-25 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 (box e-19) e-10 e-11 e-12 e-13 e-14 e-15 e-16 e-17 e-26 e-25 e-20 e-21 e-22 e-23 e-24))))))))))))))))))))))))))) ((10) (let ((e-21 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-26 (vector-ref arg-0 20))) (let ((e-25 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 (box e-21) e-11 e-12 e-13 e-14 e-15 e-16 e-17 e-18 e-19 e-26 e-25 e-22 e-23 e-24))))))))))))))))))))))))))) ((11) (let ((e-22 (vector-ref arg-1 1))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-25 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-22 e-12 e-13 e-14 e-15 e-16 e-17 e-18 e-19 e-20 e-21 e-25 e-23 e-24))))))))))))))))))))))))))) ((12) (let ((e-23 (vector-ref arg-1 1))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-25 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 (PreludeC-45Types-u--map_Functor_List (lambda (lamc-0) (let ((e-26 (cdr lamc-0))) (cons e-26 ""))) e-23) e-13 e-14 e-15 e-16 e-17 e-18 e-19 e-20 e-21 e-22 e-25 e-24))))))))))))))))))))))))))) ((13) (let ((e-25 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-26 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 (box (cons e-25 "")) e-14 e-15 e-16 e-17 e-18 e-19 e-20 e-21 e-22 e-23 e-26))))))))))))))))))))))))))) ((14) (let ((e-26 (vector-ref arg-1 1))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 e-13 (box e-26) e-15 e-16 e-17 e-18 e-19 e-20 e-21 e-22 e-23 e-24))))))))))))))))))))))))))) ((15) (let ((e-27 (vector-ref arg-1 1))) (let ((e-28 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 e-13 e-14 (box (cons e-27 e-28)) e-16 e-17 e-18 e-19 e-20 e-21 e-22 e-23 e-24)))))))))))))))))))))))))))) ((16) (let ((e-30 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 e-13 e-14 e-15 (box e-30) e-17 e-18 e-19 e-20 e-21 e-22 e-23 e-24))))))))))))))))))))))))))) ((17) (let ((e-32 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 e-13 e-14 e-15 e-16 (box e-32) e-18 e-19 e-20 e-21 e-22 e-23 e-24))))))))))))))))))))))))))) ((18) (let ((e-34 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 e-13 e-14 e-15 e-16 e-17 (box e-34) e-19 e-20 e-21 e-22 e-23 e-24))))))))))))))))))))))))))) ((19) (let ((e-35 (vector-ref arg-1 1))) (let ((e-36 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 e-13 e-14 e-15 e-16 e-17 e-18 (box (cons e-35 e-36)) e-20 e-21 e-22 e-23 e-24)))))))))))))))))))))))))))) ((20) (let ((e-37 (vector-ref arg-1 1))) (let ((e-38 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 e-13 e-14 e-15 e-16 e-17 e-18 e-19 (box (cons e-37 e-38)) e-21 e-22 e-23 e-24)))))))))))))))))))))))))))) ((21) (let ((e-39 (vector-ref arg-1 1))) (let ((e-40 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 e-13 e-14 e-15 e-16 e-17 e-18 e-19 e-20 (box (cons e-39 e-40)) e-22 e-23 e-24)))))))))))))))))))))))))))) ((22) (let ((e-41 (vector-ref arg-1 1))) (let ((e-42 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-23 (vector-ref arg-0 23))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 e-13 e-14 e-15 e-16 e-17 e-18 e-19 e-20 e-21 (box (cons e-41 e-42)) e-23 e-24)))))))))))))))))))))))))))) ((23) (let ((e-43 (vector-ref arg-1 1))) (let ((e-44 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-24 (vector-ref arg-0 24))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 e-13 e-14 e-15 e-16 e-17 e-18 e-19 e-20 e-21 e-22 (box (cons e-43 e-44)) e-24)))))))))))))))))))))))))))) (else (let ((e-45 (vector-ref arg-1 1))) (let ((e-46 (vector-ref arg-1 2))) (let ((e-0 (vector-ref arg-0 0))) (let ((e-1 (vector-ref arg-0 1))) (let ((e-2 (vector-ref arg-0 2))) (let ((e-3 (vector-ref arg-0 3))) (let ((e-4 (vector-ref arg-0 4))) (let ((e-5 (vector-ref arg-0 5))) (let ((e-6 (vector-ref arg-0 6))) (let ((e-7 (vector-ref arg-0 7))) (let ((e-8 (vector-ref arg-0 8))) (let ((e-9 (vector-ref arg-0 9))) (let ((e-10 (vector-ref arg-0 10))) (let ((e-11 (vector-ref arg-0 11))) (let ((e-12 (vector-ref arg-0 12))) (let ((e-13 (vector-ref arg-0 13))) (let ((e-14 (vector-ref arg-0 14))) (let ((e-15 (vector-ref arg-0 15))) (let ((e-16 (vector-ref arg-0 16))) (let ((e-17 (vector-ref arg-0 17))) (let ((e-18 (vector-ref arg-0 18))) (let ((e-19 (vector-ref arg-0 19))) (let ((e-20 (vector-ref arg-0 20))) (let ((e-21 (vector-ref arg-0 21))) (let ((e-22 (vector-ref arg-0 22))) (let ((e-23 (vector-ref arg-0 23))) (vector e-0 e-1 e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 e-13 e-14 e-15 e-16 e-17 e-18 e-19 e-20 e-21 e-22 e-23 (box (cons e-45 e-46)))))))))))))))))))))))))))))))))
(define LibrariesC-45UtilsC-45String-stripSurrounds (lambda (arg-0 arg-1 arg-2) (PreludeC-45Types-substr arg-0 (PreludeC-45Types-prim__integerToNat (- (PreludeC-45TypesC-45String-length arg-2) (+ arg-0 arg-1))) arg-2)))
(define LibrariesC-45UtilsC-45String-stripQuotes (lambda (ext-0) (LibrariesC-45UtilsC-45String-stripSurrounds 1 1 ext-0)))
(define ParserC-45RuleC-45Package-stringLit(blodwen-lazy (lambda () (vector 1 "Expected string" (lambda (lcase-0) (case (vector-ref lcase-0 0) ((13) (let ((e-0 (vector-ref lcase-0 1))) (box e-0)))(else '())))))))
(define ParserC-45RuleC-45Package-sepC-39(blodwen-lazy (lambda () (vector 1 "Expected separator" (lambda (lcase-0) (case (vector-ref lcase-0 0) ((4) (box (vector 0 )))(else '())))))))
(define ParserC-45RuleC-45Package-sep (lambda (arg-1) (PreludeC-45Interfaces-C-60C-36C-62 (csegen-285) (lambda (eta-0) (DataC-45List1-forget eta-0)) (LibrariesC-45TextC-45Parser-sepBy1 1 (ParserC-45RuleC-45Package-sepC-39) arg-1))))
(define ParserC-45RuleC-45Package-packageName(blodwen-lazy (lambda () (vector 1 "Expected package name" (lambda (lcase-0) (case (vector-ref lcase-0 0) ((3) (let ((e-0 (vector-ref lcase-0 1))) (let ((e-1 (vector-ref lcase-0 2))) (if (null? e-0) (let ((sc2 (let ((sc3 (PreludeC-45Types-fastUnpack e-1))) (if (null? sc3) 0 (let ((e-2 (car sc3))) (let ((e-3 (cdr sc3))) (let ((sc4 (ParserC-45LexerC-45Common-isIdentStart 0 e-2))) (cond ((equal? sc4 1) (PreludeC-45Interfaces-all (csegen-84) (csegen-363) e-3)) (else 0))))))))) (cond ((equal? sc2 1) (box e-1)) (else '()))) '()))))(else '())))))))
(define ParserC-45RuleC-45Package-moduleIdent(blodwen-lazy (lambda () (vector 1 "Expected module identifier" (lambda (lcase-0) (case (vector-ref lcase-0 0) ((3) (let ((e-0 (vector-ref lcase-0 1))) (let ((e-1 (vector-ref lcase-0 2))) (box (CoreC-45NameC-45Namespace-mkNestedNamespace e-0 e-1)))))(else '())))))))
(define ParserC-45RuleC-45Package-lte(blodwen-lazy (lambda () (vector 1 "Expected <=" (lambda (lcase-0) (case (vector-ref lcase-0 0) ((6) (box (vector 0 )))(else '())))))))
(define ParserC-45RuleC-45Package-lt(blodwen-lazy (lambda () (vector 1 "Expected <=" (lambda (lcase-0) (case (vector-ref lcase-0 0) ((8) (box (vector 0 )))(else '())))))))
(define ParserC-45RuleC-45Package-integerLit(blodwen-lazy (lambda () (vector 1 "Expected integer" (lambda (lcase-0) (case (vector-ref lcase-0 0) ((14) (let ((e-0 (vector-ref lcase-0 1))) (box e-0)))(else '())))))))
(define ParserC-45RuleC-45Package-gte(blodwen-lazy (lambda () (vector 1 "Expected >=" (lambda (lcase-0) (case (vector-ref lcase-0 0) ((7) (box (vector 0 )))(else '())))))))
(define ParserC-45RuleC-45Package-gt(blodwen-lazy (lambda () (vector 1 "Expected >=" (lambda (lcase-0) (case (vector-ref lcase-0 0) ((9) (box (vector 0 )))(else '())))))))
(define ParserC-45RuleC-45Package-exactProperty (lambda (arg-0) (vector 1 (string-append "Expected property " arg-0) (lambda (lcase-0) (case (vector-ref lcase-0 0) ((3) (let ((e-0 (vector-ref lcase-0 1))) (let ((e-1 (vector-ref lcase-0 2))) (if (null? e-0) (let ((sc2 (PreludeC-45EqOrd-u--C-61C-61_Eq_String arg-0 e-1))) (cond ((equal? sc2 1) (box arg-0)) (else '()))) '()))))(else '()))))))
(define ParserC-45RuleC-45Package-equals(blodwen-lazy (lambda () (vector 1 "Expected equals" (lambda (lcase-0) (case (vector-ref lcase-0 0) ((2) (box (vector 0 )))(else '())))))))
(define ParserC-45RuleC-45Package-eqop(blodwen-lazy (lambda () (vector 1 "Expected ==" (lambda (lcase-0) (case (vector-ref lcase-0 0) ((10) (box (vector 0 )))(else '())))))))
(define ParserC-45RuleC-45Package-dotC-39(blodwen-lazy (lambda () (vector 1 "Expected dot" (lambda (lcase-0) (case (vector-ref lcase-0 0) ((5) (box (vector 0 )))(else '())))))))
(define ParserC-45RuleC-45Package-andop(blodwen-lazy (lambda () (vector 1 "Expected &&" (lambda (lcase-0) (case (vector-ref lcase-0 0) ((11) (box (vector 0 )))(else '())))))))
(define ParserC-45LexerC-45Package-case--lex-8842 (lambda (arg-0 arg-1) (let ((e-2 (car arg-1))) (let ((e-3 (cdr arg-1))) (if (null? e-3) (vector 0 e-3) (let ((e-6 (car e-3))) (let ((e-7 (cdr e-3))) (if (null? e-7) (vector 0 e-3) (let ((e-10 (car e-7))) (let ((e-11 (cdr e-7))) (cond ((equal? e-11 "") (vector 1 (PreludeC-45TypesC-45List-tailRecAppend (PreludeC-45TypesC-45List-filter (lambda (eta-0) (ParserC-45LexerC-45Package-n--5113-8823-u--useful arg-0 (let ((e-1 (vector-ref eta-0 0))) e-1))) e-2) (cons (vector (vector 1 ) 0 (vector e-6 e-10 e-6 e-10)) '()))))(else (vector 0 e-3)))))))))))))
(define ParserC-45LexerC-45Package-n--5113-8823-u--useful (lambda (arg-0 arg-1) (case (vector-ref arg-1 0) ((0) 0) ((12) 0)(else 1))))
(define ParserC-45LexerC-45Package-separator(blodwen-lazy (lambda () (LibrariesC-45TextC-45Lexer-is #\,))))
(define ParserC-45LexerC-45Package-rawTokens(blodwen-lazy (lambda () (cons (cons (ParserC-45LexerC-45Common-comment) (lambda (eta-0) (vector 0 (LibrariesC-45DataC-45StringC-45Extra-drop 2 eta-0)))) (cons (cons (ParserC-45LexerC-45Common-namespacedIdent) (lambda (eta-0) (PreludeC-45Basics-uncurry (lambda (eta-1) (lambda (eta-2) (vector 3 eta-1 eta-2))) (CoreC-45NameC-45Namespace-mkNamespacedIdent eta-0)))) (cons (cons (ParserC-45LexerC-45Common-identAllowDashes) (lambda (eta-0) (vector 3 '() eta-0))) (cons (cons (ParserC-45LexerC-45Package-separator) (lambda (eta-0) (vector 4 ))) (cons (cons (ParserC-45LexerC-45Package-dot) (lambda (eta-0) (vector 5 ))) (cons (cons (ParserC-45LexerC-45Package-lte) (lambda (eta-0) (vector 6 ))) (cons (cons (ParserC-45LexerC-45Package-gte) (lambda (eta-0) (vector 7 ))) (cons (cons (ParserC-45LexerC-45Package-lt) (lambda (eta-0) (vector 8 ))) (cons (cons (ParserC-45LexerC-45Package-gt) (lambda (eta-0) (vector 9 ))) (cons (cons (ParserC-45LexerC-45Package-eqop) (lambda (eta-0) (vector 10 ))) (cons (cons (ParserC-45LexerC-45Package-andop) (lambda (eta-0) (vector 11 ))) (cons (cons (ParserC-45LexerC-45Package-equals) (lambda (eta-0) (vector 2 ))) (cons (cons (ParserC-45LexerC-45Common-spacesOrNewlines) (lambda (eta-0) (vector 12 ))) (cons (cons (LibrariesC-45TextC-45Lexer-stringLit) (lambda (u--s) (vector 13 (LibrariesC-45UtilsC-45String-stripQuotes u--s)))) (cons (cons (LibrariesC-45TextC-45Lexer-intLit) (lambda (u--i) (vector 14 (PreludeC-45Cast-u--cast_Cast_String_Integer u--i)))) '()))))))))))))))))))
(define ParserC-45LexerC-45Package-lte(blodwen-lazy (lambda () (vector 5 (LibrariesC-45TextC-45Lexer-is #\<) (lambda () (LibrariesC-45TextC-45Lexer-is #\=))))))
(define ParserC-45LexerC-45Package-lt(blodwen-lazy (lambda () (LibrariesC-45TextC-45Lexer-is #\<))))
(define ParserC-45LexerC-45Package-lex (lambda (arg-0) (ParserC-45LexerC-45Package-case--lex-8842 arg-0 (LibrariesC-45TextC-45LexerC-45Core-lexTo (lambda (eta-0) 0) (ParserC-45LexerC-45Package-rawTokens) arg-0))))
(define ParserC-45LexerC-45Package-gte(blodwen-lazy (lambda () (vector 5 (LibrariesC-45TextC-45Lexer-is #\>) (lambda () (LibrariesC-45TextC-45Lexer-is #\=))))))
(define ParserC-45LexerC-45Package-gt(blodwen-lazy (lambda () (LibrariesC-45TextC-45Lexer-is #\>))))
(define ParserC-45LexerC-45Package-equals(blodwen-lazy (lambda () (LibrariesC-45TextC-45Lexer-is #\=))))
(define ParserC-45LexerC-45Package-eqop(blodwen-lazy (lambda () (vector 5 (LibrariesC-45TextC-45Lexer-is #\=) (lambda () (LibrariesC-45TextC-45Lexer-is #\=))))))
(define ParserC-45LexerC-45Package-dot(blodwen-lazy (lambda () (LibrariesC-45TextC-45Lexer-is #\.))))
(define ParserC-45LexerC-45Package-andop(blodwen-lazy (lambda () (vector 5 (LibrariesC-45TextC-45Lexer-is #\&) (lambda () (LibrariesC-45TextC-45Lexer-is #\&))))))
(define ParserC-45LexerC-45Common-spacesOrNewlines(blodwen-lazy (lambda () (LibrariesC-45TextC-45Lexer-some (LibrariesC-45TextC-45LexerC-45Core-C-60C-124C-62 (LibrariesC-45TextC-45Lexer-space) (LibrariesC-45TextC-45Lexer-newline))))))
(define ParserC-45LexerC-45Common-namespacedIdent(blodwen-lazy (lambda () (vector 5 (ParserC-45LexerC-45Common-namespaceIdent) (lambda () (LibrariesC-45TextC-45Lexer-opt (vector 5 (LibrariesC-45TextC-45Lexer-is #\.) (lambda () (ParserC-45LexerC-45Common-identNormal)))))))))
(define ParserC-45LexerC-45Common-namespaceIdent(blodwen-lazy (lambda () (vector 5 (csegen-433) (lambda () (LibrariesC-45TextC-45Lexer-many (vector 5 (vector 5 (LibrariesC-45TextC-45Lexer-is #\.) (lambda () (csegen-433))) (lambda () (LibrariesC-45TextC-45LexerC-45Core-expect (LibrariesC-45TextC-45Lexer-is #\.))))))))))
(define ParserC-45LexerC-45Common-isIdentTrailing (lambda (arg-0 arg-1) (cond ((equal? arg-0 0) (cond ((equal? arg-1 #\-) 1)(else (cond ((equal? arg-1 #\') 1) ((equal? arg-1 #\_) 1)(else (let ((sc1 (PreludeC-45Types-isAlphaNum arg-1))) (cond ((equal? sc1 1) 1) (else (PreludeC-45EqOrd-u--C-62_Ord_Char arg-1 (cast-int-char (blodwen-toSignedInt 160 63)))))))))))(else (cond ((equal? arg-1 #\') 1) ((equal? arg-1 #\_) 1)(else (let ((sc0 (PreludeC-45Types-isAlphaNum arg-1))) (cond ((equal? sc0 1) 1) (else (PreludeC-45EqOrd-u--C-62_Ord_Char arg-1 (cast-int-char (blodwen-toSignedInt 160 63))))))))))))
(define ParserC-45LexerC-45Common-isIdentStart (lambda (arg-0 arg-1) (cond ((equal? arg-1 #\_) 1)(else (cond ((equal? arg-0 1) (let ((sc1 (PreludeC-45Types-isUpper arg-1))) (cond ((equal? sc1 1) 1) (else (PreludeC-45EqOrd-u--C-62_Ord_Char arg-1 (cast-int-char (blodwen-toSignedInt 160 63)))))))(else (let ((sc0 (PreludeC-45Types-isAlpha arg-1))) (cond ((equal? sc0 1) 1) (else (PreludeC-45EqOrd-u--C-62_Ord_Char arg-1 (cast-int-char (blodwen-toSignedInt 160 63))))))))))))
(define ParserC-45LexerC-45Common-identNormal(blodwen-lazy (lambda () (vector 5 (LibrariesC-45TextC-45LexerC-45Core-pred (lambda (eta-0) (ParserC-45LexerC-45Common-isIdentStart 2 eta-0))) (lambda () (LibrariesC-45TextC-45Lexer-many (LibrariesC-45TextC-45LexerC-45Core-pred (lambda (eta-0) (ParserC-45LexerC-45Common-isIdentTrailing 2 eta-0)))))))))
(define ParserC-45LexerC-45Common-identAllowDashes(blodwen-lazy (lambda () (vector 5 (LibrariesC-45TextC-45LexerC-45Core-pred (lambda (eta-0) (ParserC-45LexerC-45Common-isIdentStart 0 eta-0))) (lambda () (LibrariesC-45TextC-45Lexer-many (LibrariesC-45TextC-45LexerC-45Core-pred (csegen-363))))))))
(define ParserC-45LexerC-45Common-comment(blodwen-lazy (lambda () (vector 5 (vector 5 (vector 5 (vector 5 (LibrariesC-45TextC-45Lexer-is #\-) (lambda () (LibrariesC-45TextC-45Lexer-is #\-))) (lambda () (LibrariesC-45TextC-45Lexer-many (LibrariesC-45TextC-45Lexer-is #\-)))) (lambda () (LibrariesC-45TextC-45LexerC-45Core-reject (LibrariesC-45TextC-45Lexer-is #\})))) (lambda () (LibrariesC-45TextC-45Lexer-many (LibrariesC-45TextC-45Lexer-isNot (integer->char 10))))))))
(define PackC-45CoreC-45IO-case--mkDir-5309 (lambda (arg-1 arg-2 arg-3) (cond ((equal? arg-3 "") (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (vector 0 )))(else (PackC-45CoreC-45IO-sys arg-1 (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "mkdir -p " (cons arg-3 '()))))))))
(define PackC-45CoreC-45IO-write (lambda (arg-1 arg-2 arg-3) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45CoreC-45IO-mkParentDir arg-1 arg-2) (lambda () (PackC-45CoreC-45IO-eitherIO arg-1 (lambda (eta-0) (vector 4 arg-2 eta-0)) (SystemC-45FileC-45ReadWrite-writeFile arg-1 (LibrariesC-45UtilsC-45Path-u--show_Show_Path arg-2) arg-3))))))
(define PackC-45CoreC-45IO-tomlFiles (lambda (arg-1 arg-2) (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) eta-2 eta-3))))) (lambda (eta-0) (PreludeC-45TypesC-45List-filter (lambda (eta-1) (PreludeC-45Types-u--C-61C-61_Eq_C-40MaybeC-32C-36aC-41 (csegen-206) (box "toml") (LibrariesC-45UtilsC-45Path-extension eta-1))) eta-0)) (PackC-45CoreC-45IO-entries arg-1 arg-2))))
(define PackC-45CoreC-45IO-sys (lambda (arg-1 arg-2) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (System-system (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) arg-2) (lambda (_-0) (cond ((equal? _-0 0) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (vector 0 )))(else (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) (vector 0 (vector 6 arg-2 _-0))))))))))))
(define PackC-45CoreC-45IO-run (lambda (arg-0 ext-0) (let ((act-24 (arg-0 ext-0))) (case (vector-ref act-24 0) ((0) (let ((e-2 (vector-ref act-24 1))) ((System-die (csegen-30) (PackC-45CoreC-45Types-printErr e-2)) ext-0))) (else (vector 0 ))))))
(define PackC-45CoreC-45IO-rmFile (lambda (arg-1 arg-2) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-exists (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) arg-2) (lambda (bind-0) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) bind-0 (lambda () (PackC-45CoreC-45IO-sys arg-1 (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "rm " (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_Path arg-2) '()))))))))))
(define PackC-45CoreC-45IO-rmDir (lambda (arg-1 arg-2) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-exists (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) arg-2) (lambda (bind-0) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) bind-0 (lambda () (PackC-45CoreC-45IO-sys arg-1 (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "rm -rf " (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_Path arg-2) '()))))))))))
(define PackC-45CoreC-45IO-read (lambda (arg-1 arg-2) (PackC-45CoreC-45IO-eitherIO arg-1 (lambda (eta-0) (vector 3 arg-2 eta-0)) (SystemC-45FileC-45ReadWrite-readFile arg-1 (LibrariesC-45UtilsC-45Path-u--show_Show_Path arg-2)))))
(define PackC-45CoreC-45IO-patch (lambda (arg-1 arg-2 arg-3) (PackC-45CoreC-45IO-sys arg-1 (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "patch " (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_Path arg-2) (cons " " (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_Path arg-3) '()))))))))
(define PackC-45CoreC-45IO-mkParentDir (lambda (arg-1 arg-2) (let ((sc0 (LibrariesC-45UtilsC-45Path-parent (LibrariesC-45UtilsC-45Path-u--show_Show_Path arg-2)))) (if (null? sc0) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (vector 0 )) (let ((e-1 (unbox sc0))) (PackC-45CoreC-45IO-mkDir arg-1 (LibrariesC-45UtilsC-45Path-parse e-1)))))))
(define PackC-45CoreC-45IO-mkDir (lambda (arg-1 arg-2) (PackC-45CoreC-45IO-case--mkDir-5309 arg-1 arg-2 (LibrariesC-45UtilsC-45Path-u--show_Show_Path arg-2))))
(define PackC-45CoreC-45IO-missing (lambda (arg-1 ext-0) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) ((((e-8 'erased) 'erased) (lambda (eta-0) (cond ((equal? eta-0 1) 0) (else 1)))) (PackC-45CoreC-45IO-exists arg-1 ext-0)))))))
(define PackC-45CoreC-45IO-link (lambda (arg-1 arg-2 arg-3) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45CoreC-45IO-rmFile arg-1 arg-3) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45CoreC-45IO-mkParentDir arg-1 arg-3) (lambda () (PackC-45CoreC-45IO-sys arg-1 (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "ln -s " (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_Path arg-2) (cons " " (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_Path arg-3) '()))))))))))))
(define PackC-45CoreC-45IO-inDir (lambda (arg-2 arg-3 arg-4) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) (PackC-45CoreC-45IO-curDir arg-2) (lambda (u--cur) (PackC-45CoreC-45IO-finally (let ((e-1 (car arg-2))) e-1) (PackC-45CoreC-45IO-chgDir arg-2 u--cur) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9934)))) (PackC-45CoreC-45IO-chgDir arg-2 arg-3) (lambda () arg-4)))))))
(define PackC-45CoreC-45IO-finally (lambda (arg-3 arg-4 arg-5) (let ((e-2 (vector-ref arg-3 1))) ((((e-2 'erased) 'erased) arg-5) (lambda (u--res) (PreludeC-45Interfaces-C-62C-62 arg-3 (let ((e-6 (vector-ref arg-3 0))) (let ((e-9 (vector-ref e-6 0))) ((((e-9 'erased) 'erased) (lambda (eta-0) (vector 0 ))) arg-4))) (lambda () (let ((e-6 (vector-ref arg-3 0))) (let ((e-8 (vector-ref e-6 1))) ((e-8 'erased) u--res))))))))))
(define PackC-45CoreC-45IO-exists (lambda (arg-1 ext-0) (SystemC-45FileC-45Meta-exists arg-1 (LibrariesC-45UtilsC-45Path-u--show_Show_Path ext-0))))
(define PackC-45CoreC-45IO-entries (lambda (arg-1 arg-2) (PackC-45CoreC-45IO-eitherIO arg-1 (lambda (eta-0) (vector 5 arg-2 eta-0)) (SystemC-45Directory-listDir arg-1 (LibrariesC-45UtilsC-45Path-u--show_Show_Path arg-2)))))
(define PackC-45CoreC-45IO-eitherIO (lambda (arg-3 arg-4 ext-0) (let ((e-1 (car arg-3))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) ((((e-8 'erased) 'erased) (lambda (eta-0) (case (vector-ref eta-0 0) ((0) (let ((e-9 (vector-ref eta-0 1))) (vector 0 (arg-4 e-9)))) (else (let ((e-9 (vector-ref eta-0 1))) (vector 1 e-9)))))) ext-0))))))
(define PackC-45CoreC-45IO-curDir (lambda (arg-1) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (SystemC-45Directory-currentDir (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999))))) (lambda (_-0) (if (null? _-0) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) (vector 0 (vector 0 )))))) (let ((e-1 (unbox _-0))) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-3 (car arg-1))) (let ((e-6 (vector-ref e-3 0))) e-6)) (LibrariesC-45UtilsC-45Path-parse e-1))))))))
(define PackC-45CoreC-45IO-copyFile (lambda (arg-1 arg-2 arg-3) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45CoreC-45IO-mkParentDir arg-1 arg-3) (lambda () (PackC-45CoreC-45IO-sys arg-1 (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "cp " (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_Path arg-2) (cons " " (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_Path arg-3) '()))))))))))
(define PackC-45CoreC-45IO-copyDir (lambda (arg-1 arg-2 arg-3) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45CoreC-45IO-mkParentDir arg-1 arg-3) (lambda () (PackC-45CoreC-45IO-sys arg-1 (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "cp -r " (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_Path arg-2) (cons " " (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_Path arg-3) '()))))))))))
(define PackC-45CoreC-45IO-chgDir (lambda (arg-1 arg-2) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (SystemC-45Directory-changeDir (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) (LibrariesC-45UtilsC-45Path-u--show_Show_Path arg-2)) (lambda (_-0) (cond ((equal? _-0 1) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) (vector 0 ))) (else (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) (vector 0 (vector 7 arg-2))))))))))))
(define SystemC-45Directory-n--3356-5400-u--C-62C-62C-61 (lambda (arg-1 arg-2 ext-0 ext-1) (PreludeC-45InterfacesC-45Monad-u--C-62C-62C-61_Monad_ComposeC-40C-40C-46C-32C-36mC-41C-32C-36tC-41 (csegen-26) (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (case (vector-ref arg-8737 0) ((0) (let ((e-2 (vector-ref arg-8737 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref arg-8737 1))) (vector 1 (u--func e-5))))))))) (lambda (u--a) (lambda (arg-9440) (vector 1 arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (case (vector-ref arg-9446 0) ((0) (let ((e-2 (vector-ref arg-9446 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref arg-9446 1))) (case (vector-ref arg-9453 0) ((1) (let ((e-8 (vector-ref arg-9453 1))) (vector 1 (e-5 e-8)))) (else (let ((e-11 (vector-ref arg-9453 1))) (vector 0 e-11)))))))))))) (csegen-175) (csegen-176)) (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (case (vector-ref arg-8737 0) ((0) (let ((e-2 (vector-ref arg-8737 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref arg-8737 1))) (vector 1 (u--func e-5))))))))) (csegen-192) (csegen-196)) ext-0 ext-1)))
(define SystemC-45Directory-openDir (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (SystemC-45Directory-prim__openDir arg-2 eta-0))))) (lambda (u--res) (let ((sc1 (PreludeC-45EqOrd-u--C-47C-61_Eq_Int (PrimIO-prim__nullAnyPtr u--res) (blodwen-toSignedInt 0 63)))) (cond ((equal? sc1 1) (SystemC-45FileC-45Error-returnError arg-1)) (else (SystemC-45Directory-ok arg-1 u--res))))))))))
(define SystemC-45Directory-ok (lambda (arg-2 arg-3) (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) (vector 1 arg-3)))))))
(define SystemC-45Directory-nextDirEntry (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (SystemC-45Directory-prim__dirEntry arg-2 eta-0))))) (lambda (u--res) (let ((sc1 (PreludeC-45EqOrd-u--C-47C-61_Eq_Int (PrimIO-prim__nullAnyPtr (PrimIO-prim__forgetPtr u--res)) (blodwen-toSignedInt 0 63)))) (cond ((equal? sc1 1) (let ((e-7 (car arg-1))) (let ((e-9 (vector-ref e-7 1))) ((((e-9 'erased) 'erased) (SystemC-45Errno-getErrno arg-1)) (lambda (bind-0) (let ((sc3 (PreludeC-45EqOrd-u--C-47C-61_Eq_Int bind-0 (blodwen-toSignedInt 0 63)))) (cond ((equal? sc3 1) (SystemC-45FileC-45Error-returnError arg-1)) (else (let ((e-12 (car arg-1))) (let ((e-15 (vector-ref e-12 0))) (let ((e-17 (vector-ref e-15 1))) ((e-17 'erased) (vector 1 '()))))))))))))) (else (let ((u--n (PreludeC-45IO-prim__getString u--res))) (let ((sc2 (let ((sc3 (PreludeC-45EqOrd-u--C-61C-61_Eq_String u--n "."))) (cond ((equal? sc3 1) 1) (else (PreludeC-45EqOrd-u--C-61C-61_Eq_String u--n "..")))))) (cond ((equal? sc2 1) (SystemC-45Directory-nextDirEntry arg-1 arg-2)) (else (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (vector 1 (box u--n)))))))))))))))))))
(define SystemC-45Directory-listDir (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (SystemC-45Directory-openDir arg-1 arg-2)) (lambda (_-0) (case (vector-ref _-0 0) ((1) (let ((e-6 (vector-ref _-0 1))) (let ((e-8 (car arg-1))) (let ((e-10 (vector-ref e-8 1))) ((((e-10 'erased) 'erased) (SystemC-45Directory-collectDir arg-1 e-6)) (lambda (u--ns) (let ((e-13 (car arg-1))) (let ((e-15 (vector-ref e-13 1))) ((((e-15 'erased) 'erased) (SystemC-45Directory-closeDir arg-1 e-6)) (lambda (u--ignore) (let ((e-18 (car arg-1))) (let ((e-21 (vector-ref e-18 0))) (let ((e-23 (vector-ref e-21 1))) ((e-23 'erased) u--ns)))))))))))))) (else (let ((e-6 (vector-ref _-0 1))) (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) (let ((e-13 (vector-ref e-11 1))) ((e-13 'erased) (vector 0 e-6))))))))))))))
(define SystemC-45Directory-currentDir (lambda (arg-1) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (SystemC-45Directory-prim__currentDir eta-0))))) (lambda (u--res) (let ((sc1 (PreludeC-45EqOrd-u--C-47C-61_Eq_Int (PrimIO-prim__nullAnyPtr (PrimIO-prim__forgetPtr u--res)) (blodwen-toSignedInt 0 63)))) (cond ((equal? sc1 1) (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) '()))))) (else (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (box (PreludeC-45IO-prim__getString u--res)))))))))))))))
(define SystemC-45Directory-collectDir (lambda (arg-1 arg-2) (let ((e-2 (cdr arg-1))) ((e-2 'erased) (SystemC-45Directory-n--3356-5400-u--C-62C-62C-61 arg-1 arg-2 (SystemC-45Directory-nextDirEntry (csegen-30) arg-2) (lambda (_-0) (if (null? _-0) (lambda (eta-0) (vector 1 '())) (let ((e-3 (unbox _-0))) (SystemC-45Directory-n--3356-5400-u--C-62C-62C-61 arg-1 arg-2 (SystemC-45Directory-collectDir (csegen-30) arg-2) (lambda (u--ns) (lambda (eta-0) (vector 1 (cons e-3 u--ns)))))))))))))
(define SystemC-45Directory-closeDir (lambda (arg-1 arg-2) (let ((e-2 (cdr arg-1))) ((e-2 'erased) (lambda (eta-0) (SystemC-45Directory-prim__closeDir arg-2 eta-0))))))
(define SystemC-45Directory-changeDir (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (SystemC-45Directory-prim__changeDir arg-2 eta-0))))) (lambda (u--ok) (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (PreludeC-45EqOrd-u--C-61C-61_Eq_Int u--ok (blodwen-toSignedInt 0 63))))))))))))
(define ControlC-45MonadC-45ErrorC-45Interface-u--throwError_MonadError_C-36e_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (lambda (arg-3 ext-0) (let ((e-1 (vector-ref arg-3 0))) (let ((e-5 (vector-ref e-1 1))) ((e-5 'erased) (vector 0 ext-0))))))
(define ControlC-45MonadC-45ErrorC-45Interface-liftEither (lambda (arg-3 ext-0) (PreludeC-45Types-either (lambda () (lambda (clam-0) (let ((e-3 (vector-ref arg-3 1))) ((e-3 'erased) clam-0)))) (lambda () (lambda (eta-0) (let ((e-2 (vector-ref arg-3 0))) (let ((e-1 (vector-ref e-2 0))) (let ((e-8 (vector-ref e-1 1))) ((e-8 'erased) eta-0)))))) ext-0)))
(define ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (lambda (arg-3 ext-0) (let ((e-2 (vector-ref arg-3 1))) ((e-2 'erased) (vector 1 ext-0)))))
(define ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (lambda (arg-4 arg-5 arg-6) (PreludeC-45Interfaces-C-60C-36C-62 arg-4 (lambda (eta-0) (case (vector-ref eta-0 0) ((0) (let ((e-2 (vector-ref eta-0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref eta-0 1))) (vector 1 (arg-5 e-5)))))) arg-6)))
(define ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (lambda (arg-3 arg-4) (let ((e-2 (cdr arg-3))) ((e-2 'erased) (lambda (eta-0) (let ((act-23 (arg-4 eta-0))) (vector 1 act-23)))))))
(define ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (lambda (arg-3 arg-4) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-3 arg-4 (lambda (eta-0) eta-0))))
(define ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (lambda (arg-4 arg-5 arg-6) (let ((e-2 (vector-ref arg-4 1))) ((((e-2 'erased) 'erased) arg-5) (lambda (eta-0) (PreludeC-45Types-either (lambda () (lambda (eta-1) (let ((e-6 (vector-ref arg-4 0))) (let ((e-8 (vector-ref e-6 1))) ((e-8 'erased) (vector 0 eta-1)))))) (lambda () (lambda (eta-1) (arg-6 eta-1))) eta-0))))))
(define ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (lambda (arg-4 arg-5 arg-6) (let ((e-3 (vector-ref arg-4 2))) ((((e-3 'erased) 'erased) (let ((e-4 (vector-ref arg-4 2))) ((((e-4 'erased) 'erased) (let ((e-8 (vector-ref arg-4 1))) ((e-8 'erased) (lambda (eta-0) (lambda (eta-1) (case (vector-ref eta-0 0) ((0) (let ((e-10 (vector-ref eta-0 1))) (vector 0 e-10))) (else (let ((e-10 (vector-ref eta-0 1))) (case (vector-ref eta-1 0) ((1) (let ((e-11 (vector-ref eta-1 1))) (vector 1 (e-10 e-11)))) (else (let ((e-11 (vector-ref eta-1 1))) (vector 0 e-11)))))))))))) arg-5))) arg-6))))
(define ControlC-45MonadC-45ErrorC-45Either-catchE (lambda (arg-4 arg-5 arg-6) (let ((e-2 (vector-ref arg-4 1))) ((((e-2 'erased) 'erased) arg-5) (lambda (eta-0) (PreludeC-45Types-either (lambda () (lambda (eta-1) (arg-6 eta-1))) (lambda () (lambda (eta-1) (let ((e-6 (vector-ref arg-4 0))) (let ((e-8 (vector-ref e-6 1))) ((e-8 'erased) (vector 1 eta-1)))))) eta-0))))))
(define PackC-45CoreC-45Git-withGit (lambda (arg-2 arg-3 arg-4 arg-5 arg-6) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) (PackC-45CoreC-45IO-exists (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-2 arg-11999)))) arg-3) (lambda (_-0) (cond ((equal? _-0 0) (PackC-45CoreC-45IO-finally (let ((e-1 (car arg-2))) e-1) (PackC-45CoreC-45IO-rmDir arg-2 arg-3) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9934)))) (PackC-45CoreC-45Git-gitClone arg-2 arg-4 arg-3) (lambda () (PackC-45CoreC-45IO-inDir arg-2 arg-3 (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9934)))) (PackC-45CoreC-45Git-gitCheckout arg-2 arg-5) (lambda () arg-6))))))) (else (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) (vector 0 (vector 21 arg-3))))))))))))
(define PackC-45CoreC-45Git-gitClone (lambda (arg-1 arg-2 arg-3) (PackC-45CoreC-45IO-sys arg-1 (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "git clone -q " (cons arg-2 (cons " " (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_Path arg-3) '()))))))))
(define PackC-45CoreC-45Git-gitCheckout (lambda (arg-1 arg-2) (PackC-45CoreC-45IO-sys arg-1 (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "git checkout -q " (cons arg-2 '()))))))
(define PackC-45CoreC-45Git-dbRepo(blodwen-lazy (lambda () "https://github.com/stefan-hoeck/idris2-pack-db")))
(define PackC-45ConfigC-45Types-u--interpolate_Interpolation_Codegen (lambda (arg-0) (case (vector-ref arg-0 0) ((0) "") ((1) "chez") ((2) "chez-sep") ((3) "racket") ((4) "gambit") ((5) "node") ((6) "javascript") ((7) "refc") ((8) "vmcode-interp") (else (let ((e-0 (vector-ref arg-0 1))) e-0)))))
(define PackC-45ConfigC-45Types-tmpDir_ (lambda (arg-0) (LibrariesC-45UtilsC-45Path-C-47C-62 arg-0 "tmp")))
(define PackC-45ConfigC-45Types-tmpDir (lambda (ext-0) (PackC-45ConfigC-45Types-tmpDir_ (let ((e-2 (vector-ref ext-0 0))) e-2))))
(define PackC-45ConfigC-45Types-schemeVar (lambda (arg-1) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "SCHEME=\"" (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_Path (let ((e-4 (vector-ref arg-1 2))) e-4)) (cons "\"" '()))))))
(define PackC-45ConfigC-45Types-prefixVar (lambda (arg-1) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "PREFIX=\"" (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_Path (PackC-45ConfigC-45Types-idrisPrefixDir arg-1)) (cons "\"" '()))))))
(define PackC-45ConfigC-45Types-pkgPrefixDir (lambda (arg-1 arg-2) (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (case (vector-ref e-3 0) ((0) (let ((e-5 (vector-ref e-3 2))) (PackC-45ConfigC-45Types-githubPkgPrefixDir arg-1 e-2 e-5))) (else (PackC-45ConfigC-45Types-localPkgPrefixDir arg-1 e-2)))))))
(define PackC-45ConfigC-45Types-pkgPathDir (lambda (arg-1 arg-2) (LibrariesC-45UtilsC-45Path-C-47C-62 (PackC-45ConfigC-45Types-pkgPrefixDir arg-1 arg-2) (PackC-45ConfigC-45Types-idrisDir arg-1))))
(define PackC-45ConfigC-45Types-pkgLibDir (lambda (arg-1 arg-2) (LibrariesC-45UtilsC-45Path-C-47C-62 (PackC-45ConfigC-45Types-pkgPathDir arg-1 arg-2) "lib")))
(define PackC-45ConfigC-45Types-pkgDataDir (lambda (arg-1 arg-2) (LibrariesC-45UtilsC-45Path-C-47C-62 (PackC-45ConfigC-45Types-pkgPathDir arg-1 arg-2) "support")))
(define PackC-45ConfigC-45Types-patchesDir (lambda (arg-1) (LibrariesC-45UtilsC-45Path-C-47C-62 (PackC-45ConfigC-45Types-dbDir arg-1) "patches")))
(define PackC-45ConfigC-45Types-patchFile (lambda (arg-1 arg-2 arg-3) (LibrariesC-45UtilsC-45Path-C-47C-62 (LibrariesC-45UtilsC-45Path-C-47C-62 (LibrariesC-45UtilsC-45Path-C-47C-62 (PackC-45ConfigC-45Types-patchesDir arg-1) (let ((e-3 (vector-ref arg-1 1))) e-3)) arg-2) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_Path arg-3) (cons ".patch" '()))))))
(define PackC-45ConfigC-45Types-packagePrefixDir (lambda (arg-1 arg-2) (case (vector-ref arg-2 0) ((0) (let ((e-0 (vector-ref arg-2 1))) (let ((e-2 (vector-ref arg-2 3))) (PackC-45ConfigC-45Types-githubPkgPrefixDir arg-1 e-0 e-2)))) ((1) (PackC-45ConfigC-45Types-idrisPrefixDir arg-1)) ((2) (let ((e-8 (vector-ref arg-2 1))) (PackC-45ConfigC-45Types-localPkgPrefixDir arg-1 e-8))) ((3) (PackC-45ConfigC-45Types-idrisPrefixDir arg-1)) ((4) (PackC-45ConfigC-45Types-idrisPrefixDir arg-1)) ((5) (PackC-45ConfigC-45Types-idrisPrefixDir arg-1)) ((6) (PackC-45ConfigC-45Types-idrisPrefixDir arg-1)) ((7) (PackC-45ConfigC-45Types-idrisPrefixDir arg-1)) ((8) (PackC-45ConfigC-45Types-idrisPrefixDir arg-1)) (else (PackC-45ConfigC-45Types-idrisPrefixDir arg-1)))))
(define PackC-45ConfigC-45Types-packagePathDirs (lambda (arg-1) (let ((u--pth (PreludeC-45Types-fastConcat (DataC-45List-intersperse ":" (PreludeC-45Types-u--map_Functor_List (lambda (eta-0) (LibrariesC-45UtilsC-45Path-u--show_Show_Path (PackC-45ConfigC-45Types-pkgPathDir arg-1 eta-0))) (DataC-45SortedMap-toList (PackC-45ConfigC-45Types-allPackages arg-1))))))) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_Path (PackC-45ConfigC-45Types-idrisInstallDir arg-1)) (cons ":" (cons u--pth '())))))))
(define PackC-45ConfigC-45Types-packagePath (lambda (arg-1) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "IDRIS2_PACKAGE_PATH=\"" (cons (PackC-45ConfigC-45Types-packagePathDirs arg-1) (cons "\"" '()))))))
(define PackC-45ConfigC-45Types-packageLibDirs (lambda (arg-1) (let ((u--pth (PreludeC-45Types-fastConcat (DataC-45List-intersperse ":" (PreludeC-45Types-u--map_Functor_List (lambda (eta-0) (LibrariesC-45UtilsC-45Path-u--show_Show_Path (PackC-45ConfigC-45Types-pkgLibDir arg-1 eta-0))) (DataC-45SortedMap-toList (PackC-45ConfigC-45Types-allPackages arg-1))))))) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_Path (PackC-45ConfigC-45Types-idrisLibDir arg-1)) (cons ":" (cons u--pth '())))))))
(define PackC-45ConfigC-45Types-packageInstallPrefix (lambda (arg-1 arg-2) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "IDRIS2_PREFIX=\"" (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_Path (PackC-45ConfigC-45Types-packagePrefixDir arg-1 arg-2)) (cons "\"" '()))))))
(define PackC-45ConfigC-45Types-packageInstallDir (lambda (arg-1 arg-2) (let ((u--vers (let ((e-16 (vector-ref arg-1 14))) (let ((e-18 (vector-ref e-16 2))) e-18)))) (let ((u--dir (LibrariesC-45UtilsC-45Path-C-47C-62 (PackC-45ConfigC-45Types-packagePrefixDir arg-1 arg-2) (PackC-45ConfigC-45Types-idrisDir arg-1)))) (case (vector-ref arg-2 0) ((3) (LibrariesC-45UtilsC-45Path-C-47C-62 u--dir (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "base-" (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_PkgVersion u--vers) '()))))) ((4) (LibrariesC-45UtilsC-45Path-C-47C-62 u--dir (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "contrib-" (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_PkgVersion u--vers) '()))))) ((6) (LibrariesC-45UtilsC-45Path-C-47C-62 u--dir (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "linear-" (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_PkgVersion u--vers) '()))))) ((7) (LibrariesC-45UtilsC-45Path-C-47C-62 u--dir (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "network-" (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_PkgVersion u--vers) '()))))) ((8) (LibrariesC-45UtilsC-45Path-C-47C-62 u--dir (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "prelude-" (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_PkgVersion u--vers) '()))))) ((5) (LibrariesC-45UtilsC-45Path-C-47C-62 u--dir (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "idris2-" (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_PkgVersion u--vers) '()))))) ((9) (LibrariesC-45UtilsC-45Path-C-47C-62 u--dir (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "test-" (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_PkgVersion u--vers) '()))))) ((0) (let ((e-5 (vector-ref arg-2 6))) (let ((u--v (PreludeC-45Types-maybe (lambda () "0") (lambda () (lambda (eta-0) (IdrisC-45PackageC-45Types-u--show_Show_PkgVersion eta-0))) (let ((e-29 (vector-ref e-5 1))) e-29)))) (LibrariesC-45UtilsC-45Path-C-47C-62 u--dir (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons (let ((e-30 (vector-ref e-5 0))) e-30) (cons "-" (cons u--v '())))))))) ((1) (let ((e-7 (vector-ref arg-2 2))) (let ((u--v (PreludeC-45Types-maybe (lambda () "0") (lambda () (lambda (eta-0) (IdrisC-45PackageC-45Types-u--show_Show_PkgVersion eta-0))) (let ((e-1 (vector-ref e-7 1))) e-1)))) (LibrariesC-45UtilsC-45Path-C-47C-62 u--dir (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons (let ((e-0 (vector-ref e-7 0))) e-0) (cons "-" (cons u--v '())))))))) (else (let ((e-12 (vector-ref arg-2 5))) (let ((u--v (PreludeC-45Types-maybe (lambda () "0") (lambda () (lambda (eta-0) (IdrisC-45PackageC-45Types-u--show_Show_PkgVersion eta-0))) (let ((e-1 (vector-ref e-12 1))) e-1)))) (LibrariesC-45UtilsC-45Path-C-47C-62 u--dir (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons (let ((e-0 (vector-ref e-12 0))) e-0) (cons "-" (cons u--v '())))))))))))))
(define PackC-45ConfigC-45Types-packageExec (lambda (arg-1 arg-2 arg-3) (LibrariesC-45UtilsC-45Path-C-47C-62 (PackC-45ConfigC-45Types-packageBinDir arg-1 arg-2) arg-3)))
(define PackC-45ConfigC-45Types-packageDataDirs (lambda (arg-1) (let ((u--pth (PreludeC-45Types-fastConcat (DataC-45List-intersperse ":" (PreludeC-45Types-u--map_Functor_List (lambda (eta-0) (LibrariesC-45UtilsC-45Path-u--show_Show_Path (PackC-45ConfigC-45Types-pkgDataDir arg-1 eta-0))) (DataC-45SortedMap-toList (PackC-45ConfigC-45Types-allPackages arg-1))))))) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_Path (PackC-45ConfigC-45Types-idrisDataDir arg-1)) (cons ":" (cons u--pth '())))))))
(define PackC-45ConfigC-45Types-packageBinDir (lambda (arg-1 arg-2) (LibrariesC-45UtilsC-45Path-C-47C-62 (PackC-45ConfigC-45Types-packagePrefixDir arg-1 arg-2) "bin")))
(define PackC-45ConfigC-45Types-packToml (lambda (arg-0) (LibrariesC-45UtilsC-45Path-C-47C-62 (LibrariesC-45UtilsC-45Path-C-47C-62 arg-0 "user") "pack.toml")))
(define PackC-45ConfigC-45Types-packBinDir (lambda (arg-1) (LibrariesC-45UtilsC-45Path-C-47C-62 (let ((e-2 (vector-ref arg-1 0))) e-2) "bin")))
(define PackC-45ConfigC-45Types-mergeRight (lambda (ext-0 ext-1) (DataC-45SortedMap-mergeWith (lambda (_-8837) (lambda (u--v) u--v)) ext-0 ext-1)))
(define PackC-45ConfigC-45Types-localPkgPrefixDir (lambda (arg-1 arg-2) (LibrariesC-45UtilsC-45Path-C-47C-62 (LibrariesC-45UtilsC-45Path-C-47C-62 (PackC-45ConfigC-45Types-commitDir arg-1) "local") arg-2)))
(define PackC-45ConfigC-45Types-libPath (lambda (arg-1) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "IDRIS2_LIBS=\"" (cons (PackC-45ConfigC-45Types-packageLibDirs arg-1) (cons "\"" '()))))))
(define PackC-45ConfigC-45Types-ipkgPath (lambda (arg-1 arg-2 arg-3 arg-4) (LibrariesC-45UtilsC-45Path-C-47C-62 (LibrariesC-45UtilsC-45Path-C-47C-62 (LibrariesC-45UtilsC-45Path-C-47C-62 (PackC-45ConfigC-45Types-cacheDir arg-1) arg-2) arg-3) (LibrariesC-45UtilsC-45Path-u--show_Show_Path arg-4))))
(define PackC-45ConfigC-45Types-idrisPrefixDir (lambda (arg-1) (LibrariesC-45UtilsC-45Path-C-47C-62 (PackC-45ConfigC-45Types-commitDir arg-1) "idris2")))
(define PackC-45ConfigC-45Types-idrisLibDir (lambda (arg-1) (LibrariesC-45UtilsC-45Path-C-47C-62 (PackC-45ConfigC-45Types-idrisInstallDir arg-1) "lib")))
(define PackC-45ConfigC-45Types-idrisInstallDir (lambda (arg-1) (LibrariesC-45UtilsC-45Path-C-47C-62 (PackC-45ConfigC-45Types-idrisPrefixDir arg-1) (PackC-45ConfigC-45Types-idrisDir arg-1))))
(define PackC-45ConfigC-45Types-idrisExec (lambda (arg-1) (LibrariesC-45UtilsC-45Path-C-47C-62 (PackC-45ConfigC-45Types-idrisBinDir arg-1) "idris2")))
(define PackC-45ConfigC-45Types-idrisDir (lambda (arg-1) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "idris2-" (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_PkgVersion (let ((e-16 (vector-ref arg-1 14))) (let ((e-18 (vector-ref e-16 2))) e-18))) '())))))
(define PackC-45ConfigC-45Types-idrisDataDir (lambda (arg-1) (LibrariesC-45UtilsC-45Path-C-47C-62 (PackC-45ConfigC-45Types-idrisInstallDir arg-1) "support")))
(define PackC-45ConfigC-45Types-idrisBootVar (lambda (arg-1) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "IDRIS2_BOOT=\"" (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_Path (PackC-45ConfigC-45Types-idrisExec arg-1)) (cons "\"" '()))))))
(define PackC-45ConfigC-45Types-idrisBinDir (lambda (arg-1) (LibrariesC-45UtilsC-45Path-C-47C-62 (PackC-45ConfigC-45Types-idrisPrefixDir arg-1) "bin")))
(define PackC-45ConfigC-45Types-githubPkgPrefixDir (lambda (arg-1 arg-2 arg-3) (LibrariesC-45UtilsC-45Path-C-47C-62 (LibrariesC-45UtilsC-45Path-C-47C-62 (PackC-45ConfigC-45Types-commitDir arg-1) arg-2) arg-3)))
(define PackC-45ConfigC-45Types-dbFile (lambda (arg-1) (LibrariesC-45UtilsC-45Path-C-47C-62 (PackC-45ConfigC-45Types-dbDir arg-1) (LibrariesC-45UtilsC-45Path-C-60C-46C-62 (let ((e-3 (vector-ref arg-1 1))) e-3) "toml"))))
(define PackC-45ConfigC-45Types-dbDir_ (lambda (arg-0) (LibrariesC-45UtilsC-45Path-C-47C-62 arg-0 "db")))
(define PackC-45ConfigC-45Types-dbDir (lambda (ext-0) (PackC-45ConfigC-45Types-dbDir_ (let ((e-2 (vector-ref ext-0 0))) e-2))))
(define PackC-45ConfigC-45Types-dataPath (lambda (arg-1) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "IDRIS2_DATA=\"" (cons (PackC-45ConfigC-45Types-packageDataDirs arg-1) (cons "\"" '()))))))
(define PackC-45ConfigC-45Types-commitDir (lambda (arg-1) (LibrariesC-45UtilsC-45Path-C-47C-62 (LibrariesC-45UtilsC-45Path-C-47C-62 (let ((e-2 (vector-ref arg-1 0))) e-2) "install") (let ((e-16 (vector-ref arg-1 14))) (let ((e-1 (vector-ref e-16 1))) e-1)))))
(define PackC-45ConfigC-45Types-collectionIdrisExec (lambda (arg-1) (LibrariesC-45UtilsC-45Path-C-47C-62 (PackC-45ConfigC-45Types-collectionBinDir arg-1) "idris2")))
(define PackC-45ConfigC-45Types-collectionBinDir (lambda (arg-1) (LibrariesC-45UtilsC-45Path-C-47C-62 (LibrariesC-45UtilsC-45Path-C-47C-62 (let ((e-2 (vector-ref arg-1 0))) e-2) (let ((e-3 (vector-ref arg-1 1))) e-3)) "bin")))
(define PackC-45ConfigC-45Types-collectionAppExec (lambda (arg-1 arg-2) (LibrariesC-45UtilsC-45Path-C-47C-62 (PackC-45ConfigC-45Types-collectionBinDir arg-1) arg-2)))
(define PackC-45ConfigC-45Types-cacheDir (lambda (arg-1) (LibrariesC-45UtilsC-45Path-C-47C-62 (let ((e-2 (vector-ref arg-1 0))) e-2) ".cache")))
(define PackC-45ConfigC-45Types-buildEnv (lambda (arg-1) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons (PackC-45ConfigC-45Types-packagePath arg-1) (cons " " (cons (PackC-45ConfigC-45Types-libPath arg-1) (cons " " (cons (PackC-45ConfigC-45Types-dataPath arg-1) '()))))))))
(define PackC-45ConfigC-45Types-allPackages (lambda (arg-1) (let ((u--all (DataC-45Maybe-fromMaybe (lambda () (csegen-13)) (DataC-45SortedMap-lookup "all" (let ((e-12 (vector-ref arg-1 10))) e-12))))) (let ((u--loc (DataC-45Maybe-fromMaybe (lambda () (csegen-13)) (DataC-45SortedMap-lookup (let ((e-3 (vector-ref arg-1 1))) e-3) (let ((e-12 (vector-ref arg-1 10))) e-12))))) (PackC-45ConfigC-45Types-mergeRight (PackC-45ConfigC-45Types-mergeRight (let ((e-16 (vector-ref arg-1 14))) (let ((e-17 (vector-ref e-16 3))) e-17)) u--all) u--loc)))))
(define PackC-45ConfigC-45Env-updateDB_ (lambda (arg-1 arg-2) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (PackC-45CoreC-45IO-rmDir arg-1 (PackC-45ConfigC-45Types-dbDir_ arg-2)) (lambda () (PackC-45CoreC-45Git-withGit arg-1 (PackC-45ConfigC-45Types-tmpDir_ arg-2) (PackC-45CoreC-45Git-dbRepo) "main" (PackC-45CoreC-45IO-copyDir arg-1 (LibrariesC-45UtilsC-45Path-C-47C-62 (PackC-45ConfigC-45Types-tmpDir_ arg-2) "collections") (PackC-45ConfigC-45Types-dbDir_ arg-2)))))))
(define PackC-45ConfigC-45Env-updateDB (lambda (arg-2 arg-3) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9934)))) (PackC-45ConfigC-45Env-debug (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-2 arg-11999)))) arg-3 (lambda () "updating data collections")) (lambda () (PackC-45ConfigC-45Env-updateDB_ arg-2 (let ((e-2 (vector-ref arg-3 0))) e-2))))))
(define PackC-45ConfigC-45Env-packDir (lambda (arg-1) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (System-getEnv (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) "PACK_DIR") (lambda (_-0) (if (null? _-0) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (System-getEnv (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) "HOME") (lambda (_-1) (if (null? _-1) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) (vector 0 (vector 1 )))))) (let ((e-2 (unbox _-1))) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) e-6)) (LibrariesC-45UtilsC-45Path-C-47C-62 (LibrariesC-45UtilsC-45Path-parse e-2) ".pack")))))) (let ((e-2 (unbox _-0))) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) e-6)) (LibrariesC-45UtilsC-45Path-parse e-2))))))))
(define PackC-45ConfigC-45Env-log (lambda (arg-2 arg-3 arg-4 arg-5) (PreludeC-45Interfaces-when (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) (PackC-45CoreC-45Types-u--C-62C-61_Ord_LogLevel arg-4 (let ((e-14 (vector-ref arg-3 12))) e-14)) (lambda () (PreludeC-45IO-putStrLn arg-2 (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "[ " (cons (PackC-45CoreC-45Types-u--interpolate_Interpolation_LogLevel arg-4) (cons " ] " (cons (arg-5) '()))))))))))
(define PackC-45ConfigC-45Env-loadDB (lambda (arg-2 arg-3) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9934)))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) (PackC-45CoreC-45IO-missing (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-2 arg-11999)))) (PackC-45ConfigC-45Types-dbDir arg-3)) (lambda (bind-0) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) bind-0 (lambda () (PackC-45ConfigC-45Env-updateDB arg-2 arg-3))))) (lambda () (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9934)))) (PackC-45ConfigC-45Env-debug (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-2 arg-11999)))) arg-3 (lambda () "reading package collection")) (lambda () (PackC-45CoreC-45TOML-readFromTOML arg-2 (PackC-45ConfigC-45Types-dbFile arg-3) (lambda (eta-0) (PackC-45DatabaseC-45TOML-u--fromTOML_FromTOML_DB eta-0)))))))))
(define PackC-45ConfigC-45Env-env (lambda (arg-2 arg-3) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) (PackC-45ConfigC-45Env-loadDB arg-2 arg-3) (lambda (u--db) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) (let ((e-2 (vector-ref arg-3 0))) (let ((e-3 (vector-ref arg-3 1))) (let ((e-4 (vector-ref arg-3 2))) (let ((e-5 (vector-ref arg-3 3))) (let ((e-6 (vector-ref arg-3 4))) (let ((e-7 (vector-ref arg-3 5))) (let ((e-8 (vector-ref arg-3 6))) (let ((e-9 (vector-ref arg-3 7))) (let ((e-10 (vector-ref arg-3 8))) (let ((e-11 (vector-ref arg-3 9))) (let ((e-12 (vector-ref arg-3 10))) (let ((e-13 (vector-ref arg-3 11))) (let ((e-14 (vector-ref arg-3 12))) (let ((e-15 (vector-ref arg-3 13))) (vector e-2 e-3 e-4 e-5 e-6 e-7 e-8 e-9 e-10 e-11 e-12 e-13 e-14 e-15 u--db))))))))))))))))))))
(define PackC-45ConfigC-45Env-defaultColl (lambda (arg-1 arg-2) (PreludeC-45Interfaces-C-62C-62 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-missing (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-11999) (ControlC-45MonadC-45ErrorC-45Either-u--liftIO_HasIO_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 arg-1 arg-11999)))) (PackC-45ConfigC-45Types-dbDir_ arg-2)) (lambda (bind-0) (PreludeC-45Interfaces-when (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) bind-0 (lambda () (PackC-45ConfigC-45Env-updateDB_ arg-1 arg-2))))) (lambda () (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) eta-2 eta-3))))) (lambda (eta-0) (PreludeC-45TypesC-45List-filter (lambda (arg-0) (PreludeC-45EqOrd-u--C-47C-61_Eq_String "HEAD.toml" arg-0)) eta-0)) (PackC-45CoreC-45IO-tomlFiles arg-1 (PackC-45ConfigC-45Types-dbDir_ arg-2))) (lambda (_-0) (if (null? _-0) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) e-5)) "HEAD") (let ((e-1 (car _-0))) (let ((e-2 (cdr _-0))) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-4 (car arg-1))) (let ((e-7 (vector-ref e-4 0))) e-7)) (DataC-45Maybe-fromMaybe (lambda () "HEAD") (LibrariesC-45UtilsC-45Path-fileStem (PreludeC-45Types-u--foldl_Foldable_List (lambda (eta-0) (lambda (eta-1) (PreludeC-45EqOrd-u--max_Ord_String eta-0 eta-1))) e-1 e-2)))))))))))))
(define PackC-45ConfigC-45Env-debug (lambda (arg-2 arg-3 ext-0) (PackC-45ConfigC-45Env-log arg-2 arg-3 0 ext-0)))
(define PackC-45DatabaseC-45TOML-u--fromTOML_FromTOML_DB (lambda (arg-0) (let ((sc0 (let ((sc1 (let ((sc2 (PackC-45CoreC-45TOML-valAtC-39 (lambda (arg-1) (PackC-45CoreC-45TOML-u--fromTOML_FromTOML_URL arg-1)) "idris2.url" (box (PackC-45DatabaseC-45TOML-idrisRepo)) arg-0))) (case (vector-ref sc2 0) ((1) (let ((e-8 (vector-ref sc2 1))) (let ((sc3 (PackC-45CoreC-45TOML-valAtC-39 (lambda (arg-1) (PackC-45CoreC-45TOML-u--fromTOML_FromTOML_Commit arg-1)) "idris2.commit" '() arg-0))) (case (vector-ref sc3 0) ((1) (let ((e-9 (vector-ref sc3 1))) (vector 1 (lambda (eta-2) (lambda (eta-3) (vector e-8 e-9 eta-2 eta-3)))))) (else (let ((e-11 (vector-ref sc3 1))) (vector 0 e-11))))))) (else (let ((e-11 (vector-ref sc2 1))) (vector 0 e-11))))))) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 (PackC-45CoreC-45TOML-valAtC-39 (lambda (arg-1) (PackC-45CoreC-45TOML-u--fromTOML_FromTOML_PkgVersion arg-1)) "idris2.version" '() arg-0))) (case (vector-ref sc2 0) ((1) (let ((e-8 (vector-ref sc2 1))) (vector 1 (e-5 e-8)))) (else (let ((e-11 (vector-ref sc2 1))) (vector 0 e-11))))))))))) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 (PackC-45CoreC-45TOML-valAtC-39 (lambda (arg-1) (PackC-45CoreC-45TOML-u--fromTOML_FromTOML_C-40C-40SortedMapC-32C-36kC-41C-32C-36vC-41 (cons (csegen-12) (lambda (u--k) (PackC-45CoreC-45TOML-u--fromKey_TOMLKey_PkgName u--k))) (lambda (u--val) (PackC-45DatabaseC-45TOML-package u--val)) arg-1)) "db" '() arg-0))) (case (vector-ref sc1 0) ((1) (let ((e-8 (vector-ref sc1 1))) (vector 1 (e-5 e-8)))) (else (let ((e-11 (vector-ref sc1 1))) (vector 0 e-11)))))))))))
(define PackC-45DatabaseC-45TOML-package (lambda (arg-0) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (PackC-45CoreC-45TOML-valAtC-39 (lambda (arg-1) (PackC-45CoreC-45TOML-u--fromTOML_FromTOML_String arg-1)) "type" '() arg-0) (lambda (lcase-0) (cond ((equal? lcase-0 "github") (PackC-45DatabaseC-45TOML-github arg-0)) ((equal? lcase-0 "local") (PackC-45DatabaseC-45TOML-local arg-0))(else (vector 0 (vector 1 (cons "type" '()) "Package Type"))))))))
(define PackC-45DatabaseC-45TOML-local (lambda (arg-0) (let ((sc0 (let ((sc1 (PackC-45CoreC-45TOML-valAtC-39 (lambda (arg-1) (PackC-45CoreC-45TOML-u--fromTOML_FromTOML_Path arg-1)) "path" '() arg-0))) (case (vector-ref sc1 0) ((1) (let ((e-8 (vector-ref sc1 1))) (let ((sc2 (PackC-45CoreC-45TOML-valAtC-39 (lambda (arg-1) (PackC-45CoreC-45TOML-u--fromTOML_FromTOML_Path arg-1)) "ipkg" '() arg-0))) (case (vector-ref sc2 0) ((1) (let ((e-9 (vector-ref sc2 1))) (vector 1 (lambda (eta-2) (vector 1 e-8 e-9 eta-2))))) (else (let ((e-11 (vector-ref sc2 1))) (vector 0 e-11))))))) (else (let ((e-11 (vector-ref sc1 1))) (vector 0 e-11))))))) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 (PackC-45CoreC-45TOML-valAtC-39 (lambda (arg-1) (PackC-45CoreC-45TOML-u--fromTOML_FromTOML_Bool arg-1)) "packagePath" (box 0) arg-0))) (case (vector-ref sc1 0) ((1) (let ((e-8 (vector-ref sc1 1))) (vector 1 (e-5 e-8)))) (else (let ((e-11 (vector-ref sc1 1))) (vector 0 e-11)))))))))))
(define PackC-45DatabaseC-45TOML-idrisRepo(blodwen-lazy (lambda () "https://github.com/idris-lang/Idris2.git")))
(define PackC-45DatabaseC-45TOML-github (lambda (arg-0) (let ((sc0 (let ((sc1 (let ((sc2 (PackC-45CoreC-45TOML-valAtC-39 (lambda (arg-1) (PackC-45CoreC-45TOML-u--fromTOML_FromTOML_URL arg-1)) "url" '() arg-0))) (case (vector-ref sc2 0) ((1) (let ((e-8 (vector-ref sc2 1))) (let ((sc3 (PackC-45CoreC-45TOML-valAtC-39 (lambda (arg-1) (PackC-45CoreC-45TOML-u--fromTOML_FromTOML_Commit arg-1)) "commit" '() arg-0))) (case (vector-ref sc3 0) ((1) (let ((e-9 (vector-ref sc3 1))) (vector 1 (lambda (eta-2) (lambda (eta-3) (vector 0 e-8 e-9 eta-2 eta-3)))))) (else (let ((e-11 (vector-ref sc3 1))) (vector 0 e-11))))))) (else (let ((e-11 (vector-ref sc2 1))) (vector 0 e-11))))))) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 (PackC-45CoreC-45TOML-valAtC-39 (lambda (arg-1) (PackC-45CoreC-45TOML-u--fromTOML_FromTOML_Path arg-1)) "ipkg" '() arg-0))) (case (vector-ref sc2 0) ((1) (let ((e-8 (vector-ref sc2 1))) (vector 1 (e-5 e-8)))) (else (let ((e-11 (vector-ref sc2 1))) (vector 0 e-11))))))))))) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 (PackC-45CoreC-45TOML-valAtC-39 (lambda (arg-1) (PackC-45CoreC-45TOML-u--fromTOML_FromTOML_Bool arg-1)) "packagePath" (box 0) arg-0))) (case (vector-ref sc1 0) ((1) (let ((e-8 (vector-ref sc1 1))) (vector 1 (e-5 e-8)))) (else (let ((e-11 (vector-ref sc1 1))) (vector 0 e-11)))))))))))
(define PackC-45CoreC-45TOML-n--5119-6861-u--go (lambda (arg-1 arg-2 arg-3 arg-4 arg-5) (if (null? arg-4) (arg-3 arg-5) (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) (case (vector-ref arg-5 0) ((5) (let ((e-4 (vector-ref arg-5 1))) (let ((sc2 (DataC-45SortedMap-lookup e-2 e-4))) (if (null? sc2) (if (null? arg-1) (vector 0 (vector 0 (cons e-2 '()))) (let ((e-5 (unbox arg-1))) (vector 1 e-5))) (let ((e-5 (unbox sc2))) (PackC-45CoreC-45Types-prefixKey e-2 (PackC-45CoreC-45TOML-n--5119-6861-u--go arg-1 arg-2 arg-3 e-3 e-5)))))))(else (vector 0 (vector 1 '() "Table")))))))))
(define PackC-45CoreC-45TOML-u--fromTOML_FromTOML_URL (lambda (ext-0) (PackC-45CoreC-45TOML-tmap (lambda (u--val) (PackC-45CoreC-45TOML-u--fromTOML_FromTOML_String u--val)) (lambda (eta-0) eta-0) ext-0)))
(define PackC-45CoreC-45TOML-u--fromTOML_FromTOML_String (lambda (arg-0) (case (vector-ref arg-0 0) ((0) (let ((e-0 (vector-ref arg-0 1))) (vector 1 e-0)))(else (vector 0 (vector 1 '() "String"))))))
(define PackC-45CoreC-45TOML-u--fromTOML_FromTOML_PkgVersion (lambda (ext-0) (PackC-45CoreC-45TOML-trefine (lambda (u--val) (PackC-45CoreC-45TOML-u--fromTOML_FromTOML_String u--val)) (lambda (eta-0) (PackC-45CoreC-45TOML-readVersion eta-0)) ext-0)))
(define PackC-45CoreC-45TOML-u--fromTOML_FromTOML_Path (lambda (ext-0) (PackC-45CoreC-45TOML-tmap (lambda (u--val) (PackC-45CoreC-45TOML-u--fromTOML_FromTOML_String u--val)) (lambda (eta-0) (LibrariesC-45UtilsC-45Path-parse eta-0)) ext-0)))
(define PackC-45CoreC-45TOML-u--fromTOML_FromTOML_Commit (lambda (ext-0) (PackC-45CoreC-45TOML-tmap (lambda (u--val) (PackC-45CoreC-45TOML-u--fromTOML_FromTOML_String u--val)) (lambda (eta-0) eta-0) ext-0)))
(define PackC-45CoreC-45TOML-u--fromTOML_FromTOML_Bool (lambda (arg-0) (case (vector-ref arg-0 0) ((3) (let ((e-0 (vector-ref arg-0 1))) (vector 1 e-0)))(else (vector 0 (vector 1 '() "String"))))))
(define PackC-45CoreC-45TOML-u--fromTOML_FromTOML_C-40C-40SortedMapC-32C-36kC-41C-32C-36vC-41 (lambda (arg-2 arg-3 arg-4) (case (vector-ref arg-4 0) ((5) (let ((e-0 (vector-ref arg-4 1))) (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (case (vector-ref eta-3 0) ((0) (let ((e-2 (vector-ref eta-3 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref eta-3 1))) (vector 1 (eta-2 e-5))))))))) (lambda (eta-0) (DataC-45SortedMap-fromList (let ((e-1 (car arg-2))) e-1) eta-0)) (PreludeC-45Types-u--traverse_Traversable_List (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (case (vector-ref arg-8737 0) ((0) (let ((e-2 (vector-ref arg-8737 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref arg-8737 1))) (vector 1 (u--func e-5))))))))) (lambda (u--a) (lambda (arg-9440) (vector 1 arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (case (vector-ref arg-9446 0) ((0) (let ((e-2 (vector-ref arg-9446 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref arg-9446 1))) (case (vector-ref arg-9453 0) ((1) (let ((e-8 (vector-ref arg-9453 1))) (vector 1 (e-5 e-8)))) (else (let ((e-11 (vector-ref arg-9453 1))) (vector 0 e-11)))))))))))) (lambda (eta-0) (PackC-45CoreC-45TOML-keyVal arg-2 arg-3 eta-0)) (DataC-45SortedMap-toList e-0)))))(else (vector 0 (vector 1 '() "Table"))))))
(define PackC-45CoreC-45TOML-u--fromKey_TOMLKey_PkgName (lambda (ext-0) (vector 1 ext-0)))
(define PackC-45CoreC-45TOML-valAtC-39 (lambda (arg-1 arg-2 arg-3 ext-0) (PackC-45CoreC-45TOML-n--5119-6861-u--go arg-3 arg-2 arg-1 (DataC-45List1-forget (DataC-45String-split (csegen-467) arg-2)) ext-0)))
(define PackC-45CoreC-45TOML-trefine (lambda (arg-2 arg-3 arg-4) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (arg-2 arg-4) arg-3)))
(define PackC-45CoreC-45TOML-tmap (lambda (arg-2 arg-3 ext-0) (let ((sc0 (arg-2 ext-0))) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (vector 1 (arg-3 e-5))))))))
(define PackC-45CoreC-45TOML-readVersion (lambda (arg-0) (let ((sc0 (DataC-45List1-u--traverse_Traversable_List1 (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (PreludeC-45Types-u--map_Functor_Maybe u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (box arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (PreludeC-45Types-u--C-60C-42C-62_Applicative_Maybe arg-9446 arg-9453)))))) (lambda (eta-0) (DataC-45String-parsePositive (vector (lambda (arg-5756) (lambda (arg-5759) (+ arg-5756 arg-5759))) (lambda (arg-5766) (lambda (arg-5769) (* arg-5766 arg-5769))) (lambda (arg-5776) (PreludeC-45Types-prim__integerToNat arg-5776))) eta-0)) (DataC-45String-split (csegen-467) arg-0)))) (if (null? sc0) (vector 0 (vector 1 '() "Package Version")) (let ((e-1 (unbox sc0))) (vector 1 e-1))))))
(define PackC-45CoreC-45TOML-readTOML (lambda (arg-1 arg-2) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) e-1) (PackC-45CoreC-45IO-read arg-1 arg-2) (lambda (u--str) (let ((sc0 (LanguageC-45TOML-parseTOML u--str))) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 1))) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) e-6)) (vector 5 e-2)))) (else (let ((e-5 (vector-ref sc0 1))) (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-6 1))) ((e-8 'erased) (vector 0 (vector 23 arg-2 (LanguageC-45TOML-u--show_Show_Error e-5)))))))))))))))
(define PackC-45CoreC-45TOML-readFromTOML (lambda (arg-2 arg-3 arg-4) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) (PackC-45CoreC-45TOML-readTOML arg-2 arg-3) (lambda (u--v) (ControlC-45MonadC-45ErrorC-45Interface-liftEither (vector (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (ControlC-45MonadC-45ErrorC-45Either-u--map_Functor_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) e-8))) u--func arg-8737))))) (lambda (u--a) (lambda (arg-9440) (ControlC-45MonadC-45ErrorC-45Either-u--pure_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (ControlC-45MonadC-45ErrorC-45Either-u--C-60C-42C-62_Applicative_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) e-5)) arg-9446 arg-9453)))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9920) (lambda (arg-9923) (ControlC-45MonadC-45ErrorC-45Either-u--C-62C-62C-61_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9920 arg-9923))))) (lambda (u--a) (lambda (arg-9934) (ControlC-45MonadC-45ErrorC-45Either-u--join_Monad_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-9934)))) (lambda (u--a) (lambda (arg-2204) (ControlC-45MonadC-45ErrorC-45Interface-u--throwError_MonadError_C-36e_C-40C-40EitherTC-32C-36eC-41C-32C-36mC-41 (let ((e-1 (car arg-2))) e-1) arg-2204))) (lambda (u--a) (lambda (arg-2210) (lambda (arg-2213) (ControlC-45MonadC-45ErrorC-45Either-catchE (let ((e-1 (car arg-2))) e-1) arg-2210 arg-2213))))) (let ((sc0 (arg-4 u--v))) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 (vector 22 arg-3 e-2)))) (else (let ((e-5 (vector-ref sc0 1))) (vector 1 e-5))))))))))
(define PackC-45CoreC-45TOML-keyVal (lambda (arg-2 arg-3 arg-4) (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) (PackC-45CoreC-45Types-prefixKey e-2 (let ((e-4 (cdr arg-2))) (let ((sc2 (e-4 e-2))) (case (vector-ref sc2 0) ((1) (let ((e-8 (vector-ref sc2 1))) (let ((sc3 (arg-3 e-3))) (case (vector-ref sc3 0) ((1) (let ((e-9 (vector-ref sc3 1))) (vector 1 (cons e-8 e-9)))) (else (let ((e-11 (vector-ref sc3 1))) (vector 0 e-11))))))) (else (let ((e-11 (vector-ref sc2 1))) (vector 0 e-11)))))))))))
(define LanguageC-45TOML-case--tableSetWithParts-5794 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (if (null? arg-5) (vector 1 (csegen-487)) (let ((e-2 (unbox arg-5))) (case (vector-ref e-2 0) ((5) (let ((e-3 (vector-ref e-2 1))) (vector 1 e-3)))(else (vector 0 (vector 0 arg-0 e-2))))))))
(define LanguageC-45TOML-n--4182-5907-u--loop (lambda (arg-0 arg-1 arg-2) (if (null? arg-2) (vector 1 arg-1) (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (let ((e-6 (car e-2))) (let ((e-7 (cdr e-2))) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (LanguageC-45TOML-cvalToVal e-7) (lambda (u--vC-39) (let ((u--parts (LanguageC-45TOML-keyParts e-6))) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (LanguageC-45TOML-tableSetWithParts arg-1 u--parts u--vC-39) (lambda (u--tC-39) (LanguageC-45TOML-n--4182-5907-u--loop arg-0 u--tC-39 e-3)))))))))))))
(define LanguageC-45TOML-n--3802-5515-u--loop (lambda (arg-0 arg-1 arg-2) (if (null? arg-2) '() (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (case (vector-ref e-2 0) ((1) (let ((e-4 (vector-ref e-2 1))) (LanguageC-45TOML-n--3802-5515-u--loop arg-0 (vector 1 e-4) e-3))) ((2) (let ((e-5 (vector-ref e-2 1))) (LanguageC-45TOML-n--3802-5515-u--loop arg-0 (vector 2 e-5) e-3)))(else (let ((sc1 (LanguageC-45TOML-takeWhileJust (lambda (eta-0) (LanguageC-45TOML-toPair eta-0)) arg-2))) (let ((e-5 (car sc1))) (let ((e-4 (cdr sc1))) (cons (cons arg-1 e-5) (LanguageC-45TOML-n--3802-5515-u--loop arg-0 arg-1 e-4))))))))))))
(define LanguageC-45TOML-u--show_Show_Error (lambda (arg-0) (case (vector-ref arg-0 0) ((0) (let ((e-0 (vector-ref arg-0 1))) (string-append "Dotted key part `" (string-append (PreludeC-45Show-u--show_Show_String e-0) "`is not a table")))) ((1) "Lexer error") ((2) (let ((e-2 (vector-ref arg-0 1))) (string-append "Parse error: " (PreludeC-45Show-u--show_Show_C-40ListC-32C-36aC-41 (cons (lambda (u--x) (PreludeC-45Show-u--show_Show_String u--x)) (lambda (u--d) (lambda (u--x) (PreludeC-45Show-u--showPrec_Show_String u--d u--x)))) e-2)))) (else "Unimplemented feature"))))
(define LanguageC-45TOML-u--C-61C-61_Eq_CKey (lambda (arg-0 arg-1) (DataC-45List1-u--C-61C-61_Eq_C-40List1C-32C-36aC-41 (csegen-206) (LanguageC-45TOML-keyParts arg-0) (LanguageC-45TOML-keyParts arg-1))))
(define LanguageC-45TOML-toPair (lambda (arg-0) (case (vector-ref arg-0 0) ((0) (let ((e-0 (vector-ref arg-0 1))) (let ((e-1 (vector-ref arg-0 2))) (box (cons e-0 e-1))))) ((1) '()) (else '()))))
(define LanguageC-45TOML-takeWhileJust (lambda (arg-2 arg-3) (if (null? arg-3) (cons '() '()) (let ((e-2 (car arg-3))) (let ((e-3 (cdr arg-3))) (let ((sc1 (arg-2 e-2))) (if (null? sc1) (cons '() (cons e-2 e-3)) (let ((e-4 (unbox sc1))) (let ((sc2 (LanguageC-45TOML-takeWhileJust arg-2 e-3))) (let ((e-6 (car sc2))) (let ((e-5 (cdr sc2))) (cons (cons e-4 e-6) e-5))))))))))))
(define LanguageC-45TOML-tableSetWithParts (lambda (arg-0 arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-2 (cdr arg-1))) (if (null? e-2) (vector 1 (DataC-45SortedMap-insert e-1 arg-2 arg-0)) (let ((e-5 (car e-2))) (let ((e-6 (cdr e-2))) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (LanguageC-45TOML-case--tableSetWithParts-5794 e-1 e-5 e-6 arg-2 arg-0 (DataC-45SortedMap-lookup e-1 arg-0)) (lambda (u--inner) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (LanguageC-45TOML-tableSetWithParts u--inner (cons e-5 e-6) arg-2) (lambda (u--innerC-39) (vector 1 (DataC-45SortedMap-insert e-1 (vector 5 u--innerC-39) arg-0)))))))))))))
(define LanguageC-45TOML-tableFromKVs (lambda (arg-0) (LanguageC-45TOML-n--4182-5907-u--loop arg-0 (csegen-487) arg-0)))
(define LanguageC-45TOML-sections (lambda (arg-0) (LanguageC-45TOML-n--3802-5515-u--loop arg-0 (vector 0 ) arg-0)))
(define LanguageC-45TOML-parseTOML (lambda (arg-0) (let ((sc0 (LanguageC-45TOMLC-45Lexer-lexTOML arg-0))) (if (null? sc0) (vector 0 (vector 1 )) (let ((e-1 (unbox sc0))) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (let ((sc1 (LanguageC-45TOMLC-45Parser-parseItems e-1))) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 (vector 2 e-2)))) (else (let ((e-5 (vector-ref sc1 1))) (vector 1 e-5))))) (lambda (u--items) (let ((u--sects (LanguageC-45TOML-sections u--items))) (LanguageC-45TOML-extendFile (csegen-487) u--sects)))))))))
(define LanguageC-45TOML-keyParts (lambda (arg-0) (case (vector-ref arg-0 0) ((0) (let ((e-0 (vector-ref arg-0 1))) (cons (LanguageC-45TOML-keyAtomStr e-0) '()))) (else (let ((e-1 (vector-ref arg-0 1))) (DataC-45List1-u--map_Functor_List1 (lambda (eta-0) (LanguageC-45TOML-keyAtomStr eta-0)) e-1))))))
(define LanguageC-45TOML-keyAtomStr (lambda (arg-0) (case (vector-ref arg-0 0) ((0) (let ((e-0 (vector-ref arg-0 1))) e-0)) (else (let ((e-1 (vector-ref arg-0 1))) e-1)))))
(define LanguageC-45TOML-extendFile (lambda (arg-0 arg-1) (if (null? arg-1) (vector 1 arg-0) (let ((e-2 (car arg-1))) (let ((e-3 (cdr arg-1))) (let ((e-6 (car e-2))) (let ((e-7 (cdr e-2))) (case (vector-ref e-6 0) ((0) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (LanguageC-45TOML-tableFromKVs e-7) (lambda (u--tab) (LanguageC-45TOML-extendFile (DataC-45SortedMap-mergeLeft u--tab arg-0) e-3)))) ((1) (let ((e-8 (vector-ref e-6 1))) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (LanguageC-45TOML-tableFromKVs e-7) (lambda (u--tab) (let ((u--kParts (LanguageC-45TOML-keyParts e-8))) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (LanguageC-45TOML-tableSetWithParts arg-0 u--kParts (vector 5 u--tab)) (lambda (u--fileC-39) (LanguageC-45TOML-extendFile u--fileC-39 e-3)))))))) (else (let ((e-9 (vector-ref e-6 1))) (let ((u--rest (cons (cons (vector 2 e-9) e-7) e-3))) (let ((sc3 (DataC-45List-partition (lambda (lamc-0) (let ((e-5 (car lamc-0))) (case (vector-ref e-5 0) ((2) (let ((e-0 (vector-ref e-5 1))) (LanguageC-45TOML-u--C-61C-61_Eq_CKey e-9 e-0)))(else 0)))) u--rest))) (let ((e-5 (car sc3))) (let ((e-4 (cdr sc3))) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (PreludeC-45Types-u--traverse_Traversable_List (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (case (vector-ref arg-8737 0) ((0) (let ((e-8 (vector-ref arg-8737 1))) (vector 0 e-8))) (else (let ((e-8 (vector-ref arg-8737 1))) (vector 1 (u--func e-8))))))))) (lambda (u--a) (lambda (arg-9440) (vector 1 arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (case (vector-ref arg-9446 0) ((0) (let ((e-8 (vector-ref arg-9446 1))) (vector 0 e-8))) (else (let ((e-8 (vector-ref arg-9446 1))) (case (vector-ref arg-9453 0) ((1) (let ((e-10 (vector-ref arg-9453 1))) (vector 1 (e-8 e-10)))) (else (let ((e-11 (vector-ref arg-9453 1))) (vector 0 e-11)))))))))))) (lambda (eta-0) (let ((sc4 (LanguageC-45TOML-tableFromKVs eta-0))) (case (vector-ref sc4 0) ((0) (let ((e-8 (vector-ref sc4 1))) (vector 0 e-8))) (else (let ((e-8 (vector-ref sc4 1))) (vector 1 (vector 5 e-8))))))) (PreludeC-45Types-u--map_Functor_List (lambda (eta-0) (Builtin-snd eta-0)) e-5)) (lambda (u--arrayC-39) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (LanguageC-45TOML-tableSetWithParts arg-0 (LanguageC-45TOML-keyParts e-9) (vector 4 u--arrayC-39)) (lambda (u--fileC-39) (LanguageC-45TOML-extendFile u--fileC-39 e-4)))))))))))))))))))
(define LanguageC-45TOML-cvalToVal (lambda (arg-0) (case (vector-ref arg-0 0) ((0) (let ((e-0 (vector-ref arg-0 1))) (vector 1 (vector 0 e-0)))) ((1) (let ((e-1 (vector-ref arg-0 1))) (vector 1 (vector 1 e-1)))) ((2) (let ((e-2 (vector-ref arg-0 1))) (vector 1 (vector 2 e-2)))) ((3) (let ((e-3 (vector-ref arg-0 1))) (vector 1 (vector 3 e-3)))) ((4) (let ((e-4 (vector-ref arg-0 1))) (let ((sc1 (PreludeC-45Interfaces-for (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8737) (case (vector-ref arg-8737 0) ((0) (let ((e-2 (vector-ref arg-8737 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref arg-8737 1))) (vector 1 (u--func e-5))))))))) (lambda (u--a) (lambda (arg-9440) (vector 1 arg-9440))) (lambda (u--b) (lambda (u--a) (lambda (arg-9446) (lambda (arg-9453) (case (vector-ref arg-9446 0) ((0) (let ((e-2 (vector-ref arg-9446 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref arg-9446 1))) (case (vector-ref arg-9453 0) ((1) (let ((e-8 (vector-ref arg-9453 1))) (vector 1 (e-5 e-8)))) (else (let ((e-11 (vector-ref arg-9453 1))) (vector 0 e-11)))))))))))) (csegen-89) e-4 (lambda (eta-0) (LanguageC-45TOML-cvalToVal eta-0))))) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (vector 1 (vector 4 e-5)))))))) (else (let ((e-5 (vector-ref arg-0 1))) (let ((sc1 (LanguageC-45TOML-tableFromKVs e-5))) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc1 1))) (vector 1 (vector 5 e-6)))))))))))
(define LanguageC-45TOMLC-45Parser-case--parseItems-9834 (lambda (arg-0 arg-1) (case (vector-ref arg-1 0) ((1) (let ((e-2 (vector-ref arg-1 1))) (if (null? e-2) (vector 0 (cons "unconsumed input" '())) (let ((e-8 (car e-2))) (let ((e-9 (cdr e-2))) (if (null? e-9) (vector 1 e-8) (vector 0 (cons "unconsumed input" '())))))))) (else (let ((e-5 (vector-ref arg-1 1))) (vector 0 (PreludeC-45Basics-flip (lambda (eta-0) (lambda (eta-1) (PreludeC-45Types-u--map_Functor_List eta-0 eta-1))) (DataC-45List1-forget e-5) (lambda (lamc-0) (let ((e-1 (car lamc-0))) (let ((e-2 (cdr lamc-0))) (if (null? e-2) e-1 (let ((e-3 (unbox e-2))) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons (PreludeC-45Show-u--show_Show_Int (let ((e-0 (vector-ref e-3 0))) e-0)) (cons ":" (cons (PreludeC-45Show-u--show_Show_Int (let ((e-7 (vector-ref e-3 1))) e-7)) (cons "--" (cons (PreludeC-45Show-u--show_Show_Int (let ((e-6 (vector-ref e-3 2))) e-6)) (cons ":" (cons (PreludeC-45Show-u--show_Show_Int (let ((e-4 (vector-ref e-3 3))) e-4)) (cons ": " (cons e-1 '()))))))))))))))))))))))
(define LanguageC-45TOMLC-45Parser-n--3925-9311-u--keyAtom(blodwen-lazy (lambda () (vector 12 1 1 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 (lambda (eta-0) (vector 0 eta-0)) (LanguageC-45TOMLC-45Parser-bare)) (lambda () (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 (lambda (eta-0) (vector 1 eta-0)) (LanguageC-45TOMLC-45Parser-fromEither 1 (vector 1 "string key" (lambda (eta-0) (LanguageC-45TOMLC-45Tokens-getKeyString eta-0))))))))))
(define LanguageC-45TOMLC-45Parser-value(blodwen-lazy (lambda () (vector 12 1 1 (LanguageC-45TOMLC-45Parser-string) (lambda () (vector 12 1 1 (LanguageC-45TOMLC-45Parser-boolean) (lambda () (vector 12 1 1 (LanguageC-45TOMLC-45Parser-integer) (lambda () (vector 12 1 1 (LanguageC-45TOMLC-45Parser-float) (lambda () (vector 12 1 1 (LanguageC-45TOMLC-45Parser-array) (lambda () (LanguageC-45TOMLC-45Parser-inlineTable))))))))))))))
(define LanguageC-45TOMLC-45Parser-tableHeader(blodwen-lazy (lambda () (vector 10 1 (LanguageC-45TOMLC-45Parser-punct (vector 4 0)) (lambda () (vector 8 1 (LanguageC-45TOMLC-45Parser-key) (lambda () (lambda (u--k) (vector 11 0 1 (vector 6 ) (vector 10 0 (LanguageC-45TOMLC-45Parser-punct (vector 4 1)) (lambda () (vector 11 0 0 (LanguageC-45TOMLC-45Parser-newlines) (vector 0 (vector 1 u--k))))))))))))))
(define LanguageC-45TOMLC-45Parser-tableArrayHeader(blodwen-lazy (lambda () (vector 10 1 (LanguageC-45TOMLC-45Parser-punct (vector 4 0)) (lambda () (vector 10 1 (LanguageC-45TOMLC-45Parser-punct (vector 4 0)) (lambda () (vector 11 0 1 (vector 6 ) (vector 8 1 (LanguageC-45TOMLC-45Parser-key) (lambda () (lambda (u--k) (vector 10 1 (LanguageC-45TOMLC-45Parser-punct (vector 4 1)) (lambda () (vector 10 0 (LanguageC-45TOMLC-45Parser-punct (vector 4 1)) (lambda () (vector 11 0 0 (LanguageC-45TOMLC-45Parser-newlines) (vector 0 (vector 2 u--k))))))))))))))))))
(define LanguageC-45TOMLC-45Parser-string(blodwen-lazy (lambda () (PreludeC-45Interfaces-C-60C-36C-62 (csegen-514) (lambda (eta-0) (vector 0 eta-0)) (LanguageC-45TOMLC-45Parser-fromEither 1 (vector 1 "string" (lambda (eta-0) (LanguageC-45TOMLC-45Tokens-getString eta-0))))))))
(define LanguageC-45TOMLC-45Parser-punct (lambda (arg-1) (TextC-45Parser-match (csegen-519) (csegen-522) (vector 4 arg-1))))
(define LanguageC-45TOMLC-45Parser-parseItems (lambda (arg-0) (LanguageC-45TOMLC-45Parser-case--parseItems-9834 arg-0 (TextC-45ParserC-45Core-parse 0 (LanguageC-45TOMLC-45Parser-items) (PreludeC-45TypesC-45List-filter (lambda (eta-0) (let ((sc0 (LanguageC-45TOMLC-45Tokens-ignored eta-0))) (cond ((equal? sc0 1) 0) (else 1)))) arg-0)))))
(define LanguageC-45TOMLC-45Parser-newlines(blodwen-lazy (lambda () (vector 12 1 0 (vector 8 0 (TextC-45Parser-some (LanguageC-45TOMLC-45Parser-punct (vector 3 ))) (lambda () (lambda (_-9192) (vector 0 (vector 0 ))))) (lambda () (vector 3 ))))))
(define LanguageC-45TOMLC-45Parser-maybeNewlines(blodwen-lazy (lambda () (vector 9 0 0 (TextC-45Parser-many (LanguageC-45TOMLC-45Parser-punct (vector 3 ))) (lambda (u--_) (vector 0 (vector 0 )))))))
(define LanguageC-45TOMLC-45Parser-keyValue(blodwen-lazy (lambda () (vector 8 1 (LanguageC-45TOMLC-45Parser-key) (lambda () (lambda (u--k) (vector 10 1 (LanguageC-45TOMLC-45Parser-punct (vector 2 )) (lambda () (vector 8 0 (LanguageC-45TOMLC-45Parser-value) (lambda () (lambda (u--v) (vector 11 0 0 (LanguageC-45TOMLC-45Parser-newlines) (vector 0 (vector 0 u--k u--v))))))))))))))
(define LanguageC-45TOMLC-45Parser-key(blodwen-lazy (lambda () (vector 8 0 (LanguageC-45TOMLC-45Parser-n--3925-9311-u--keyAtom) (lambda () (lambda (u--first) (vector 9 0 0 (TextC-45Parser-many (vector 9 1 1 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 (lambda (eta-0) (lambda (eta-1) eta-1)) (LanguageC-45TOMLC-45Parser-punct (vector 1 ))) (lambda (u--f) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 u--f (LanguageC-45TOMLC-45Parser-n--3925-9311-u--keyAtom))))) (lambda (u--rest) (if (null? u--rest) (vector 0 (vector 0 u--first)) (vector 0 (vector 1 (cons u--first u--rest))))))))))))
(define LanguageC-45TOMLC-45Parser-items(blodwen-lazy (lambda () (vector 11 0 0 (LanguageC-45TOMLC-45Parser-maybeNewlines) (vector 9 0 0 (TextC-45Parser-many (LanguageC-45TOMLC-45Parser-item)) (lambda (u--is) (vector 11 0 0 (LanguageC-45TOMLC-45Parser-maybeNewlines) (vector 11 0 0 (vector 3 ) (vector 0 u--is)))))))))
(define LanguageC-45TOMLC-45Parser-item(blodwen-lazy (lambda () (vector 12 1 1 (LanguageC-45TOMLC-45Parser-keyValue) (lambda () (vector 12 1 1 (LanguageC-45TOMLC-45Parser-tableHeader) (lambda () (LanguageC-45TOMLC-45Parser-tableArrayHeader))))))))
(define LanguageC-45TOMLC-45Parser-integer(blodwen-lazy (lambda () (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 (lambda (eta-0) (vector 1 eta-0)) (TextC-45Parser-match (csegen-519) (csegen-522) (vector 1 ))))))
(define LanguageC-45TOMLC-45Parser-inlineTable(blodwen-lazy (lambda () (vector 10 1 (LanguageC-45TOMLC-45Parser-punct (vector 5 0)) (lambda () (vector 11 0 1 (vector 6 ) (vector 9 0 1 (TextC-45Parser-sepBy 1 (LanguageC-45TOMLC-45Parser-punct (vector 0 )) (vector 8 1 (LanguageC-45TOMLC-45Parser-key) (lambda () (lambda (u--k) (vector 10 1 (LanguageC-45TOMLC-45Parser-punct (vector 2 )) (lambda () (vector 8 0 (LanguageC-45TOMLC-45Parser-value) (lambda () (lambda (u--v) (vector 0 (cons u--k u--v))))))))))) (lambda (u--vals) (vector 10 0 (LanguageC-45TOMLC-45Parser-punct (vector 5 1)) (lambda () (vector 0 (vector 5 u--vals))))))))))))
(define LanguageC-45TOMLC-45Parser-fromEither (lambda (arg-3 arg-4) (cond ((equal? arg-3 0) (vector 9 0 0 (vector 13 arg-4) (lambda (u--xb) (let ((e-1 (vector-ref u--xb 0))) (case (vector-ref e-1 0) ((1) (let ((e-4 (vector-ref e-1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref e-1 1))) (vector 4 (box (let ((e-4 (vector-ref u--xb 2))) e-4)) 0 e-5)))))))) (else (vector 8 0 (vector 13 arg-4) (lambda () (lambda (u--xb) (let ((e-1 (vector-ref u--xb 0))) (case (vector-ref e-1 0) ((1) (let ((e-4 (vector-ref e-1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref e-1 1))) (vector 4 (box (let ((e-4 (vector-ref u--xb 2))) e-4)) 0 e-5))))))))))))
(define LanguageC-45TOMLC-45Parser-float(blodwen-lazy (lambda () (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 (lambda (eta-0) (vector 2 eta-0)) (TextC-45Parser-match (csegen-519) (csegen-522) (vector 2 ))))))
(define LanguageC-45TOMLC-45Parser-boolean(blodwen-lazy (lambda () (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 (lambda (eta-0) (vector 3 eta-0)) (TextC-45Parser-match (csegen-519) (csegen-522) (vector 0 ))))))
(define LanguageC-45TOMLC-45Parser-bare(blodwen-lazy (lambda () (TextC-45Parser-match (csegen-519) (csegen-522) (vector 5 )))))
(define LanguageC-45TOMLC-45Parser-array(blodwen-lazy (lambda () (vector 10 1 (LanguageC-45TOMLC-45Parser-punct (vector 4 0)) (lambda () (vector 11 0 1 (vector 6 ) (vector 9 0 1 (TextC-45Parser-sepBy 1 (LanguageC-45TOMLC-45Parser-allowNewlines (LanguageC-45TOMLC-45Parser-punct (vector 0 ))) (LanguageC-45TOMLC-45Parser-allowNewlines (LanguageC-45TOMLC-45Parser-value))) (lambda (u--vals) (vector 10 0 (LanguageC-45TOMLC-45Parser-punct (vector 4 1)) (lambda () (vector 0 (vector 4 u--vals))))))))))))
(define LanguageC-45TOMLC-45Parser-allowNewlines (lambda (arg-2) (vector 9 1 0 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 (lambda (eta-0) (lambda (eta-1) eta-0)) (vector 9 0 1 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 0 (lambda (eta-0) (lambda (eta-1) eta-1)) (LanguageC-45TOMLC-45Parser-maybeNewlines)) (lambda (u--f) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 u--f arg-2)))) (lambda (u--f) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 0 u--f (LanguageC-45TOMLC-45Parser-maybeNewlines))))))
(define TextC-45Token-value (lambda (arg-1 arg-2) (let ((e-1 (car arg-2))) (let ((e-2 (cdr arg-2))) (let ((e-3 (cdr arg-1))) ((e-3 e-1) e-2))))))
(define TextC-45Parser-some (lambda (arg-3) (vector 8 0 arg-3 (lambda () (lambda (bind-0) (vector 9 0 0 (TextC-45Parser-many arg-3) (lambda (bind-1) (vector 0 (cons bind-0 bind-1)))))))))
(define TextC-45Parser-sepBy1 (lambda (arg-4 arg-5 arg-6) (vector 9 arg-4 0 (vector 9 0 arg-4 (vector 0 (csegen-210)) (lambda (u--f) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 arg-4 u--f arg-6))) (lambda (u--f) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 0 u--f (TextC-45Parser-many (vector 9 1 arg-4 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 1 (lambda (eta-0) (lambda (eta-1) eta-1)) arg-5) (lambda (f-0) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 arg-4 f-0 arg-6)))))))))
(define TextC-45Parser-sepBy (lambda (arg-4 arg-5 arg-6) (TextC-45Parser-option arg-4 '() (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 arg-4 eta-2 eta-3))))) (lambda (eta-0) (DataC-45List1-forget eta-0)) (TextC-45Parser-sepBy1 arg-4 arg-5 arg-6)))))
(define TextC-45Parser-option (lambda (arg-3 arg-4 arg-5) (cond ((equal? arg-3 0) (vector 12 0 0 arg-5 (lambda () (vector 0 arg-4)))) (else (vector 12 1 0 arg-5 (lambda () (vector 0 arg-4)))))))
(define TextC-45Parser-match (lambda (arg-2 arg-3 arg-4) (vector 1 "Unrecognised input" (lambda (u--t) (let ((sc0 (let ((e-1 (car arg-3))) ((e-1 (let ((e-4 (car u--t))) e-4)) arg-4)))) (cond ((equal? sc0 1) (box (let ((e-2 (cdr arg-2))) ((e-2 arg-4) (let ((e-3 (cdr u--t))) e-3))))) (else '())))))))
(define TextC-45Parser-many (lambda (arg-3) (TextC-45Parser-option 1 '() (PreludeC-45Interfaces-C-60C-36C-62 (csegen-514) (lambda (eta-0) (DataC-45List1-forget eta-0)) (TextC-45Parser-some arg-3)))))
(define TextC-45ParserC-45Core-case--doParse-5194 (lambda (arg-3 arg-5 arg-6 arg-7 arg-8 arg-10) (case (vector-ref arg-10 0) ((0) (let ((e-3 (vector-ref arg-10 1))) (let ((e-4 (vector-ref arg-10 2))) (let ((e-5 (vector-ref arg-10 3))) (vector 0 e-3 e-4 e-5))))) (else (let ((e-9 (vector-ref arg-10 1))) (let ((e-10 (vector-ref arg-10 2))) (let ((e-11 (vector-ref arg-10 3))) (let ((e-12 (vector-ref arg-10 4))) (vector 1 e-9 e-10 (PreludeC-45Interfaces-C-60C-36C-62 (csegen-565) (lambda (eta-0) e-11) e-11) e-12)))))))))
(define TextC-45ParserC-45Core-case--doParse-4881 (lambda (arg-3 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-12) (case (vector-ref arg-12 0) ((0) (let ((e-3 (vector-ref arg-12 1))) (let ((e-4 (vector-ref arg-12 2))) (let ((e-5 (vector-ref arg-12 3))) (vector 0 e-3 e-4 e-5))))) (else (let ((e-9 (vector-ref arg-12 1))) (let ((e-10 (vector-ref arg-12 2))) (let ((e-11 (vector-ref arg-12 3))) (let ((e-12 (vector-ref arg-12 4))) (TextC-45ParserC-45Core-mergeWith e-11 (TextC-45ParserC-45Core-doParse arg-3 e-9 e-10 ((arg-7) (let ((e-1 (vector-ref e-11 0))) e-1)) e-12))))))))))
(define TextC-45ParserC-45Core-case--doParse-4767 (lambda (arg-3 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-13) (case (vector-ref arg-13 0) ((0) (let ((e-3 (vector-ref arg-13 1))) (let ((e-4 (vector-ref arg-13 2))) (let ((e-5 (vector-ref arg-13 3))) (vector 0 e-3 e-4 e-5))))) (else (let ((e-9 (vector-ref arg-13 1))) (let ((e-10 (vector-ref arg-13 2))) (let ((e-11 (vector-ref arg-13 3))) (let ((e-12 (vector-ref arg-13 4))) (TextC-45ParserC-45Core-mergeWith e-11 (TextC-45ParserC-45Core-doParse arg-3 e-9 e-10 (arg-8 (let ((e-1 (vector-ref e-11 0))) e-1)) e-12))))))))))
(define TextC-45ParserC-45Core-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32doParse-4529 (lambda (arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-11 arg-12 arg-13 arg-14 arg-15) (case (vector-ref arg-15 0) ((0) (let ((e-3 (vector-ref arg-15 1))) (let ((e-4 (vector-ref arg-15 2))) (let ((e-5 (vector-ref arg-15 3))) (let ((sc1 (cond ((equal? e-3 1) 1) (else e-4)))) (cond ((equal? sc1 1) (vector 0 e-3 e-4 e-5)) (else (vector 0 0 0 (DataC-45List1-C-43C-43 arg-11 e-5))))))))) (else (let ((e-9 (vector-ref arg-15 1))) (let ((e-11 (vector-ref arg-15 3))) (let ((e-12 (vector-ref arg-15 4))) (vector 1 e-9 arg-9 e-11 e-12))))))))
(define TextC-45ParserC-45Core-case--doParse-4413 (lambda (arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-12) (case (vector-ref arg-12 0) ((0) (let ((e-3 (vector-ref arg-12 1))) (let ((e-4 (vector-ref arg-12 2))) (let ((e-5 (vector-ref arg-12 3))) (let ((sc1 (cond ((equal? e-3 1) 1) (else e-4)))) (cond ((equal? sc1 1) (vector 0 arg-10 e-4 e-5)) (else (TextC-45ParserC-45Core-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32doParse-4529 arg-3 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 e-5 e-4 e-3 arg-4 (TextC-45ParserC-45Core-doParse arg-3 arg-4 0 (arg-6) arg-9))))))))) (else (let ((e-9 (vector-ref arg-12 1))) (let ((e-11 (vector-ref arg-12 3))) (let ((e-12 (vector-ref arg-12 4))) (vector 1 e-9 arg-10 e-11 e-12))))))))
(define TextC-45ParserC-45Core-case--doParse-4048 (lambda (arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (case (vector-ref arg-9 0) ((0) (let ((e-3 (vector-ref arg-9 1))) (let ((e-5 (vector-ref arg-9 3))) (vector 0 e-3 1 e-5))))(else arg-9))))
(define TextC-45ParserC-45Core-case--doParse-3951 (lambda (arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (case (vector-ref arg-9 0) ((0) (let ((e-3 (vector-ref arg-9 1))) (let ((e-5 (vector-ref arg-9 3))) (vector 0 e-3 0 e-5))))(else arg-9))))
(define TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 (lambda (arg-4 arg-5 arg-6) (cond ((equal? arg-4 0) (case (vector-ref arg-6 0) ((0) (let ((e-65 (vector-ref arg-6 1))) (vector 0 (arg-5 e-65))))(else (case (vector-ref arg-6 0) ((4) (let ((e-49 (vector-ref arg-6 1))) (let ((e-50 (vector-ref arg-6 2))) (let ((e-51 (vector-ref arg-6 3))) (vector 4 e-49 e-50 e-51))))) ((5) (let ((e-56 (vector-ref arg-6 1))) (vector 5 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 arg-4 arg-5 e-56)))) ((7) (let ((e-61 (vector-ref arg-6 1))) (vector 7 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 arg-4 arg-5 e-61))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((1) (let ((e-43 (vector-ref arg-6 1))) (let ((e-44 (vector-ref arg-6 2))) (vector 1 e-43 (lambda (eta-0) (PreludeC-45Types-u--map_Functor_Maybe arg-5 (e-44 eta-0)))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-36 (vector-ref arg-6 1))) (let ((e-37 (vector-ref arg-6 2))) (let ((e-38 (vector-ref arg-6 3))) (let ((e-39 (vector-ref arg-6 4))) (vector 12 e-36 e-37 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-36 arg-5 e-38) (lambda () (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-37 arg-5 (e-39)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((8) (let ((e-30 (vector-ref arg-6 1))) (let ((e-31 (vector-ref arg-6 2))) (let ((e-32 (vector-ref arg-6 3))) (vector 8 e-30 e-31 (lambda () (lambda (u--val) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-30 arg-5 ((e-32) u--val)))))))))(else (case (vector-ref arg-6 0) ((9) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 9 e-22 e-23 e-24 (lambda (u--val) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 arg-5 (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((10) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 10 e-15 e-16 (lambda () (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 arg-5 (e-17))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))))))(else (case (vector-ref arg-6 0) ((9) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 9 e-22 e-23 e-24 (lambda (u--val) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 arg-5 (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((10) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 10 e-15 e-16 (lambda () (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 arg-5 (e-17))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-36 (vector-ref arg-6 1))) (let ((e-37 (vector-ref arg-6 2))) (let ((e-38 (vector-ref arg-6 3))) (let ((e-39 (vector-ref arg-6 4))) (vector 12 e-36 e-37 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-36 arg-5 e-38) (lambda () (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-37 arg-5 (e-39)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((8) (let ((e-30 (vector-ref arg-6 1))) (let ((e-31 (vector-ref arg-6 2))) (let ((e-32 (vector-ref arg-6 3))) (vector 8 e-30 e-31 (lambda () (lambda (u--val) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-30 arg-5 ((e-32) u--val)))))))))(else (case (vector-ref arg-6 0) ((9) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 9 e-22 e-23 e-24 (lambda (u--val) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 arg-5 (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((10) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 10 e-15 e-16 (lambda () (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 arg-5 (e-17))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))))))(else (case (vector-ref arg-6 0) ((9) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 9 e-22 e-23 e-24 (lambda (u--val) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 arg-5 (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((10) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 10 e-15 e-16 (lambda () (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 arg-5 (e-17))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))))))))))))))(else (case (vector-ref arg-6 0) ((4) (let ((e-49 (vector-ref arg-6 1))) (let ((e-50 (vector-ref arg-6 2))) (let ((e-51 (vector-ref arg-6 3))) (vector 4 e-49 e-50 e-51))))) ((5) (let ((e-56 (vector-ref arg-6 1))) (vector 5 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 arg-4 arg-5 e-56)))) ((7) (let ((e-61 (vector-ref arg-6 1))) (vector 7 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 arg-4 arg-5 e-61))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((1) (let ((e-43 (vector-ref arg-6 1))) (let ((e-44 (vector-ref arg-6 2))) (vector 1 e-43 (lambda (eta-0) (PreludeC-45Types-u--map_Functor_Maybe arg-5 (e-44 eta-0)))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-36 (vector-ref arg-6 1))) (let ((e-37 (vector-ref arg-6 2))) (let ((e-38 (vector-ref arg-6 3))) (let ((e-39 (vector-ref arg-6 4))) (vector 12 e-36 e-37 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-36 arg-5 e-38) (lambda () (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-37 arg-5 (e-39)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((8) (let ((e-30 (vector-ref arg-6 1))) (let ((e-31 (vector-ref arg-6 2))) (let ((e-32 (vector-ref arg-6 3))) (vector 8 e-30 e-31 (lambda () (lambda (u--val) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-30 arg-5 ((e-32) u--val)))))))))(else (case (vector-ref arg-6 0) ((9) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 9 e-22 e-23 e-24 (lambda (u--val) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 arg-5 (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((10) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 10 e-15 e-16 (lambda () (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 arg-5 (e-17))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))))))(else (case (vector-ref arg-6 0) ((9) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 9 e-22 e-23 e-24 (lambda (u--val) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 arg-5 (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((10) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 10 e-15 e-16 (lambda () (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 arg-5 (e-17))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))))))))))(else (case (vector-ref arg-6 0) ((12) (let ((e-36 (vector-ref arg-6 1))) (let ((e-37 (vector-ref arg-6 2))) (let ((e-38 (vector-ref arg-6 3))) (let ((e-39 (vector-ref arg-6 4))) (vector 12 e-36 e-37 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-36 arg-5 e-38) (lambda () (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-37 arg-5 (e-39)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((8) (let ((e-30 (vector-ref arg-6 1))) (let ((e-31 (vector-ref arg-6 2))) (let ((e-32 (vector-ref arg-6 3))) (vector 8 e-30 e-31 (lambda () (lambda (u--val) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-30 arg-5 ((e-32) u--val)))))))))(else (case (vector-ref arg-6 0) ((9) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 9 e-22 e-23 e-24 (lambda (u--val) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 arg-5 (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((10) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 10 e-15 e-16 (lambda () (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 arg-5 (e-17))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))))))(else (case (vector-ref arg-6 0) ((9) (let ((e-22 (vector-ref arg-6 1))) (let ((e-23 (vector-ref arg-6 2))) (let ((e-24 (vector-ref arg-6 3))) (let ((e-25 (vector-ref arg-6 4))) (vector 9 e-22 e-23 e-24 (lambda (u--val) (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-23 arg-5 (e-25 u--val)))))))))(else (cond ((equal? arg-4 1) (case (vector-ref arg-6 0) ((10) (let ((e-15 (vector-ref arg-6 1))) (let ((e-16 (vector-ref arg-6 2))) (let ((e-17 (vector-ref arg-6 3))) (vector 10 e-15 e-16 (lambda () (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-15 arg-5 (e-17))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0)))))))))))(else (case (vector-ref arg-6 0) ((11) (let ((e-3 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-6 2))) (let ((e-5 (vector-ref arg-6 3))) (let ((e-6 (vector-ref arg-6 4))) (vector 11 e-3 e-4 e-5 (TextC-45ParserC-45Core-u--map_Functor_C-40C-40C-40GrammarC-32C-36stateC-41C-32C-36tokC-41C-32C-36cC-41 e-4 arg-5 e-6))))))) ((13) (let ((e-11 (vector-ref arg-6 1))) (vector 9 arg-4 0 (vector 13 e-11) (lambda (eta-0) (vector 0 (arg-5 eta-0))))))(else (cond (else (vector 9 0 0 arg-6 (lambda (eta-0) (vector 0 (arg-5 eta-0))))))))))))))))))))))))
(define TextC-45ParserC-45Core-parse (lambda (arg-2 arg-3 arg-4) (let ((sc0 (TextC-45ParserC-45Core-doParse (lambda (eta-0) (lambda (eta-1) (vector 0 ))) (vector 0 ) 0 arg-3 arg-4))) (case (vector-ref sc0 0) ((0) (let ((e-5 (vector-ref sc0 3))) (vector 0 e-5))) (else (let ((e-11 (vector-ref sc0 3))) (let ((e-12 (vector-ref sc0 4))) (vector 1 (cons (let ((e-1 (vector-ref e-11 0))) e-1) e-12)))))))))
(define TextC-45ParserC-45Core-mergeWith (lambda (arg-4 arg-5) (case (vector-ref arg-5 0) ((1) (let ((e-3 (vector-ref arg-5 1))) (let ((e-4 (vector-ref arg-5 2))) (let ((e-5 (vector-ref arg-5 3))) (let ((e-6 (vector-ref arg-5 4))) (vector 1 e-3 e-4 (TextC-45Bounded-mergeBounds arg-4 e-5) e-6))))))(else arg-5))))
(define TextC-45ParserC-45Core-doParse (lambda (arg-4 arg-5 arg-6 arg-7 arg-8) (case (vector-ref arg-7 0) ((0) (let ((e-3 (vector-ref arg-7 1))) (vector 1 arg-5 arg-6 (TextC-45Bounded-irrelevantBounds e-3) arg-8))) ((4) (let ((e-8 (vector-ref arg-7 1))) (let ((e-9 (vector-ref arg-7 2))) (let ((e-10 (vector-ref arg-7 3))) (vector 0 arg-6 e-9 (cons (cons e-10 (PreludeC-45Types-u--C-60C-124C-62_Alternative_Maybe e-8 (lambda () (PreludeC-45Interfaces-C-60C-36C-62 (csegen-295) (lambda (eta-0) (let ((e-3 (vector-ref eta-0 2))) e-3)) (DataC-45List-headC-39 arg-8))))) '())))))) ((5) (let ((e-15 (vector-ref arg-7 1))) (TextC-45ParserC-45Core-case--doParse-3951 arg-4 arg-5 e-15 arg-8 arg-6 (TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 e-15 arg-8)))) ((6) (vector 1 arg-5 1 (TextC-45Bounded-irrelevantBounds (vector 0 )) arg-8)) ((7) (let ((e-22 (vector-ref arg-7 1))) (TextC-45ParserC-45Core-case--doParse-4048 arg-4 arg-5 e-22 arg-8 arg-6 (TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 e-22 arg-8)))) ((1) (let ((e-26 (vector-ref arg-7 1))) (let ((e-27 (vector-ref arg-7 2))) (if (null? arg-8) (vector 0 arg-6 0 (csegen-567)) (let ((e-81 (car arg-8))) (let ((e-82 (cdr arg-8))) (let ((sc2 (e-27 (let ((e-1 (vector-ref e-81 0))) e-1)))) (if (null? sc2) (vector 0 arg-6 0 (cons (cons e-26 (box (let ((e-3 (vector-ref e-81 2))) e-3))) '())) (let ((e-2 (unbox sc2))) (vector 1 arg-5 arg-6 (PreludeC-45Interfaces-C-60C-36C-62 (csegen-565) (lambda (eta-0) e-2) e-81) e-82)))))))))) ((3) (if (null? arg-8) (vector 1 arg-5 arg-6 (TextC-45Bounded-irrelevantBounds (vector 0 )) '()) (let ((e-85 (car arg-8))) (vector 0 arg-6 0 (cons (cons "Expected end of input" (box (let ((e-3 (vector-ref e-85 2))) e-3))) '()))))) ((2) (let ((e-32 (vector-ref arg-7 1))) (let ((e-33 (vector-ref arg-7 2))) (if (null? arg-8) (vector 0 arg-6 0 (csegen-567)) (let ((e-89 (car arg-8))) (let ((e-90 (cdr arg-8))) (let ((sc2 (e-33 (let ((e-1 (vector-ref e-89 0))) e-1)))) (cond ((equal? sc2 1) (vector 1 arg-5 arg-6 (TextC-45Bounded-removeIrrelevance e-89) (cons e-89 e-90))) (else (vector 0 arg-6 0 (cons (cons e-32 (box (let ((e-3 (vector-ref e-89 2))) e-3))) '()))))))))))) ((12) (let ((e-37 (vector-ref arg-7 1))) (let ((e-38 (vector-ref arg-7 2))) (let ((e-39 (vector-ref arg-7 3))) (let ((e-40 (vector-ref arg-7 4))) (TextC-45ParserC-45Core-case--doParse-4413 arg-4 arg-5 e-38 e-40 e-37 e-39 arg-8 arg-6 (TextC-45ParserC-45Core-doParse arg-4 arg-5 0 e-39 arg-8))))))) ((9) (let ((e-45 (vector-ref arg-7 1))) (let ((e-46 (vector-ref arg-7 2))) (let ((e-47 (vector-ref arg-7 3))) (let ((e-48 (vector-ref arg-7 4))) (TextC-45ParserC-45Core-case--doParse-4767 arg-4 e-45 e-46 arg-5 e-48 e-47 arg-8 arg-6 (TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 e-47 arg-8))))))) ((8) (let ((e-53 (vector-ref arg-7 1))) (let ((e-54 (vector-ref arg-7 2))) (let ((e-55 (vector-ref arg-7 3))) (TextC-45ParserC-45Core-case--doParse-4881 arg-4 e-53 arg-5 e-55 e-54 arg-8 arg-6 (TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 e-54 arg-8)))))) ((11) (let ((e-61 (vector-ref arg-7 3))) (let ((e-62 (vector-ref arg-7 4))) (let ((sc1 (TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 e-61 arg-8))) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (let ((e-4 (vector-ref sc1 2))) (let ((e-5 (vector-ref sc1 3))) (vector 0 e-3 e-4 e-5))))) (else (let ((e-9 (vector-ref sc1 1))) (let ((e-10 (vector-ref sc1 2))) (let ((e-11 (vector-ref sc1 3))) (let ((e-12 (vector-ref sc1 4))) (TextC-45ParserC-45Core-mergeWith e-11 (TextC-45ParserC-45Core-doParse arg-4 e-9 e-10 e-62 e-12)))))))))))) ((10) (let ((e-67 (vector-ref arg-7 2))) (let ((e-68 (vector-ref arg-7 3))) (let ((sc1 (TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 e-67 arg-8))) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (let ((e-4 (vector-ref sc1 2))) (let ((e-5 (vector-ref sc1 3))) (vector 0 e-3 e-4 e-5))))) (else (let ((e-9 (vector-ref sc1 1))) (let ((e-10 (vector-ref sc1 2))) (let ((e-11 (vector-ref sc1 3))) (let ((e-12 (vector-ref sc1 4))) (TextC-45ParserC-45Core-mergeWith e-11 (TextC-45ParserC-45Core-doParse arg-4 e-9 e-10 (e-68) e-12)))))))))))) ((13) (let ((e-73 (vector-ref arg-7 1))) (TextC-45ParserC-45Core-case--doParse-5194 arg-4 arg-5 e-73 arg-8 arg-6 (TextC-45ParserC-45Core-doParse arg-4 arg-5 arg-6 e-73 arg-8)))) ((14) (if (null? arg-8) (vector 0 arg-6 0 (csegen-567)) (let ((e-93 (car arg-8))) (let ((e-94 (cdr arg-8))) (vector 1 arg-5 arg-6 (TextC-45Bounded-irrelevantBounds (let ((e-3 (vector-ref e-93 2))) e-3)) (cons e-93 e-94)))))) (else (let ((e-78 (vector-ref arg-7 1))) (vector 1 ((arg-4 arg-5) e-78) arg-6 (TextC-45Bounded-irrelevantBounds (vector 0 )) arg-8))))))
(define TextC-45Bounded-u--map_Functor_WithBounds (lambda (arg-2 arg-3) (let ((e-1 (vector-ref arg-3 0))) (let ((e-2 (vector-ref arg-3 1))) (let ((e-3 (vector-ref arg-3 2))) (vector (arg-2 e-1) e-2 e-3))))))
(define TextC-45Bounded-startBounds (lambda (arg-0) (cons (let ((e-0 (vector-ref arg-0 0))) e-0) (let ((e-1 (vector-ref arg-0 1))) e-1))))
(define TextC-45Bounded-start (lambda (ext-0) (TextC-45Bounded-startBounds (let ((e-3 (vector-ref ext-0 2))) e-3))))
(define TextC-45Bounded-removeIrrelevance (lambda (arg-1) (let ((e-1 (vector-ref arg-1 0))) (let ((e-3 (vector-ref arg-1 2))) (vector e-1 1 e-3)))))
(define TextC-45Bounded-mergeBounds (lambda (arg-2 arg-3) (let ((e-6 (vector-ref arg-2 1))) (cond ((equal? e-6 1) (let ((e-9 (vector-ref arg-3 0))) (let ((e-10 (vector-ref arg-3 1))) (cond ((equal? e-10 1) (TextC-45Bounded-irrelevantBounds e-9))(else arg-3)))))(else (let ((e-1 (vector-ref arg-3 0))) (let ((e-2 (vector-ref arg-3 1))) (cond ((equal? e-2 1) (PreludeC-45Interfaces-C-60C-36C-62 (csegen-570) (lambda (eta-0) e-1) arg-2))(else (let ((sc0 (PreludeC-45EqOrd-u--min_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (csegen-106) (csegen-106) (TextC-45Bounded-start arg-2) (TextC-45Bounded-start arg-3)))) (let ((e-8 (car sc0))) (let ((e-4 (cdr sc0))) (let ((sc1 (PreludeC-45EqOrd-u--max_Ord_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (csegen-106) (csegen-106) (TextC-45Bounded-end arg-2) (TextC-45Bounded-end arg-3)))) (let ((e-10 (car sc1))) (let ((e-9 (cdr sc1))) (vector (let ((e-13 (vector-ref arg-3 0))) e-13) 0 (vector e-8 e-4 e-10 e-9)))))))))))))))))
(define TextC-45Bounded-irrelevantBounds (lambda (arg-1) (vector arg-1 1 (vector -1 -1 -1 -1))))
(define TextC-45Bounded-endBounds (lambda (arg-0) (cons (let ((e-2 (vector-ref arg-0 2))) e-2) (let ((e-3 (vector-ref arg-0 3))) e-3))))
(define TextC-45Bounded-end (lambda (ext-0) (TextC-45Bounded-endBounds (let ((e-3 (vector-ref ext-0 2))) e-3))))
(define LanguageC-45TOMLC-45Tokens-n--3498-1835-u--unicodeEscape (lambda (arg-0 arg-1 arg-2) (if (null? arg-1) (vector 1 (cast-int-char arg-2)) (let ((e-2 (car arg-1))) (let ((e-3 (cdr arg-1))) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (LanguageC-45TOMLC-45Tokens-n--3498-1834-u--hexToInt arg-0 e-2) (lambda (u--x) (LanguageC-45TOMLC-45Tokens-n--3498-1835-u--unicodeEscape arg-0 e-3 (bs+ (bs* arg-2 16 63) u--x 63)))))))))
(define LanguageC-45TOMLC-45Tokens-n--3498-1836-u--loop (lambda (arg-0 arg-1) (if (null? arg-1) (vector 0 "unexpected end of input") (let ((e-2 (car arg-1))) (let ((e-3 (cdr arg-1))) (cond ((equal? e-2 #\") (vector 1 '())) ((equal? e-2 #\\) (if (null? e-3) (vector 0 "invalid escape code") (let ((e-5 (car e-3))) (let ((e-6 (cdr e-3))) (cond ((equal? e-5 #\b) (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (case (vector-ref eta-3 0) ((0) (let ((e-4 (vector-ref eta-3 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref eta-3 1))) (vector 1 (eta-2 e-7))))))))) (lambda (arg-2) (cons (integer->char 8) arg-2)) (LanguageC-45TOMLC-45Tokens-n--3498-1836-u--loop arg-0 e-6))) ((equal? e-5 #\t) (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (case (vector-ref eta-3 0) ((0) (let ((e-4 (vector-ref eta-3 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref eta-3 1))) (vector 1 (eta-2 e-7))))))))) (lambda (arg-2) (cons (integer->char 9) arg-2)) (LanguageC-45TOMLC-45Tokens-n--3498-1836-u--loop arg-0 e-6))) ((equal? e-5 #\n) (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (case (vector-ref eta-3 0) ((0) (let ((e-4 (vector-ref eta-3 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref eta-3 1))) (vector 1 (eta-2 e-7))))))))) (lambda (arg-2) (cons (integer->char 10) arg-2)) (LanguageC-45TOMLC-45Tokens-n--3498-1836-u--loop arg-0 e-6))) ((equal? e-5 #\f) (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (case (vector-ref eta-3 0) ((0) (let ((e-4 (vector-ref eta-3 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref eta-3 1))) (vector 1 (eta-2 e-7))))))))) (lambda (arg-2) (cons (integer->char 12) arg-2)) (LanguageC-45TOMLC-45Tokens-n--3498-1836-u--loop arg-0 e-6))) ((equal? e-5 #\r) (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (case (vector-ref eta-3 0) ((0) (let ((e-4 (vector-ref eta-3 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref eta-3 1))) (vector 1 (eta-2 e-7))))))))) (lambda (arg-2) (cons (integer->char 13) arg-2)) (LanguageC-45TOMLC-45Tokens-n--3498-1836-u--loop arg-0 e-6))) ((equal? e-5 #\") (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (case (vector-ref eta-3 0) ((0) (let ((e-4 (vector-ref eta-3 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref eta-3 1))) (vector 1 (eta-2 e-7))))))))) (lambda (arg-2) (cons #\" arg-2)) (LanguageC-45TOMLC-45Tokens-n--3498-1836-u--loop arg-0 e-6))) ((equal? e-5 #\\) (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (case (vector-ref eta-3 0) ((0) (let ((e-4 (vector-ref eta-3 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref eta-3 1))) (vector 1 (eta-2 e-7))))))))) (lambda (arg-2) (cons #\\ arg-2)) (LanguageC-45TOMLC-45Tokens-n--3498-1836-u--loop arg-0 e-6))) ((equal? e-5 #\u) (if (null? e-6) (vector 0 "invalid escape code") (let ((e-8 (car e-6))) (let ((e-9 (cdr e-6))) (if (null? e-9) (vector 0 "invalid escape code") (let ((e-11 (car e-9))) (let ((e-12 (cdr e-9))) (if (null? e-12) (vector 0 "invalid escape code") (let ((e-14 (car e-12))) (let ((e-15 (cdr e-12))) (if (null? e-15) (vector 0 "invalid escape code") (let ((e-17 (car e-15))) (let ((e-18 (cdr e-15))) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (LanguageC-45TOMLC-45Tokens-n--3498-1835-u--unicodeEscape arg-0 (cons e-8 (cons e-11 (cons e-14 (cons e-17 '())))) 0) (lambda (u--c) (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (case (vector-ref eta-3 0) ((0) (let ((e-4 (vector-ref eta-3 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref eta-3 1))) (vector 1 (eta-2 e-7))))))))) (lambda (arg-2) (cons u--c arg-2)) (LanguageC-45TOMLC-45Tokens-n--3498-1836-u--loop arg-0 e-18))))))))))))))))) ((equal? e-5 #\U) (if (null? e-6) (vector 0 "invalid escape code") (let ((e-20 (car e-6))) (let ((e-21 (cdr e-6))) (if (null? e-21) (vector 0 "invalid escape code") (let ((e-23 (car e-21))) (let ((e-24 (cdr e-21))) (if (null? e-24) (vector 0 "invalid escape code") (let ((e-26 (car e-24))) (let ((e-27 (cdr e-24))) (if (null? e-27) (vector 0 "invalid escape code") (let ((e-29 (car e-27))) (let ((e-30 (cdr e-27))) (if (null? e-30) (vector 0 "invalid escape code") (let ((e-32 (car e-30))) (let ((e-33 (cdr e-30))) (if (null? e-33) (vector 0 "invalid escape code") (let ((e-35 (car e-33))) (let ((e-36 (cdr e-33))) (if (null? e-36) (vector 0 "invalid escape code") (let ((e-38 (car e-36))) (let ((e-39 (cdr e-36))) (if (null? e-39) (vector 0 "invalid escape code") (let ((e-41 (car e-39))) (let ((e-42 (cdr e-39))) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (LanguageC-45TOMLC-45Tokens-n--3498-1835-u--unicodeEscape arg-0 (cons e-20 (cons e-23 (cons e-26 (cons e-29 (cons e-32 (cons e-35 (cons e-38 (cons e-41 '())))))))) 0) (lambda (u--c) (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (case (vector-ref eta-3 0) ((0) (let ((e-4 (vector-ref eta-3 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref eta-3 1))) (vector 1 (eta-2 e-7))))))))) (lambda (arg-2) (cons u--c arg-2)) (LanguageC-45TOMLC-45Tokens-n--3498-1836-u--loop arg-0 e-42)))))))))))))))))))))))))))))(else (vector 0 "invalid escape code")))))))(else (PreludeC-45Interfaces-C-60C-36C-62 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (case (vector-ref eta-3 0) ((0) (let ((e-4 (vector-ref eta-3 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref eta-3 1))) (vector 1 (eta-2 e-5))))))))) (lambda (arg-2) (cons e-2 arg-2)) (LanguageC-45TOMLC-45Tokens-n--3498-1836-u--loop arg-0 e-3)))))))))
(define LanguageC-45TOMLC-45Tokens-n--3498-1834-u--hexToInt (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45Types-isHexDigit arg-1))) (cond ((equal? sc0 1) (vector 1 (let ((sc1 (let ((sc2 (PreludeC-45EqOrd-u--C-60C-61_Ord_Char #\0 arg-1))) (cond ((equal? sc2 1) (PreludeC-45EqOrd-u--C-60C-61_Ord_Char arg-1 #\9)) (else 0))))) (cond ((equal? sc1 1) (bs- (cast-char-boundedInt arg-1 63) (cast-char-boundedInt #\0 63) 63)) (else (bs- (cast-char-boundedInt (PreludeC-45Types-toLower arg-1) 63) (cast-char-boundedInt #\a 63) 63)))))) (else (vector 0 (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "invalid hex character: '" (cons (PreludeC-45Cast-u--cast_Cast_Char_String arg-1) (cons "'" '()))))))))))
(define LanguageC-45TOMLC-45Tokens-u--tokValue_TokenKind_TOMLTokenKind (lambda (arg-0 arg-1) (case (vector-ref arg-0 0) ((0) (PreludeC-45EqOrd-u--C-61C-61_Eq_String arg-1 "true")) ((1) (LanguageC-45TOMLC-45Tokens-parseInt (PreludeC-45Types-fastUnpack arg-1))) ((2) (LanguageC-45TOMLC-45TokensC-45Float-parseFloat arg-1)) ((3) (let ((e-0 (vector-ref arg-0 1))) (cond ((equal? e-0 0) (let ((sc2 (LanguageC-45TOMLC-45Tokens-unescapeBasic (PreludeC-45Types-fastUnpack arg-1)))) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc2 1))) (vector 1 (PreludeC-45Types-fastPack e-5))))))) ((equal? e-0 1) (vector 0 "unimplemted string type: literal")) ((equal? e-0 2) (vector 0 "unimplemted string type: basic multiline")) (else (vector 0 "unimplemted string type: literal multiline"))))) ((4) (vector 0 )) ((5) arg-1) (else (vector 0 )))))
(define LanguageC-45TOMLC-45Tokens-u--TokType_TokenKind_TOMLTokenKind (lambda (arg-0) (case (vector-ref arg-0 0) ((0) (vector "Prelude.Basics.Bool" )) ((1) (vector "Integer" )) ((2) (vector "Double" )) ((3) (vector "Prelude.Types.Either" (vector "String" ) (vector "String" ))) ((4) (vector "Builtin.Unit" )) ((5) (vector "String" )) (else (vector "Builtin.Unit" )))))
(define LanguageC-45TOMLC-45Tokens-u--C-61C-61_Eq_TOMLTokenKind (lambda (arg-0 arg-1) (case (vector-ref arg-0 0) ((0) (case (vector-ref arg-1 0) ((0) 1)(else 0))) ((1) (case (vector-ref arg-1 0) ((1) 1)(else 0))) ((2) (case (vector-ref arg-1 0) ((2) 1)(else 0))) ((3) (let ((e-0 (vector-ref arg-0 1))) (case (vector-ref arg-1 0) ((3) (let ((e-2 (vector-ref arg-1 1))) (LanguageC-45TOMLC-45Tokens-u--C-61C-61_Eq_StringType e-0 e-2)))(else 0)))) ((4) (let ((e-1 (vector-ref arg-0 1))) (case (vector-ref arg-1 0) ((4) (let ((e-3 (vector-ref arg-1 1))) (LanguageC-45TOMLC-45Tokens-u--C-61C-61_Eq_Punctuation e-1 e-3)))(else 0)))) ((5) (case (vector-ref arg-1 0) ((5) 1)(else 0))) ((6) (case (vector-ref arg-1 0) ((6) 1)(else 0)))(else 0))))
(define LanguageC-45TOMLC-45Tokens-u--C-61C-61_Eq_StringType (lambda (arg-0 arg-1) (cond ((equal? arg-0 0) (cond ((equal? arg-1 0) 1)(else 0))) ((equal? arg-0 1) (cond ((equal? arg-1 1) 1)(else 0))) ((equal? arg-0 2) (cond ((equal? arg-1 2) 1)(else 0))) ((equal? arg-0 3) (cond ((equal? arg-1 3) 1)(else 0)))(else 0))))
(define LanguageC-45TOMLC-45Tokens-u--C-61C-61_Eq_Punctuation (lambda (arg-0 arg-1) (case (vector-ref arg-0 0) ((0) (case (vector-ref arg-1 0) ((0) 1)(else 0))) ((1) (case (vector-ref arg-1 0) ((1) 1)(else 0))) ((2) (case (vector-ref arg-1 0) ((2) 1)(else 0))) ((3) (case (vector-ref arg-1 0) ((3) 1)(else 0))) ((4) (let ((e-0 (vector-ref arg-0 1))) (case (vector-ref arg-1 0) ((4) (let ((e-2 (vector-ref arg-1 1))) (LanguageC-45TOMLC-45Tokens-u--C-61C-61_Eq_Bracket e-0 e-2)))(else 0)))) ((5) (let ((e-1 (vector-ref arg-0 1))) (case (vector-ref arg-1 0) ((5) (let ((e-3 (vector-ref arg-1 1))) (LanguageC-45TOMLC-45Tokens-u--C-61C-61_Eq_Bracket e-1 e-3)))(else 0))))(else 0))))
(define LanguageC-45TOMLC-45Tokens-u--C-61C-61_Eq_Bracket (lambda (arg-0 arg-1) (cond ((equal? arg-0 0) (cond ((equal? arg-1 0) 1)(else 0))) ((equal? arg-0 1) (cond ((equal? arg-1 1) 1)(else 0)))(else 0))))
(define LanguageC-45TOMLC-45Tokens-u--C-47C-61_Eq_TOMLTokenKind (lambda (arg-0 arg-1) (let ((sc0 (LanguageC-45TOMLC-45Tokens-u--C-61C-61_Eq_TOMLTokenKind arg-0 arg-1))) (cond ((equal? sc0 1) 0) (else 1)))))
(define LanguageC-45TOMLC-45Tokens-unescapeBasic (lambda (arg-0) (if (null? arg-0) (vector 0 "expected quote") (let ((e-1 (car arg-0))) (let ((e-2 (cdr arg-0))) (cond ((equal? e-1 #\") (LanguageC-45TOMLC-45Tokens-n--3498-1836-u--loop e-2 e-2))(else (vector 0 "expected quote"))))))))
(define LanguageC-45TOMLC-45Tokens-parseWithSign (lambda (arg-0 arg-1) (if (null? arg-0) 0 (let ((e-2 (car arg-0))) (let ((e-3 (cdr arg-0))) (cond ((equal? e-2 #\0) (if (null? e-3) (LanguageC-45TOMLC-45Tokens-parseIntLoop arg-1 10 arg-0 0) (let ((e-5 (car e-3))) (let ((e-6 (cdr e-3))) (cond ((equal? e-5 #\b) (LanguageC-45TOMLC-45Tokens-parseIntLoop arg-1 2 e-6 0)) ((equal? e-5 #\o) (LanguageC-45TOMLC-45Tokens-parseIntLoop arg-1 8 e-6 0)) ((equal? e-5 #\x) (LanguageC-45TOMLC-45Tokens-parseIntLoop arg-1 16 e-6 0))(else (LanguageC-45TOMLC-45Tokens-parseIntLoop arg-1 10 arg-0 0)))))))(else (LanguageC-45TOMLC-45Tokens-parseIntLoop arg-1 10 arg-0 0))))))))
(define LanguageC-45TOMLC-45TokensC-45Float-parseWhole (lambda (arg-0 arg-1 arg-2) (if (null? arg-2) 0.0 (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (cond ((equal? e-2 #\.) (LanguageC-45TOMLC-45TokensC-45Float-parseDecimal arg-0 arg-1 0.0 0.1 e-3)) ((equal? e-2 #\e) (LanguageC-45TOMLC-45TokensC-45Float-parseExponent arg-0 (PreludeC-45Cast-u--cast_Cast_Integer_Double arg-1) 0 e-3)) ((equal? e-2 #\E) (LanguageC-45TOMLC-45TokensC-45Float-parseExponent arg-0 (PreludeC-45Cast-u--cast_Cast_Integer_Double arg-1) 0 e-3)) ((equal? e-2 #\_) (LanguageC-45TOMLC-45TokensC-45Float-parseWhole arg-0 arg-1 e-3))(else (LanguageC-45TOMLC-45TokensC-45Float-parseWhole arg-0 (+ (* arg-1 10) (LanguageC-45TOMLC-45Tokens-charToInt e-2)) e-3))))))))
(define LanguageC-45TOMLC-45TokensC-45Float-parseSign (lambda (arg-0) (if (null? arg-0) (LanguageC-45TOMLC-45TokensC-45Float-parseWhole 1.0 0 arg-0) (let ((e-1 (car arg-0))) (let ((e-2 (cdr arg-0))) (cond ((equal? e-1 #\+) (LanguageC-45TOMLC-45TokensC-45Float-parseWhole 1.0 0 e-2)) ((equal? e-1 #\-) (LanguageC-45TOMLC-45TokensC-45Float-parseWhole (- 1.0) 0 e-2))(else (LanguageC-45TOMLC-45TokensC-45Float-parseWhole 1.0 0 arg-0))))))))
(define LanguageC-45TOMLC-45Tokens-parseIntLoop (lambda (arg-0 arg-1 arg-2 arg-3) (if (null? arg-2) arg-3 (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (cond ((equal? e-2 #\_) (LanguageC-45TOMLC-45Tokens-parseIntLoop arg-0 arg-1 e-3 arg-3))(else (LanguageC-45TOMLC-45Tokens-parseIntLoop arg-0 arg-1 e-3 (+ (* arg-3 arg-1) (* (LanguageC-45TOMLC-45Tokens-charToInt e-2) arg-0))))))))))
(define LanguageC-45TOMLC-45Tokens-parseInt (lambda (arg-0) (if (null? arg-0) 0 (let ((e-2 (car arg-0))) (let ((e-3 (cdr arg-0))) (cond ((equal? e-2 #\+) (LanguageC-45TOMLC-45Tokens-parseWithSign e-3 1)) ((equal? e-2 #\-) (LanguageC-45TOMLC-45Tokens-parseWithSign e-3 -1))(else (LanguageC-45TOMLC-45Tokens-parseWithSign arg-0 1))))))))
(define LanguageC-45TOMLC-45TokensC-45Float-parseFloat (lambda (arg-0) (cond ((equal? arg-0 "nan") (LanguageC-45TOMLC-45Tokens-nan)) ((equal? arg-0 "+nan") (LanguageC-45TOMLC-45Tokens-nan)) ((equal? arg-0 "-nan") (- (LanguageC-45TOMLC-45Tokens-nan))) ((equal? arg-0 "inf") (LanguageC-45TOMLC-45Tokens-inf)) ((equal? arg-0 "+inf") (LanguageC-45TOMLC-45Tokens-inf)) ((equal? arg-0 "-inf") (- (LanguageC-45TOMLC-45Tokens-inf)))(else (LanguageC-45TOMLC-45TokensC-45Float-parseSign (PreludeC-45Types-fastUnpack arg-0))))))
(define LanguageC-45TOMLC-45TokensC-45Float-parseExponent (lambda (arg-0 arg-1 arg-2 arg-3) (if (null? arg-3) (* (* arg-0 arg-1) (flexpt 10.0 (PreludeC-45Cast-u--cast_Cast_Integer_Double arg-2))) (let ((e-2 (car arg-3))) (let ((e-3 (cdr arg-3))) (cond ((equal? e-2 #\_) (LanguageC-45TOMLC-45TokensC-45Float-parseExponent arg-0 arg-1 arg-2 e-3))(else (LanguageC-45TOMLC-45TokensC-45Float-parseExponent arg-0 arg-1 (+ (* arg-2 10) (LanguageC-45TOMLC-45Tokens-charToInt e-2)) e-3))))))))
(define LanguageC-45TOMLC-45TokensC-45Float-parseDecimal (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (if (null? arg-4) (* arg-0 (+ (PreludeC-45Cast-u--cast_Cast_Integer_Double arg-1) arg-2)) (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) (cond ((equal? e-2 #\e) (LanguageC-45TOMLC-45TokensC-45Float-parseExponent arg-0 (+ (PreludeC-45Cast-u--cast_Cast_Integer_Double arg-1) arg-2) 0 e-3)) ((equal? e-2 #\E) (LanguageC-45TOMLC-45TokensC-45Float-parseExponent arg-0 (+ (PreludeC-45Cast-u--cast_Cast_Integer_Double arg-1) arg-2) 0 e-3)) ((equal? e-2 #\_) (LanguageC-45TOMLC-45TokensC-45Float-parseDecimal arg-0 arg-1 arg-2 arg-3 e-3))(else (LanguageC-45TOMLC-45TokensC-45Float-parseDecimal arg-0 arg-1 (+ arg-2 (* (PreludeC-45Cast-u--cast_Cast_Integer_Double (LanguageC-45TOMLC-45Tokens-charToInt e-2)) arg-3)) (* arg-3 0.1) e-3))))))))
(define LanguageC-45TOMLC-45Tokens-nan(blodwen-lazy (lambda () (flsqrt -1.0))))
(define LanguageC-45TOMLC-45Tokens-inf(blodwen-lazy (lambda () (/ 1.0 0.0))))
(define LanguageC-45TOMLC-45Tokens-ignored (lambda (arg-0) (let ((e-1 (vector-ref arg-0 0))) (if (null? e-1) 0 (let ((e-5 (car e-1))) (case (vector-ref e-5 0) ((6) 1)(else 0)))))))
(define LanguageC-45TOMLC-45Tokens-getString (lambda (arg-0) (if (null? arg-0) '() (let ((e-1 (car arg-0))) (case (vector-ref e-1 0) ((3) (box (TextC-45Token-value (csegen-519) arg-0)))(else '()))))))
(define LanguageC-45TOMLC-45Tokens-getKeyString (lambda (arg-0) (if (null? arg-0) '() (let ((e-1 (car arg-0))) (case (vector-ref e-1 0) ((3) (let ((e-3 (vector-ref e-1 1))) (cond ((equal? e-3 0) (box (TextC-45Token-value (csegen-519) arg-0))) ((equal? e-3 1) (box (TextC-45Token-value (csegen-519) arg-0)))(else '()))))(else '()))))))
(define LanguageC-45TOMLC-45Tokens-charToInt (lambda (arg-0) (let ((sc0 (let ((sc1 (PreludeC-45EqOrd-u--C-60C-61_Ord_Char #\0 arg-0))) (cond ((equal? sc1 1) (PreludeC-45EqOrd-u--C-60C-61_Ord_Char arg-0 #\9)) (else 0))))) (cond ((equal? sc0 1) (PreludeC-45Cast-u--cast_Cast_Int_Integer (bs- (cast-char-boundedInt arg-0 63) (cast-char-boundedInt #\0 63) 63))) (else (PreludeC-45Cast-u--cast_Cast_Int_Integer (bs- (cast-char-boundedInt (PreludeC-45Types-toLower arg-0) 63) (cast-char-boundedInt #\a 63) 63)))))))
(define LanguageC-45TOMLC-45Lexer-tomlTokenMap(blodwen-lazy (lambda () (TextC-45Lexer-toTokenMap (cons (cons (TextC-45Lexer-newline) (vector 4 (vector 3 ))) (cons (cons (TextC-45Lexer-lineComment (TextC-45Lexer-is #\#)) (vector 6 )) (cons (cons (TextC-45Lexer-spaces) (vector 6 )) (cons (cons (TextC-45Lexer-is #\,) (vector 4 (vector 0 ))) (cons (cons (TextC-45Lexer-is #\.) (vector 4 (vector 1 ))) (cons (cons (TextC-45Lexer-is #\=) (vector 4 (vector 2 ))) (cons (cons (TextC-45Lexer-is #\[) (vector 4 (vector 4 0))) (cons (cons (TextC-45Lexer-is #\]) (vector 4 (vector 4 1))) (cons (cons (TextC-45Lexer-is #\{) (vector 4 (vector 5 0))) (cons (cons (TextC-45Lexer-is #\}) (vector 4 (vector 5 1))) (cons (cons (TextC-45LexerC-45Core-C-60C-124C-62 (TextC-45Lexer-exact "true") (TextC-45Lexer-exact "false")) (vector 0 )) (cons (cons (LanguageC-45TOMLC-45Lexer-integerLit) (vector 1 )) (cons (cons (LanguageC-45TOMLC-45Lexer-floatLit) (vector 2 )) (cons (cons (LanguageC-45TOMLC-45Lexer-basicStringLit) (vector 3 0)) (cons (cons (LanguageC-45TOMLC-45Lexer-bareKey) (vector 5 )) '())))))))))))))))))))
(define LanguageC-45TOMLC-45Lexer-sepIntLit(blodwen-lazy (lambda () (vector 4 (vector 5 (csegen-601) (LanguageC-45TOMLC-45Lexer-nonZeroDigit)) (lambda () (TextC-45Lexer-many (TextC-45LexerC-45Core-C-60C-124C-62 (TextC-45Lexer-is #\_) (TextC-45Lexer-digit))))))))
(define LanguageC-45TOMLC-45Lexer-sepBaseLit (lambda (arg-0 arg-1) (vector 4 (vector 4 (TextC-45Lexer-exact arg-0) (lambda () arg-1)) (lambda () (TextC-45Lexer-many (vector 5 (csegen-606) arg-1))))))
(define LanguageC-45TOMLC-45Lexer-nonZeroDigit(blodwen-lazy (lambda () (TextC-45Lexer-range #\1 #\9))))
(define LanguageC-45TOMLC-45Lexer-lexTOML (lambda (arg-0) (let ((sc0 (TextC-45LexerC-45Core-lex (LanguageC-45TOMLC-45Lexer-tomlTokenMap) arg-0))) (if (null? sc0) '() (let ((e-2 (car sc0))) (let ((e-3 (cdr sc0))) (if (null? e-3) '() (let ((e-7 (cdr e-3))) (if (null? e-7) '() (let ((e-11 (cdr e-7))) (cond ((equal? e-11 "") (box e-2))(else '()))))))))))))
(define LanguageC-45TOMLC-45Lexer-integerLit(blodwen-lazy (lambda () (vector 4 (TextC-45LexerC-45Core-C-60C-124C-62 (LanguageC-45TOMLC-45Lexer-sepBaseLit "0x" (TextC-45Lexer-hexDigit)) (TextC-45LexerC-45Core-C-60C-124C-62 (LanguageC-45TOMLC-45Lexer-sepBaseLit "0o" (TextC-45Lexer-octDigit)) (TextC-45LexerC-45Core-C-60C-124C-62 (LanguageC-45TOMLC-45Lexer-sepBaseLit "0b" (TextC-45Lexer-binDigit)) (LanguageC-45TOMLC-45Lexer-sepIntLit)))) (lambda () (TextC-45LexerC-45Core-reject (TextC-45Lexer-oneOf ".eE")))))))
(define LanguageC-45TOMLC-45Lexer-floatLit(blodwen-lazy (lambda () (let ((u--sign (TextC-45Lexer-oneOf "+-"))) (let ((u--whole (TextC-45LexerC-45Core-C-60C-124C-62 (TextC-45Lexer-is #\0) (vector 4 (LanguageC-45TOMLC-45Lexer-nonZeroDigit) (lambda () (csegen-616)))))) (let ((u--frac (vector 4 (vector 4 (TextC-45Lexer-is #\.) (lambda () (TextC-45Lexer-digit))) (lambda () (csegen-616))))) (let ((u--exp (vector 4 (vector 4 (TextC-45Lexer-like #\e) (lambda () (csegen-601))) (lambda () (TextC-45Lexer-digits))))) (let ((u--constant (TextC-45LexerC-45Core-C-60C-124C-62 (TextC-45Lexer-exact "nan") (TextC-45Lexer-exact "inf")))) (vector 5 (TextC-45Lexer-opt u--sign) (TextC-45LexerC-45Core-C-60C-124C-62 (vector 4 u--whole (lambda () (TextC-45LexerC-45Core-C-60C-124C-62 (vector 4 u--frac (lambda () (TextC-45Lexer-opt u--exp))) u--exp))) u--constant))))))))))
(define LanguageC-45TOMLC-45Lexer-basicStringLit(blodwen-lazy (lambda () (TextC-45Lexer-quote (TextC-45Lexer-is #\") (TextC-45LexerC-45Core-C-60C-124C-62 (TextC-45Lexer-escape (TextC-45Lexer-is #\\) (TextC-45Lexer-any)) (TextC-45Lexer-isNot #\\))))))
(define LanguageC-45TOMLC-45Lexer-bareKey(blodwen-lazy (lambda () (TextC-45Lexer-some (TextC-45LexerC-45Core-C-60C-124C-62 (TextC-45Lexer-alphaNum) (TextC-45LexerC-45Core-C-60C-124C-62 (TextC-45Lexer-is #\_) (TextC-45Lexer-is #\-)))))))
(define TextC-45Lexer-toTokenMap (lambda (ext-0) (PreludeC-45Types-u--map_Functor_List (lambda (lamc-0) (let ((e-2 (car lamc-0))) (let ((e-3 (cdr lamc-0))) (cons e-2 (lambda (eta-0) (cons e-3 eta-0)))))) ext-0)))
(define TextC-45Lexer-surround (lambda (arg-0 arg-1 arg-2) (vector 4 arg-0 (lambda () (TextC-45Lexer-manyThen arg-1 arg-2)))))
(define TextC-45Lexer-spaces(blodwen-lazy (lambda () (TextC-45Lexer-some (TextC-45Lexer-space)))))
(define TextC-45Lexer-space(blodwen-lazy (lambda () (TextC-45LexerC-45Core-pred (lambda (eta-0) (PreludeC-45Types-isSpace eta-0))))))
(define TextC-45Lexer-some (lambda (arg-0) (vector 4 arg-0 (lambda () (TextC-45Lexer-many arg-0)))))
(define TextC-45Lexer-range (lambda (arg-0 arg-1) (TextC-45LexerC-45Core-pred (lambda (u--x) (let ((sc0 (PreludeC-45EqOrd-u--C-62C-61_Ord_Char u--x (PreludeC-45EqOrd-u--min_Ord_Char arg-0 arg-1)))) (cond ((equal? sc0 1) (PreludeC-45EqOrd-u--C-60C-61_Ord_Char u--x (PreludeC-45EqOrd-u--max_Ord_Char arg-0 arg-1))) (else 0)))))))
(define TextC-45Lexer-quote (lambda (arg-0 arg-1) (TextC-45Lexer-surround arg-0 arg-0 arg-1)))
(define TextC-45Lexer-opt (lambda (arg-0) (TextC-45LexerC-45Core-C-60C-124C-62 arg-0 (TextC-45LexerC-45Core-empty))))
(define TextC-45Lexer-oneOf (lambda (arg-0) (TextC-45LexerC-45Core-pred (lambda (u--x) (PreludeC-45Types-elem (csegen-84) (csegen-132) u--x (PreludeC-45Types-fastUnpack arg-0))))))
(define TextC-45Lexer-octDigit(blodwen-lazy (lambda () (TextC-45LexerC-45Core-pred (lambda (eta-0) (PreludeC-45Types-isOctDigit eta-0))))))
(define TextC-45Lexer-newline(blodwen-lazy (lambda () (TextC-45LexerC-45Core-C-60C-124C-62 (TextC-45Lexer-exact "\xd;\xa;") (TextC-45Lexer-oneOf "\xd;\xa;")))))
(define TextC-45Lexer-manyUntil (lambda (arg-1 arg-2) (TextC-45Lexer-many (vector 5 (TextC-45LexerC-45Core-reject arg-1) arg-2))))
(define TextC-45Lexer-manyThen (lambda (arg-1 arg-2) (vector 5 (TextC-45Lexer-manyUntil arg-1 arg-2) arg-1)))
(define TextC-45Lexer-many (lambda (arg-0) (TextC-45Lexer-opt (TextC-45Lexer-some arg-0))))
(define TextC-45Lexer-lineComment (lambda (arg-0) (vector 4 (vector 4 arg-0 (lambda () (TextC-45Lexer-manyUntil (TextC-45Lexer-newline) (TextC-45Lexer-any)))) (lambda () (TextC-45Lexer-opt (TextC-45Lexer-newline))))))
(define TextC-45Lexer-like (lambda (arg-0) (TextC-45LexerC-45Core-pred (lambda (u--y) (PreludeC-45EqOrd-u--C-61C-61_Eq_Char (PreludeC-45Types-toUpper arg-0) (PreludeC-45Types-toUpper u--y))))))
(define TextC-45Lexer-isNot (lambda (arg-0) (TextC-45LexerC-45Core-pred (lambda (arg-1) (PreludeC-45EqOrd-u--C-47C-61_Eq_Char arg-1 arg-0)))))
(define TextC-45Lexer-is (lambda (arg-0) (TextC-45LexerC-45Core-pred (lambda (arg-1) (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 arg-0)))))
(define TextC-45Lexer-hexDigit(blodwen-lazy (lambda () (TextC-45LexerC-45Core-pred (lambda (eta-0) (PreludeC-45Types-isHexDigit eta-0))))))
(define TextC-45Lexer-exact (lambda (arg-0) (let ((sc0 (PreludeC-45Types-fastUnpack arg-0))) (if (null? sc0) (TextC-45LexerC-45Core-fail) (let ((e-2 (car sc0))) (let ((e-3 (cdr sc0))) (TextC-45LexerC-45Core-concatMap (lambda (eta-0) (TextC-45Lexer-is eta-0)) (cons e-2 e-3))))))))
(define TextC-45Lexer-escape (lambda (arg-0 arg-1) (vector 4 arg-0 (lambda () arg-1))))
(define TextC-45Lexer-digits(blodwen-lazy (lambda () (TextC-45Lexer-some (TextC-45Lexer-digit)))))
(define TextC-45Lexer-digit(blodwen-lazy (lambda () (TextC-45LexerC-45Core-pred (lambda (eta-0) (PreludeC-45Types-isDigit eta-0))))))
(define TextC-45Lexer-binDigit(blodwen-lazy (lambda () (TextC-45LexerC-45Core-pred (lambda (u--c) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char u--c #\0))) (cond ((equal? sc0 1) 1) (else (PreludeC-45EqOrd-u--C-61C-61_Eq_Char u--c #\1)))))))))
(define TextC-45Lexer-any(blodwen-lazy (lambda () (TextC-45LexerC-45Core-pred (lambda (eta-0) 1)))))
(define TextC-45Lexer-alphaNum(blodwen-lazy (lambda () (TextC-45LexerC-45Core-pred (lambda (eta-0) (PreludeC-45Types-isAlphaNum eta-0))))))
(define TextC-45LexerC-45Core-case--tokenise-2726 (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (if (null? arg-7) (cons (PreludeC-45TypesC-45List-reverse arg-3) (cons arg-5 (cons arg-4 arg-1))) (let ((e-1 (unbox arg-7))) (let ((e-5 (car e-1))) (let ((e-6 (cdr e-1))) (let ((e-9 (car e-6))) (let ((e-10 (cdr e-6))) (let ((e-13 (car e-10))) (let ((e-14 (cdr e-10))) (let ((sc4 (arg-6 (let ((e-4 (vector-ref e-5 0))) e-4)))) (cond ((equal? sc4 1) (cons (PreludeC-45TypesC-45List-reverse arg-3) (cons arg-5 (cons arg-4 '())))) (else (TextC-45LexerC-45Core-tokenise arg-6 e-9 e-13 (cons e-5 arg-3) arg-2 e-14))))))))))))))
(define TextC-45LexerC-45Core-case--tokeniseC-44getFirstToken-2636 (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (if (null? arg-11) (TextC-45LexerC-45Core-n--3659-2501-u--getFirstToken arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-9 arg-10) (let ((e-1 (unbox arg-11))) (let ((e-5 (car e-1))) (let ((e-6 (cdr e-1))) (let ((u--lineC-39 (bs+ arg-5 (PreludeC-45Cast-u--cast_Cast_Nat_Int (TextC-45LexerC-45Core-n--3659-2499-u--countNLs arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 e-5)) 63))) (let ((u--colC-39 (TextC-45LexerC-45Core-n--3659-2500-u--getCols arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 e-5 arg-4))) (box (cons (vector (arg-8 (PreludeC-45Types-fastPack (PreludeC-45TypesC-45List-reverse e-5))) 0 (vector arg-5 arg-4 u--lineC-39 u--colC-39)) (cons u--lineC-39 (cons u--colC-39 e-6))))))))))))
(define TextC-45LexerC-45Core-n--3659-2501-u--getFirstToken (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (if (null? arg-7) '() (let ((e-2 (car arg-7))) (let ((e-3 (cdr arg-7))) (let ((e-6 (car e-2))) (let ((e-7 (cdr e-2))) (TextC-45LexerC-45Core-case--tokeniseC-44getFirstToken-2636 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 e-6 e-7 e-3 arg-8 (TextC-45LexerC-45Core-scan e-6 '() arg-8)))))))))
(define TextC-45LexerC-45Core-n--3659-2500-u--getCols (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 (DataC-45List-span (csegen-311) (PreludeC-45TypesC-45List-reverse arg-7)))) (let ((e-2 (car sc0))) (let ((e-3 (cdr sc0))) (if (null? e-3) (bs+ arg-8 (PreludeC-45Cast-u--cast_Cast_Nat_Int (PreludeC-45TypesC-45List-lengthTR e-2)) 63) (PreludeC-45Cast-u--cast_Cast_Nat_Int (PreludeC-45TypesC-45List-lengthTR e-2))))))))
(define TextC-45LexerC-45Core-n--3659-2499-u--countNLs (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (PreludeC-45TypesC-45List-lengthTR (PreludeC-45TypesC-45List-filter (csegen-312) arg-7))))
(define TextC-45LexerC-45Core-tokenise (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (TextC-45LexerC-45Core-case--tokenise-2726 arg-6 arg-5 arg-4 arg-3 arg-2 arg-1 (TextC-45LexerC-45Core-n--3659-2501-u--getFirstToken arg-6 arg-5 arg-4 arg-3 arg-2 arg-1 arg-5 arg-6))))
(define TextC-45LexerC-45Core-scan (lambda (arg-1 arg-2 arg-3) (case (vector-ref arg-1 0) ((0) (box (cons arg-2 arg-3))) ((1) '()) ((2) (let ((e-2 (vector-ref arg-1 1))) (let ((e-3 (vector-ref arg-1 2))) (let ((sc1 (PreludeC-45EqOrd-u--C-61C-61_Eq_Bool (DataC-45Maybe-isJust (TextC-45LexerC-45Core-scan e-3 arg-2 arg-3)) e-2))) (cond ((equal? sc1 1) (box (cons arg-2 arg-3))) (else '())))))) ((3) (let ((e-4 (vector-ref arg-1 1))) (if (null? arg-3) '() (let ((e-21 (car arg-3))) (let ((e-22 (cdr arg-3))) (let ((sc2 (e-4 e-21))) (cond ((equal? sc2 1) (box (cons (cons e-21 arg-2) e-22))) (else '())))))))) ((4) (let ((e-6 (vector-ref arg-1 1))) (let ((e-7 (vector-ref arg-1 2))) (PreludeC-45Types-u--C-62C-62C-61_Monad_Maybe (TextC-45LexerC-45Core-scan e-6 arg-2 arg-3) (lambda (_-0) (let ((e-2 (car _-0))) (let ((e-3 (cdr _-0))) (TextC-45LexerC-45Core-scan (e-7) e-2 e-3)))))))) ((5) (let ((e-10 (vector-ref arg-1 1))) (let ((e-11 (vector-ref arg-1 2))) (PreludeC-45Types-u--C-62C-62C-61_Monad_Maybe (TextC-45LexerC-45Core-scan e-10 arg-2 arg-3) (lambda (_-0) (let ((e-2 (car _-0))) (let ((e-3 (cdr _-0))) (TextC-45LexerC-45Core-scan e-11 e-2 e-3)))))))) ((6) (let ((e-13 (vector-ref arg-1 1))) (let ((e-14 (vector-ref arg-1 2))) (PreludeC-45Types-u--C-62C-62C-61_Monad_Maybe (TextC-45LexerC-45Core-scan e-13 arg-2 arg-3) (lambda (_-0) (let ((e-2 (car _-0))) (let ((e-3 (cdr _-0))) (TextC-45LexerC-45Core-scan e-14 e-2 e-3)))))))) (else (let ((e-17 (vector-ref arg-1 1))) (let ((e-18 (vector-ref arg-1 2))) (PreludeC-45Types-maybe (lambda () (TextC-45LexerC-45Core-scan e-18 arg-2 arg-3)) (lambda () (lambda (eta-0) (box eta-0))) (TextC-45LexerC-45Core-scan e-17 arg-2 arg-3))))))))
(define TextC-45LexerC-45Core-reject (lambda (ext-0) (vector 2 0 ext-0)))
(define TextC-45LexerC-45Core-pred (lambda (ext-0) (vector 3 ext-0)))
(define TextC-45LexerC-45Core-lex (lambda (arg-1 arg-2) (let ((sc0 (TextC-45LexerC-45Core-tokenise (lambda (eta-0) 0) 0 0 '() arg-1 (PreludeC-45Types-fastUnpack arg-2)))) (let ((e-2 (car sc0))) (let ((e-3 (cdr sc0))) (let ((e-6 (car e-3))) (let ((e-7 (cdr e-3))) (let ((e-10 (car e-7))) (let ((e-11 (cdr e-7))) (cons e-2 (cons e-6 (cons e-10 (PreludeC-45Types-fastPack e-11)))))))))))))
(define TextC-45LexerC-45Core-fail(blodwen-lazy (lambda () (vector 1 ))))
(define TextC-45LexerC-45Core-empty(blodwen-lazy (lambda () (vector 0 ))))
(define TextC-45LexerC-45Core-concatMap (lambda (arg-2 arg-3) (if (null? arg-3) (vector 0 ) (let ((e-2 (car arg-3))) (let ((e-3 (cdr arg-3))) (if (null? e-3) (arg-2 e-2) (vector 6 (arg-2 e-2) (TextC-45LexerC-45Core-concatMap arg-2 e-3))))))))
(define TextC-45LexerC-45Core-C-60C-124C-62 (lambda (ext-0 ext-1) (vector 7 ext-0 ext-1)))
(define PackC-45ConfigC-45TOML-initToml (lambda (arg-0 arg-1) (PreludeC-45Interfaces-concat (csegen-212) (csegen-84) (cons "# The package collection to use\xa;collection = \"" (cons arg-1 (cons "\"\xa;\xa;[install]\xa;\xa;# Whether to install packages together with their\xa;# sources or not. This is mainly useful for programmers\xa;# who have set their editor up with some *go to definition*\xa;# functionality (for instance by using idris2-lsp with neovim).\xa;with-src   = true\xa;\xa;# Whether to prompt the user before building or installing\xa;# packages or applications with custom build hooks in their\xa;# `.ipkg` file.\xa;safety-prompt = true\xa;\xa;# Must-have libraries. These will be installed automatically\xa;# when using a new package collection.\xa;# libs       = [ \"toml\", \"elab-util\" ]\xa;\xa;# Must-have applications. These will be installed automatically\xa;# when using a new package collection.\xa;apps       = [ \"pack\" ]\xa;\xa;[idris2]\xa;\xa;# Whether to build Idris2 with its bootstrap compiler.\xa;# Bootstrapping takes longer than building with an existing\xa;# Idris2 installation, but it will work even if the existing\xa;# Idris2 compiler is outdated.\xa;bootstrap  = false\xa;\xa;# Name or path to the scheme executable to use.\xa;scheme      = \"" (cons arg-0 (cons "\"\xa;\xa;# Default code generator to us\xa;# codegen     = \"chez\"\xa;\xa;# Set this to `true` in order to run REPL sessions from within\xa;# `rlwrap`. This will give you additional features such as a\xa;# command history.\xa;repl.rlwrap = false\xa;\xa;# Below are some examples for custom packages\xa;\xa;# A local package to be available with all\xa;# package collections.\xa;# [custom.all.chem]\xa;# type = \"local\"\xa;# path = \"/data/idris/chem\"\xa;# ipkg = \"chem.ipkg\"\xa;\xa;# A package on GitHub to be available with all\xa;# package collections.\xa;# [custom.all.foo]\xa;# type = \"github\"\xa;# path = \"https://github.com/bar/foo\"\xa;# ipkg = \"foo.ipkg\"\xa;\xa;# Override library `toml` from package collection `nightly-220503`\xa;# by using a custom commit hash.\xa;# [custom.nightly-220503.toml]\xa;# type   = \"github\"\xa;# url    = \"https://github.com/cuddlefishie/toml-idr\"\xa;# commit = \"eb7a146f565276f82ebf30cb6d5502e9f65dcc3c\"\xa;# ipkg   = \"toml.ipkg\"" '()))))))))
(load-shared-object "libidris2_support.so")
(collect-request-handler (lambda () (collect) (blodwen-run-finalisers)))
(PrimIO-unsafePerformIO (lambda (eta-0) (MicroPack-main eta-0)))
  (collect 4)
  (blodwen-run-finalisers)
  
  )